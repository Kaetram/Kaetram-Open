[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "Kaetram-Open/.eslintrc-client.js",
    "content": "module.exports = {\n    root: true,\n    env: {\n        browser: true,\n        jquery: true,\n        node: false,\n        es6: false\n    },\n    extends: ['eslint:recommended', 'standard', 'google'],\n    globals: {\n        Atomics: 'readonly',\n        SharedArrayBuffer: 'readonly'\n    },\n    rules: {\n        curly: ['error', 'multi-or-nest'],\n        indent: ['warn', 4, { SwitchCase: 1 }],\n        'linebreak-style': ['error', 'unix'],\n        quotes: ['error', 'single'],\n        semi: ['error', 'always'],\n        'operator-linebreak': 0,\n        'no-var': 0,\n        'one-var': 0,\n        'prefer-const': 0,\n        'block-spacing': ['error', 'always'],\n        'comma-dangle': ['error', 'never'],\n        'arrow-parens': 0,\n        'no-undef': 0,\n\n        'no-unused-vars': 0,\n        'max-len': 0,\n        'no-prototype-builtins': 0,\n        'standard/no-callback-literal': 0,\n        'no-useless-constructor': 0,\n\n        // Remove this if you want to add documentation to all files\n        'require-jsdoc': [\n            'error',\n            {\n                require: {\n                    FunctionDeclaration: false,\n                    MethodDefinition: false,\n                    ClassDeclaration: false,\n                    ArrowFunctionExpression: false,\n                    FunctionExpression: false\n                }\n            }\n        ]\n    }\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/.eslintrc-client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "file",
    "name": "Kaetram-Open/.eslintrc-server.js",
    "content": "module.exports = {\n    root: true,\n    env: {\n        browser: false,\n        jquery: false,\n        node: true,\n        es6: true\n    },\n    extends: ['eslint:recommended', 'standard', 'google'],\n    globals: {\n        Atomics: 'readonly',\n        SharedArrayBuffer: 'readonly'\n    },\n    rules: {\n        curly: ['error', 'multi-or-nest'],\n        indent: ['warn', 4, { SwitchCase: 1 }],\n        'linebreak-style': ['error', 'unix'],\n        quotes: ['error', 'single'],\n        semi: ['error', 'always'],\n        'operator-linebreak': 0,\n        'no-var': 2,\n        'one-var': 0,\n        'prefer-const': 0,\n        'block-spacing': ['error', 'always'],\n        'comma-dangle': ['error', 'never'],\n        'arrow-parens': ['warn', 'as-needed'],\n        'no-undef': 0,\n\n        'no-unused-vars': 0,\n        'max-len': 0,\n        'no-prototype-builtins': 0,\n        'standard/no-callback-literal': 0,\n        'no-useless-constructor': 0,\n\n        // Remove this if you want to add documentation to all files\n        'require-jsdoc': [\n            'error',\n            {\n                require: {\n                    FunctionDeclaration: false,\n                    MethodDefinition: false,\n                    ClassDeclaration: false,\n                    ArrowFunctionExpression: false,\n                    FunctionExpression: false\n                }\n            }\n        ]\n    }\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/.eslintrc-server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "Kaetram-Open/client/js/app.js",
    "content": "/* global log, Class, Detect, Modules */\n\ndefine(['jquery'], function($) {\n    return Class.extend({\n        init: function() {\n            var self = this;\n\n            self.config = null;\n\n            self.body = $('body');\n            self.parchment = $('#parchment');\n            self.container = $('#container');\n            self.window = $(window);\n            self.canvas = $('#canvas');\n            self.border = $('#border');\n\n            self.intro = $('#intro');\n\n            self.loginButton = $('#login');\n            self.createButton = $('#play');\n            self.registerButton = $('#newCharacter');\n            self.helpButton = $('#helpButton');\n            self.cancelButton = $('#cancelButton');\n            self.yes = $('#yes');\n            self.no = $('#no');\n            self.loading = $('.loader');\n\n            self.respawn = $('#respawn');\n\n            self.rememberMe = $('#rememberMe');\n            self.guest = $('#guest');\n\n            self.about = $('#toggle-about');\n            self.credits = $('#toggle-credits');\n            self.discord = $('#toggle-discord');\n            self.git = $('#toggle-git');\n\n            self.footer = $('footer');\n\n            self.loginFields = [];\n            self.registerFields = [];\n\n            self.game = null;\n            self.parchmentAnimating = false;\n            self.loggingIn = false;\n\n            self.sendStatus('Initializing the main app');\n\n            self.updateOrientation();\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.loginButton.click(function() {\n                self.login();\n            });\n\n            self.createButton.click(function() {\n                self.login();\n            });\n\n            self.registerButton.click(function() {\n                self.openScroll('loadCharacter', 'createCharacter');\n            });\n\n            self.cancelButton.click(function() {\n                self.openScroll('createCharacter', 'loadCharacter');\n            });\n\n            self.parchment.click(function() {\n                if (\n                    self.parchment.hasClass('about') ||\n                    self.parchment.hasClass('credits') ||\n                    self.parchment.hasClass('git')\n                ) {\n                    self.parchment.removeClass('about credits git');\n                    self.displayScroll('loadCharacter');\n                }\n            });\n\n            self.about.click(function() {\n                self.displayScroll('about');\n            });\n\n            self.credits.click(function() {\n                self.displayScroll('credits');\n            });\n\n            self.discord.click(function() {\n                window.open('https://discord.gg/MmbGAaw');\n            });\n\n            self.git.click(function() {\n                self.displayScroll('git');\n            });\n\n            self.rememberMe.click(function() {\n                if (!self.game || !self.game.storage) return;\n\n                var active = self.rememberMe.hasClass('active');\n\n                self.rememberMe.toggleClass('active');\n\n                self.game.storage.toggleRemember(!active);\n            });\n\n            self.guest.click(function() {\n                if (!self.game) return;\n\n                self.guest.toggleClass('active');\n            });\n\n            self.respawn.click(function() {\n                if (!self.game || !self.game.player || !self.game.player.dead)\n                    return;\n\n                self.game.respawn();\n            });\n\n            window.scrollTo(0, 1);\n\n            self.window.resize(function() {\n                if (self.game) self.game.resize();\n            });\n\n            $.getJSON('data/config.json', function(json) {\n                self.config = json;\n\n                if (self.readyCallback) self.readyCallback();\n            });\n\n            $(document).bind('keydown', function(e) {\n                if (e.which === Modules.Keys.Enter) return false;\n            });\n\n            $(document).keydown(function(e) {\n                var key = e.which;\n\n                if (!self.game) return;\n\n                self.body.focus();\n\n                if (key === Modules.Keys.Enter && !self.game.started) {\n                    self.login();\n                    return;\n                }\n\n                if (self.game.started)\n                    self.game.handleInput(Modules.InputType.Key, key);\n            });\n\n            $(document).keyup(function(e) {\n                var key = e.which;\n\n                if (!self.game || !self.game.started) return;\n\n                self.game.input.keyUp(key);\n            });\n\n            $(document).mousemove(function(event) {\n                if (\n                    !self.game ||\n                    !self.game.input ||\n                    !self.game.started ||\n                    event.target.id !== 'textCanvas'\n                )\n                    return;\n\n                self.game.input.setCoords(event);\n                self.game.input.moveCursor();\n            });\n\n            self.canvas.click(function(event) {\n                if (!self.game || !self.game.started || event.button !== 0)\n                    return;\n\n                window.scrollTo(0, 1);\n\n                self.game.input.handle(Modules.InputType.LeftClick, event);\n            });\n\n            $('input[type=\"range\"]').on('input', function() {\n                self.updateRange($(this));\n            });\n        },\n\n        login: function() {\n            var self = this;\n\n            if (\n                self.loggingIn ||\n                !self.game ||\n                !self.game.loaded ||\n                self.statusMessage ||\n                !self.verifyForm()\n            )\n                return;\n\n            self.toggleLogin(true);\n            self.game.connect();\n        },\n\n        fadeMenu: function() {\n            var self = this;\n\n            self.updateLoader(null);\n\n            setTimeout(function() {\n                self.body.addClass('game');\n                self.body.addClass('started');\n\n                self.body.removeClass('intro');\n\n                self.footer.hide();\n            }, 500);\n        },\n\n        showMenu: function() {\n            var self = this;\n\n            self.body.removeClass('game');\n            self.body.removeClass('started');\n            self.body.addClass('intro');\n\n            self.footer.show();\n        },\n\n        showDeath: function() {},\n\n        openScroll: function(origin, destination) {\n            var self = this;\n\n            if (!destination || self.loggingIn) return;\n\n            self.cleanErrors();\n\n            if (!Detect.isMobile()) {\n                if (self.parchmentAnimating) return;\n\n                self.parchmentAnimating = true;\n\n                self.parchment.toggleClass('animate').removeClass(origin);\n\n                setTimeout(\n                    function() {\n                        self.parchment\n                            .toggleClass('animate')\n                            .addClass(destination);\n                        self.parchmentAnimating = false;\n                    },\n                    Detect.isTablet() ? 0 : 1000\n                );\n            } else self.parchment.removeClass(origin).addClass(destination);\n        },\n\n        displayScroll: function(content) {\n            var self = this,\n                state = self.parchment.attr('class');\n\n            if (self.game.started) {\n                self.parchment.removeClass().addClass(content);\n\n                self.body\n                    .removeClass('credits legal about')\n                    .toggleClass(content);\n\n                if (self.game.player) self.body.toggleClass('death');\n\n                if (content !== 'about') self.helpButton.removeClass('active');\n            } else if (state !== 'animate') {\n                self.openScroll(\n                    state,\n                    state === content ? 'loadCharacter' : content\n                );\n            }\n        },\n\n        verifyForm: function() {\n            var self = this,\n                activeForm = self.getActiveForm();\n\n            if (activeForm === 'null') return;\n\n            switch (activeForm) {\n                case 'loadCharacter':\n                    var nameInput = $('#loginNameInput'),\n                        passwordInput = $('#loginPasswordInput');\n\n                    if (self.loginFields.length === 0)\n                        self.loginFields = [nameInput, passwordInput];\n\n                    if (!nameInput.val() && !self.isGuest()) {\n                        self.sendError(nameInput, 'Please enter a username.');\n                        return false;\n                    }\n\n                    if (!passwordInput.val() && !self.isGuest()) {\n                        self.sendError(\n                            passwordInput,\n                            'Please enter a password.'\n                        );\n                        return false;\n                    }\n\n                    break;\n\n                case 'createCharacter':\n                    var characterName = $('#registerNameInput'),\n                        registerPassword = $('#registerPasswordInput'),\n                        registerPasswordConfirmation = $(\n                            '#registerPasswordConfirmationInput'\n                        ),\n                        email = $('#registerEmailInput');\n\n                    if (self.registerFields.length === 0) {\n                        self.registerFields = [\n                            characterName,\n                            registerPassword,\n                            registerPasswordConfirmation,\n                            email\n                        ];\n                    }\n\n                    if (!characterName.val()) {\n                        self.sendError(\n                            characterName,\n                            'A username is necessary you silly.'\n                        );\n                        return false;\n                    }\n\n                    if (!registerPassword.val()) {\n                        self.sendError(\n                            registerPassword,\n                            'You must enter a password.'\n                        );\n                        return false;\n                    }\n\n                    if (\n                        registerPasswordConfirmation.val() !==\n                        registerPassword.val()\n                    ) {\n                        self.sendError(\n                            registerPasswordConfirmation,\n                            'The passwords do not match!'\n                        );\n                        return false;\n                    }\n\n                    if (!email.val() || !self.verifyEmail(email.val())) {\n                        self.sendError(email, 'An email is required!');\n                        return false;\n                    }\n\n                    break;\n            }\n\n            return true;\n        },\n\n        verifyEmail: function(email) {\n            return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n                email\n            );\n        },\n\n        sendStatus: function(message) {\n            var self = this;\n\n            self.cleanErrors();\n\n            self.statusMessage = message;\n\n            if (!message) return;\n\n            $('<span></span>', {\n                class: 'status blink',\n                text: message\n            }).appendTo('.validation-summary');\n\n            $('.status').append(\n                '<span class=\"loader__dot\">.</span><span class=\"loader__dot\">.</span><span class=\"loader__dot\">.</span>'\n            );\n        },\n\n        sendError: function(field, error) {\n            this.cleanErrors();\n\n            $('<span></span>', {\n                class: 'validation-error blink',\n                text: error\n            }).appendTo('.validation-summary');\n\n            if (!field) return;\n\n            field.addClass('field-error').select();\n            field.bind('keypress', function(event) {\n                field.removeClass('field-error');\n\n                $('.validation-error').remove();\n\n                $(this).unbind(event);\n            });\n        },\n\n        cleanErrors: function() {\n            var self = this,\n                activeForm = self.getActiveForm(),\n                fields =\n                    activeForm === 'loadCharacter'\n                        ? self.loginFields\n                        : self.registerFields;\n\n            for (var i = 0; i < fields.length; i++)\n                fields[i].removeClass('field-error');\n\n            $('.validation-error').remove();\n            $('.status').remove();\n        },\n\n        getActiveForm: function() {\n            return this.parchment[0].className;\n        },\n\n        isRegistering: function() {\n            return this.getActiveForm() === 'createCharacter';\n        },\n\n        isGuest: function() {\n            return this.guest.hasClass('active');\n        },\n\n        setGame: function(game) {\n            this.game = game;\n        },\n\n        hasWorker: function() {\n            return !!window.Worker;\n        },\n\n        getScaleFactor: function() {\n            return 3;\n        },\n\n        getUIScale: function() {\n            var width = window.innerWidth,\n                height = window.innerHeight;\n\n            return width <= 1000 ? 1 : width <= 1500 || height <= 870 ? 2 : 3;\n        },\n\n        revertLoader: function() {\n            this.updateLoader('Connecting');\n        },\n\n        updateLoader: function(message) {\n            var self = this;\n\n            if (!message) {\n                self.loading.html('');\n                return;\n            }\n\n            var dots =\n                '<span class=\"loader__dot\">.</span><span class=\"loader__dot\">.</span><span class=\"loader__dot\">.</span>';\n            self.loading.html(message + dots);\n        },\n\n        toggleLogin: function(toggle) {\n            var self = this;\n\n            self.revertLoader();\n\n            self.toggleTyping(toggle);\n\n            self.loggingIn = toggle;\n\n            if (toggle) {\n                self.loading.removeAttr('hidden');\n\n                self.loginButton.addClass('disabled');\n                self.registerButton.addClass('disabled');\n            } else {\n                self.loading.attr('hidden', true);\n\n                self.loginButton.removeClass('disabled');\n                self.registerButton.removeClass('disabled');\n            }\n        },\n\n        toggleTyping: function(state) {\n            var self = this;\n\n            if (self.loginFields) {\n                _.each(self.loginFields, function(field) {\n                    field.prop('readonly', state);\n                });\n            }\n\n            if (self.registerFields) {\n                _.each(self.registerFields, function(field) {\n                    field.prop('readOnly', state);\n                });\n            }\n        },\n\n        updateRange: function(obj) {\n            var self = this,\n                val =\n                    (obj.val() - obj.attr('min')) /\n                    (obj.attr('max') - obj.attr('min'));\n\n            obj.css(\n                'background-image',\n                '-webkit-gradient(linear, left top, right top, ' +\n                    'color-stop(' +\n                    val +\n                    ', #4d4d4d), ' +\n                    'color-stop(' +\n                    val +\n                    ', #C5C5C5)' +\n                    ')'\n            );\n        },\n\n        updateOrientation: function() {\n            this.orientation = this.getOrientation();\n        },\n\n        getOrientation: function() {\n            return window.innerHeight > window.innerWidth\n                ? 'portrait'\n                : 'landscape';\n        },\n\n        onReady: function(callback) {\n            this.readyCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "Kaetram-Open/client/js/build.js",
    "content": "({\n    appDir: '../',\n    baseUrl: 'js',\n    dir: '../../client-build',\n    optimize: 'uglify',\n    optimizeCss: 'standard.keepLines',\n\n    paths: {\n        jquery: 'lib/jquery'\n    },\n\n    modules: [\n        {\n            name: 'main'\n        }\n    ]\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/build.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/audio.js",
    "content": "/* global log, _, Detect, Modules */\n\ndefine(function() {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n\n            self.audibles = {};\n            self.format = 'mp3';\n\n            self.song = null;\n            self.songName = null;\n\n            self.enabled = true;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.music = {\n                codingroom: false,\n                smalltown: false,\n                village: false,\n                beach: false,\n                spookyship: false,\n                meadowofthepast: false\n            };\n\n            self.sounds = {\n                loot: false,\n                hit1: false,\n                hit2: false,\n                hurt: false,\n                heal: false,\n                chat: false,\n                revive: false,\n                death: false,\n                firefox: false,\n                achievement: false,\n                kill1: false,\n                kill2: false,\n                noloot: false,\n                teleport: false,\n                chest: false,\n                npc: false,\n                'npc-end': false\n            };\n        },\n\n        parse: function(path, name, channels, callback) {\n            var self = this,\n                fullPath = path + name + '.' + self.format,\n                sound = document.createElement('audio');\n\n            sound.addEventListener(\n                'canplaythrough',\n                function(e) {\n                    this.removeEventListener(\n                        'canplaythrough',\n                        arguments.callee,\n                        false\n                    );\n\n                    if (callback) callback();\n                },\n                false\n            );\n\n            sound.addEventListener(\n                'error',\n                function() {\n                    log.error(\n                        'The audible: ' +\n                            name +\n                            ' could not be loaded - unsupported extension?'\n                    );\n\n                    self.audibles[name] = null;\n                },\n                false\n            );\n\n            sound.preload = 'auto';\n            sound.autobuffer = true;\n            sound.src = fullPath;\n\n            sound.load();\n\n            self.audibles[name] = [sound];\n\n            _.times(channels - 1, function() {\n                self.audibles[name].push(sound.cloneNode(true));\n            });\n\n            if (name in self.music) self.music[name] = true;\n            else if (name in self.sounds) self.sounds[name] = true;\n        },\n\n        play: function(type, name) {\n            var self = this;\n\n            if (!self.isEnabled() || !self.fileExists(name)) return;\n\n            switch (type) {\n                case Modules.AudioTypes.Music:\n                    self.fadeOut(self.song, function() {\n                        self.reset(self.song);\n                    });\n\n                    var song = self.get(name);\n\n                    if (!song) return;\n\n                    song.volume = 0;\n\n                    song.play();\n\n                    self.fadeIn(song);\n\n                    self.song = song;\n\n                    break;\n\n                case Modules.AudioTypes.SFX:\n                    if (!self.sounds[name])\n                        self.parse('audio/sounds/', name, 4);\n\n                    var sound = self.get(name);\n\n                    if (!sound) return;\n\n                    sound.volume = self.getSFXVolume();\n\n                    sound.play();\n\n                    break;\n            }\n        },\n\n        update: function() {\n            var self = this;\n\n            if (!self.isEnabled()) return;\n\n            var song = self.getMusic(self.songName);\n\n            if (song && !(self.song && self.song.name === song.name)) {\n                if (self.game.renderer.mobile) self.reset(self.song);\n                else self.fadeSongOut();\n\n                if (song.name in self.music && !self.music[song.name]) {\n                    self.parse('audio/music/', song.name, 1);\n\n                    var music = self.audibles[song.name][0];\n\n                    music.loop = true;\n                    music.addEventListener(\n                        'ended',\n                        function() {\n                            music.play();\n                        },\n                        false\n                    );\n                }\n\n                self.play(Modules.AudioTypes.Music, song.name);\n            } else {\n                if (self.game.renderer.mobile) self.reset(self.song);\n                else self.fadeSongOut();\n            }\n        },\n\n        fadeIn: function(song) {\n            var self = this;\n\n            if (!song || song.fadingIn) return;\n\n            self.clearFadeOut(song);\n\n            song.fadingIn = setInterval(function() {\n                song.volume += 0.02;\n\n                if (song.volume >= self.getMusicVolume() - 0.02) {\n                    song.volume = self.getMusicVolume();\n                    self.clearFadeIn(song);\n                }\n            }, 100);\n        },\n\n        fadeOut: function(song, callback) {\n            var self = this;\n\n            if (!song || song.fadingOut) return;\n\n            self.clearFadeIn(song);\n\n            song.fadingOut = setInterval(function() {\n                song.volume -= 0.08;\n\n                if (song.volume <= 0.08) {\n                    song.volume = 0;\n\n                    if (callback) callback(song);\n\n                    clearInterval(song.fadingOut);\n                }\n            }, 100);\n        },\n\n        fadeSongOut: function() {\n            var self = this;\n\n            if (!self.song) return;\n\n            self.fadeOut(self.song, function(song) {\n                self.reset(song);\n            });\n\n            self.song = null;\n        },\n\n        clearFadeIn: function(song) {\n            if (song.fadingIn) {\n                clearInterval(song.fadingIn);\n                song.fadingIn = null;\n            }\n        },\n\n        clearFadeOut: function(song) {\n            if (song.fadingOut) {\n                clearInterval(song.fadingOut);\n                song.fadingOut = null;\n            }\n        },\n\n        reset: function(song) {\n            if (!song || !song.readyState > 0) return;\n\n            song.pause();\n            song.currentTime = 0;\n        },\n\n        stop: function() {\n            var self = this;\n\n            if (!self.song) return;\n\n            self.fadeOut(self.song, function() {\n                self.reset(self.song);\n                self.song = null;\n            });\n        },\n\n        fileExists: function(name) {\n            return name in this.music || name in this.sounds;\n        },\n\n        get: function(name) {\n            var self = this;\n\n            if (!self.audibles[name]) return null;\n\n            var audible = _.detect(self.audibles[name], function(audible) {\n                return audible.ended || audible.paused;\n            });\n\n            if (audible && audible.ended) audible.currentTime = 0;\n            else audible = self.audibles[name][0];\n\n            return audible;\n        },\n\n        getMusic: function(name) {\n            return {\n                sound: this.get(name),\n                name: name\n            };\n        },\n\n        setSongVolume: function(volume) {\n            this.song.volume = volume;\n        },\n\n        getSFXVolume: function() {\n            return this.game.storage.data.settings.sfx / 100;\n        },\n\n        getMusicVolume: function() {\n            return this.game.storage.data.settings.music / 100;\n        },\n\n        isEnabled: function() {\n            return this.game.storage.data.settings.soundEnabled && this.enabled;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/audio.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/bubble.js",
    "content": "/* global _ */\n\ndefine(['jquery', '../renderer/bubbles/blob'], function($, Blob) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n            self.bubbles = {};\n\n            self.container = $('#bubbles');\n        },\n\n        create: function(id, message, duration) {\n            var self = this;\n\n            if (self.bubbles[id]) {\n                self.bubbles[id].reset(self.game.time);\n                $('#' + id + ' p').html(message);\n            } else {\n                var element = $(\n                    \"<div id='\" +\n                        id +\n                        \"' class='bubble'><p>\" +\n                        message +\n                        \"</p><div class='bubbleTip'></div></div>\"\n                );\n\n                $(element).appendTo(self.container);\n\n                self.bubbles[id] = new Blob(id, element, duration);\n\n                return self.bubbles[id];\n            }\n        },\n\n        setTo: function(entity) {\n            var self = this;\n\n            var bubble = self.get(entity.id);\n\n            if (!bubble || !entity) return;\n\n            var scale = self.game.renderer.getScale(),\n                tileSize = 16 * scale,\n                x = (entity.x - self.game.getCamera().x) * scale,\n                width = parseInt(bubble.element.css('width')) + 24,\n                offset = width / 2 - tileSize / 2,\n                offsetY = -20,\n                y;\n\n            y =\n                (entity.y - self.game.getCamera().y) * scale -\n                tileSize * 2 -\n                offsetY;\n\n            bubble.element.css(\n                'left',\n                x - offset + (2 + self.game.renderer.scale) + 'px'\n            );\n            bubble.element.css('top', y + 'px');\n        },\n\n        update: function(time) {\n            var self = this;\n\n            _.each(self.bubbles, function(bubble) {\n                var entity = self.game.entities.get(bubble.id);\n\n                if (entity) self.setTo(entity);\n\n                if (bubble.isOver(time)) {\n                    bubble.destroy();\n                    delete self.bubbles[bubble.id];\n                }\n            });\n        },\n\n        get: function(id) {\n            var self = this;\n\n            if (id in self.bubbles) return self.bubbles[id];\n\n            return null;\n        },\n\n        clean: function() {\n            var self = this;\n\n            _.each(self.bubbles, function(bubble) {\n                bubble.destroy();\n            });\n\n            self.bubbles = {};\n        },\n\n        destroy: function(id) {\n            var self = this,\n                bubble = self.get(id);\n\n            if (!bubble) return;\n\n            bubble.destroy();\n            delete self.bubbles[id];\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/bubble.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/chat.js",
    "content": "/* global Packets, Modules, log */\n\ndefine(['jquery'], function($) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n\n            self.chat = $('#chat');\n            self.log = $('#chatLog');\n            self.input = $('#chatInput');\n            self.button = $('#chatButton');\n\n            self.visible = false;\n\n            self.fadingDuration = 5000;\n            self.fadingTimeout = null;\n\n            self.button.click(function() {\n                self.button.blur();\n\n                if (self.input.is(':visible')) self.hideInput();\n                else self.toggle();\n            });\n        },\n\n        add: function(source, text, colour) {\n            var self = this,\n                element = $('<p>' + source + ': ' + text + '</p>');\n\n            self.showChat();\n\n            if (!self.isActive()) self.hideInput();\n\n            self.hideChat();\n\n            element.css('color', colour || 'white');\n\n            self.log.append(element);\n            self.log.scrollTop(99999);\n        },\n\n        key: function(data) {\n            var self = this;\n\n            switch (data) {\n                case Modules.Keys.Enter:\n                    if (self.input.val() === '') self.toggle();\n                    else self.send();\n\n                    break;\n            }\n        },\n\n        send: function() {\n            var self = this;\n\n            self.game.socket.send(Packets.Chat, [self.input.val()]);\n            self.toggle();\n        },\n\n        toggle: function() {\n            var self = this;\n\n            self.clean();\n\n            if (self.visible && !self.isActive()) self.showInput();\n            else if (self.visible) {\n                self.hideInput();\n                self.hideChat();\n            } else {\n                self.showChat();\n                self.showInput();\n            }\n        },\n\n        showChat: function() {\n            var self = this;\n\n            self.chat.fadeIn('fast');\n\n            self.visible = true;\n        },\n\n        showInput: function() {\n            var self = this;\n\n            self.button.addClass('active');\n\n            self.input.fadeIn('fast');\n            self.input.val('');\n            self.input.focus();\n\n            self.clean();\n        },\n\n        hideChat: function() {\n            var self = this;\n\n            if (self.fadingTimeout) {\n                clearTimeout(self.fadingTimeout);\n                self.fadingTimeout = null;\n            }\n\n            self.fadingTimeout = setTimeout(function() {\n                if (!self.isActive()) {\n                    self.chat.fadeOut('slow');\n\n                    self.visible = false;\n                }\n            }, self.fadingDuration);\n        },\n\n        hideInput: function() {\n            var self = this;\n\n            self.button.removeClass('active');\n\n            self.input.val('');\n            self.input.fadeOut('fast');\n            self.input.blur();\n\n            self.hideChat();\n        },\n\n        clean: function() {\n            var self = this;\n\n            clearTimeout(self.fadingTimeout);\n            self.fadingTimeout = null;\n        },\n\n        isActive: function() {\n            return this.input.is(':focus');\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/chat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/entities.js",
    "content": "/* global log, _, Modules, Packets */\n\ndefine([\n    '../renderer/grids',\n    '../entity/objects/chest',\n    '../entity/character/character',\n    '../entity/character/player/player',\n    '../entity/objects/item',\n    './sprites',\n    '../entity/character/mob/mob',\n    '../entity/character/npc/npc',\n    '../entity/objects/projectile'\n], function(\n    Grids,\n    Chest,\n    Character,\n    Player,\n    Item,\n    Sprites,\n    Mob,\n    NPC,\n    Projectile\n) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n            self.renderer = game.renderer;\n\n            self.grids = null;\n            self.sprites = null;\n\n            self.entities = {};\n            self.decrepit = {};\n        },\n\n        load: function() {\n            var self = this;\n\n            self.game.app.sendStatus('Loading sprites');\n\n            if (!self.sprites) {\n                self.sprites = new Sprites(self.game.renderer);\n\n                self.sprites.onLoadedSprites(function() {\n                    self.game.input.loadCursors();\n                });\n            }\n\n            self.game.app.sendStatus('Loading grids');\n\n            if (!self.grids) self.grids = new Grids(self.game.map);\n        },\n\n        update: function() {\n            var self = this;\n\n            if (self.sprites) self.sprites.updateSprites();\n        },\n\n        create: function(info) {\n            var self = this,\n                entity;\n\n            if (self.isPlayer(info.id)) return;\n\n            switch (info.type) {\n                case 'chest':\n                    /**\n                     * Here we will parse the different types of chests..\n                     * We can go Dark Souls style and implement mimics\n                     * the proper way -ahem- Kaetram V1.0\n                     */\n\n                    var chest = new Chest(info.id, info.string);\n\n                    entity = chest;\n\n                    break;\n\n                case 'npc':\n                    var npc = new NPC(info.id, info.string);\n\n                    entity = npc;\n\n                    break;\n\n                case 'item':\n                    var item = new Item(\n                        info.id,\n                        info.string,\n                        info.count,\n                        info.ability,\n                        info.abilityLevel\n                    );\n\n                    entity = item;\n\n                    break;\n\n                case 'mob':\n                    var mob = new Mob(info.id, info.string);\n\n                    mob.setHitPoints(info.hitPoints);\n                    mob.setMaxHitPoints(info.maxHitPoints);\n\n                    mob.attackRange = info.attackRange;\n                    mob.level = info.level;\n                    mob.hiddenName = info.hiddenName;\n\n                    entity = mob;\n\n                    break;\n\n                case 'projectile':\n                    var attacker = self.get(info.characterId),\n                        target = self.get(info.targetId);\n\n                    if (!attacker || !target) return;\n\n                    attacker.lookAt(target);\n\n                    var projectile = new Projectile(\n                        info.id,\n                        info.projectileType,\n                        attacker\n                    );\n\n                    projectile.name = info.name;\n\n                    projectile.setStart(attacker.x, attacker.y);\n                    projectile.setTarget(target);\n\n                    projectile.setSprite(self.getSprite(projectile.name));\n                    projectile.setAnimation('travel', projectile.getSpeed());\n\n                    projectile.angled = true;\n                    projectile.type = info.type;\n\n                    /**\n                     * Move this into the external overall function\n                     */\n\n                    projectile.onImpact(function() {\n                        /**\n                         * The data in the projectile is only for rendering purposes\n                         * there is nothing you can change for the actual damage output here.\n                         */\n\n                        if (\n                            self.isPlayer(projectile.owner.id) ||\n                            self.isPlayer(target.id)\n                        ) {\n                            self.game.socket.send(Packets.Projectile, [\n                                Packets.ProjectileOpcode.Impact,\n                                info.id,\n                                target.id\n                            ]);\n                        }\n\n                        if (info.hitType === Modules.Hits.Explosive)\n                            target.explosion = true;\n\n                        self.game.info.create(\n                            Modules.Hits.Damage,\n                            [info.damage, self.isPlayer(target.id)],\n                            target.x,\n                            target.y\n                        );\n\n                        target.triggerHealthBar();\n\n                        self.unregisterPosition(projectile);\n                        delete self.entities[projectile.getId()];\n                    });\n\n                    self.addEntity(projectile);\n\n                    attacker.performAction(\n                        attacker.orientation,\n                        Modules.Actions.Attack\n                    );\n                    attacker.triggerHealthBar();\n\n                    return;\n\n                case 'player':\n                    var player = new Player();\n\n                    player.setId(info.id);\n                    player.setName(info.name);\n                    player.setGridPosition(info.x, info.y);\n\n                    player.rights = info.rights;\n                    player.level = info.level;\n                    player.pvp = info.pvp;\n                    player.pvpKills = info.pvpKills;\n                    player.pvpDeaths = info.pvpDeaths;\n                    player.orientation = info.orientation\n                        ? info.orientation\n                        : 0;\n                    player.type = info.type;\n\n                    var hitPointsData = info.hitPoints,\n                        manaData = info.mana,\n                        equipments = [\n                            info.armour,\n                            info.weapon,\n                            info.pendant,\n                            info.ring,\n                            info.boots\n                        ];\n\n                    player.setHitPoints(hitPointsData[0]);\n                    player.setMaxHitPoints(hitPointsData[1]);\n\n                    player.setMana(manaData[0]);\n                    player.setMaxMana(manaData[1]);\n\n                    player.setSprite(self.getSprite(info.armour.string));\n                    player.idle();\n\n                    _.each(equipments, function(equipment) {\n                        player.setEquipment(\n                            equipment.type,\n                            equipment.name,\n                            equipment.string,\n                            equipment.count,\n                            equipment.ability,\n                            equipment.abilityLevel\n                        );\n                    });\n\n                    player.loadHandler(self.game);\n\n                    self.addEntity(player);\n\n                    return;\n            }\n\n            if (!entity) return;\n\n            var sprite = self.getSprite(\n                info.type === 'item' ? 'item-' + info.string : info.string\n            );\n\n            entity.setGridPosition(info.x, info.y);\n            entity.setName(info.name);\n\n            entity.setSprite(sprite);\n\n            entity.setIdleSpeed(sprite.idleSpeed);\n\n            entity.idle();\n            entity.type = info.type;\n\n            self.addEntity(entity);\n\n            if (info.type !== 'item' && entity.handler) {\n                entity.handler.setGame(self.game);\n                entity.handler.load();\n            }\n\n            /**\n             * Get ready for errors!\n             */\n        },\n\n        isPlayer: function(id) {\n            return this.game.player.id === id;\n        },\n\n        get: function(id) {\n            var self = this;\n\n            if (id in self.entities) return self.entities[id];\n\n            return null;\n        },\n\n        exists: function(id) {\n            return id in this.entities;\n        },\n\n        removeEntity: function(entity) {\n            var self = this;\n\n            self.grids.removeFromPathingGrid(entity.gridX, entity.gridY);\n            self.grids.removeFromRenderingGrid(\n                entity,\n                entity.gridX,\n                entity.gridY\n            );\n\n            delete self.entities[entity.id];\n        },\n\n        clean: function(ids) {\n            var self = this;\n\n            ids = ids[0];\n\n            _.each(self.entities, function(entity) {\n                if (ids) {\n                    if (\n                        ids.indexOf(parseInt(entity.id)) < 0 &&\n                        entity.id !== self.game.player.id\n                    )\n                        self.removeEntity(entity);\n                } else if (entity.id !== self.game.player.id) self.removeEntity(entity);\n            });\n\n            self.grids.resetPathingGrid();\n        },\n\n        clearPlayers: function(exception) {\n            var self = this;\n\n            _.each(self.entities, function(entity) {\n                if (entity.id !== exception.id && entity.type === 'player')\n                    self.removeEntity(entity);\n            });\n\n            self.grids.resetPathingGrid();\n        },\n\n        addEntity: function(entity) {\n            var self = this;\n\n            if (self.entities[entity.id]) return;\n\n            self.entities[entity.id] = entity;\n            self.registerPosition(entity);\n\n            if (\n                !(entity instanceof Item && entity.dropped) &&\n                !self.renderer.isPortableDevice()\n            )\n                entity.fadeIn(self.game.time);\n        },\n\n        removeItem: function(item) {\n            var self = this;\n\n            if (!item) return;\n\n            self.grids.removeFromItemGrid(item, item.gridX, item.gridY);\n            self.grids.removeFromRenderingGrid(item, item.gridX, item.gridY);\n\n            delete self.entities[item.id];\n        },\n\n        registerPosition: function(entity) {\n            var self = this;\n\n            if (!entity) return;\n\n            if (\n                entity.type === 'player' ||\n                entity.type === 'mob' ||\n                entity.type === 'npc' ||\n                entity.type === 'chest'\n            )\n                self.grids.addToEntityGrid(entity, entity.gridX, entity.gridY);\n\n            /* if (entity.type !== 'player' || entity.nonPathable)\n                          self.grids.addToPathingGrid(entity.gridX, entity.gridY);*/\n\n            if (entity.type === 'item')\n                self.grids.addToItemGrid(entity, entity.gridX, entity.gridY);\n\n            self.grids.addToRenderingGrid(entity, entity.gridX, entity.gridY);\n        },\n\n        registerDuality: function(entity) {\n            var self = this;\n\n            if (!entity) return;\n\n            self.grids.entityGrid[entity.gridY][entity.gridX][\n                entity.id\n            ] = entity;\n\n            self.grids.addToRenderingGrid(entity, entity.gridX, entity.gridY);\n\n            if (entity.nextGridX > -1 && entity.nextGridY > -1) {\n                self.grids.entityGrid[entity.nextGridY][entity.nextGridX][\n                    entity.id\n                ] = entity;\n\n                /* if (!(entity instanceof Player))\n                        self.grids.pathingGrid[entity.nextGridY][entity.nextGridX] = 1;*/\n            }\n        },\n\n        unregisterPosition: function(entity) {\n            var self = this;\n\n            if (!entity) return;\n\n            self.grids.removeEntity(entity);\n        },\n\n        getSprite: function(name) {\n            return this.sprites.sprites[name];\n        },\n\n        getAll: function() {\n            return this.entities;\n        },\n\n        forEachEntity: function(callback) {\n            _.each(this.entities, function(entity) {\n                callback(entity);\n            });\n        },\n\n        forEachEntityAround: function(x, y, radius, callback) {\n            var self = this;\n\n            for (var i = x - radius, max_i = x + radius; i <= max_i; i++) {\n                for (var j = y - radius, max_j = y + radius; j <= max_j; j++) {\n                    if (self.map.isOutOfBounds(i, j)) continue;\n\n                    _.each(self.grids.renderingGrid[j][i], function(entity) {\n                        callback(entity);\n                    });\n                }\n            }\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/entities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/info.js",
    "content": "/* global _, Modules */\n\ndefine(['../utils/queue', '../renderer/infos/splat'], function(Queue, Splat) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n\n            self.infos = {};\n            self.destroyQueue = new Queue();\n        },\n\n        create: function(type, data, x, y) {\n            var self = this;\n\n            switch (type) {\n                case Modules.Hits.Damage:\n                case Modules.Hits.Stun:\n                case Modules.Hits.Critical:\n                    var damage = data.shift(),\n                        isTarget = data.shift(),\n                        dId = self.generateId(self.game.time, damage, x, y);\n\n                    if (damage < 1 || !isInt(damage)) damage = 'MISS';\n\n                    var hitSplat = new Splat(dId, type, damage, x, y, false),\n                        dColour = isTarget\n                            ? Modules.DamageColours.received\n                            : Modules.DamageColours.inflicted;\n\n                    hitSplat.setColours(dColour.fill, dColour.stroke);\n\n                    self.addInfo(hitSplat);\n\n                    break;\n\n                case Modules.Hits.Heal:\n                case Modules.Hits.Mana:\n                case Modules.Hits.Experience:\n                    var amount = data.shift(),\n                        id = self.generateId(self.game.time, amount, x, y),\n                        text = '+',\n                        colour;\n\n                    if (amount < 1 || !isInt(amount)) return;\n\n                    if (type !== Modules.Hits.Experience) text = '++';\n\n                    var splat = new Splat(id, type, text + amount, x, y, false);\n\n                    if (type === Modules.Hits.Heal)\n                        colour = Modules.DamageColours.healed;\n                    else if (type === Modules.Hits.Mana)\n                        colour = Modules.DamageColours.mana;\n                    else if (type === Modules.Hits.Experience)\n                        colour = Modules.DamageColours.exp;\n\n                    splat.setColours(colour.fill, colour.stroke);\n\n                    self.addInfo(splat);\n\n                    break;\n\n                case Modules.Hits.LevelUp:\n                    var lId = self.generateId(self.game.time, '-1', x, y),\n                        levelSplat = new Splat(\n                            lId,\n                            type,\n                            'Level Up!',\n                            x,\n                            y,\n                            false\n                        ),\n                        lColour = Modules.DamageColours.exp;\n\n                    levelSplat.setColours(lColour.fill, lColour.stroke);\n\n                    self.addInfo(levelSplat);\n\n                    break;\n            }\n        },\n\n        getCount: function() {\n            return Object.keys(this.infos).length;\n        },\n\n        addInfo: function(info) {\n            var self = this;\n\n            self.infos[info.id] = info;\n\n            info.onDestroy(function(id) {\n                self.destroyQueue.add(id);\n            });\n        },\n\n        update: function(time) {\n            var self = this;\n\n            self.forEachInfo(function(info) {\n                info.update(time);\n            });\n\n            self.destroyQueue.forEachQueue(function(id) {\n                delete self.infos[id];\n            });\n\n            self.destroyQueue.reset();\n        },\n\n        forEachInfo: function(callback) {\n            _.each(this.infos, function(info) {\n                callback(info);\n            });\n        },\n\n        generateId: function(time, info, x, y) {\n            return time + '' + Math.abs(info) + '' + x + '' + y;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/input.js",
    "content": "/* global Modules, log, _, Detect, Packets */\n\ndefine(['jquery', '../entity/animation', './chat', './overlay'], function(\n    $,\n    Animation,\n    Chat,\n    Overlay\n) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n            self.app = game.app;\n            self.renderer = game.renderer;\n\n            self.selectedCellVisible = false;\n            self.previousClick = {};\n            self.cursorVisible = true;\n            self.targetVisible = true;\n            self.selectedX = -1;\n            self.selectedY = -1;\n\n            self.cursor = null;\n            self.newCursor = null;\n\n            self.targetData = null;\n            self.targetColour = null;\n            self.newTargetColour = null;\n            self.mobileTargetColour = 'rgba(51, 255, 0)';\n\n            self.keyMovement = true;\n            self.cursorMoved = false;\n\n            self.previousKey = {};\n\n            self.cursors = {};\n\n            self.lastMousePosition = { x: 0, y: 0 };\n\n            self.hovering = null;\n            self.hoveringInstance = null; // for debugging\n\n            self.mouse = {\n                x: 0,\n                y: 0\n            };\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            /**\n             * This is the animation for the target\n             * cell spinner sprite (only on desktop)\n             */\n\n            self.targetAnimation = new Animation('move', 4, 0, 16, 16);\n            self.targetAnimation.setSpeed(50);\n\n            self.chatHandler = new Chat(self.game);\n            self.overlay = new Overlay(self);\n        },\n\n        loadCursors: function() {\n            var self = this;\n\n            self.cursors.hand = self.game.getSprite('hand');\n            self.cursors.sword = self.game.getSprite('sword');\n            self.cursors.loot = self.game.getSprite('loot');\n            self.cursors.target = self.game.getSprite('target');\n            self.cursors.arrow = self.game.getSprite('arrow');\n            self.cursors.talk = self.game.getSprite('talk');\n            self.cursors.spell = self.game.getSprite('spell');\n            self.cursors.bow = self.game.getSprite('bow');\n\n            self.newCursor = self.cursors.hand;\n            self.newTargetColour = 'rgba(255, 255, 255, 0.5)';\n\n            if (self.game.isDebug()) log.info('Loaded Cursors!');\n        },\n\n        handle: function(inputType, data) {\n            var self = this,\n                player = self.getPlayer();\n\n            switch (inputType) {\n                case Modules.InputType.Key:\n                    if (self.chatHandler.isActive()) {\n                        self.chatHandler.key(data);\n                        return;\n                    }\n\n                    switch (data) {\n                        case Modules.Keys.W:\n                        case Modules.Keys.Up:\n                            self.getPlayer().moveUp = true;\n\n                            break;\n\n                        case Modules.Keys.A:\n                        case Modules.Keys.Left:\n                            self.getPlayer().moveLeft = true;\n\n                            break;\n\n                        case Modules.Keys.S:\n                        case Modules.Keys.Down:\n                            self.getPlayer().moveDown = true;\n\n                            break;\n\n                        case Modules.Keys.D:\n                        case Modules.Keys.Right:\n                            self.getPlayer().moveRight = true;\n\n                            break;\n\n                        case Modules.Keys.Enter:\n                            self.chatHandler.toggle();\n\n                            break;\n                    }\n\n                    break;\n\n                case Modules.InputType.LeftClick:\n                    player.disableAction = false;\n                    self.keyMovement = false;\n\n                    self.setCoords(data);\n                    self.click(self.getCoords());\n\n                    break;\n            }\n        },\n\n        keyUp: function(key) {\n            var self = this,\n                player = self.getPlayer();\n\n            switch (key) {\n                case Modules.Keys.W:\n                case Modules.Keys.Up:\n                    player.moveUp = false;\n                    break;\n\n                case Modules.Keys.A:\n                case Modules.Keys.Left:\n                    player.moveLeft = false;\n                    break;\n\n                case Modules.Keys.S:\n                case Modules.Keys.Down:\n                    player.moveDown = false;\n                    break;\n\n                case Modules.Keys.D:\n                case Modules.Keys.Right:\n                    player.moveRight = false;\n                    break;\n            }\n\n            player.disableAction = false;\n        },\n\n        keyMove: function(position) {\n            var self = this,\n                player = self.getPlayer();\n\n            if (!player.hasPath()) {\n                self.keyMovement = true;\n                self.cursorMoved = false;\n\n                if (self.game.isDebug()) {\n                    log.info('--- keyMove ---');\n                    log.info(position);\n                    log.info('---------------');\n                }\n\n                self.click(position);\n            }\n        },\n\n        click: function(position) {\n            var self = this,\n                player = self.getPlayer();\n\n            if (player.stunned) return;\n\n            self.setPassiveTarget();\n\n            /**\n             * It can be really annoying having the chat open\n             * on mobile, and it is far harder to control.\n             */\n\n            if (\n                self.renderer.mobile &&\n                self.chatHandler.input.is(':visible') &&\n                self.chatHandler.input.val() === ''\n            )\n                self.chatHandler.hideInput();\n\n            if (\n                (self.game.zoning && self.game.zoning.direction) ||\n                player.disableAction\n            )\n                return;\n\n            var entity = self.game.getEntityAt(\n                position.x,\n                position.y,\n                position.x === player.gridX && position.y === player.gridY\n            );\n\n            if (entity) {\n                player.disableAction = true;\n\n                self.setAttackTarget();\n\n                if (self.isTargetable(entity)) player.setTarget(entity);\n\n                if (\n                    player.getDistance(entity) < 7 &&\n                    player.isRanged() &&\n                    self.isAttackable(entity)\n                ) {\n                    self.game.socket.send(Packets.Target, [\n                        Packets.TargetOpcode.Attack,\n                        entity.id\n                    ]);\n                    player.lookAt(entity);\n                    return;\n                }\n\n                if (\n                    entity.gridX === player.gridX &&\n                    entity.gridY === player.gridY\n                ) {\n                    self.game.socket.send(Packets.Target, [\n                        Packets.TargetOpcode.Attack,\n                        entity.id\n                    ]);\n                }\n\n                /* if (entity.type === 'player') {\n                    self.getActions().showPlayerActions(entity, self.mouse.x, self.mouse.y);\n                    return;\n                }*/\n\n                if (self.isTargetable(entity)) {\n                    player.follow(entity);\n                    return;\n                }\n            } else player.removeTarget();\n\n            self.getActions().hidePlayerActions();\n\n            player.go(position.x, position.y);\n\n            if (self.game.interface) self.game.interface.hideAll();\n\n            if (!self.game.audio.song && Detect.isSafari())\n                self.game.audio.update();\n        },\n\n        updateCursor: function() {\n            var self = this;\n\n            if (!self.cursorVisible) return;\n\n            if (self.newCursor !== self.cursor) self.cursor = self.newCursor;\n\n            if (self.newTargetColour !== self.targetColour)\n                self.targetColour = self.newTargetColour;\n        },\n\n        moveCursor: function() {\n            var self = this;\n\n            if (!self.renderer || self.renderer.mobile || !self.renderer.camera)\n                return;\n\n            var position = self.getCoords(),\n                player = self.getPlayer(),\n                entity = self.game.getEntityAt(\n                    position.x,\n                    position.y,\n                    player.gridX === position.x && player.gridY === position.y\n                );\n\n            self.overlay.update(entity);\n\n            if (\n                !entity ||\n                entity.id === player.id ||\n                entity.type === 'player'\n            ) {\n                self.setCursor(self.cursors.hand);\n                self.hovering = null;\n            } else {\n                if (self.renderer.debugging) self.hoveringInstance = entity.id;\n\n                switch (entity.type) {\n                    case 'item':\n                    case 'chest':\n                        self.setCursor(self.cursors.loot);\n                        self.hovering = Modules.Hovering.Item;\n                        break;\n\n                    case 'mob':\n                        self.setCursor(self.getAttackCursor());\n                        self.hovering = Modules.Hovering.Mob;\n                        break;\n\n                    case 'npc':\n                        self.setCursor(self.cursors.talk);\n                        self.hovering = Modules.Hovering.NPC;\n                        break;\n                }\n            }\n        },\n\n        setPosition: function(x, y) {\n            var self = this;\n\n            self.selectedX = x;\n            self.selectedY = y;\n        },\n\n        setCoords: function(event) {\n            var self = this,\n                offset = self.app.canvas.offset(),\n                width = self.renderer.background.width,\n                height = self.renderer.background.height,\n                proportionality = self.renderer.scale === 3 ? 2 / 3 : 1;\n\n            self.cursorMoved = false;\n\n            self.mouse.x =\n                Math.round(event.pageX - offset.left) * proportionality;\n            self.mouse.y =\n                Math.round(event.pageY - offset.top) * proportionality;\n\n            if (self.mouse.x >= width) self.mouse.x = width - 1;\n            else if (self.mouse.x <= 0) self.mouse.x = 0;\n\n            if (self.mouse.y >= height) self.mouse.y = height - 1;\n            else if (self.mouse.y <= 0) self.mouse.y = 0;\n        },\n\n        setCursor: function(cursor) {\n            var self = this;\n\n            if (cursor) self.newCursor = cursor;\n            else log.error('Cursor: ' + cursor + ' could not be found.');\n        },\n\n        setAttackTarget: function() {\n            var self = this;\n\n            self.targetAnimation.setRow(1);\n            self.mobileTargetColour = 'rgb(255, 51, 0)';\n        },\n\n        setPassiveTarget: function() {\n            var self = this;\n\n            self.targetAnimation.setRow(0);\n            self.mobileTargetColour = 'rgb(51, 255, 0)';\n        },\n\n        getAttackCursor: function() {\n            return this.cursors[this.getPlayer().isRanged() ? 'bow' : 'sword'];\n        },\n\n        getCoords: function() {\n            var self = this;\n\n            if (!self.renderer || !self.renderer.camera) return;\n\n            var tileScale =\n                    self.renderer.tileSize * self.renderer.getSuperScaling(),\n                offsetX = self.mouse.x % tileScale,\n                offsetY = self.mouse.y % tileScale,\n                x =\n                    (self.mouse.x - offsetX) / tileScale +\n                    self.game.getCamera().gridX,\n                y =\n                    (self.mouse.y - offsetY) / tileScale +\n                    self.game.getCamera().gridY;\n\n            return {\n                x: x,\n                y: y\n            };\n        },\n\n        getTargetData: function() {\n            var self = this,\n                frame = self.targetAnimation.currentFrame,\n                superScale = self.renderer.getSuperScaling(),\n                sprite = self.game.getSprite('target');\n\n            if (!sprite.loaded) sprite.load();\n\n            return (self.targetData = {\n                sprite: sprite,\n                x: frame.x * superScale,\n                y: frame.y * superScale,\n                width: sprite.width * superScale,\n                height: sprite.height * superScale,\n                dx: self.selectedX * 16 * superScale,\n                dy: self.selectedY * 16 * superScale,\n                dw: sprite.width * superScale,\n                dh: sprite.height * superScale\n            });\n        },\n\n        isTargetable: function(entity) {\n            return (\n                this.isAttackable(entity) ||\n                entity.type === 'npc' ||\n                entity.type === 'chest'\n            );\n        },\n\n        isAttackable: function(entity) {\n            return (\n                entity.type === 'mob' ||\n                (entity.type === 'player' && entity.pvp && this.game.pvp)\n            );\n        },\n\n        getPlayer: function() {\n            return this.game.player;\n        },\n\n        getActions: function() {\n            return this.game.interface.actions;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/input.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/interface.js",
    "content": "/* global log */\n\ndefine([\n    'jquery',\n    '../interface/inventory',\n    '../interface/profile/profile',\n    '../interface/actions',\n    '../interface/bank',\n    '../interface/enchant',\n    '../interface/warp',\n    '../interface/shop',\n    '../interface/header'\n], function($, Inventory, Profile, Actions, Bank, Enchant, Warp, Shop, Header) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n\n            self.notify = $('#notify');\n            self.confirm = $('#confirm');\n            self.message = $('#message');\n            self.fade = $('#notifyFade');\n            self.done = $('#notifyDone');\n\n            self.inventory = null;\n            self.profile = null;\n            self.actions = null;\n            self.enchant = null;\n            self.shop = null;\n            self.header = null;\n\n            self.loadNotifications();\n            self.loadActions();\n            self.loadWarp();\n            self.loadShop();\n\n            self.done.click(function() {\n                self.hideNotify();\n            });\n        },\n\n        resize: function() {\n            var self = this;\n\n            if (self.inventory) self.inventory.resize();\n\n            if (self.profile) self.profile.resize();\n\n            if (self.bank) self.bank.resize();\n\n            if (self.enchant) self.enchant.resize();\n\n            if (self.shop && self.shop.isVisible()) self.shop.resize();\n\n            if (self.header) self.header.resize();\n        },\n\n        loadInventory: function(size, data) {\n            var self = this;\n\n            /**\n             * This can be called multiple times and can be used\n             * to completely refresh the inventory.\n             */\n\n            self.inventory = new Inventory(self.game, size);\n\n            self.inventory.load(data);\n        },\n\n        loadBank: function(size, data) {\n            var self = this;\n\n            /**\n             * Similar structure as the inventory, just that it\n             * has two containers. The bank and the inventory.\n             */\n\n            if (!self.inventory) {\n                log.error('Inventory not initialized.');\n                return;\n            }\n\n            self.bank = new Bank(self.game, self.inventory.container, size);\n\n            self.bank.load(data);\n\n            self.loadEnchant();\n        },\n\n        loadProfile: function() {\n            var self = this;\n\n            if (!self.profile) self.profile = new Profile(self.game);\n        },\n\n        loadActions: function() {\n            var self = this;\n\n            if (!self.actions) self.actions = new Actions(self);\n        },\n\n        loadEnchant: function() {\n            var self = this;\n\n            if (!self.enchant) self.enchant = new Enchant(self.game, self);\n        },\n\n        loadWarp: function() {\n            var self = this;\n\n            if (!self.warp) self.warp = new Warp(self.game, self);\n        },\n\n        loadShop: function() {\n            var self = this;\n\n            if (!self.shop) self.shop = new Shop(self.game, self);\n        },\n\n        loadHeader: function() {\n            var self = this;\n\n            if (!self.header) self.header = new Header(self.game, self);\n        },\n\n        loadNotifications: function() {\n            var self = this,\n                ok = $('#ok'),\n                cancel = $('#cancel'),\n                done = $('#done');\n\n            /**\n             * Simple warning dialogue\n             */\n\n            ok.click(function() {\n                self.hideNotify();\n            });\n\n            /**\n             * Callbacks responsible for\n             * Confirmation dialogues\n             */\n\n            cancel.click(function() {\n                self.hideConfirm();\n            });\n\n            done.click(function() {\n                log.info(self.confirm.className);\n\n                self.hideConfirm();\n            });\n        },\n\n        hideAll: function() {\n            var self = this;\n\n            if (self.inventory && self.inventory.isVisible())\n                self.inventory.hide();\n\n            if (self.actions && self.actions.isVisible()) self.actions.hide();\n\n            if (\n                self.profile &&\n                (self.profile.isVisible() || self.profile.settings.isVisible())\n            )\n                self.profile.hide();\n\n            if (\n                self.game.input &&\n                self.game.input.chatHandler &&\n                self.game.input.chatHandler.input.is(':visible')\n            )\n                self.game.input.chatHandler.hideInput();\n\n            if (self.bank && self.bank.isVisible()) self.bank.hide();\n\n            if (self.enchant && self.enchant.isVisible()) self.enchant.hide();\n\n            if (self.warp && self.warp.isVisible()) self.warp.hide();\n\n            if (self.shop && self.shop.isVisible()) self.shop.hide();\n        },\n\n        addInventory: function(info) {\n            var self = this;\n\n            self.bank.addInventory(info);\n        },\n\n        removeInventory: function(info) {\n            var self = this;\n\n            self.bank.removeInventory(info);\n        },\n\n        displayNotify: function(message) {\n            var self = this;\n\n            if (self.isNotifyVisible()) return;\n\n            self.notify.css('display', 'block');\n            self.fade.css('display', 'block');\n            self.message.css('display', 'block');\n\n            self.message.text(message);\n        },\n\n        displayConfirm: function(message) {\n            var self = this;\n\n            if (self.isConfirmVisible()) return;\n\n            self.confirm.css('display', 'block');\n            self.confirm.text(message);\n        },\n\n        hideNotify: function() {\n            var self = this;\n\n            self.fade.css('display', 'none');\n            self.notify.css('display', 'none');\n            self.message.css('display', 'none');\n        },\n\n        hideConfirm: function() {\n            this.confirm.css('display', 'none');\n        },\n\n        getQuestPage: function() {\n            return this.profile.quests;\n        },\n\n        isNotifyVisible: function() {\n            return this.notify.css('display') === 'block';\n        },\n\n        isConfirmVisible: function() {\n            return this.confirm.css('display') === 'block';\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/overlay.js",
    "content": "define(['jquery'], function($) {\n    return Class.extend({\n        init: function(input) {\n            var self = this;\n\n            self.input = input;\n            self.hovering = null;\n\n            self.attackInfo = $('#attackInfo');\n\n            self.image = self.attackInfo.find('.image div');\n            self.name = self.attackInfo.find('.name');\n            self.details = self.attackInfo.find('.details');\n            self.health = self.attackInfo.find('.health');\n        },\n\n        update: function(entity) {\n            var self = this;\n\n            if (!self.validEntity(entity)) {\n                self.hovering = null;\n\n                if (self.isVisible()) self.hide();\n\n                return;\n            }\n\n            if (!self.isVisible()) self.display();\n\n            self.hovering = entity;\n\n            self.name.html(\n                entity.type === 'player' ? entity.username : entity.name\n            );\n\n            if (self.hasHealth()) {\n                self.health.css({\n                    display: 'block',\n                    width:\n                        Math.ceil(\n                            (entity.hitPoints / entity.maxHitPoints) * 100\n                        ) -\n                        10 +\n                        '%'\n                });\n\n                self.details.html(\n                    entity.hitPoints + ' / ' + entity.maxHitPoints\n                );\n            } else {\n                self.health.css('display', 'none');\n                self.details.html('');\n            }\n\n            self.onUpdate(function(entityId, hitPoints) {\n                if (\n                    self.hovering &&\n                    self.hovering.id === entityId &&\n                    self.hovering.type !== 'npc' &&\n                    self.hovering.type !== 'item'\n                ) {\n                    if (hitPoints < 1) self.hide();\n                    else {\n                        self.health.css(\n                            'width',\n                            Math.ceil(\n                                (hitPoints / self.hovering.maxHitPoints) * 100\n                            ) -\n                                10 +\n                                '%'\n                        );\n                        self.details.html(\n                            hitPoints + ' / ' + self.hovering.maxHitPoints\n                        );\n                    }\n                }\n            });\n        },\n\n        validEntity: function(entity) {\n            return (\n                entity &&\n                entity.id !== this.input.getPlayer().id &&\n                entity.type !== 'projectile'\n            );\n        },\n\n        clean: function() {\n            var self = this;\n\n            self.details.html('');\n            self.hovering = null;\n        },\n\n        hasHealth: function() {\n            return (\n                this.hovering.type === 'mob' || this.hovering.type === 'player'\n            );\n        },\n\n        display: function() {\n            this.attackInfo.fadeIn('fast');\n        },\n\n        hide: function() {\n            this.attackInfo.fadeOut('fast');\n        },\n\n        isVisible: function() {\n            return this.attackInfo.css('display') === 'block';\n        },\n\n        getGame: function() {\n            return this.input.game;\n        },\n\n        onUpdate: function(callback) {\n            this.updateCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/overlay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/pointer.js",
    "content": "define(['jquery', '../renderer/pointers/pointer'], function($, Pointer) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n            self.pointers = {};\n\n            self.scale = self.getScale();\n\n            self.container = $('#bubbles');\n        },\n\n        create: function(id, type, name) {\n            var self = this;\n\n            if (id in self.pointers) return;\n\n            switch (type) {\n                case Modules.Pointers.Button:\n                    self.pointers[id] = new Pointer(id, $('#' + name), type);\n\n                    break;\n\n                default:\n                    var element = $(\n                        '<div id=\"' + id + '\" class=\"pointer\"></div>'\n                    );\n\n                    self.setSize(element);\n\n                    self.container.append(element);\n\n                    self.pointers[id] = new Pointer(id, element, type);\n\n                    break;\n            }\n        },\n\n        resize: function() {\n            var self = this;\n\n            _.each(self.pointers, function(pointer) {\n                switch (pointer.type) {\n                    case Modules.Pointers.Relative:\n                        var scale = self.getScale(),\n                            x = pointer.x,\n                            y = pointer.y,\n                            offsetX = 0,\n                            offsetY = 0;\n\n                        pointer.element.css('left', x * scale - offsetX + 'px');\n                        pointer.element.css('top', y * scale - offsetY + 'px');\n\n                        break;\n                }\n            });\n        },\n\n        setSize: function(element) {\n            var self = this;\n\n            element.css({\n                width: 16 + 16 * self.scale + 'px',\n                height: 16 + 16 * self.scale + 'px',\n                margin: 'inherit',\n                'margin-top': '-' + 6 * self.scale + 'px',\n                top: 10 * self.scale + 'px',\n                background: 'url(\"img/' + self.scale + '/pointer.png\")'\n            });\n        },\n\n        clean: function() {\n            var self = this;\n\n            _.each(self.pointers, function(pointer) {\n                pointer.destroy();\n            });\n\n            self.pointers = {};\n        },\n\n        destroy: function(pointer) {\n            var self = this;\n\n            delete self.pointers[pointer.id];\n            pointer.destroy();\n        },\n\n        set: function(pointer, posX, posY) {\n            var self = this;\n\n            self.updateCamera();\n\n            var tileSize = 48, // 16 * self.scale\n                x = (posX - self.camera.x) * self.scale,\n                width = parseInt(pointer.element.css('width') + 24),\n                offset = width / 2 - tileSize / 2,\n                y,\n                outX,\n                outY;\n\n            y = (posY - self.camera.y) * self.scale - tileSize;\n\n            outX = x / self.game.renderer.canvasWidth;\n            outY = y / self.game.renderer.canvasHeight;\n\n            if (outX >= 1.5) {\n                // right\n                pointer.element.css('left', '');\n                pointer.element.css('right', '0');\n                pointer.element.css('top', '50%');\n                pointer.element.css('bottom', '');\n\n                pointer.element.css('transform', 'rotate(-90deg)');\n            } else if (outY >= 1.5) {\n                // bottom\n\n                pointer.element.css('left', '50%');\n                pointer.element.css('right', '');\n                pointer.element.css('top', '');\n                pointer.element.css('bottom', '0');\n\n                pointer.element.css('transform', '');\n            } else if (outX <= 0) {\n                // left\n\n                pointer.element.css('left', '0');\n                pointer.element.css('right', '');\n                pointer.element.css('top', '50%');\n                pointer.element.css('bottom', '');\n\n                pointer.element.css('transform', 'rotate(90deg)');\n            } else if (outY <= 0) {\n                // top\n\n                pointer.element.css('left', '');\n                pointer.element.css('right', '50%');\n                pointer.element.css('top', '0');\n                pointer.element.css('bottom', '');\n\n                pointer.element.css('transform', 'rotate(180deg)');\n            } else {\n                pointer.element.css('left', x - offset + 'px');\n                pointer.element.css('right', '');\n                pointer.element.css('top', y + 'px');\n                pointer.element.css('bottom', '');\n\n                pointer.element.css('transform', '');\n            }\n        },\n\n        setToEntity: function(entity) {\n            var self = this,\n                pointer = self.get(entity.id);\n\n            if (!pointer) return;\n\n            self.set(pointer, entity.x, entity.y);\n        },\n\n        setToPosition: function(id, x, y) {\n            var self = this,\n                pointer = self.get(id);\n\n            if (!pointer) return;\n\n            pointer.setPosition(x, y);\n\n            self.set(pointer, x, y);\n        },\n\n        setRelative: function(id, x, y) {\n            var self = this,\n                pointer = self.get(id);\n\n            if (!pointer) return;\n\n            var scale = self.getScale(),\n                offsetX = 0,\n                offsetY = 0;\n\n            pointer.setPosition(x, y);\n\n            pointer.element.css('left', x * scale - offsetX + 'px');\n            pointer.element.css('top', y * scale - offsetY + 'px');\n        },\n\n        update: function() {\n            var self = this;\n\n            _.each(self.pointers, function(pointer) {\n                switch (pointer.type) {\n                    case Modules.Pointers.Entity:\n                        var entity = self.game.entities.get(pointer.id);\n\n                        if (entity) self.setToEntity(entity);\n                        else self.destroy(pointer);\n\n                        break;\n\n                    case Modules.Pointers.Position:\n                        if (pointer.x !== -1 && pointer.y !== -1)\n                            self.set(pointer, pointer.x, pointer.y);\n\n                        break;\n                }\n            });\n        },\n\n        get: function(id) {\n            var self = this;\n\n            if (id in self.pointers) return self.pointers[id];\n\n            return null;\n        },\n\n        updateCamera: function() {\n            this.camera = this.game.renderer.camera;\n        },\n\n        getScale: function() {\n            return this.game.getScaleFactor(); // always 3\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/pointer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/sprites.js",
    "content": "/* global log, _ */\n\ndefine(['../entity/sprite', '../entity/animation'], function(\n    Sprite,\n    Animation\n) {\n    /**\n     * Class responsible for loading all the necessary sprites from the JSON.\n     */\n\n    return Class.extend({\n        init: function(renderer) {\n            var self = this;\n\n            self.renderer = renderer;\n\n            self.sprites = {};\n\n            self.sparksAnimation = null;\n\n            $.getJSON('data/sprites.json', function(json) {\n                self.load(json);\n            });\n\n            self.loadAnimations();\n        },\n\n        load: function(spriteData) {\n            var self = this;\n\n            _.each(spriteData, function(sprite) {\n                self.sprites[sprite.id] = new Sprite(\n                    sprite,\n                    self.renderer.scale\n                );\n            });\n\n            if (self.renderer.game.isDebug())\n                log.info('Finished loading sprite data...');\n\n            if (self.loadedSpritesCallback) self.loadedSpritesCallback();\n        },\n\n        loadAnimations: function() {\n            var self = this;\n\n            self.sparksAnimation = new Animation('idle_down', 6, 0, 16, 16);\n            self.sparksAnimation.setSpeed(120);\n        },\n\n        updateSprites: function() {\n            var self = this;\n\n            _.each(self.sprites, function(sprite) {\n                sprite.update(self.renderer.getScale());\n            });\n\n            if (self.renderer.game.isDebug()) {\n                log.info(\n                    'Updated sprites to scale: ' + self.renderer.getScale()\n                );\n            }\n        },\n\n        onLoadedSprites: function(callback) {\n            this.loadedSpritesCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/sprites.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/zoning.js",
    "content": "/* global Modules */\n\ndefine(function() {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n            self.renderer = game.renderer;\n            self.camera = game.camera;\n            self.input = game.input;\n\n            self.direction = null;\n        },\n\n        reset: function() {\n            this.direction = null;\n        },\n\n        setUp: function() {\n            this.direction = Modules.Orientation.Up;\n        },\n\n        setDown: function() {\n            this.direction = Modules.Orientation.Down;\n        },\n\n        setRight: function() {\n            this.direction = Modules.Orientation.Right;\n        },\n\n        setLeft: function() {\n            this.direction = Modules.Orientation.Left;\n        },\n\n        getDirection: function() {\n            return this.direction;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/controllers/zoning.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/animation.js",
    "content": "define(function() {\n    return Class.extend({\n        /**\n         * Ripped from BrowserQuest's client\n         */\n\n        init: function(name, length, row, width, height) {\n            var self = this;\n\n            self.name = name;\n            self.length = length;\n            self.row = row;\n            self.width = width;\n            self.height = height;\n\n            self.reset();\n        },\n\n        tick: function() {\n            var self = this,\n                i = self.currentFrame.index;\n\n            i = i < self.length - 1 ? i + 1 : 0;\n\n            if (self.count > 0 && i === 0) {\n                self.count -= 1;\n\n                if (self.count === 0) {\n                    self.currentFrame.index = 0;\n                    self.endCountCallback();\n                    return;\n                }\n            }\n\n            self.currentFrame.x = self.width * i;\n            self.currentFrame.y = self.height * self.row;\n\n            self.currentFrame.index = i;\n        },\n\n        update: function(time) {\n            var self = this;\n\n            if (self.lastTime === 0 && self.name.substr(0, 3) === 'atk')\n                self.lastTime = time;\n\n            if (self.readyToAnimate(time)) {\n                self.lastTime = time;\n                self.tick();\n\n                return true;\n            } else return false;\n        },\n\n        setCount: function(count, onEndCount) {\n            var self = this;\n\n            self.count = count;\n            self.endCountCallback = onEndCount;\n        },\n\n        setSpeed: function(speed) {\n            this.speed = speed;\n        },\n\n        setRow: function(row) {\n            this.row = row;\n        },\n\n        readyToAnimate: function(time) {\n            return time - this.lastTime > this.speed;\n        },\n\n        reset: function() {\n            var self = this;\n\n            self.lastTime = 0;\n            self.currentFrame = {\n                index: 0,\n                x: 0,\n                y: self.row * self.height\n            };\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/animation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/character.js",
    "content": "/* global _, Modules, log */\n\ndefine(['../entity', '../../utils/transition', '../animation'], function(\n    Entity,\n    Transition,\n    Animation\n) {\n    return Entity.extend({\n        init: function(id, kind) {\n            var self = this;\n\n            self._super(id, kind);\n\n            self.nextGridX = -1;\n            self.nextGridY = -1;\n            self.prevGridX = -1;\n            self.prevGridY = -1;\n\n            self.orientation = Modules.Orientation.Down;\n\n            self.hitPoints = -1;\n            self.maxHitPoints = -1;\n            self.mana = -1;\n            self.maxMana = -1;\n\n            self.healthBarVisible = false;\n            self.healthBarTimeout = false;\n\n            self.dead = false;\n            self.following = false;\n            self.attacking = false;\n            self.interrupted = false;\n\n            self.critical = false;\n            self.frozen = false;\n            self.stunned = false;\n            self.explosion = false;\n\n            self.path = null;\n            self.target = null;\n\n            self.attackers = {};\n\n            self.movement = new Transition();\n\n            self.attackAnimationSpeed = 50;\n            self.walkAnimationSpeed = 100;\n            self.movementSpeed = 250;\n\n            self.attackRange = 1;\n\n            self.loadGlobals();\n        },\n\n        loadGlobals: function() {\n            var self = this;\n\n            self.criticalAnimation = new Animation('atk_down', 10, 0, 48, 48);\n            self.criticalAnimation.setSpeed(30);\n\n            self.criticalAnimation.setCount(1, function() {\n                self.critical = false;\n\n                self.criticalAnimation.reset();\n                self.criticalAnimation.count = 1;\n            });\n\n            self.terrorAnimation = new Animation('explosion', 8, 0, 64, 64);\n            self.terrorAnimation.setSpeed(50);\n\n            self.terrorAnimation.setCount(1, function() {\n                self.terror = false;\n\n                self.terrorAnimation.reset();\n                self.terrorAnimation.count = 1;\n            });\n\n            self.stunAnimation = new Animation('atk_down', 6, 0, 48, 48);\n            self.stunAnimation.setSpeed(30);\n\n            self.explosionAnimation = new Animation('explosion', 8, 0, 64, 64);\n            self.explosionAnimation.setSpeed(50);\n\n            self.explosionAnimation.setCount(1, function() {\n                self.explosion = false;\n\n                self.explosionAnimation.reset();\n                self.explosionAnimation.count = 1;\n            });\n        },\n\n        animate: function(animation, speed, count, onEndCount) {\n            var self = this,\n                o = ['atk', 'walk', 'idle'],\n                orientation = self.orientation;\n\n            if (self.currentAnimation && self.currentAnimation.name === 'death')\n                return;\n\n            self.spriteFlipX = false;\n            self.spriteFlipY = false;\n\n            if (o.indexOf(animation) > -1) {\n                animation +=\n                    '_' +\n                    (orientation === Modules.Orientation.Left\n                        ? 'right'\n                        : self.orientationToString(orientation));\n                self.spriteFlipX =\n                    self.orientation === Modules.Orientation.Left;\n            }\n\n            self.setAnimation(animation, speed, count, onEndCount);\n        },\n\n        lookAt: function(character) {\n            var self = this;\n\n            if (character.gridX > self.gridX)\n                self.setOrientation(Modules.Orientation.Right);\n            else if (character.gridX < self.gridX)\n                self.setOrientation(Modules.Orientation.Left);\n            else if (character.gridY > self.gridY)\n                self.setOrientation(Modules.Orientation.Down);\n            else if (character.gridY < self.gridY)\n                self.setOrientation(Modules.Orientation.Up);\n\n            self.idle();\n        },\n\n        follow: function(character) {\n            var self = this;\n\n            self.following = true;\n\n            self.setTarget(character);\n            self.move(character.gridX, character.gridY);\n        },\n\n        attack: function(attacker, character) {\n            var self = this;\n\n            self.attacking = true;\n\n            self.follow(character);\n        },\n\n        backOff: function() {\n            var self = this;\n\n            self.attacking = false;\n            self.following = false;\n\n            self.removeTarget();\n        },\n\n        addAttacker: function(character) {\n            var self = this;\n\n            if (self.hasAttacker(character)) return;\n\n            self.attackers[character.instance] = character;\n        },\n\n        removeAttacker: function(character) {\n            var self = this;\n\n            if (self.hasAttacker(character))\n                delete self.attackers[character.id];\n        },\n\n        hasAttacker: function(character) {\n            var self = this;\n\n            if (self.attackers.size === 0) return false;\n\n            return character.instance in self.attackers;\n        },\n\n        performAction: function(orientation, action) {\n            var self = this;\n\n            self.setOrientation(orientation);\n\n            switch (action) {\n                case Modules.Actions.Idle:\n                    self.animate('idle', self.idleSpeed);\n                    break;\n\n                case Modules.Actions.Orientate:\n                    self.animate('idle', self.idleSpeed);\n                    break;\n\n                case Modules.Actions.Attack:\n                    self.animate('atk', self.attackAnimationSpeed, 1);\n                    break;\n\n                case Modules.Actions.Walk:\n                    self.animate('walk', self.walkAnimationSpeed);\n                    break;\n            }\n        },\n\n        idle: function(o) {\n            var self = this,\n                orientation = o || self.orientation;\n\n            self.performAction(orientation, Modules.Actions.Idle);\n        },\n\n        orientationToString: function(o) {\n            var oM = Modules.Orientation;\n\n            switch (o) {\n                case oM.Left:\n                    return 'left';\n\n                case oM.Right:\n                    return 'right';\n\n                case oM.Up:\n                    return 'up';\n\n                case oM.Down:\n                    return 'down';\n            }\n        },\n\n        go: function(x, y, forced) {\n            var self = this;\n\n            if (self.frozen) return;\n\n            if (self.following) {\n                self.following = false;\n                self.target = null;\n            }\n\n            self.move(x, y, forced);\n        },\n\n        proceed: function(x, y) {\n            this.newDestination = {\n                x: x,\n                y: y\n            };\n        },\n\n        /**\n         * We can have the movement remain client sided because\n         * the server side will be responsible for determining\n         * whether or not the player should have reached the\n         * location and ban all hackers. That and the fact\n         * the movement speed is constantly updated to avoid\n         * hacks previously present in BQ.\n         */\n\n        nextStep: function() {\n            var self = this,\n                stop = false,\n                x,\n                y,\n                path;\n\n            if (self.step % 2 === 0 && self.secondStepCallback)\n                self.secondStepCallback();\n\n            self.prevGridX = self.gridX;\n            self.prevGridY = self.gridY;\n\n            if (!self.hasPath()) return;\n\n            if (self.beforeStepCallback) self.beforeStepCallback();\n\n            self.updateGridPosition();\n\n            if (!self.interrupted) {\n                if (self.hasNextStep()) {\n                    self.nextGridX = self.path[self.step + 1][0];\n                    self.nextGridY = self.path[self.step + 1][1];\n                }\n\n                if (self.stepCallback) self.stepCallback();\n\n                if (self.changedPath()) {\n                    x = self.newDestination.x;\n                    y = self.newDestination.y;\n\n                    path = self.requestPathfinding(x, y);\n\n                    if (!path) return;\n\n                    self.newDestination = null;\n\n                    if (path.length < 2) stop = true;\n                    else self.followPath(path);\n                } else if (self.hasNextStep()) {\n                    self.step++;\n                    self.updateMovement();\n                } else stop = true;\n            } else {\n                stop = true;\n                self.interrupted = false;\n            }\n\n            if (stop) {\n                self.path = null;\n                self.idle();\n\n                if (self.stopPathingCallback) {\n                    self.stopPathingCallback(\n                        self.gridX,\n                        self.gridY,\n                        self.forced\n                    );\n                }\n\n                if (self.forced) self.forced = false;\n            }\n        },\n\n        updateMovement: function() {\n            var self = this,\n                step = self.step;\n\n            if (self.path[step][0] < self.path[step - 1][0]) {\n                self.performAction(\n                    Modules.Orientation.Left,\n                    Modules.Actions.Walk\n                );\n            }\n\n            if (self.path[step][0] > self.path[step - 1][0]) {\n                self.performAction(\n                    Modules.Orientation.Right,\n                    Modules.Actions.Walk\n                );\n            }\n\n            if (self.path[step][1] < self.path[step - 1][1]) {\n                self.performAction(\n                    Modules.Orientation.Up,\n                    Modules.Actions.Walk\n                );\n            }\n\n            if (self.path[step][1] > self.path[step - 1][1]) {\n                self.performAction(\n                    Modules.Orientation.Down,\n                    Modules.Actions.Walk\n                );\n            }\n        },\n\n        followPath: function(path) {\n            var self = this;\n\n            /**\n             * This is to ensure the player does not click on\n             * himself or somehow into another dimension\n             */\n\n            if (!path || path.length < 2) return;\n\n            self.path = path;\n            self.step = 0;\n\n            if (self.following) path.pop();\n\n            if (self.startPathingCallback) self.startPathingCallback(path);\n\n            self.nextStep();\n        },\n\n        move: function(x, y, forced) {\n            var self = this;\n\n            self.destination = {\n                gridX: x,\n                gridY: y\n            };\n\n            self.adjacentTiles = {};\n\n            if (self.hasPath() && !forced) self.proceed(x, y);\n            else self.followPath(self.requestPathfinding(x, y));\n        },\n\n        stop: function(force) {\n            var self = this;\n\n            if (!force) self.interrupted = true;\n            else if (self.hasPath()) {\n                self.path = null;\n                self.newDestination = null;\n                self.movement = new Transition();\n                self.performAction(self.orientation, Modules.Actions.Idle);\n                self.nextGridX = self.gridX;\n                self.nextGridY = self.gridY;\n            }\n        },\n\n        getEffectAnimation: function() {\n            var self = this;\n\n            if (self.critical) return self.criticalAnimation;\n\n            if (self.stunned) return self.stunAnimation;\n\n            if (self.terror) return self.terrorAnimation;\n\n            if (self.explosion) return self.explosionAnimation;\n        },\n\n        getActiveEffect: function() {\n            var self = this;\n\n            if (self.critical) return 'criticaleffect';\n\n            if (self.stunned) return 'stuneffect';\n\n            if (self.terror) return 'explosion-terror';\n\n            if (self.explosion) return 'explosion-fireball';\n        },\n\n        /**\n         * TRIGGERED!!!!\n         */\n\n        triggerHealthBar: function() {\n            var self = this;\n\n            self.healthBarVisible = true;\n\n            if (self.healthBarTimeout) clearTimeout(self.healthBarTimeout);\n\n            self.healthBarTimeout = setTimeout(function() {\n                self.healthBarVisible = false;\n            }, 7000);\n        },\n\n        clearHealthBar: function() {\n            var self = this;\n\n            self.healthBarVisible = false;\n            clearTimeout(self.healthBarTimeout);\n            self.healthBarTimeout = null;\n        },\n\n        requestPathfinding: function(x, y) {\n            var self = this;\n\n            if (self.requestPathCallback) return self.requestPathCallback(x, y);\n        },\n\n        updateGridPosition: function() {\n            var self = this;\n\n            self.setGridPosition(\n                self.path[self.step][0],\n                self.path[self.step][1]\n            );\n        },\n\n        isMoving: function() {\n            return (\n                this.currentAnimation.name === 'walk' &&\n                (this.x % 2 !== 0 || this.y % 2 !== 0)\n            );\n        },\n\n        forEachAttacker: function(callback) {\n            var self = this;\n\n            _.each(self.attackers, function(attacker) {\n                callback(attacker);\n            });\n        },\n\n        isAttacked: function() {\n            return Object.keys(this.attackers).length > 0;\n        },\n\n        hasWeapon: function() {\n            return false;\n        },\n\n        hasShadow: function() {\n            return true;\n        },\n\n        hasTarget: function() {\n            return !(this.target === null);\n        },\n\n        hasPath: function() {\n            return this.path !== null;\n        },\n\n        hasNextStep: function() {\n            return this.path.length - 1 > this.step;\n        },\n\n        changedPath: function() {\n            return !!this.newDestination;\n        },\n\n        removeTarget: function() {\n            var self = this;\n\n            if (!self.target) return;\n\n            self.target = null;\n        },\n\n        forget: function() {\n            this.attackers = {};\n        },\n\n        moved: function() {\n            var self = this;\n\n            self.loadDirty();\n\n            if (self.moveCallback) self.moveCallback();\n        },\n\n        getDistance: function(entity) {\n            return this._super(entity);\n        },\n\n        setName: function(name) {\n            this._super(name);\n        },\n\n        setSprite: function(sprite) {\n            this._super(sprite);\n        },\n\n        setTarget: function(target) {\n            var self = this;\n\n            if (target === null) {\n                self.removeTarget();\n                return;\n            }\n\n            if (self.target && self.target.id === target.id) return;\n\n            if (self.hasTarget()) self.removeTarget();\n\n            self.target = target;\n        },\n\n        setHitPoints: function(hitPoints) {\n            var self = this;\n\n            self.hitPoints = hitPoints;\n\n            if (self.hitPointsCallback) self.hitPointsCallback(self.hitPoints);\n        },\n\n        setIdleSpeed: function(idleSpeed) {\n            this._super(idleSpeed);\n        },\n\n        setMaxHitPoints: function(maxHitPoints) {\n            var self = this;\n\n            self.maxHitPoints = maxHitPoints;\n\n            if (self.maxHitPointsCallback)\n                self.maxHitPointsCallback(self.maxHitPoints);\n        },\n\n        setOrientation: function(orientation) {\n            this.orientation = orientation;\n        },\n\n        setGridPosition: function(x, y) {\n            this._super(x, y);\n        },\n\n        onRequestPath: function(callback) {\n            this.requestPathCallback = callback;\n        },\n\n        onStartPathing: function(callback) {\n            this.startPathingCallback = callback;\n        },\n\n        onStopPathing: function(callback) {\n            this.stopPathingCallback = callback;\n        },\n\n        onBeforeStep: function(callback) {\n            this.beforeStepCallback = callback;\n        },\n\n        onStep: function(callback) {\n            this.stepCallback = callback;\n        },\n\n        onSecondStep: function(callback) {\n            this.secondStepCallback = callback;\n        },\n\n        onMove: function(callback) {\n            this.moveCallback = callback;\n        },\n\n        onHitPoints: function(callback) {\n            this.hitPointsCallback = callback;\n        },\n\n        onMaxHitPoints: function(callback) {\n            this.maxHitPointsCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/character.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/mob/mob.js",
    "content": "define(['../character'], function(Character) {\n    return Character.extend({\n        init: function(id, kind) {\n            var self = this;\n\n            self._super(id, kind);\n\n            self.name = name;\n\n            self.hitPoints = -1;\n            self.maxHitPoints = -1;\n\n            self.hiddenName = false;\n\n            self.type = 'mob';\n        },\n\n        setHitPoints: function(hitPoints) {\n            this._super(hitPoints);\n        },\n\n        setMaxHitPoints: function(maxHitPoints) {\n            this._super(maxHitPoints);\n        },\n\n        idle: function() {\n            this._super();\n        },\n\n        performAction: function(orientation, action) {\n            this._super(orientation, action);\n        },\n\n        setSprite: function(sprite) {\n            this._super(sprite);\n        },\n\n        setName: function(name) {\n            this.name = name;\n        },\n\n        setGridPosition: function(x, y) {\n            this._super(x, y);\n        },\n\n        hasShadow: function() {\n            return !this.hiddenName;\n        },\n\n        drawNames: function() {\n            return !this.hiddenName;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/mob/mob.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/npc/npc.js",
    "content": "define(['../character'], function(Character) {\n    return Character.extend({\n        init: function(id, kind) {\n            var self = this;\n\n            self._super(id, kind);\n\n            self.type = 'npc';\n        },\n\n        idle: function() {\n            this._super();\n        },\n\n        setSprite: function(sprite) {\n            this._super(sprite);\n        },\n\n        setName: function(name) {\n            this._super(name);\n        },\n\n        setGridPosition: function(x, y) {\n            this._super(x, y);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/npc/npc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/armour.js",
    "content": "define(['./equipment'], function(Equipment) {\n    return Equipment.extend({\n        init: function(name, string, count, ability, abilityLevel) {\n            var self = this;\n\n            self._super(name, string, count, ability, abilityLevel);\n\n            self.defence = -1;\n        },\n\n        setDefence: function(defence) {\n            this.defence = defence;\n        },\n\n        getDefence: function() {\n            return this.defence;\n        },\n\n        update: function(name, string, count, ability, abilityLevel) {\n            this._super(name, string, count, ability, abilityLevel);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/player/equipment/armour.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/boots.js",
    "content": "define(['./equipment'], function(Equipment) {\n    return Equipment.extend({\n        init: function(name, string, count, ability, abilityLevel) {\n            var self = this;\n\n            self._super(name, string, count, ability, abilityLevel);\n        },\n\n        update: function(name, string, count, ability, abilityLevel) {\n            this._super(name, string, count, ability, abilityLevel);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/player/equipment/boots.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/equipment.js",
    "content": "define(function() {\n    /**\n     * The children of these classes are responsible for\n     * clear and concise ways of organizing stats of weapons\n     * in the client side. This does not dictate the damage,\n     * defense or bonus stats, it's just for looks.\n     */\n\n    return Class.extend({\n        init: function(name, string, count, ability, abilityLevel) {\n            var self = this;\n\n            self.name = name;\n            self.string = string;\n            self.count = count;\n            self.ability = ability;\n            self.abilityLevel = abilityLevel;\n        },\n\n        exists: function() {\n            return this.name !== null && this.name !== 'null';\n        },\n\n        getName: function() {\n            return this.name;\n        },\n\n        getString: function() {\n            return this.string;\n        },\n\n        getCount: function() {\n            return this.count;\n        },\n\n        getAbility: function() {\n            return this.ability;\n        },\n\n        getAbilityLevel: function() {\n            return this.abilityLevel;\n        },\n\n        update: function(name, string, count, ability, abilityLevel) {\n            var self = this;\n\n            self.name = name;\n            self.string = string;\n            self.count = count;\n            self.ability = ability;\n            self.abilityLevel = abilityLevel;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/player/equipment/equipment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/pendant.js",
    "content": "define(['./equipment'], function(Equipment) {\n    return Equipment.extend({\n        init: function(name, string, count, ability, abilityLevel) {\n            var self = this;\n\n            self._super(name, string, count, ability, abilityLevel);\n        },\n\n        update: function(name, string, count, ability, abilityLevel) {\n            this._super(name, string, count, ability, abilityLevel);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/player/equipment/pendant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/ring.js",
    "content": "define(['./equipment'], function(Equipment) {\n    return Equipment.extend({\n        init: function(name, string, count, ability, abilityLevel) {\n            var self = this;\n\n            self._super(name, string, count, ability, abilityLevel);\n        },\n\n        update: function(name, string, count, ability, abilityLevel) {\n            this._super(name, string, count, ability, abilityLevel);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/player/equipment/ring.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/weapon.js",
    "content": "define(['./equipment'], function(Equipment) {\n    return Equipment.extend({\n        init: function(name, string, count, ability, abilityLevel) {\n            var self = this;\n\n            self._super(name, string, count, ability, abilityLevel);\n\n            self.level = -1;\n            self.damage = -1;\n            self.ranged = string && string.includes('bow');\n        },\n\n        exists: function() {\n            return this._super();\n        },\n\n        setDamage: function(damage) {\n            this.damage = damage;\n        },\n\n        setLevel: function(level) {\n            this.level = level;\n        },\n\n        getDamage: function() {\n            return this.damage;\n        },\n\n        getLevel: function() {\n            return this.level;\n        },\n\n        getString: function() {\n            return this._super();\n        },\n\n        update: function(name, string, count, ability, abilityLevel) {\n            this._super(name, string, count, ability, abilityLevel);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/player/equipment/weapon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/player.js",
    "content": "/* global Modules, log, _ */\n\ndefine([\n    '../character',\n    './equipment/armour',\n    './equipment/weapon',\n    './equipment/pendant',\n    './equipment/boots',\n    './equipment/ring'\n], function(Character, Armour, Weapon, Pendant, Boots, Ring) {\n    return Character.extend({\n        init: function() {\n            var self = this;\n\n            self._super(-1, Modules.Types.Player);\n\n            self.username = '';\n            self.password = '';\n            self.email = '';\n\n            self.avatar = null;\n\n            self.rights = 0;\n            self.wanted = false;\n            self.experience = -1;\n            self.nextExperience = -1;\n            self.prevExperience = -1;\n            self.level = -1;\n            self.pvpKills = -1;\n            self.pvpDeaths = -1;\n\n            self.hitPoints = -1;\n            self.maxHitPoints = -1;\n            self.mana = -1;\n            self.maxMana = -1;\n\n            self.prevX = 0;\n            self.prevY = 0;\n\n            self.direction = null;\n            self.pvp = false;\n\n            self.moveLeft = false;\n            self.moveRight = false;\n            self.moveUp = false;\n            self.moveDown = false;\n            self.disableAction = false;\n\n            self.loadEquipment();\n        },\n\n        load: function(data) {\n            var self = this;\n\n            self.setId(data.instance);\n            self.setGridPosition(data.x, data.y);\n            self.setPointsData(data.hitPoints, data.mana);\n            self.setExperience(\n                data.experience,\n                data.nextExperience,\n                data.prevExperience\n            );\n\n            self.username = data.username;\n            self.level = data.level;\n\n            self.lastLogin = data.lastLogin;\n            self.pvpKills = data.pvpKills;\n            self.pvpDeaths = data.pvpDeaths;\n\n            self.orientation = data.orienation;\n\n            self.type = 'player';\n        },\n\n        loadHandler: function(game) {\n            var self = this;\n\n            /**\n             * This is for other player characters\n             */\n\n            self.handler.setGame(game);\n            self.handler.load();\n        },\n\n        hasKeyboardMovement: function() {\n            return (\n                this.moveLeft || this.moveRight || this.moveUp || this.moveDown\n            );\n        },\n\n        stop: function(force) {\n            this._super(force);\n        },\n\n        setId: function(id) {\n            this.id = id;\n        },\n\n        idle: function() {\n            this._super();\n        },\n\n        loadEquipment: function() {\n            var self = this;\n\n            self.armour = null;\n            self.weapon = null;\n            self.pendant = null;\n            self.ring = null;\n            self.boots = null;\n        },\n\n        isRanged: function() {\n            return this.weapon && this.weapon.ranged;\n        },\n\n        follow: function(character) {\n            this._super(character);\n        },\n\n        go: function(x, y, forced) {\n            this._super(x, y, forced);\n        },\n\n        hasWeapon: function() {\n            return this.weapon ? this.weapon.exists() : false;\n        },\n\n        performAction: function(orientation, action) {\n            this._super(orientation, action);\n        },\n\n        setName: function(name) {\n            var self = this;\n\n            self.username = name;\n            self.name = name;\n        },\n\n        setSprite: function(sprite) {\n            this._super(sprite);\n        },\n\n        getSpriteName: function() {\n            return this.armour ? this.armour.string : 'clotharmor';\n        },\n\n        setGridPosition: function(x, y) {\n            this._super(x, y);\n        },\n\n        setHitPoints: function(hitPoints) {\n            this._super(hitPoints);\n        },\n\n        setMaxHitPoints: function(maxHitPoints) {\n            this._super(maxHitPoints);\n        },\n\n        setMana: function(mana) {\n            this.mana = mana;\n        },\n\n        setMaxMana: function(maxMana) {\n            this.maxMana = maxMana;\n        },\n\n        clearHealthBar: function() {\n            this._super();\n        },\n\n        getX: function() {\n            return this.gridX;\n        },\n\n        getY: function() {\n            return this.gridY;\n        },\n\n        setExperience: function(experience, nextExperience, prevExperience) {\n            var self = this;\n\n            self.experience = experience;\n            self.nextExperience = nextExperience;\n            self.prevExperience = prevExperience;\n\n            if (self.experienceCallback) self.experienceCallback();\n        },\n\n        setPointsData: function(hitPointsData, manaData) {\n            var self = this,\n                hitPoints = hitPointsData.shift(),\n                maxHitPoints = hitPointsData.shift(),\n                mana = manaData.shift(),\n                maxMana = manaData.shift();\n\n            self.setMaxHitPoints(maxHitPoints);\n            self.setMaxMana(maxMana);\n\n            self.setHitPoints(hitPoints);\n            self.setMana(mana);\n        },\n\n        setEquipment: function(\n            type,\n            name,\n            string,\n            count,\n            ability,\n            abilityLevel\n        ) {\n            var self = this;\n\n            switch (type) {\n                case Modules.Equipment.Armour:\n                    if (!self.armour) {\n                        self.armour = new Armour(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    } else {\n                        self.armour.update(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    }\n\n                    if (self.updateArmourCallback)\n                        self.updateArmourCallback(string);\n\n                    break;\n\n                case Modules.Equipment.Weapon:\n                    if (!self.weapon) {\n                        self.weapon = new Weapon(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    } else {\n                        self.weapon.update(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    }\n\n                    self.weapon.ranged = string.includes('bow');\n\n                    break;\n\n                case Modules.Equipment.Pendant:\n                    if (!self.pendant) {\n                        self.pendant = new Pendant(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    } else {\n                        self.pendant.update(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    }\n\n                    break;\n\n                case Modules.Equipment.Ring:\n                    if (!self.ring) {\n                        self.ring = new Ring(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    } else {\n                        self.ring.update(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    }\n\n                    break;\n\n                case Modules.Equipment.Boots:\n                    if (!self.boots) {\n                        self.boots = new Boots(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    } else {\n                        self.boots.update(\n                            name,\n                            string,\n                            count,\n                            ability,\n                            abilityLevel\n                        );\n                    }\n\n                    break;\n            }\n        },\n\n        unequip: function(type) {\n            var self = this;\n\n            switch (type) {\n                case 'armour':\n                    self.armour.update('Cloth Armour', 'clotharmor', 1, -1, -1);\n                    break;\n\n                case 'weapon':\n                    self.weapon.update(null, null, -1, -1, -1);\n                    break;\n\n                case 'pendant':\n                    self.pendant.update(null, null, -1, -1, -1);\n                    break;\n\n                case 'ring':\n                    self.ring.update(null, null, -1, -1, -1);\n                    break;\n\n                case 'boots':\n                    self.boots.update(null, null, -1, -1, -1);\n                    break;\n            }\n        },\n\n        tempBlink: function() {\n            var self = this;\n\n            self.blink(90);\n\n            if (!self.tempBlinkTimeout) {\n                self.tempBlinkTimeout = setTimeout(function() {\n                    self.stopBlinking();\n                }, 500);\n            }\n        },\n\n        getDistance: function(entity) {\n            return this._super(entity);\n        },\n\n        onUpdateArmour: function(callback) {\n            this.updateArmourCallback = callback;\n        },\n\n        onExperience: function(callback) {\n            this.experienceCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/player/player.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/playerhandler.js",
    "content": "/* global log, Packets, Modules */\n\ndefine(function() {\n    /**\n     * This is a player handler, responsible for all the callbacks\n     * without having to clutter up the entire game file.\n     */\n\n    return Class.extend({\n        init: function(game, player) {\n            var self = this;\n\n            self.game = game;\n            self.camera = game.getCamera();\n            self.input = game.input;\n            self.player = player;\n            self.entities = game.entities;\n            self.socket = game.socket;\n            self.renderer = game.renderer;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.player.onRequestPath(function(x, y) {\n                if (self.player.dead) return null;\n\n                var ignores = [self.player];\n\n                if (self.player.hasTarget()) ignores.push(self.player.target);\n\n                if (!self.game.map.isColliding(x, y)) {\n                    self.socket.send(Packets.Movement, [\n                        Packets.MovementOpcode.Request,\n                        x,\n                        y,\n                        self.player.gridX,\n                        self.player.gridY\n                    ]);\n                }\n\n                return self.game.findPath(self.player, x, y, ignores);\n            });\n\n            self.player.onStartPathing(function(path) {\n                var i = path.length - 1;\n\n                self.input.selectedX = path[i][0];\n                self.input.selectedY = path[i][1];\n                self.input.selectedCellVisible = true;\n\n                if (\n                    !self.game.getEntityAt(\n                        self.input.selectedX,\n                        self.input.selectedY\n                    )\n                ) {\n                    self.socket.send(Packets.Target, [\n                        Packets.TargetOpcode.None\n                    ]);\n                }\n\n                self.socket.send(Packets.Movement, [\n                    Packets.MovementOpcode.Started,\n                    self.input.selectedX,\n                    self.input.selectedY,\n                    self.player.gridX,\n                    self.player.gridY\n                ]);\n            });\n\n            self.player.onStopPathing(function(x, y) {\n                self.entities.unregisterPosition(self.player);\n                self.entities.registerPosition(self.player);\n\n                self.input.selectedCellVisible = false;\n\n                self.camera.clip();\n\n                var id = null,\n                    entity = self.game.getEntityAt(x, y, true);\n\n                if (entity) id = entity.id;\n\n                var hasTarget = self.player.hasTarget();\n\n                self.socket.send(Packets.Movement, [\n                    Packets.MovementOpcode.Stop,\n                    x,\n                    y,\n                    id,\n                    hasTarget,\n                    self.player.orientation\n                ]);\n\n                if (hasTarget) {\n                    self.socket.send(Packets.Target, [\n                        self.isAttackable()\n                            ? Packets.TargetOpcode.Attack\n                            : Packets.TargetOpcode.Talk,\n                        self.player.target.id\n                    ]);\n\n                    self.player.lookAt(self.player.target);\n                }\n\n                self.input.setPassiveTarget();\n\n                self.game.storage.setOrientation(self.player.orientation);\n            });\n\n            self.player.onBeforeStep(function() {\n                self.entities.unregisterPosition(self.player);\n\n                if (!self.isAttackable()) return;\n\n                if (self.player.isRanged()) {\n                    if (self.player.getDistance(self.player.target) < 7)\n                        self.player.stop();\n                } else {\n                    self.input.selectedX = self.player.target.gridX;\n                    self.input.selectedY = self.player.target.gridY;\n                }\n            });\n\n            self.player.onStep(function() {\n                if (self.player.hasNextStep())\n                    self.entities.registerDuality(self.player);\n\n                if (\n                    !self.camera.centered ||\n                    self.camera.lockX ||\n                    self.camera.lockY\n                )\n                    self.checkBounds();\n\n                self.player.forEachAttacker(function(attacker) {\n                    if (!attacker.stunned) attacker.follow(self.player);\n                });\n\n                self.socket.send(Packets.Movement, [\n                    Packets.MovementOpcode.Step,\n                    self.player.gridX,\n                    self.player.gridY\n                ]);\n            });\n\n            self.player.onSecondStep(function() {\n                self.renderer.updateAnimatedTiles();\n            });\n\n            self.player.onMove(function() {\n                /**\n                 * This is a callback representing the absolute exact position of the player.\n                 */\n\n                if (self.camera.centered) self.camera.centreOn(self.player);\n\n                if (self.player.hasTarget())\n                    self.player.follow(self.player.target);\n            });\n\n            self.player.onUpdateArmour(function(armourName) {\n                self.player.setSprite(self.game.getSprite(armourName));\n            });\n        },\n\n        isAttackable: function() {\n            var self = this,\n                target = self.player.target;\n\n            if (!target) return;\n\n            return (\n                target.type === 'mob' ||\n                (target.type === 'player' && target.pvp)\n            );\n        },\n\n        checkBounds: function() {\n            var self = this,\n                x = self.player.gridX - self.camera.gridX,\n                y = self.player.gridY - self.camera.gridY,\n                isBorder = false;\n\n            if (x === 0) self.game.zoning.setLeft();\n            else if (y === 0) self.game.zoning.setUp();\n            else if (x === self.camera.gridWidth - 1)\n                self.game.zoning.setRight();\n            else if (y === self.camera.gridHeight - 1)\n                self.game.zoning.setDown();\n\n            if (self.game.zoning.direction !== null) {\n                self.camera.zone(self.game.zoning.getDirection());\n                self.game.zoning.reset();\n            }\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/character/player/playerhandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/entity.js",
    "content": "/* global Modules, log, _ */\n\ndefine(['./entityhandler'], function(EntityHandler) {\n    return Class.extend({\n        init: function(id, kind) {\n            var self = this;\n\n            self.id = id;\n            self.kind = kind;\n\n            self.x = 0;\n            self.y = 0;\n            self.gridX = 0;\n            self.gridY = 0;\n\n            self.name = '';\n\n            self.sprite = null;\n            self.spriteFlipX = false;\n            self.spriteFlipY = false;\n\n            self.animations = null;\n            self.currentAnimation = null;\n            self.idleSpeed = 450;\n\n            self.shadowOffsetY = 0;\n            self.hidden = false;\n\n            self.spriteLoaded = false;\n            self.visible = true;\n            self.fading = false;\n            self.handler = new EntityHandler(self);\n\n            self.angled = false;\n            self.angle = 0;\n\n            self.critical = false;\n            self.stunned = false;\n            self.terror = false;\n\n            self.nonPathable = false;\n            self.hasCounter = false;\n\n            self.countdownTime = 0;\n            self.counter = 0;\n\n            self.renderingData = {\n                scale: -1,\n                angle: 0\n            };\n\n            self.loadDirty();\n        },\n\n        /**\n         * This is important for when the client is\n         * on a mobile screen. So the sprite has to be\n         * handled differently.\n         */\n\n        loadDirty: function() {\n            var self = this;\n\n            self.dirty = true;\n\n            if (self.dirtyCallback) self.dirtyCallback();\n        },\n\n        fadeIn: function(time) {\n            var self = this;\n\n            self.fading = true;\n            self.fadingTime = time;\n        },\n\n        blink: function(speed) {\n            var self = this;\n\n            self.blinking = setInterval(function() {\n                self.toggleVisibility();\n            }, speed);\n        },\n\n        stopBlinking: function() {\n            var self = this;\n\n            if (self.blinking) clearInterval(self.blinking);\n\n            self.setVisible(true);\n        },\n\n        setName: function(name) {\n            this.name = name;\n        },\n\n        setSprite: function(sprite) {\n            var self = this;\n\n            if (!sprite || (self.sprite && self.sprite.name === sprite.name))\n                return;\n\n            if (self.type === 'player') sprite.loadHurt = true;\n\n            if (!sprite.loaded) sprite.load();\n\n            sprite.name = sprite.id;\n\n            self.sprite = sprite;\n\n            self.normalSprite = self.sprite;\n            self.animations = sprite.createAnimations();\n\n            sprite.onLoad(function() {\n                if (sprite.loadHurt) self.hurtSprite = sprite.hurtSprite;\n            });\n\n            self.spriteLoaded = true;\n\n            if (self.readyCallback) self.readyCallback();\n        },\n\n        setPosition: function(x, y) {\n            var self = this;\n\n            self.x = x;\n            self.y = y;\n        },\n\n        setGridPosition: function(x, y) {\n            var self = this;\n\n            self.gridX = x;\n            self.gridY = y;\n\n            self.setPosition(x * 16, y * 16);\n        },\n\n        setAnimation: function(name, speed, count, onEndCount) {\n            var self = this;\n\n            if (\n                !self.spriteLoaded ||\n                (self.currentAnimation && self.currentAnimation.name === name)\n            )\n                return;\n\n            var anim = self.getAnimationByName(name);\n\n            if (!anim) return;\n\n            self.currentAnimation = anim;\n\n            if (name.substr(0, 3) === 'atk') self.currentAnimation.reset();\n\n            self.currentAnimation.setSpeed(speed);\n\n            self.currentAnimation.setCount(\n                count || 0,\n                onEndCount ||\n                    function() {\n                        self.idle();\n                    }\n            );\n        },\n\n        setCountdown: function(count) {\n            var self = this;\n\n            self.counter = count;\n\n            self.countdownTime = new Date().getTime();\n\n            self.hasCounter = true;\n        },\n\n        setVisible: function(visible) {\n            this.visible = visible;\n        },\n\n        setIdleSpeed: function(idleSpeed) {\n            this.idleSpeed = idleSpeed;\n        },\n\n        hasWeapon: function() {\n            return false;\n        },\n\n        getDistance: function(entity) {\n            var self = this,\n                x = Math.abs(self.gridX - entity.gridX),\n                y = Math.abs(self.gridY - entity.gridY);\n\n            return x > y ? x : y;\n        },\n\n        getCoordDistance: function(toX, toY) {\n            var self = this,\n                x = Math.abs(self.gridX - toX),\n                y = Math.abs(self.gridY - toY);\n\n            return x > y ? x : y;\n        },\n\n        inAttackRadius: function(entity) {\n            return (\n                entity &&\n                this.getDistance(entity) < 2 &&\n                !(this.gridX !== entity.gridX && this.gridY !== entity.gridY)\n            );\n        },\n\n        inExtraAttackRadius: function(entity) {\n            return (\n                entity &&\n                this.getDistance(entity) < 3 &&\n                !(this.gridX !== entity.gridX && this.gridY !== entity.gridY)\n            );\n        },\n\n        getAnimationByName: function(name) {\n            if (name in this.animations) return this.animations[name];\n\n            return null;\n        },\n\n        getSprite: function() {\n            return this.sprite.name;\n        },\n\n        toggleVisibility: function() {\n            this.setVisible(!this.visible);\n        },\n\n        isVisible: function() {\n            return this.visible;\n        },\n\n        drawNames: function() {\n            return true;\n        },\n\n        hasShadow: function() {\n            return false;\n        },\n\n        hasPath: function() {\n            return false;\n        },\n\n        onReady: function(callback) {\n            this.readyCallback = callback;\n        },\n\n        onDirty: function(callback) {\n            this.dirtyCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/entityhandler.js",
    "content": "/* global log, Packets */\n\ndefine(['./character/character'], function(Character) {\n    return Class.extend({\n        init: function(entity) {\n            var self = this;\n\n            self.entity = entity;\n            self.game = null;\n            self.entities = null;\n        },\n\n        load: function() {\n            var self = this;\n\n            if (!self.entity || !self.game) return;\n\n            if (self.isCharacter()) {\n                self.entity.onRequestPath(function(x, y) {\n                    var ignored = [self.entity];\n\n                    return self.game.findPath(self.entity, x, y, ignored);\n                });\n\n                self.entity.onBeforeStep(function() {\n                    self.entities.unregisterPosition(self.entity);\n                });\n\n                self.entity.onStep(function() {\n                    self.entities.registerDuality(self.entity);\n\n                    self.entity.forEachAttacker(function(attacker) {\n                        if (\n                            attacker.hasTarget() &&\n                            attacker.target.id === self.entity.id &&\n                            !attacker.stunned\n                        )\n                            attacker.follow(self.entity);\n                    });\n\n                    if (self.entity.type === 'mob') {\n                        self.game.socket.send(Packets.Movement, [\n                            Packets.MovementOpcode.Entity,\n                            self.entity.id,\n                            self.entity.gridX,\n                            self.entity.gridY\n                        ]);\n                    }\n\n                    if (\n                        self.entity.attackRange > 1 &&\n                        self.entity.hasTarget() &&\n                        self.entity.getDistance(self.entity.target) <=\n                            self.entity.attackRange\n                    )\n                        self.entity.stop(false);\n                });\n\n                self.entity.onStopPathing(function() {\n                    self.entities.grids.addToRenderingGrid(\n                        self.entity,\n                        self.entity.gridX,\n                        self.entity.gridY\n                    );\n\n                    self.entities.unregisterPosition(self.entity);\n                    self.entities.registerPosition(self.entity);\n                });\n            }\n        },\n\n        isCharacter: function() {\n            return (\n                this.entity.type &&\n                (this.entity.type === 'player' ||\n                    this.entity.type === 'mob' ||\n                    this.entity.type === 'npc')\n            );\n        },\n\n        setGame: function(game) {\n            var self = this;\n\n            if (!self.game) self.game = game;\n\n            self.setEntities(self.game.entities);\n        },\n\n        setEntities: function(entities) {\n            var self = this;\n\n            if (!self.entities) self.entities = entities;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/entityhandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/objects/chest.js",
    "content": "define(['../entity'], function(Entity) {\n    return Entity.extend({\n        init: function(id, kind) {\n            var self = this;\n\n            self._super(id, kind);\n\n            self.type = 'chest';\n        },\n\n        idle: function() {\n            this.setAnimation('idle_down', 150);\n        },\n\n        setName: function(name) {\n            this._super(name);\n        },\n\n        setAnimation: function(name, speed, count, onEndCount) {\n            this._super(name, speed, count, onEndCount);\n        },\n\n        setGridPosition: function(x, y) {\n            this._super(x, y);\n        },\n\n        setSprite: function(sprite) {\n            this._super(sprite);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/objects/chest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/objects/item.js",
    "content": "define(['../entity'], function(Entity) {\n    return Entity.extend({\n        init: function(id, kind, count, ability, abilityLevel) {\n            var self = this;\n\n            self._super(id, kind);\n\n            self.count = count;\n            self.ability = ability;\n            self.abilityLevel = abilityLevel;\n\n            self.dropped = false;\n            self.stackable = false;\n\n            self.type = 'item';\n        },\n\n        idle: function() {\n            this.setAnimation('idle', 150);\n        },\n\n        setName: function(name) {\n            this._super(name);\n        },\n\n        setAnimation: function(name, speed, count) {\n            this._super(name, speed, count);\n        },\n\n        setGridPosition: function(x, y) {\n            this._super(x, y);\n        },\n\n        setSprite: function(sprite) {\n            this._super(sprite);\n        },\n\n        hasShadow: function() {\n            return true;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/objects/item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/objects/projectile.js",
    "content": "define(['../entity'], function(Entity) {\n    return Entity.extend({\n        init: function(id, kind, owner) {\n            var self = this;\n\n            self._super(id, kind);\n\n            self.owner = owner;\n\n            self.name = '';\n\n            self.startX = -1;\n            self.startY = -1;\n\n            self.destX = -1;\n            self.destY = -1;\n\n            self.special = -1;\n\n            self.static = false;\n            self.dynamic = false;\n\n            self.speed = 200;\n\n            self.angle = 0;\n\n            self.lighting = null;\n        },\n\n        getId: function() {\n            return this.id;\n        },\n\n        impact: function() {\n            if (this.impactCallback) this.impactCallback();\n        },\n\n        setSprite: function(sprite) {\n            this._super(sprite);\n        },\n\n        setAnimation: function(name, speed, count, onEndCount) {\n            this._super(name, speed, count, onEndCount);\n        },\n\n        setStart: function(x, y) {\n            var self = this;\n\n            self.setGridPosition(Math.floor(x / 16), Math.floor(y / 16));\n\n            self.startX = x;\n            self.startY = y;\n        },\n\n        setDestination: function(x, y) {\n            var self = this;\n\n            self.static = true;\n\n            self.destX = x;\n            self.destY = y;\n\n            self.updateAngle();\n        },\n\n        setTarget: function(target) {\n            var self = this;\n\n            if (!target) return;\n\n            self.dynamic = true;\n\n            self.destX = target.x;\n            self.destY = target.y;\n\n            self.updateAngle();\n\n            if (target.type !== 'mob') return;\n\n            target.onMove(function() {\n                self.destX = target.x;\n                self.destY = target.y;\n\n                self.updateAngle();\n            });\n        },\n\n        getSpeed: function() {\n            var self = this;\n\n            return 1;\n        },\n\n        updateTarget: function(x, y) {\n            var self = this;\n\n            self.destX = x;\n            self.destY = y;\n        },\n\n        hasPath: function() {\n            return false;\n        },\n\n        updateAngle: function() {\n            this.angle =\n                Math.atan2(this.destY - this.y, this.destX - this.x) *\n                    (180 / Math.PI) -\n                90;\n        },\n\n        onImpact: function(callback) {\n            this.impactCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/objects/projectile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/sprite.js",
    "content": "/* global log, _ */\n\ndefine(['./animation'], function(Animation) {\n    return Class.extend({\n        init: function(sprite, scale) {\n            var self = this;\n\n            self.sprite = sprite;\n            self.scale = scale;\n\n            self.id = sprite.id;\n\n            self.loaded = false;\n            self.loadHurt = false;\n            self.loadSilhouette = true;\n\n            self.offsetX = 0;\n            self.offsetY = 0;\n            self.offsetAngle = 0;\n\n            self.hurtSprite = {\n                loaded: false\n            };\n\n            self.loadSprite();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.image = new Image();\n            self.image.crossOrigin = 'Anonymous';\n            self.image.src = self.filepath;\n\n            self.image.onload = function() {\n                self.loaded = true;\n\n                if (self.loadHurt) self.createHurtSprite();\n\n                if (self.loadCallback) self.loadCallback();\n            };\n        },\n\n        loadSprite: function() {\n            var self = this,\n                sprite = self.sprite;\n\n            self.filepath = 'img/sprites/' + self.id + '.png';\n            self.animationData = sprite.animations;\n\n            self.width = sprite.width;\n            self.height = sprite.height;\n\n            self.offsetX = sprite.offsetX !== undefined ? sprite.offsetX : -16;\n            self.offsetY = sprite.offsetY !== undefined ? sprite.offsetY : -16;\n            self.offfsetAngle =\n                sprite.offsetAngle !== undefined ? sprite.offsetAngle : 0;\n\n            self.idleSpeed =\n                sprite.idleSpeed !== undefined ? sprite.idleSpeed : 450;\n        },\n\n        update: function(newScale) {\n            var self = this;\n\n            self.scale = newScale;\n\n            self.loadSprite();\n            self.load();\n        },\n\n        createAnimations: function() {\n            var self = this,\n                animations = {};\n\n            for (var name in self.animationData) {\n                if (self.animationData.hasOwnProperty(name)) {\n                    var a = self.animationData[name];\n\n                    animations[name] = new Animation(\n                        name,\n                        a.length,\n                        a.row,\n                        self.width,\n                        self.height\n                    );\n                }\n            }\n\n            return animations;\n        },\n\n        /**\n         * This is when an entity gets hit, they turn red then white.\n         */\n\n        createHurtSprite: function() {\n            var self = this;\n\n            if (!self.loaded) self.load();\n\n            if (self.hurtSprite.loaded) return;\n\n            var canvas = document.createElement('canvas'),\n                context = canvas.getContext('2d'),\n                spriteData,\n                data;\n\n            canvas.width = self.image.width;\n            canvas.height = self.image.height;\n\n            try {\n                context.drawImage(\n                    self.image,\n                    0,\n                    0,\n                    self.image.width,\n                    self.image.height\n                );\n\n                spriteData = context.getImageData(\n                    0,\n                    0,\n                    self.image.width,\n                    self.image.height\n                );\n                data = spriteData.data;\n\n                for (var i = 0; i < data.length; i += 4) {\n                    data[i] = 255;\n                    data[i + 1] = data[i + 2] = 75;\n                }\n\n                spriteData.data = data;\n\n                context.putImageData(spriteData, 0, 0);\n\n                self.hurtSprite = {\n                    image: canvas,\n                    loaded: true,\n                    offsetX: self.offsetX,\n                    offsetY: self.offsetY,\n                    width: self.width,\n                    height: self.height,\n                    type: 'hurt'\n                };\n            } catch (e) {\n                log.error('Could not load hurt sprite.');\n                log.error(e);\n            }\n        },\n\n        onLoad: function(callback) {\n            this.loadCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/entity/sprite.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "Kaetram-Open/client/js/game.js",
    "content": "/* global Class, log, Packets, Modules, Detect, _ */\n\ndefine([\n    './renderer/renderer',\n    './utils/storage',\n    './map/map',\n    './network/socket',\n    './entity/character/player/player',\n    './renderer/updater',\n    './controllers/entities',\n    './controllers/input',\n    './entity/character/player/playerhandler',\n    './utils/pathfinder',\n    './controllers/zoning',\n    './controllers/info',\n    './controllers/bubble',\n    './controllers/interface',\n    './controllers/audio',\n    './controllers/pointer',\n    './renderer/overlay',\n    './network/connection',\n    './utils/modules',\n    './network/packets'\n], function(\n    Renderer,\n    LocalStorage,\n    Map,\n    Socket,\n    Player,\n    Updater,\n    Entities,\n    Input,\n    PlayerHandler,\n    Pathfinder,\n    Zoning,\n    Info,\n    Bubble,\n    Interface,\n    Audio,\n    Pointer,\n    Overlay,\n    Connection\n) {\n    return Class.extend({\n        init: function(app) {\n            var self = this;\n\n            self.app = app;\n\n            self.id = -1;\n\n            self.socket = null;\n            self.messages = null;\n            self.renderer = null;\n            self.updater = null;\n            self.storage = null;\n            self.entities = null;\n            self.input = null;\n            self.map = null;\n            self.playerHandler = null;\n            self.pathfinder = null;\n            self.zoning = null;\n            self.info = null;\n            self.interface = null;\n            self.audio = null;\n\n            self.player = null;\n\n            self.stopped = false;\n            self.started = false;\n            self.ready = false;\n            self.loaded = false;\n\n            self.time = new Date();\n\n            self.pvp = false;\n            self.population = -1;\n\n            self.lastTime = new Date().getTime();\n\n            self.loadRenderer();\n            self.loadControllers();\n        },\n\n        start: function() {\n            var self = this;\n\n            if (self.started) return;\n\n            self.app.fadeMenu();\n            self.tick();\n\n            self.started = true;\n        },\n\n        stop: function() {\n            var self = this;\n\n            self.stopped = false;\n            self.started = false;\n            self.ready = false;\n        },\n\n        tick: function() {\n            var self = this;\n\n            if (self.ready) {\n                self.time = new Date().getTime();\n\n                self.renderer.render();\n                self.updater.update();\n\n                if (!self.stopped) requestAnimationFrame(self.tick.bind(self));\n            }\n        },\n\n        unload: function() {\n            var self = this;\n\n            self.socket = null;\n            self.messages = null;\n            self.renderer = null;\n            self.updater = null;\n            self.storage = null;\n            self.entities = null;\n            self.input = null;\n            self.map = null;\n            self.playerHandler = null;\n            self.player = null;\n            self.pathfinder = null;\n            self.zoning = null;\n            self.info = null;\n            self.interface = null;\n\n            self.audio.stop();\n            self.audio = null;\n        },\n\n        loadRenderer: function() {\n            var self = this,\n                background = document.getElementById('background'),\n                foreground = document.getElementById('foreground'),\n                overlay = document.getElementById('overlay'),\n                textCanvas = document.getElementById('textCanvas'),\n                entities = document.getElementById('entities'),\n                cursor = document.getElementById('cursor');\n\n            self.app.sendStatus('Initializing render engine');\n\n            self.setRenderer(\n                new Renderer(\n                    background,\n                    entities,\n                    foreground,\n                    overlay,\n                    textCanvas,\n                    cursor,\n                    self\n                )\n            );\n        },\n\n        loadControllers: function() {\n            var self = this,\n                hasWorker = self.app.hasWorker();\n\n            self.app.sendStatus('Loading local storage');\n\n            self.setStorage(new LocalStorage(self.app));\n\n            self.app.sendStatus(\n                hasWorker ? 'Loading maps - asynchronous' : null\n            );\n\n            if (hasWorker) self.loadMap();\n\n            self.app.sendStatus('Initializing network socket');\n\n            self.setSocket(new Socket(self));\n            self.setMessages(self.socket.messages);\n            self.setInput(new Input(self));\n\n            self.app.sendStatus('Loading controllers');\n\n            self.setEntityController(new Entities(self));\n\n            self.setInfo(new Info(self));\n\n            self.setBubble(new Bubble(self));\n\n            self.setPointer(new Pointer(self));\n\n            self.setAudio(new Audio(self));\n\n            self.setInterface(new Interface(self));\n\n            self.loadStorage();\n\n            if (!hasWorker) {\n                self.app.sendStatus(null);\n                self.loaded = true;\n            }\n        },\n\n        loadMap: function() {\n            var self = this;\n\n            self.map = new Map(self);\n            self.overlays = new Overlay(self);\n\n            self.map.onReady(function() {\n                if (!self.isDebug()) self.map.loadRegionData();\n\n                self.app.sendStatus('Loading the pathfinder');\n\n                self.setPathfinder(\n                    new Pathfinder(self.map.width, self.map.height)\n                );\n\n                self.renderer.setMap(self.map);\n                self.renderer.loadCamera();\n\n                self.app.sendStatus('Loading updater');\n\n                self.setUpdater(new Updater(self));\n\n                self.entities.load();\n\n                self.renderer.setEntities(self.entities);\n\n                self.app.sendStatus(null);\n\n                self.loaded = true;\n            });\n        },\n\n        connect: function() {\n            var self = this;\n\n            self.app.cleanErrors();\n\n            setTimeout(function() {\n                self.socket.connect();\n            }, 1000);\n\n            self.connectionHandler = new Connection(self);\n        },\n\n        postLoad: function() {\n            var self = this;\n\n            /**\n             * Call this after the player has been welcomed\n             * by the server and the client received the connection.\n             */\n\n            self.renderer.loadStaticSprites();\n\n            self.getCamera().setPlayer(self.player);\n\n            self.entities.addEntity(self.player);\n\n            var defaultSprite = self.getSprite(self.player.getSpriteName());\n\n            self.player.setSprite(defaultSprite);\n            self.player.setOrientation(self.storage.data.player.orientation);\n            self.player.idle();\n\n            self.socket.send(Packets.Ready, [\n                true,\n                self.map.preloadedData,\n                Detect.getUserAgent()\n            ]);\n\n            self.playerHandler = new PlayerHandler(self, self.player);\n\n            self.renderer.updateAnimatedTiles();\n\n            self.zoning = new Zoning(self);\n\n            self.updater.setSprites(self.entities.sprites);\n\n            self.renderer.verifyCentration();\n\n            if (self.storage.data.new) {\n                self.storage.data.new = false;\n                self.storage.save();\n            }\n        },\n\n        loadStorage: function() {\n            var self = this,\n                loginName = $('#loginNameInput'),\n                loginPassword = $('#loginPasswordInput');\n\n            loginName.prop('readonly', false);\n            loginPassword.prop('readonly', false);\n\n            if (!self.hasRemember()) return;\n\n            if (self.getStorageUsername() !== '')\n                loginName.val(self.getStorageUsername());\n\n            if (self.getStoragePassword() !== '')\n                loginPassword.val(self.getStoragePassword());\n\n            $('#rememberMe').addClass('active');\n        },\n\n        findPath: function(character, x, y, ignores) {\n            var self = this,\n                grid = self.entities.grids.pathingGrid,\n                path = [];\n\n            if (self.map.isColliding(x, y) || !self.pathfinder || !character)\n                return path;\n\n            if (ignores) {\n                _.each(ignores, function(entity) {\n                    self.pathfinder.ignoreEntity(entity);\n                });\n            }\n\n            path = self.pathfinder.find(grid, character, x, y, false);\n\n            if (ignores) self.pathfinder.clearIgnores();\n\n            return path;\n        },\n\n        handleInput: function(inputType, data) {\n            this.input.handle(inputType, data);\n        },\n\n        handleDisconnection: function(noError) {\n            var self = this;\n\n            /**\n             * This function is responsible for handling sudden\n             * disconnects of a player whilst in the game, not\n             * menu-based errors.\n             */\n\n            if (!self.started) return;\n\n            self.stop();\n            self.renderer.stop();\n\n            self.unload();\n\n            self.app.showMenu();\n\n            if (noError) {\n                self.app.sendError(\n                    null,\n                    'You have been disconnected from the server'\n                );\n                self.app.statusMessage = null;\n            }\n\n            self.loadRenderer();\n            self.loadControllers();\n\n            self.app.toggleLogin(false);\n            self.app.updateLoader('');\n        },\n\n        respawn: function() {\n            var self = this;\n\n            self.audio.play(Modules.AudioTypes.SFX, 'revive');\n            self.app.body.removeClass('death');\n\n            self.socket.send(Packets.Respawn, [self.player.id]);\n        },\n\n        tradeWith: function(player) {\n            var self = this;\n\n            if (!player || player.id === self.player.id) return;\n\n            self.socket.send(Packets.Trade, [\n                Packets.TradeOpcode.Request,\n                player.id\n            ]);\n        },\n\n        resize: function() {\n            var self = this;\n\n            self.renderer.resize();\n\n            if (self.pointer) self.pointer.resize();\n        },\n\n        createPlayer: function() {\n            this.player = new Player();\n        },\n\n        isDebug: function() {\n            return this.app.config.debug;\n        },\n\n        getScaleFactor: function() {\n            return this.app.getScaleFactor();\n        },\n\n        getStorage: function() {\n            return this.storage;\n        },\n\n        getCamera: function() {\n            return this.renderer.camera;\n        },\n\n        getSprite: function(spriteName) {\n            return this.entities.getSprite(spriteName);\n        },\n\n        getEntityAt: function(x, y, ignoreSelf) {\n            var self = this,\n                entities = self.entities.grids.renderingGrid[y][x];\n\n            if (_.size(entities) > 0)\n                return entities[_.keys(entities)[ignoreSelf ? 1 : 0]];\n\n            var items = self.entities.grids.itemGrid[y][x];\n\n            if (_.size(items) > 0) {\n                _.each(items, function(item) {\n                    if (item.stackable) return item;\n                });\n\n                return items[_.keys(items)[0]];\n            }\n        },\n\n        getStorageUsername: function() {\n            return this.storage.data.player.username;\n        },\n\n        getStoragePassword: function() {\n            return this.storage.data.player.password;\n        },\n\n        hasRemember: function() {\n            return this.storage.data.player.rememberMe;\n        },\n\n        setRenderer: function(renderer) {\n            if (!this.renderer) this.renderer = renderer;\n        },\n\n        setStorage: function(storage) {\n            if (!this.storage) this.storage = storage;\n        },\n\n        setSocket: function(socket) {\n            if (!this.socket) this.socket = socket;\n        },\n\n        setMessages: function(messages) {\n            if (!this.messages) this.messages = messages;\n        },\n\n        setUpdater: function(updater) {\n            if (!this.updater) this.updater = updater;\n        },\n\n        setEntityController: function(entities) {\n            if (!this.entities) this.entities = entities;\n        },\n\n        setInput: function(input) {\n            var self = this;\n\n            if (!self.input) {\n                self.input = input;\n                self.renderer.setInput(self.input);\n            }\n        },\n\n        setPathfinder: function(pathfinder) {\n            if (!this.pathfinder) this.pathfinder = pathfinder;\n        },\n\n        setInfo: function(info) {\n            if (!this.info) this.info = info;\n        },\n\n        setBubble: function(bubble) {\n            if (!this.bubble) this.bubble = bubble;\n        },\n\n        setPointer: function(pointer) {\n            if (!this.pointer) this.pointer = pointer;\n        },\n\n        setInterface: function(intrface) {\n            if (!this.interface) this.interface = intrface;\n        },\n\n        setAudio: function(audio) {\n            if (!this.audio) this.audio = audio;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/game.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/abilities.js",
    "content": "define(['jquery'], function($) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n\n            self.shortcuts = $('#abilityShortcut');\n        },\n\n        getList: function() {\n            return this.shortcuts.find('ul');\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/abilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/actions.js",
    "content": "/* global _, log */\n\ndefine(['jquery'], function($) {\n    return Class.extend({\n        init: function(intrfce) {\n            var self = this;\n\n            self.interface = intrfce;\n\n            self.body = $('#actionContainer');\n            self.drop = $('#dropDialog');\n            self.dropInput = $('#dropCount');\n\n            self.pBody = $('#pActions');\n            self.follow = $('#follow');\n            self.trade = $('#tradeAction');\n\n            self.activeClass = null;\n\n            self.miscButton = null;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this,\n                dropAccept = $('#dropAccept'),\n                dropCancel = $('#dropCancel');\n\n            dropAccept.click(function(event) {\n                if (self.activeClass === 'inventory')\n                    self.interface.inventory.clickAction(event);\n            });\n\n            dropCancel.click(function(event) {\n                if (self.activeClass === 'inventory')\n                    self.interface.inventory.clickAction(event);\n            });\n        },\n\n        loadDefaults: function(activeClass) {\n            var self = this;\n\n            self.activeClass = activeClass;\n\n            switch (self.activeClass) {\n                case 'inventory':\n                    var dropButton = $(\n                        '<div id=\"drop\" class=\"actionButton\">Drop</div>'\n                    );\n\n                    self.add(dropButton);\n\n                    break;\n\n                case 'profile':\n                    break;\n            }\n        },\n\n        add: function(button, misc) {\n            var self = this;\n\n            self.body.find('ul').prepend($('<li></li>').append(button));\n\n            button.click(function(event) {\n                if (self.activeClass === 'inventory')\n                    self.interface.inventory.clickAction(event);\n            });\n\n            if (misc) self.miscButton = button;\n        },\n\n        removeMisc: function() {\n            var self = this;\n\n            self.miscButton.remove();\n            self.miscButton = null;\n        },\n\n        reset: function() {\n            var self = this,\n                buttons = self.getButtons();\n\n            for (var i = 0; i < buttons.length; i++) $(buttons[i]).remove();\n        },\n\n        show: function() {\n            this.body.fadeIn('fast');\n        },\n\n        showPlayerActions: function(player, mouseX, mouseY) {\n            var self = this;\n\n            if (!player) return;\n\n            self.pBody.fadeIn('fast');\n            self.pBody.css({\n                left: mouseX - self.pBody.width() / 2 + 'px',\n                top: mouseY + self.pBody.height() / 2 + 'px'\n            });\n\n            self.follow.click(function() {\n                self.getPlayer().follow(player);\n\n                self.hidePlayerActions();\n            });\n\n            self.trade.click(function() {\n                self.getGame().tradeWith(player);\n\n                self.hidePlayerActions();\n            });\n        },\n\n        hide: function() {\n            this.body.fadeOut('slow');\n        },\n\n        hidePlayerActions: function() {\n            this.pBody.fadeOut('fast');\n        },\n\n        displayDrop: function(activeClass) {\n            var self = this;\n\n            self.activeClass = activeClass;\n\n            self.drop.fadeIn('fast');\n\n            self.dropInput.focus();\n            self.dropInput.select();\n        },\n\n        hideDrop: function() {\n            var self = this;\n\n            self.drop.fadeOut('slow');\n\n            self.dropInput.blur();\n            self.dropInput.val('');\n        },\n\n        getButtons: function() {\n            return this.body.find('ul').find('li');\n        },\n\n        getGame: function() {\n            return this.interface.game;\n        },\n\n        getPlayer: function() {\n            return this.interface.game.player;\n        },\n\n        isVisible: function() {\n            return this.body.css('display') === 'block';\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/actions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/bank.js",
    "content": "define(['jquery', './container/container'], function($, Container) {\n    return Class.extend({\n        init: function(game, inventoryContainer, size) {\n            var self = this;\n\n            self.game = game;\n            self.inventoryContainer = inventoryContainer;\n\n            self.player = game.player;\n\n            self.body = $('#bank');\n            self.bankSlots = $('#bankSlots');\n            self.bankInventorySlots = $('#bankInventorySlots');\n\n            self.container = new Container(size);\n            self.close = $('#closeBank');\n\n            self.close.css('left', '97%');\n            self.close.click(function() {\n                self.hide();\n            });\n        },\n\n        load: function(data) {\n            var self = this,\n                bankList = self.bankSlots.find('ul'),\n                inventoryList = self.bankInventorySlots.find('ul');\n\n            for (var i = 0; i < data.length; i++) {\n                var item = data[i],\n                    slot = $(\n                        '<div id=\"bankSlot' + i + '\" class=\"bankSlot\"></div>'\n                    );\n\n                self.container.setSlot(i, item);\n\n                slot.css({\n                    'margin-right': 2 * self.getScale() + 'px',\n                    'margin-bottom': 4 * self.getScale() + 'px'\n                });\n\n                var image = $(\n                    '<div id=\"bankImage' + i + '\" class=\"bankImage\"></div>'\n                );\n\n                if (item.string) {\n                    image.css(\n                        'background-image',\n                        self.container.getImageFormat(\n                            self.getScale(),\n                            item.string\n                        )\n                    );\n                }\n\n                slot.click(function(event) {\n                    self.click('bank', event);\n                });\n\n                if (Detect.isMobile()) image.css('background-size', '600%');\n\n                var count = item.count;\n\n                if (count > 999999) {\n                    count =\n                        count\n                            .toString()\n                            .substring(0, count.toString().length - 6) + 'M';\n                } else if (count > 9999)\n                    count = count.toString().substring(0, 2) + 'K';\n                else if (count === 1) count = '';\n\n                slot.append(image);\n                slot.append(\n                    '<div id=\"bankItemCount' +\n                        i +\n                        '\" class=\"itemCount\">' +\n                        count +\n                        '</div>'\n                );\n\n                slot.find('#bankItemCount' + i).css({\n                    'font-size': 4 * self.getScale() + 'px',\n                    'margin-top': '0',\n                    'margin-left': '0'\n                });\n\n                var bankListItem = $('<li></li>');\n\n                bankListItem.append(slot);\n\n                bankList.append(bankListItem);\n            }\n\n            for (var j = 0; j < self.inventoryContainer.size; j++) {\n                var iItem = self.inventoryContainer.slots[j],\n                    iSlot = $(\n                        '<div id=\"bankInventorySlot' +\n                            j +\n                            '\" class=\"bankSlot\"></div>'\n                    );\n\n                iSlot.css({\n                    'margin-right': 3 * self.getScale() + 'px',\n                    'margin-bottom': 6 * self.getScale() + 'px'\n                });\n\n                var slotImage = $(\n                    '<div id=\"inventoryImage' + j + '\" class=\"bankImage\"></div>'\n                );\n\n                if (iItem.string) {\n                    slotImage.css(\n                        'background-image',\n                        self.container.getImageFormat(\n                            self.getScale(),\n                            iItem.string\n                        )\n                    );\n                }\n\n                iSlot.click(function(event) {\n                    self.click('inventory', event);\n                });\n\n                if (Detect.isMobile()) slotImage.css('background-size', '600%');\n\n                var count = iItem.count;\n\n                if (count > 999999) {\n                    count =\n                        count\n                            .toString()\n                            .substring(0, count.toString().length - 6) + 'M';\n                } else if (count > 9999)\n                    count = count.toString().substring(0, 2) + 'K';\n                else if (count === 1) count = '';\n\n                iSlot.append(slotImage);\n                iSlot.append(\n                    '<div id=\"inventoryItemCount' +\n                        j +\n                        '\" class=\"itemCount\">' +\n                        count +\n                        '</div>'\n                );\n\n                iSlot.find('#inventoryItemCount' + j).css({\n                    'margin-top': '0',\n                    'margin-left': '0'\n                });\n\n                var inventoryListItem = $('<li></li>');\n\n                inventoryListItem.append(iSlot);\n\n                inventoryList.append(inventoryListItem);\n            }\n        },\n\n        resize: function() {\n            var self = this,\n                bankList = self.getBankList(),\n                inventoryList = self.getInventoryList();\n\n            for (var i = 0; i < bankList.length; i++) {\n                var bankSlot = $(bankList[i]).find('#bankSlot' + i),\n                    image = bankSlot.find('#bankImage' + i),\n                    slot = self.container.slots[i];\n\n                bankSlot.css({\n                    'margin-right': 2 * self.getScale() + 'px',\n                    'margin-bottom': 4 * self.getScale() + 'px'\n                });\n\n                bankSlot.find('#bankItemCount' + i).css({\n                    'font-size': 4 * self.getScale() + 'px',\n                    'margin-top': '0',\n                    'margin-left': '0'\n                });\n\n                if (Detect.isMobile()) image.css('background-size', '600%');\n                else {\n                    image.css(\n                        'background-image',\n                        self.container.getImageFormat(\n                            self.getScale(),\n                            slot.string\n                        )\n                    );\n                }\n            }\n\n            for (var j = 0; j < inventoryList.length; j++) {\n                var inventorySlot = $(inventoryList[j]).find(\n                        '#bankInventorySlot' + j\n                    ),\n                    iImage = inventorySlot.find('#inventoryImage' + j),\n                    iSlot = self.inventoryContainer.slots[j];\n\n                inventorySlot.css({\n                    'margin-right': 3 * self.getScale() + 'px',\n                    'margin-bottom': 6 * self.getScale() + 'px'\n                });\n\n                if (Detect.isMobile()) iImage.css('background-size', '600%');\n                else {\n                    iImage.css(\n                        'background-image',\n                        self.container.getImageFormat(\n                            self.getScale(),\n                            iSlot.string\n                        )\n                    );\n                }\n            }\n        },\n\n        click: function(type, event) {\n            var self = this,\n                isBank = type === 'bank',\n                index = event.currentTarget.id.substring(isBank ? 8 : 17);\n\n            self.game.socket.send(Packets.Bank, [\n                Packets.BankOpcode.Select,\n                type,\n                index\n            ]);\n        },\n\n        add: function(info) {\n            var self = this,\n                item = $(self.getBankList()[info.index]),\n                slot = self.container.slots[info.index];\n\n            if (!item || !slot) return;\n\n            if (slot.isEmpty()) {\n                slot.load(\n                    info.string,\n                    info.count,\n                    info.ability,\n                    info.abilityLevel\n                );\n            }\n\n            slot.setCount(info.count);\n\n            var bankSlot = item.find('#bankSlot' + info.index),\n                cssSlot = bankSlot.find('#bankImage' + info.index),\n                count = bankSlot.find('#bankItemCount' + info.index);\n\n            cssSlot.css(\n                'background-image',\n                self.container.getImageFormat(self.getScale(), info.string)\n            );\n\n            if (Detect.isMobile()) cssSlot.css('background-size', '600%');\n\n            if (slot.count > 1) count.text(slot.count);\n        },\n\n        remove: function(info) {\n            var self = this,\n                item = $(self.getBankList()[info.index]),\n                slot = self.container.slots[info.index];\n\n            if (!item || !slot) return;\n\n            slot.count -= info.count;\n\n            if (slot.count < 1) {\n                var divItem = item.find('#bankSlot' + info.index);\n\n                divItem\n                    .find('#bankImage' + info.index)\n                    .css('background-image', '');\n                divItem.find('#bankItemCount' + info.index).text('');\n\n                slot.empty();\n            }\n        },\n\n        addInventory: function(info) {\n            var self = this,\n                item = $(self.getInventoryList()[info.index]);\n\n            if (!item) return;\n\n            var slot = item.find('#bankInventorySlot' + info.index),\n                image = slot.find('#inventoryImage' + info.index);\n\n            image.css(\n                'background-image',\n                self.container.getImageFormat(self.getScale(), info.string)\n            );\n\n            if (Detect.isMobile()) image.css('background-size', '600%');\n\n            if (info.count > 1)\n                slot.find('#inventoryItemCount' + info.index).text(info.count);\n        },\n\n        removeInventory: function(info) {\n            var self = this,\n                item = $(self.getInventoryList()[info.index]);\n\n            if (!item) return;\n\n            var itemContainer = self.inventoryContainer.slots[info.index],\n                slot = item.find('#bankInventorySlot' + info.index),\n                diff = itemContainer.count - info.count;\n\n            if (diff > 1)\n                slot.find('#inventoryItemCount' + info.index).text(diff);\n            else if (diff === 1)\n                slot.find('#inventoryItemCount' + info.index).text('');\n            else {\n                slot.find('#inventoryImage' + info.index).css(\n                    'background-image',\n                    ''\n                );\n                slot.find('#inventoryItemCount' + info.index).text('');\n            }\n        },\n\n        display: function() {\n            this.body.fadeIn('slow');\n        },\n\n        hide: function() {\n            this.body.fadeOut('fast');\n        },\n\n        isVisible: function() {\n            return this.body.css('display') === 'block';\n        },\n\n        getScale: function() {\n            return this.game.app.getUIScale();\n        },\n\n        getBankList: function() {\n            return this.bankSlots.find('ul').find('li');\n        },\n\n        getInventoryList: function() {\n            return this.bankInventorySlots.find('ul').find('li');\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/bank.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/container/container.js",
    "content": "define(['./slot'], function(Slot) {\n    return Class.extend({\n        init: function(size) {\n            var self = this;\n\n            self.size = size;\n\n            self.slots = [];\n\n            for (var i = 0; i < self.size; i++) self.slots.push(new Slot(i));\n        },\n\n        setSlot: function(index, info) {\n            var self = this;\n\n            /**\n             * We receive information from the server here,\n             * so we mustn't do any calculations. Instead,\n             * we just modify the container directly.\n             */\n\n            self.slots[index].load(\n                info.string,\n                info.count,\n                info.ability,\n                info.abilityLevel,\n                info.edible,\n                info.equippable\n            );\n        },\n\n        getEmptySlot: function() {\n            var self = this;\n\n            for (var i = 0; i < self.slots; i++)\n                if (!self.slots[i].string) return i;\n\n            return -1;\n        },\n\n        getImageFormat: function(scale, name) {\n            if (scale === 1) scale = 2;\n\n            return 'url(\"img/' + scale + '/item-' + name + '.png\")';\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/container/container.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/container/slot.js",
    "content": "define(function() {\n    return Class.extend({\n        init: function(index) {\n            var self = this;\n\n            self.index = index;\n\n            self.string = null;\n            self.count = -1;\n            self.ability = -1;\n            self.abilityLevel = -1;\n\n            self.edible = false;\n            self.equippable = false;\n        },\n\n        load: function(\n            string,\n            count,\n            ability,\n            abilityLevel,\n            edible,\n            equippable\n        ) {\n            var self = this;\n\n            self.string = string;\n            self.count = count;\n            self.ability = ability;\n            self.abilityLevel = abilityLevel;\n\n            self.edible = edible;\n            self.equippable = equippable;\n        },\n\n        empty: function() {\n            var self = this;\n\n            self.string = null;\n            self.count = -1;\n            self.ability = -1;\n            self.abilityLevel = -1;\n\n            self.edible = false;\n            self.equippable = false;\n        },\n\n        isEmpty: function() {\n            return !this.string || this.count < 1;\n        },\n\n        setCount: function(count) {\n            this.count = count;\n        },\n\n        setString: function(string) {\n            this.string = string;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/container/slot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/enchant.js",
    "content": "define(['jquery'], function($) {\n    return Class.extend({\n        init: function(game, intrface) {\n            var self = this;\n\n            self.game = game;\n            self.interface = intrface;\n\n            self.body = $('#enchant');\n            self.container = $('#enchantContainer');\n            self.enchantSlots = $('#enchantInventorySlots');\n\n            self.selectedItem = $('#enchantSelectedItem');\n            self.selectedShards = $('#enchantShards');\n            self.confirm = $('#confirmEnchant');\n            self.shardsCount = $('#shardsCount');\n\n            self.confirm.css({\n                left: '70%',\n                top: '80%'\n            });\n\n            $('#closeEnchant').click(function() {\n                self.hide();\n            });\n\n            self.confirm.click(function() {\n                self.enchant();\n            });\n        },\n\n        resize: function() {\n            var self = this;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this,\n                list = self.getSlots(),\n                inventoryList = self.interface.bank.getInventoryList();\n\n            list.empty();\n\n            for (var i = 0; i < self.getInventorySize(); i++) {\n                var item = $(inventoryList[i]).clone(),\n                    slot = item.find('#bankInventorySlot' + i);\n\n                slot.click(function(event) {\n                    self.select(event);\n                });\n\n                list.append(item);\n            }\n\n            self.selectedItem.click(function() {\n                self.remove('item');\n            });\n\n            self.selectedShards.click(function() {\n                self.remove('shards');\n            });\n        },\n\n        add: function(type, index) {\n            var self = this,\n                image = self.getSlot(index).find('#inventoryImage' + index);\n\n            switch (type) {\n                case 'item':\n                    self.selectedItem.css(\n                        'background-image',\n                        image.css('background-image')\n                    );\n\n                    if (Detect.isMobile())\n                        self.selectedItem.css('background-size', '600%');\n\n                    break;\n\n                case 'shards':\n                    self.selectedShards.css(\n                        'background-image',\n                        image.css('background-image')\n                    );\n\n                    if (Detect.isMobile())\n                        self.selectedShards.css('background-size', '600%');\n\n                    var count = self.getItemSlot(index).count;\n\n                    if (count > 1) self.shardsCount.text(count);\n\n                    break;\n            }\n\n            image.css('background-image', '');\n\n            self.getSlot(index)\n                .find('#inventoryItemCount' + index)\n                .text('');\n        },\n\n        moveBack: function(type, index) {\n            var self = this,\n                image = self.getSlot(index).find('#inventoryImage' + index),\n                itemCount = self\n                    .getSlot(index)\n                    .find('#inventoryItemCount' + index),\n                count = self.getItemSlot(index).count;\n\n            switch (type) {\n                case 'item':\n                    image.css(\n                        'background-image',\n                        self.selectedItem.css('background-image')\n                    );\n\n                    if (count > 1) itemCount.text(count);\n\n                    self.selectedItem.css('background-image', '');\n\n                    break;\n\n                case 'shards':\n                    image.css(\n                        'background-image',\n                        self.selectedShards.css('background-image')\n                    );\n\n                    if (count > 1) itemCount.text(count);\n\n                    self.selectedShards.css('background-image', '');\n\n                    self.shardsCount.text('');\n\n                    break;\n            }\n        },\n\n        enchant: function() {\n            this.game.socket.send(Packets.Enchant, [\n                Packets.EnchantOpcode.Enchant\n            ]);\n        },\n\n        select: function(event) {\n            this.game.socket.send(Packets.Enchant, [\n                Packets.EnchantOpcode.Select,\n                event.currentTarget.id.substring(17)\n            ]);\n        },\n\n        remove: function(type) {\n            this.game.socket.send(Packets.Enchant, [\n                Packets.EnchantOpcode.Remove,\n                type\n            ]);\n        },\n\n        getInventorySize: function() {\n            return this.interface.inventory.getSize();\n        },\n\n        getItemSlot: function(index) {\n            return this.interface.inventory.container.slots[index];\n        },\n\n        display: function() {\n            var self = this;\n\n            self.body.fadeIn('fast');\n            self.load();\n        },\n\n        hide: function() {\n            var self = this;\n\n            self.selectedItem.css('background-image', '');\n            self.selectedShards.css('background-image', '');\n\n            self.body.fadeOut('fast');\n        },\n\n        hasImage: function(image) {\n            return image.css('background-image') !== 'none';\n        },\n\n        getSlot: function(index) {\n            return $(this.getSlots().find('li')[index]);\n        },\n\n        getSlots: function() {\n            return this.enchantSlots.find('ul');\n        },\n\n        isVisible: function() {\n            return this.body.css('display') === 'block';\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/enchant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/header.js",
    "content": "define(['jquery', './container/container'], function($, Container) {\n    return Class.extend({\n        init: function(game, intrface) {\n            var self = this;\n\n            self.game = game;\n            self.player = game.player;\n\n            self.health = $('#health');\n            self.healthBar = $('#healthBar');\n            self.healthBarText = $('#healthBarText');\n\n            self.exp = $('#exp');\n            self.expBar = $('#expBar');\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.player.onHitPoints(function() {\n                self.calculateHealthBar();\n            });\n\n            self.player.onMaxHitPoints(function() {\n                self.calculateHealthBar();\n            });\n\n            self.player.onExperience(function() {\n                self.calculateExpBar();\n            });\n        },\n\n        calculateHealthBar: function() {\n            var self = this,\n                scale = self.getScale(),\n                width = self.healthBar.width();\n\n            if (scale < 2) scale = 2;\n\n            // 11 is due to the offset of the #health in the #healthBar\n            var diff = Math.floor(\n                    width * (self.player.hitPoints / self.player.maxHitPoints) -\n                        11 * scale\n                ),\n                prevWidth = self.health.width();\n\n            if (prevWidth > diff) {\n                self.health.addClass('white');\n\n                setTimeout(function() {\n                    self.health.removeClass('white');\n                }, 500);\n            } else if (diff - 1 > prevWidth) {\n                self.health.addClass('green');\n\n                setTimeout(function() {\n                    self.health.removeClass('green');\n                }, 500);\n            }\n\n            self.health.css('width', diff + 'px');\n            self.healthBarText.text(\n                self.player.hitPoints + '/' + self.player.maxHitPoints\n            );\n        },\n\n        calculateExpBar: function() {\n            var self = this,\n                scale = self.getScale(),\n                width = self.expBar.width();\n\n            if (scale < 2) scale = 2;\n\n            var experience =\n                    self.player.experience - self.player.prevExperience,\n                nextExperience =\n                    self.player.nextExperience - self.player.prevExperience;\n\n            var diff = Math.floor(width * (experience / nextExperience));\n\n            self.exp.css('width', diff + 'px');\n        },\n\n        resize: function() {\n            var self = this;\n\n            self.calculateHealthBar();\n            self.calculateExpBar();\n        },\n\n        getScale: function() {\n            return this.game.app.getUIScale();\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/inventory.js",
    "content": "/* global log, Detect, Packets */\n\ndefine(['jquery', './container/container'], function($, Container) {\n    return Class.extend({\n        init: function(game, size) {\n            var self = this;\n\n            self.game = game;\n            self.actions = game.interface.actions;\n\n            self.body = $('#inventory');\n            self.button = $('#inventoryButton');\n            self.action = $('#actionContainer');\n\n            self.container = new Container(size);\n\n            self.activeClass = 'inventory';\n\n            self.selectedSlot = null;\n            self.selectedItem = null;\n        },\n\n        load: function(data) {\n            var self = this,\n                list = $('#inventory').find('ul');\n\n            for (var i = 0; i < data.length; i++) {\n                var item = data[i];\n\n                self.container.setSlot(i, item);\n\n                var itemSlot = $(\n                    '<div id=\"slot' + i + '\" class=\"itemSlot\"></div>'\n                );\n\n                if (item.string !== 'null') {\n                    itemSlot.css(\n                        'background-image',\n                        self.container.getImageFormat(\n                            self.getScale(),\n                            item.string\n                        )\n                    );\n                }\n\n                itemSlot.css('background-size', '600%');\n\n                itemSlot.dblclick(function(event) {\n                    self.clickDouble(event);\n                });\n\n                itemSlot.click(function(event) {\n                    self.click(event);\n                });\n\n                var itemSlotList = $('<li></li>'),\n                    count = item.count;\n\n                if (count > 999999) {\n                    count =\n                        count\n                            .toString()\n                            .substring(0, count.toString().length - 6) + 'M';\n                } else if (count > 9999)\n                    count = count.toString().substring(0, 2) + 'K';\n                else if (count === 1) count = '';\n\n                itemSlotList.append(itemSlot);\n                itemSlotList.append(\n                    '<div id=\"itemCount' +\n                        i +\n                        '\" class=\"inventoryItemCount\">' +\n                        count +\n                        '</div>'\n                );\n\n                list.append(itemSlotList);\n            }\n\n            self.button.click(function(event) {\n                self.game.interface.hideAll();\n\n                if (self.isVisible()) self.hide();\n                else self.display();\n\n                self.game.socket.send(Packets.Click, [\n                    'inventory',\n                    self.button.hasClass('active')\n                ]);\n            });\n        },\n\n        click: function(event) {\n            var self = this,\n                index = event.currentTarget.id.substring(4),\n                slot = self.container.slots[index],\n                item = $(self.getList()[index]);\n\n            self.clearSelection();\n\n            if (\n                slot.string === null ||\n                slot.count === -1 ||\n                slot.string === 'null'\n            )\n                return;\n\n            self.actions.reset();\n            self.actions.loadDefaults('inventory');\n\n            if (slot.edible) {\n                self.actions.add(\n                    $('<div id=\"eat\" class=\"actionButton\">Eat</div>')\n                );\n            } else if (slot.equippable) {\n                self.actions.add(\n                    $('<div id=\"wield\" class=\"actionButton\">Wield</div>')\n                );\n            } else if (slot.count > 999999) {\n                self.actions.add(\n                    $('<div id=\"itemInfo\" class=\"actionButton\">Info</div>')\n                );\n            }\n\n            if (!self.actions.isVisible()) self.actions.show();\n\n            var sSlot = item.find('#slot' + index);\n\n            sSlot.addClass('select');\n\n            self.selectedSlot = sSlot;\n            self.selectedItem = slot;\n\n            self.actions.hideDrop();\n        },\n\n        clickDouble: function(event) {\n            var self = this,\n                index = event.currentTarget.id.substring(4),\n                slot = self.container.slots[index];\n\n            if (!slot.edible && !slot.equippable) return;\n\n            var item = $(self.getList()[index]),\n                sSlot = item.find('#slot' + index);\n\n            self.clearSelection();\n\n            self.selectedSlot = sSlot;\n            self.selectedItem = slot;\n\n            self.clickAction(slot.edible ? 'eat' : 'wield');\n\n            self.actions.hideDrop();\n        },\n\n        clickAction: function(event, dAction) {\n            var self = this,\n                action = event.currentTarget ? event.currentTarget.id : event;\n\n            log.info(action);\n\n            if (!self.selectedSlot || !self.selectedItem) return;\n\n            switch (action) {\n                case 'eat':\n                case 'wield':\n                    self.game.socket.send(Packets.Inventory, [\n                        Packets.InventoryOpcode.Select,\n                        self.selectedItem.index\n                    ]);\n                    self.clearSelection();\n\n                    break;\n\n                case 'drop':\n                    var item = self.selectedItem;\n\n                    if (item.count > 1) {\n                        if (Detect.isMobile()) self.hide(true);\n\n                        self.actions.displayDrop('inventory');\n                    } else {\n                        self.game.socket.send(Packets.Inventory, [\n                            Packets.InventoryOpcode.Remove,\n                            item\n                        ]);\n                        self.clearSelection();\n                    }\n\n                    break;\n\n                case 'dropAccept':\n                    var count = $('#dropCount').val();\n\n                    if (isNaN(count) || count < 1) return;\n\n                    self.game.socket.send(Packets.Inventory, [\n                        Packets.InventoryOpcode.Remove,\n                        self.selectedItem,\n                        count\n                    ]);\n                    self.actions.hideDrop();\n                    self.clearSelection();\n\n                    break;\n\n                case 'dropCancel':\n                    self.actions.hideDrop();\n                    self.clearSelection();\n\n                    break;\n\n                case 'itemInfo':\n                    self.game.input.chatHandler.add(\n                        'WORLD',\n                        'You have ' + self.selectedItem.count + ' coins.'\n                    );\n\n                    break;\n            }\n\n            self.actions.hide();\n        },\n\n        add: function(info) {\n            var self = this,\n                item = $(self.getList()[info.index]),\n                slot = self.container.slots[info.index];\n\n            if (!item || !slot) return;\n\n            // Have the server forcefully load data into the slot.\n            slot.load(\n                info.string,\n                info.count,\n                info.ability,\n                info.abilityLevel,\n                info.edible,\n                info.equippable\n            );\n\n            var cssSlot = item.find('#slot' + info.index);\n\n            cssSlot.css(\n                'background-image',\n                self.container.getImageFormat(self.getScale(), slot.string)\n            );\n\n            cssSlot.css('background-size', '600%');\n\n            var count = slot.count;\n\n            if (count > 999999) {\n                count =\n                    count.toString().substring(0, count.toString().length - 6) +\n                    'M';\n            } else if (count > 9999)\n                count = count.toString().substring(0, 2) + 'K';\n            else if (count === 1) count = '';\n\n            item.find('#itemCount' + info.index).text(count);\n        },\n\n        remove: function(info) {\n            var self = this,\n                item = $(self.getList()[info.index]),\n                slot = self.container.slots[info.index];\n\n            if (!item || !slot) return;\n\n            slot.count -= info.count;\n\n            item.find('#itemCount' + info.index).text(slot.count);\n\n            if (slot.count < 1) {\n                item.find('#slot' + info.index).css('background-image', '');\n                item.find('#itemCount' + info.index).text('');\n                slot.empty();\n            }\n        },\n\n        resize: function() {\n            var self = this,\n                list = self.getList();\n\n            for (var i = 0; i < list.length; i++) {\n                var item = $(list[i]).find('#slot' + i),\n                    slot = self.container.slots[i];\n\n                if (!slot) continue;\n\n                if (Detect.isMobile()) item.css('background-size', '600%');\n                else {\n                    item.css(\n                        'background-image',\n                        self.container.getImageFormat(\n                            self.getScale(),\n                            slot.string\n                        )\n                    );\n                }\n            }\n        },\n\n        clearSelection: function() {\n            var self = this;\n\n            if (!self.selectedSlot) return;\n\n            self.selectedSlot.removeClass('select');\n            self.selectedSlot = null;\n            self.selectedItem = null;\n        },\n\n        display: function() {\n            var self = this;\n\n            self.body.fadeIn('fast');\n            self.button.addClass('active');\n        },\n\n        hide: function(keepSelection) {\n            var self = this;\n\n            self.button.removeClass('active');\n\n            self.body.fadeOut('slow');\n            self.button.removeClass('active');\n\n            if (!keepSelection) self.clearSelection();\n        },\n\n        getScale: function() {\n            return this.game.renderer.getScale();\n        },\n\n        getSize: function() {\n            return this.container.size;\n        },\n\n        getList: function() {\n            return $('#inventory')\n                .find('ul')\n                .find('li');\n        },\n\n        isVisible: function() {\n            return this.body.css('display') === 'block';\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/inventory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/page.js",
    "content": "/* global log */\n\ndefine(['jquery'], function($) {\n    return Class.extend({\n        init: function(element) {\n            var self = this;\n\n            self.body = $(element);\n\n            self.loaded = false;\n        },\n\n        show: function() {\n            this.body.fadeIn('slow');\n        },\n\n        hide: function() {\n            this.body.fadeOut('slow');\n        },\n\n        isVisible: function() {\n            return this.body.css('display') === 'block';\n        },\n\n        load: function() {\n            // log.info('Uninitialized.');\n        },\n\n        resize: function() {\n            // log.info('Uninitialized.');\n        },\n\n        update: function() {\n            // log.info('Uninitialized.');\n        },\n\n        getImageFormat: function(scale, name) {\n            if (!name || name === 'null') return '';\n\n            return 'url(\"img/' + scale + '/item-' + name + '.png\")';\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/profile/page.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/pages/ability.js",
    "content": "define(['jquery', '../page'], function($, Page) {\n    return Page.extend({\n        init: function(game) {\n            var self = this;\n\n            self._super('#skillPage');\n\n            self.game = game;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/profile/pages/ability.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/pages/quest.js",
    "content": "define(['jquery', '../page'], function($, Page) {\n    return Page.extend({\n        init: function() {\n            var self = this;\n\n            self._super('#questPage');\n\n            self.achievements = $('#achievementList');\n            self.quests = $('#questList');\n\n            self.achievementsCount = $('#achievementCount');\n            self.questCount = $('#questCount');\n\n            self.achievementsList = self.achievements.find('ul');\n            self.questList = self.quests.find('ul');\n        },\n\n        loadAchievements: function(achievements) {\n            var self = this,\n                finishedAchievements = 0;\n\n            _.each(achievements, function(achievement) {\n                var item = self.getItem(false, achievement.id),\n                    name = self.getName(false, achievement.id);\n\n                name.text('????????');\n\n                name.css('background', 'rgba(255, 10, 10, 0.3)');\n\n                if (achievement.progress > 0 && achievement.progress < 9999) {\n                    name.css('background', 'rgba(255, 255, 10, 0.4)');\n\n                    name.text(\n                        achievement.name +\n                            (achievement.count > 2\n                                ? ' ' +\n                                  (achievement.progress - 1) +\n                                  '/' +\n                                  (achievement.count - 1)\n                                : '')\n                    );\n                } else if (achievement.progress > 9998) {\n                    name.text(achievement.name);\n                    name.css('background', 'rgba(10, 255, 10, 0.3)');\n                }\n\n                if (achievement.finished) finishedAchievements++;\n\n                item.append(name);\n\n                var listItem = $('<li></li>');\n\n                listItem.append(item);\n\n                self.achievementsList.append(listItem);\n            });\n\n            self.achievementsCount.html(\n                finishedAchievements + '/' + achievements.length\n            );\n        },\n\n        loadQuests(quests) {\n            var self = this,\n                finishedQuests = 0;\n\n            _.each(quests, function(quest) {\n                var item = self.getItem(true, quest.id),\n                    name = self.getName(true, quest.id);\n\n                name.text(quest.name);\n\n                name.css('background', 'rgba(255, 10, 10, 0.3)');\n\n                if (quest.stage > 0 && quest.stage < 9999)\n                    name.css('background', 'rgba(255, 255, 10, 0.4)');\n                else if (quest.stage > 9998)\n                    name.css('background', 'rgba(10, 255, 10, 0.3)');\n\n                if (quest.finished) finishedQuests++;\n\n                item.append(name);\n\n                var listItem = $('<li></li>');\n\n                listItem.append(item);\n\n                self.questList.append(listItem);\n            });\n\n            self.questCount.html(finishedQuests + '/' + quests.length);\n        },\n\n        progress: function(info) {\n            var self = this,\n                item = info.isQuest\n                    ? self.getQuest(info.id)\n                    : self.getAchievement(info.id);\n\n            if (!item) return;\n\n            var name = item.find(\n                '' +\n                    (info.isQuest ? '#quest' : '#achievement') +\n                    info.id +\n                    'name'\n            );\n\n            if (!name) return;\n\n            if (!info.isQuest && info.count > 2) {\n                name.text(\n                    info.name + ' ' + info.progress + '/' + (info.count - 1)\n                );\n            } else name.text(info.name);\n\n            name.css('background', 'rgba(255, 255, 10, 0.4)');\n        },\n\n        finish: function(info) {\n            var self = this,\n                item = info.isQuest\n                    ? self.getQuest(info.id)\n                    : self.getAchievement(info.id);\n\n            if (!item) return;\n\n            var name = item.find(\n                '' +\n                    (info.isQuest ? '#quest' : '#achievement') +\n                    info.id +\n                    'name'\n            );\n\n            if (!name) return;\n\n            if (!info.isQuest) name.text(info.name);\n\n            name.css('background', 'rgba(10, 255, 10, 0.3)');\n        },\n\n        getQuest: function(id) {\n            return $(this.questList.find('li')[id]).find('#quest' + id);\n        },\n\n        getAchievement: function(id) {\n            return $(this.achievementsList.find('li')[id]).find(\n                '#achievement' + id\n            );\n        },\n\n        /**\n         * Might as well properly organize them based\n         * on their type of item and id (index).\n         */\n\n        getItem: function(isQuest, id) {\n            return $(\n                '<div id=\"' +\n                    (isQuest ? 'quest' : 'achievement') +\n                    id +\n                    '\" class=\"questItem\"></div>'\n            );\n        },\n\n        getName: function(isQuest, id) {\n            return $(\n                '<div id=\"' +\n                    (isQuest ? 'quest' : 'achievement') +\n                    id +\n                    'name\" class=\"questName\"></div>'\n            );\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/profile/pages/quest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/pages/settings.js",
    "content": "/* global log, Detect */\n\ndefine(['jquery', '../page'], function($, Page) {\n    return Class.extend({\n        // TODO - Hide crpyto mining option on mobiles and completely disable it.\n\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n            self.audio = game.audio;\n            self.storage = game.storage;\n            self.renderer = game.renderer;\n            self.camera = game.renderer.camera;\n\n            self.body = $('#settingsPage');\n            self.button = $('#settingsButton');\n\n            self.volume = $('#volume');\n            self.sfx = $('#sfx');\n            self.brightness = $('#brightness');\n\n            self.info = $('#info');\n\n            self.soundCheck = $('#soundCheck');\n            self.cameraCheck = $('#cameraCheck');\n            self.debugCheck = $('#debugCheck');\n            self.centreCheck = $('#centreCheck');\n            self.nameCheck = $('#nameCheck');\n            self.levelCheck = $('#levelCheck');\n\n            self.loaded = false;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            if (self.loaded) return;\n\n            self.volume.val(self.getMusicLevel());\n            self.sfx.val(self.getSFXLevel());\n            self.brightness.val(self.getBrightness());\n\n            self.game.app.updateRange(self.volume);\n            self.game.app.updateRange(self.sfx);\n            self.game.app.updateRange(self.brightness);\n\n            self.renderer.adjustBrightness(self.getBrightness());\n\n            self.button.click(function() {\n                self.game.interface.hideAll();\n\n                self.button.toggleClass('active');\n\n                if (self.isVisible()) self.hide();\n                else self.show();\n            });\n\n            self.volume.on('input', function() {\n                if (self.audio.song) self.audio.song.volume = this.value / 100;\n            });\n\n            self.brightness.on('input', function() {\n                self.renderer.adjustBrightness(this.value);\n            });\n\n            self.volume.change(function() {\n                self.setMusicLevel(this.value);\n            });\n\n            self.sfx.change(function() {\n                self.setSFXLevel(this.value);\n            });\n\n            self.brightness.change(function() {\n                self.setBrightness(this.value);\n            });\n\n            self.soundCheck.click(function() {\n                var isActive = self.soundCheck.hasClass('active');\n\n                self.setSound(!isActive);\n\n                if (isActive) {\n                    self.audio.reset(self.audio.song);\n                    self.audio.song = null;\n\n                    self.soundCheck.removeClass('active');\n                } else {\n                    self.audio.update();\n\n                    self.soundCheck.addClass('active');\n                }\n            });\n\n            self.cameraCheck.click(function() {\n                var active = self.cameraCheck.hasClass('active');\n\n                if (active) self.renderer.camera.decenter();\n                else self.renderer.camera.center();\n\n                self.cameraCheck.toggleClass('active');\n\n                self.setCamera(!active);\n            });\n\n            self.debugCheck.click(function() {\n                var active = self.debugCheck.hasClass('active');\n\n                self.debugCheck.toggleClass('active');\n\n                self.renderer.debugging = !active;\n\n                self.setDebug(!active);\n            });\n\n            self.centreCheck.click(function() {\n                var active = self.centreCheck.hasClass('active');\n\n                self.centreCheck.toggleClass('active');\n\n                self.renderer.autoCentre = !active;\n\n                self.setCentre(!active);\n            });\n\n            self.nameCheck.click(function() {\n                var active = self.nameCheck.hasClass('active');\n\n                self.nameCheck.toggleClass('active');\n\n                self.renderer.drawNames = !active;\n\n                self.setName(!active);\n            });\n\n            self.levelCheck.click(function() {\n                var active = self.levelCheck.hasClass('active');\n\n                self.levelCheck.toggleClass('active');\n\n                self.renderer.drawLevels = !active;\n\n                self.setName(!active);\n            });\n\n            if (self.getSound()) self.soundCheck.addClass('active');\n\n            if (self.getCamera()) self.cameraCheck.addClass('active');\n            else {\n                self.camera.centered = false;\n                self.renderer.verifyCentration();\n            }\n\n            if (self.getDebug()) {\n                self.debugCheck.addClass('active');\n                self.renderer.debugging = true;\n            }\n\n            if (self.getCentreCap()) self.centreCheck.addClass('active');\n\n            if (self.getName()) self.nameCheck.addClass('active');\n            else self.renderer.drawNames = false;\n\n            if (self.getLevel()) self.levelCheck.addClass('active');\n            else self.renderer.drawLevels = false;\n\n            self.loaded = true;\n        },\n\n        show: function() {\n            this.body.fadeIn('slow');\n        },\n\n        hide: function() {\n            this.body.fadeOut('fast');\n        },\n\n        setMusicLevel: function(musicLevel) {\n            var self = this;\n\n            self.storage.data.settings.music = musicLevel;\n            self.storage.save();\n        },\n\n        setSFXLevel: function(sfxLevel) {\n            var self = this;\n\n            self.storage.data.settings.sfx = sfxLevel;\n            self.storage.save();\n        },\n\n        setBrightness: function(brightness) {\n            var self = this;\n\n            self.storage.data.settings.brightness = brightness;\n            self.storage.save();\n        },\n\n        setSound: function(state) {\n            var self = this;\n\n            self.storage.data.settings.soundEnabled = state;\n            self.storage.save();\n        },\n\n        setCamera: function(state) {\n            var self = this;\n\n            self.storage.data.settings.centerCamera = state;\n            self.storage.save();\n        },\n\n        setDebug: function(state) {\n            var self = this;\n\n            self.storage.data.settings.debug = state;\n            self.storage.save();\n        },\n\n        setCentre: function(state) {\n            var self = this;\n\n            self.storage.data.settings.autoCentre = state;\n            self.storage.save();\n        },\n\n        setName: function(state) {\n            var self = this;\n\n            self.storage.data.settings.showNames = state;\n            self.storage.save();\n        },\n\n        setLevel: function(state) {\n            var self = this;\n\n            self.storage.data.settings.showLevels = state;\n            self.storage.save();\n        },\n\n        getMusicLevel: function() {\n            return this.storage.data.settings.music;\n        },\n\n        getSFXLevel: function() {\n            return this.storage.data.settings.sfx;\n        },\n\n        getBrightness: function() {\n            return this.storage.data.settings.brightness;\n        },\n\n        getSound: function() {\n            return this.storage.data.settings.soundEnabled;\n        },\n\n        getCamera: function() {\n            return this.storage.data.settings.centerCamera;\n        },\n\n        getDebug: function() {\n            return this.storage.data.settings.debug;\n        },\n\n        getCentreCap: function() {\n            return this.storage.data.settings.autoCentre;\n        },\n\n        getName: function() {\n            return this.storage.data.settings.showNames;\n        },\n\n        getLevel: function() {\n            return this.storage.data.settings.showLevels;\n        },\n\n        isVisible: function() {\n            return this.body.css('display') === 'block';\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/profile/pages/settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/pages/state.js",
    "content": "/* global log, _ */\n\ndefine(['jquery', '../page'], function($, Page) {\n    return Page.extend({\n        init: function(game) {\n            var self = this;\n\n            self._super('#statePage');\n\n            self.game = game;\n            self.player = game.player;\n\n            self.name = $('#profileName');\n            self.level = $('#profileLevel');\n            self.experience = $('#profileExperience');\n\n            self.weaponSlot = $('#weaponSlot');\n            self.armourSlot = $('#armourSlot');\n            self.pendantSlot = $('#pendantSlot');\n            self.ringSlot = $('#ringSlot');\n            self.bootsSlot = $('#bootsSlot');\n\n            self.slots = [\n                self.weaponSlot,\n                self.armourSlot,\n                self.pendantSlot,\n                self.ringSlot,\n                self.bootsSlot\n            ];\n\n            self.loaded = false;\n\n            self.load();\n        },\n\n        resize: function() {\n            this.loadSlots();\n        },\n\n        load: function() {\n            var self = this;\n\n            if (!self.game.player.armour) return;\n\n            self.name.text(self.player.username);\n            self.level.text(self.player.level);\n            self.experience.text(self.player.experience);\n\n            self.loadSlots();\n\n            self.loaded = true;\n\n            self.weaponSlot.click(function() {\n                self.game.socket.send(Packets.Equipment, [\n                    Packets.EquipmentOpcode.Unequip,\n                    'weapon'\n                ]);\n            });\n\n            self.armourSlot.click(function() {\n                self.game.socket.send(Packets.Equipment, [\n                    Packets.EquipmentOpcode.Unequip,\n                    'armour'\n                ]);\n            });\n\n            self.pendantSlot.click(function() {\n                self.game.socket.send(Packets.Equipment, [\n                    Packets.EquipmentOpcode.Unequip,\n                    'pendant'\n                ]);\n            });\n\n            self.ringSlot.click(function() {\n                self.game.socket.send(Packets.Equipment, [\n                    Packets.EquipmentOpcode.Unequip,\n                    'ring'\n                ]);\n            });\n\n            self.bootsSlot.click(function() {\n                self.game.socket.send(Packets.Equipment, [\n                    Packets.EquipmentOpcode.Unequip,\n                    'boots'\n                ]);\n            });\n        },\n\n        loadSlots: function() {\n            var self = this;\n\n            self.weaponSlot.css(\n                'background-image',\n                self.getImageFormat(self.getScale(), self.player.weapon.string)\n            );\n            self.armourSlot.css(\n                'background-image',\n                self.getImageFormat(self.getScale(), self.player.armour.string)\n            );\n            self.pendantSlot.css(\n                'background-image',\n                self.getImageFormat(self.getScale(), self.player.pendant.string)\n            );\n            self.ringSlot.css(\n                'background-image',\n                self.getImageFormat(self.getScale(), self.player.ring.string)\n            );\n            self.bootsSlot.css(\n                'background-image',\n                self.getImageFormat(self.getScale(), self.player.boots.string)\n            );\n\n            self.forEachSlot(function(slot) {\n                slot.css('background-size', '600%');\n            });\n        },\n\n        update: function() {\n            var self = this;\n\n            self.level.text(self.player.level);\n            self.experience.text(self.player.experience);\n\n            self.loadSlots();\n        },\n\n        forEachSlot: function(callback) {\n            _.each(this.slots, function(slot) {\n                callback(slot);\n            });\n        },\n\n        getScale: function() {\n            return this.game.renderer.getScale();\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/profile/pages/state.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/profile.js",
    "content": "/* global log, _, Packets */\n\ndefine([\n    'jquery',\n    './pages/state',\n    './pages/ability',\n    './pages/settings',\n    './pages/quest'\n], function($, State, Ability, Settings, Quest) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n\n            self.body = $('#profileDialog');\n            self.button = $('#profileButton');\n\n            self.next = $('#next');\n            self.previous = $('#previous');\n\n            self.activePage = null;\n            self.activeIndex = 0;\n            self.pages = [];\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.button.click(function() {\n                self.game.interface.hideAll();\n                self.settings.hide();\n\n                if (self.isVisible()) {\n                    self.hide();\n                    self.button.removeClass('active');\n                } else {\n                    self.show();\n                    self.button.addClass('active');\n                }\n\n                if (!self.activePage.loaded) self.activePage.load();\n\n                self.game.socket.send(Packets.Click, [\n                    'profile',\n                    self.button.hasClass('active')\n                ]);\n            });\n\n            self.next.click(function() {\n                if (self.activeIndex + 1 < self.pages.length)\n                    self.setPage(self.activeIndex + 1);\n                else self.next.removeClass('enabled');\n            });\n\n            self.previous.click(function() {\n                if (self.activeIndex > 0) self.setPage(self.activeIndex - 1);\n                else self.previous.removeClass('enabled');\n            });\n\n            self.state = new State(self.game);\n            self.ability = new Ability(self.game);\n            self.settings = new Settings(self.game);\n            self.quests = new Quest(self.game);\n\n            self.pages.push(self.state, self.quests, self.ability);\n\n            self.activePage = self.state;\n\n            if (\n                self.activeIndex === 0 &&\n                self.activeIndex !== self.pages.length\n            )\n                self.next.addClass('enabled');\n        },\n\n        update: function() {\n            var self = this;\n\n            _.each(self.pages, function(page) {\n                page.update();\n            });\n        },\n\n        resize: function() {\n            var self = this;\n\n            _.each(self.pages, function(page) {\n                page.resize();\n            });\n        },\n\n        setPage: function(index) {\n            var self = this,\n                page = self.pages[index];\n\n            self.clear();\n\n            if (page.isVisible()) return;\n\n            self.activePage = page;\n            self.activeIndex = index;\n\n            if (self.activeIndex + 1 === self.pages.length)\n                self.next.removeClass('enabled');\n            else if (self.activeIndex === 0)\n                self.previous.removeClass('enabled');\n            else {\n                self.previous.addClass('enabled');\n                self.next.addClass('enabled');\n            }\n\n            page.show();\n        },\n\n        show: function() {\n            var self = this;\n\n            self.body.fadeIn('slow');\n            self.button.addClass('active');\n        },\n\n        hide: function() {\n            var self = this;\n\n            self.body.fadeOut('fast');\n            self.button.removeClass('active');\n\n            if (self.settings) self.settings.hide();\n        },\n\n        isVisible: function() {\n            return this.body.css('display') === 'block';\n        },\n\n        clear: function() {\n            var self = this;\n\n            if (self.activePage) self.activePage.hide();\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/profile/profile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/shop.js",
    "content": "define(['jquery', './container/container'], function($, Container) {\n    return Class.extend({\n        init: function(game, intrface) {\n            var self = this;\n\n            self.game = game;\n\n            self.body = $('#shop');\n            self.shop = $('#shopContainer');\n            self.inventory = $('#shopInventorySlots');\n\n            self.player = game.player;\n            self.interface = intrface;\n\n            self.container = null;\n            self.data = null;\n\n            self.openShop = -1;\n\n            self.items = [];\n            self.counts = [];\n\n            self.close = $('#closeShop');\n\n            self.close.css('left', '97%');\n            self.close.click(function() {\n                self.hide();\n            });\n        },\n\n        buy: function(event) {\n            var self = this,\n                id = event.currentTarget.id.substring(11);\n\n            self.game.socket.send(Packets.Shop, [\n                Packets.ShopOpcode.Buy,\n                self.openShop,\n                id,\n                1\n            ]);\n        },\n\n        sell: function() {\n            var self = this;\n        },\n\n        /**\n         * The shop file is already built to support full de-initialization of objects when\n         * we receive an update about the stocks. So we just use that whenever we want to resize.\n         * This is just a temporary fix, in reality, we do not want anyone to actually see the shop\n         * do a full refresh when they buy an item or someone else buys an item.\n         */\n\n        resize: function() {\n            var self = this;\n\n            self.getInventoryList().empty();\n            self.getShopList().empty();\n\n            self.update(self.data);\n        },\n\n        update: function(data) {\n            var self = this;\n\n            self.reset();\n\n            self.container = new Container(data.strings.length);\n\n            // Update the global data to current revision\n            self.data = data;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            for (var i = 0; i < self.container.size; i++) {\n                var shopItem = $(\n                        '<div id=\"shopItem' + i + '\" class=\"shopItem\"></div>'\n                    ),\n                    string = self.data.strings[i],\n                    name = self.data.names[i],\n                    count = self.data.counts[i],\n                    itemImage,\n                    itemCount,\n                    itemName,\n                    itemBuy;\n\n                if (!string || !name || !count) continue;\n\n                itemImage = $(\n                    '<div id=\"shopItemImage' +\n                        i +\n                        '\" class=\"shopItemImage\"></div>'\n                );\n                itemCount = $(\n                    '<div id=\"shopItemCount' +\n                        i +\n                        '\" class=\"shopItemCount\"></div>'\n                );\n                itemName = $(\n                    '<div id=\"shopItemName' +\n                        i +\n                        '\" class=\"shopItemName\"></div>'\n                );\n                itemBuy = $(\n                    '<div id=\"shopItemBuy' + i + '\" class=\"shopItemBuy\"></div>'\n                );\n\n                itemImage.css(\n                    'background-image',\n                    self.container.getImageFormat(1, string)\n                );\n                itemCount.html(count);\n                itemName.html(name);\n                itemBuy.html('Purchase');\n\n                self.container.setSlot(i, {\n                    string: string,\n                    count: count\n                });\n\n                // Bind the itemBuy to the local buy function.\n                itemBuy.click(function(event) {\n                    self.buy(event);\n                });\n\n                var listItem = $('<li></li>');\n\n                shopItem.append(itemImage, itemCount, itemName, itemBuy);\n\n                listItem.append(shopItem);\n\n                self.getShopList().append(listItem);\n            }\n\n            var inventoryItems = self.interface.bank.getInventoryList(),\n                inventorySize = self.interface.inventory.getSize();\n\n            for (var j = 0; j < inventorySize; j++) {\n                var item = $(inventoryItems[j]).clone(),\n                    slot = item.find('#bankInventorySlot' + j);\n\n                self.getInventoryList().append(slot);\n            }\n        },\n\n        reset: function() {\n            var self = this;\n\n            self.items = [];\n            self.counts = [];\n\n            self.container = null;\n\n            self.getShopList().empty();\n            self.getInventoryList().empty();\n        },\n\n        open: function(id) {\n            var self = this;\n\n            if (!id) return;\n\n            self.openShop = id;\n\n            self.body.fadeIn('slow');\n        },\n\n        hide: function() {\n            var self = this;\n\n            self.openShop = -1;\n\n            self.body.fadeOut('fast');\n        },\n\n        getScale: function() {\n            return this.game.renderer.getScale();\n        },\n\n        isVisible: function() {\n            return this.body.css('display') === 'block';\n        },\n\n        isShopOpen: function(shopId) {\n            return this.isVisible() && this.openShop === shopId;\n        },\n\n        getShopList: function() {\n            return this.shop.find('ul');\n        },\n\n        getInventoryList: function() {\n            return this.inventory.find('ul');\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/shop.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/warp.js",
    "content": "/* global _, Modules */\n\ndefine(['jquery'], function($) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n\n            self.mapFrame = $('#mapFrame');\n            self.button = $('#warpButton');\n            self.close = $('#closeMapFrame');\n\n            self.warpCount = 0;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.button.click(function() {\n                self.game.interface.hideAll();\n\n                self.toggle();\n\n                self.game.socket.send(Packets.Click, [\n                    'warp',\n                    self.button.hasClass('active')\n                ]);\n            });\n\n            self.close.click(function() {\n                self.hide();\n            });\n\n            for (var i = 1; i < 7; i++) {\n                var warp = self.mapFrame.find('#warp' + i);\n\n                if (warp) {\n                    warp.click(function(event) {\n                        self.hide();\n\n                        self.game.socket.send(Packets.Warp, [\n                            event.currentTarget.id.substring(4)\n                        ]);\n                    });\n                }\n            }\n        },\n\n        toggle: function() {\n            var self = this;\n\n            /**\n             * Just so it fades out nicely.\n             */\n\n            if (self.isVisible()) self.hide();\n            else self.display();\n        },\n\n        isVisible: function() {\n            return this.mapFrame.css('display') === 'block';\n        },\n\n        display: function() {\n            this.mapFrame.fadeIn('slow');\n            this.button.addClass('active');\n        },\n\n        hide: function() {\n            this.mapFrame.fadeOut('fast');\n            this.button.removeClass('active');\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/interface/warp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "Kaetram-Open/client/js/main.js",
    "content": "/* global log, Detect */\n\ndefine(['jquery', './app', './game'], function($, App, Game) {\n    var app, body, chatInput, game;\n\n    var install = function() {\n        if (deferredPrompt) {\n            deferredPrompt.prompt();\n            deferredPrompt.userChoice.then(function(choiceResult) {\n                if (choiceResult.outcome === 'accepted')\n                    log.info('Your PWA has been installed');\n                else log.info('User chose to not install your PWA');\n\n                deferredPrompt = null;\n            });\n        }\n    };\n    var load = function() {\n        $(document).ready(function() {\n            app = new App();\n            body = $('body');\n            chatInput = $('#chatInput');\n\n            addClasses();\n            initGame();\n        });\n\n        // This is the \"Offline page\" service worker\n\n        // Add this below content to your HTML page, or add the js file to your page at the very top to register service worker\n\n        // Check compatibility for the browser we're running this in\n        if ('serviceWorker' in navigator) {\n            if (navigator.serviceWorker.controller) {\n                log.info(\n                    '[PWA Builder] active service worker found, no need to register'\n                );\n            } else {\n                // Register the service worker\n                navigator.serviceWorker\n                    .register('sw.js', {\n                        scope: '../'\n                    })\n                    .then(function(reg) {\n                        log.info(\n                            '[PWA Builder] Service worker has been registered for scope: ' +\n                                reg.scope\n                        );\n                    });\n            }\n        }\n\n        window.addEventListener('beforeinstallprompt', function(e) {\n            // Prevent Chrome 67 and earlier from automatically showing the prompt\n            e.preventDefault();\n\n            // Stash the event so it can be triggered later.\n            deferredPrompt = e;\n\n            install();\n        });\n    };\n\n    var addClasses = function() {\n        var self = this;\n\n        if (Detect.isWindows()) body.addClass('windows');\n\n        if (Detect.isOpera()) body.addClass('opera');\n\n        if (Detect.isFirefoxAndroid()) chatInput.removeAttr('placeholder');\n    };\n\n    var initGame = function() {\n        app.onReady(function() {\n            app.sendStatus('Loading game');\n\n            if (app.config.debug) log.info('Loading the main application...');\n\n            game = new Game(app);\n            app.setGame(game);\n        });\n    };\n\n    load();\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "Kaetram-Open/client/js/network/connection.js",
    "content": "/* global log, _ */\n\ndefine(function() {\n    return Class.extend({\n        init: function(game) {\n            let self = this;\n\n            self.game = game;\n            self.app = game.app;\n            self.audio = game.audio;\n            self.messages = game.messages;\n            self.storage = game.storage;\n            self.socket = game.socket;\n            self.input = game.input;\n            self.interface = game.interface;\n            self.entities = game.entities;\n            self.map = game.map;\n            self.overlays = game.overlays;\n            self.renderer = game.renderer;\n            self.bubble = game.bubble;\n            self.info = game.info;\n            self.pointer = game.pointer;\n            self.inventory = game.inventory;\n\n            self.load();\n        },\n\n        load: function() {\n            let self = this;\n\n            self.messages.onHandshake(function(data) {\n                self.game.id = data.id;\n                self.game.development = data.development;\n\n                self.game.ready = true;\n\n                if (!self.game.player) self.game.createPlayer();\n\n                if (!self.map) self.game.loadMap();\n\n                self.app.updateLoader('Logging in');\n\n                if (self.app.isRegistering()) {\n                    var registerInfo = self.app.registerFields,\n                        username = registerInfo[0].val(),\n                        password = registerInfo[1].val(),\n                        email = registerInfo[3].val();\n\n                    self.socket.send(Packets.Intro, [\n                        Packets.IntroOpcode.Register,\n                        username,\n                        password,\n                        email\n                    ]);\n                } else if (self.app.isGuest()) {\n                    self.socket.send(Packets.Intro, [\n                        Packets.IntroOpcode.Guest,\n                        'n',\n                        'n',\n                        'n'\n                    ]);\n                } else {\n                    var loginInfo = self.app.loginFields,\n                        name = loginInfo[0].val(),\n                        pass = loginInfo[1].val();\n\n                    self.socket.send(Packets.Intro, [\n                        Packets.IntroOpcode.Login,\n                        name,\n                        pass\n                    ]);\n\n                    if (self.game.hasRemember()) {\n                        self.storage.data.player.username = name;\n                        self.storage.data.player.password = pass;\n                    } else {\n                        self.storage.data.player.username = '';\n                        self.storage.data.player.password = '';\n                    }\n\n                    self.storage.save();\n                }\n            });\n\n            self.messages.onWelcome(function(data) {\n                self.interface.loadHeader();\n\n                self.game.player.load(data);\n\n                self.game.start();\n                self.game.postLoad();\n            });\n\n            self.messages.onEquipment(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.EquipmentOpcode.Batch:\n                        _.each(info, function(data) {\n                            self.game.player.setEquipment(\n                                data.type,\n                                data.name,\n                                data.string,\n                                data.count,\n                                data.ability,\n                                data.abilityLevel\n                            );\n                        });\n\n                        self.interface.loadProfile();\n\n                        break;\n\n                    case Packets.EquipmentOpcode.Equip:\n                        self.game.player.setEquipment(\n                            info.type,\n                            info.name,\n                            info.string,\n                            info.count,\n                            info.ability,\n                            info.abilityLevel\n                        );\n\n                        self.interface.profile.update();\n\n                        break;\n\n                    case Packets.EquipmentOpcode.Unequip:\n                        var type = info.shift();\n\n                        self.game.player.unequip(type);\n\n                        if (type === 'armour') {\n                            self.game.player.setSprite(\n                                self.game.getSprite(\n                                    self.game.player.getSpriteName()\n                                )\n                            );\n                        }\n\n                        self.interface.profile.update();\n\n                        break;\n                }\n            });\n\n            self.messages.onSpawn(function(data) {\n                self.entities.create(data.shift());\n            });\n\n            self.messages.onEntityList(function(data) {\n                var ids = _.pluck(self.entities.getAll(), 'id'),\n                    known = _.intersection(ids, data),\n                    newIds = _.difference(data, known);\n\n                self.entities.decrepit = _.reject(\n                    self.entities.getAll(),\n                    function(entity) {\n                        return (\n                            _.include(known, entity.id) ||\n                            entity.id === self.game.player.id\n                        );\n                    }\n                );\n\n                self.entities.clean(newIds);\n\n                self.socket.send(Packets.Who, newIds);\n            });\n\n            self.messages.onSync(function(data) {\n                var entity = self.entities.get(data.id);\n\n                if (!entity || entity.type !== 'player') return;\n\n                if (data.hitPoints) {\n                    entity.setHitPoints(data.hitPoints);\n                    entity.setMaxHitPoints(data.maxHitPoints);\n                }\n\n                if (data.mana) {\n                    entity.mana = data.mana;\n                    entity.maxMana = data.maxMana;\n                }\n\n                if (data.experience) {\n                    entity.experience = data.experience;\n                    entity.level = data.level;\n                }\n\n                if (data.armour)\n                    entity.setSprite(self.game.getSprite(data.armour));\n\n                if (data.weapon) {\n                    entity.setEquipment(\n                        data.weapon.type,\n                        data.weapon.name,\n                        data.weapon.string,\n                        data.weapon.count,\n                        data.weapon.ability,\n                        data.weapon.abilityLevel\n                    );\n                }\n\n                self.interface.profile.update();\n            });\n\n            self.messages.onMovement(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.MovementOpcode.Move:\n                        var entity = self.entities.get(info.id);\n\n                        if (!entity) return;\n\n                        if (info.forced) entity.stop(true);\n\n                        entity.go(info.x, info.y);\n\n                        break;\n\n                    case Packets.MovementOpcode.Follow:\n                        var follower = self.entities.get(info.attackerId),\n                            followee = self.entities.get(info.targetId);\n\n                        if (!followee || !follower) return;\n\n                        follower.follow(followee);\n\n                        break;\n\n                    case Packets.MovementOpcode.Stop:\n                        var sEntity = self.entities.get(info.id),\n                            force = info.force;\n\n                        if (!sEntity) return;\n\n                        sEntity.stop(force);\n\n                        break;\n\n                    case Packets.MovementOpcode.Freeze:\n                    case Packets.MovementOpcode.Stunned:\n                        var pEntity = self.entities.get(info.id);\n\n                        if (!pEntity) return;\n\n                        if (info.state) pEntity.stop(false);\n\n                        if (opcode === Packets.MovementOpcode.Stunned)\n                            pEntity.stunned = info.state;\n                        else if (opcode === Packets.MovementOpcode.Freeze)\n                            pEntity.frozen = info.state;\n\n                        break;\n\n                    case Packets.MovementOpcode.Orientate:\n                        var player = info.shift(),\n                            orientation = info.shift(),\n                            entity = self.entities.get(player);\n\n                        // entity.stop();\n                        entity.performAction(\n                            orientation,\n                            Modules.Actions.Orientate\n                        );\n\n                        break;\n                }\n            });\n\n            self.messages.onTeleport(function(info) {\n                var entity = self.entities.get(info.id),\n                    isPlayer = info.id === self.game.player.id;\n\n                if (!entity) return;\n\n                entity.stop(true);\n                entity.frozen = true;\n\n                self.bubble.clean();\n\n                /**\n                 * Teleporting an entity seems to cause a glitch with the\n                 * hitbox. Make sure you keep an eye out for this.\n                 */\n\n                var doTeleport = function() {\n                    self.entities.unregisterPosition(entity);\n                    entity.setGridPosition(info.x, info.y);\n\n                    if (isPlayer) {\n                        self.entities.clearPlayers(self.game.player);\n                        self.game.player.clearHealthBar();\n                        self.renderer.camera.centreOn(entity);\n                        self.renderer.updateAnimatedTiles();\n                    } else if (entity.type === 'player') {\n                        delete self.entities.entities[entity.id];\n                        return;\n                    }\n\n                    self.socket.send(Packets.Request, [self.game.player.id]);\n\n                    self.entities.registerPosition(entity);\n                    entity.frozen = false;\n\n                    /* self.renderer.transition(15, true, function() {\n\n                    });*/\n                };\n\n                if (info.withAnimation) {\n                    var originalSprite = entity.sprite;\n\n                    entity.teleporting = true;\n\n                    entity.setSprite(self.game.getSprite('death'));\n\n                    entity.animate('death', 240, 1, function() {\n                        doTeleport();\n\n                        entity.currentAnimation = null;\n\n                        entity.setSprite(originalSprite);\n                        entity.idle();\n\n                        entity.teleporting = false;\n                    });\n                } else doTeleport();\n                /* self.renderer.transition(15, false, function() {\n                        if (self.queueColour) {\n                            self.renderer.updateDarkMask(self.queueColour);\n                            self.queueColour = null;\n                        }\n                    });*/\n            });\n\n            self.messages.onDespawn(function(id) {\n                var entity = self.entities.get(id);\n\n                if (!entity) return;\n\n                entity.dead = true;\n\n                entity.stop();\n\n                switch (entity.type) {\n                    case 'item':\n                        self.entities.removeItem(entity);\n\n                        return;\n\n                    case 'chest':\n                        entity.setSprite(self.game.getSprite('death'));\n\n                        entity.setAnimation('death', 120, 1, function() {\n                            self.entities.unregisterPosition(entity);\n                            delete self.entities.entities[entity.id];\n                        });\n\n                        return;\n                }\n\n                if (\n                    self.game.player.hasTarget() &&\n                    self.game.player.target.id === entity.id\n                )\n                    self.game.player.removeTarget();\n\n                self.entities.grids.removeFromPathingGrid(\n                    entity.gridX,\n                    entity.gridY\n                );\n\n                if (\n                    entity.id !== self.game.player.id &&\n                    self.game.player.getDistance(entity) < 5\n                ) {\n                    self.audio.play(\n                        Modules.AudioTypes.SFX,\n                        'kill' + Math.floor(Math.random() * 2 + 1)\n                    );\n                }\n\n                entity.hitPoints = 0;\n\n                entity.setSprite(self.game.getSprite('death'));\n\n                entity.animate('death', 120, 1, function() {\n                    self.entities.unregisterPosition(entity);\n                    delete self.entities.entities[entity.id];\n                });\n            });\n\n            self.messages.onCombat(function(opcode, info) {\n                var attacker = self.entities.get(info.attackerId),\n                    target = self.entities.get(info.targetId);\n\n                if (!target || !attacker) return;\n\n                switch (opcode) {\n                    case Packets.CombatOpcode.Initiate:\n                        attacker.setTarget(target);\n\n                        target.addAttacker(attacker);\n\n                        if (\n                            target.id === self.game.player.id ||\n                            attacker.id === self.game.player.id\n                        ) {\n                            self.socket.send(Packets.Combat, [\n                                Packets.CombatOpcode.Initiate,\n                                attacker.id,\n                                target.id\n                            ]);\n                        }\n\n                        break;\n\n                    case Packets.CombatOpcode.Hit:\n                        var hit = info.hitInfo,\n                            isPlayer = target.id === self.game.player.id;\n\n                        if (!hit.isAoE) {\n                            attacker.lookAt(target);\n                            attacker.performAction(\n                                attacker.orientation,\n                                Modules.Actions.Attack\n                            );\n                        } else if (hit.hasTerror) target.terror = true;\n\n                        switch (hit.type) {\n                            case Modules.Hits.Critical:\n                                target.critical = true;\n\n                                break;\n\n                            default:\n                                if (\n                                    attacker.id === self.game.player.id &&\n                                    hit.damage > 0\n                                ) {\n                                    self.audio.play(\n                                        Modules.AudioTypes.SFX,\n                                        'hit' +\n                                            Math.floor(Math.random() * 2 + 1)\n                                    );\n                                }\n\n                                break;\n                        }\n\n                        self.info.create(\n                            hit.type,\n                            [hit.damage, isPlayer],\n                            target.x,\n                            target.y\n                        );\n\n                        if (target.hurtSprite) {\n                            target.sprite = target.hurtSprite;\n                            setTimeout(function() {\n                                target.sprite = target.normalSprite;\n                            }, 75);\n                        }\n\n                        attacker.triggerHealthBar();\n                        target.triggerHealthBar();\n\n                        if (isPlayer && hit.damage > 0)\n                            self.audio.play(Modules.AudioTypes.SFX, 'hurt');\n\n                        break;\n\n                    case Packets.CombatOpcode.Finish:\n                        if (target) {\n                            target.removeTarget();\n                            target.forget();\n                        }\n\n                        if (attacker) attacker.removeTarget();\n\n                        break;\n\n                    case Packets.CombatOpcode.Sync:\n                        if (target.x !== info.x || target.y !== info.y)\n                            target.go(info.x, info.y);\n\n                        break;\n                }\n            });\n\n            self.messages.onAnimation(function(id, info) {\n                var entity = self.entities.get(id),\n                    animation = info.shift(),\n                    speed = info.shift(),\n                    count = info.shift();\n\n                if (!entity) return;\n\n                entity.animate(animation, speed, count);\n            });\n\n            self.messages.onProjectile(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.ProjectileOpcode.Create:\n                        self.entities.create(info);\n\n                        break;\n                }\n            });\n\n            self.messages.onPopulation(function(population) {\n                self.population = population;\n            });\n\n            self.messages.onPoints(function(data) {\n                var entity = self.entities.get(data.id);\n\n                // var id = data.shift(),\n                //    hitPoints = data.shift(),\n                //    mana = data.shift(),\n                //    entity = self.entities.get(id);\n\n                if (!entity) return;\n\n                if (data.hitPoints) {\n                    entity.setHitPoints(data.hitPoints);\n\n                    if (\n                        self.game.player.hasTarget() &&\n                        self.game.player.target.id === entity.id &&\n                        self.input.overlay.updateCallback\n                    ) {\n                        self.input.overlay.updateCallback(\n                            entity.id,\n                            data.hitPoints\n                        );\n                    }\n                }\n\n                if (data.mana) entity.setMana(data.mana);\n            });\n\n            self.messages.onNetwork(function() {\n                self.socket.send(Packets.Network, [Packets.NetworkOpcode.Pong]);\n            });\n\n            self.messages.onChat(function(info) {\n                if (self.game.isDebug()) log.info(info);\n\n                if (info.withBubble) {\n                    var entity = self.entities.get(info.id);\n\n                    if (entity) {\n                        info.name =\n                            info.name.charAt(0).toUpperCase() +\n                            info.name.substr(1);\n\n                        self.bubble.create(info.id, info.text, info.duration);\n                        self.bubble.setTo(entity);\n\n                        self.audio.play(Modules.AudioTypes.SFX, 'npctalk');\n                    }\n                }\n\n                if (info.isGlobal) info.name = '[Global] ' + info.name;\n\n                self.input.chatHandler.add(info.name, info.text, info.colour);\n            });\n\n            self.messages.onCommand(function(info) {\n                /**\n                 * This is for random miscellaneous commands that require\n                 * a specific action done by the client as opposed to\n                 * packet-oriented ones.\n                 */\n\n                log.info(info);\n\n                switch (info.command) {\n                    case 'debug':\n                        self.renderer.debugging = !self.renderer.debugging;\n                        break;\n                }\n            });\n\n            self.messages.onInventory(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.InventoryOpcode.Batch:\n                        var inventorySize = info.shift(),\n                            data = info.shift();\n\n                        self.interface.loadInventory(inventorySize, data);\n\n                        break;\n\n                    case Packets.InventoryOpcode.Add:\n                        if (!self.interface.inventory) return;\n\n                        self.interface.inventory.add(info);\n\n                        if (!self.interface.bank) return;\n\n                        self.interface.addInventory(info);\n\n                        break;\n\n                    case Packets.InventoryOpcode.Remove:\n                        if (!self.interface.inventory) return;\n\n                        self.interface.inventory.remove(info);\n\n                        if (!self.interface.bank) return;\n\n                        self.interface.removeInventory(info);\n\n                        break;\n                }\n            });\n\n            self.messages.onBank(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.BankOpcode.Batch:\n                        var bankSize = info.shift(),\n                            data = info.shift();\n\n                        self.interface.loadBank(bankSize, data);\n\n                        break;\n\n                    case Packets.BankOpcode.Add:\n                        if (!self.interface.bank) return;\n\n                        self.interface.bank.add(info);\n\n                        break;\n\n                    case Packets.BankOpcode.Remove:\n                        self.interface.bank.remove(info);\n\n                        break;\n                }\n            });\n\n            self.messages.onAbility(function(opcode, info) {});\n\n            self.messages.onQuest(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.QuestOpcode.AchievementBatch:\n                        self.interface\n                            .getQuestPage()\n                            .loadAchievements(info.achievements);\n\n                        break;\n\n                    case Packets.QuestOpcode.QuestBatch:\n                        self.interface.getQuestPage().loadQuests(info.quests);\n\n                        break;\n\n                    case Packets.QuestOpcode.Progress:\n                        self.interface.getQuestPage().progress(info);\n\n                        break;\n\n                    case Packets.QuestOpcode.Finish:\n                        self.interface.getQuestPage().finish(info);\n\n                        break;\n                }\n            });\n\n            self.messages.onNotification(function(opcode, message) {\n                switch (opcode) {\n                    case Packets.NotificationOpcode.Ok:\n                        self.interface.displayNotify(message);\n\n                        break;\n\n                    case Packets.NotificationOpcode.YesNo:\n                        self.interface.displayConfirm(message);\n\n                        break;\n\n                    case Packets.NotificationOpcode.Text:\n                        self.input.chatHandler.add('WORLD', message);\n\n                        break;\n                }\n            });\n\n            self.messages.onBlink(function(instance) {\n                var item = self.entities.get(instance);\n\n                if (!item) return;\n\n                item.blink(150);\n            });\n\n            self.messages.onHeal(function(info) {\n                var entity = self.entities.get(info.id);\n\n                if (!entity) return;\n\n                switch (info.type) {\n                    case 'health':\n                        self.info.create(\n                            Modules.Hits.Heal,\n                            [info.amount],\n                            entity.x,\n                            entity.y\n                        );\n\n                        break;\n\n                    case 'mana':\n                        self.info.create(\n                            Modules.Hits.Mana,\n                            [info.amount],\n                            entity.x,\n                            entity.y\n                        );\n\n                        break;\n                }\n\n                if (entity.hitPoints + info.amount > entity.maxHitPoints)\n                    entity.setHitPoints(entity.maxHitPoints);\n                else entity.setHitPoints(entity.hitPoints + info.amount);\n\n                entity.triggerHealthBar();\n            });\n\n            self.messages.onExperience(function(info) {\n                var entity = self.entities.get(info.id);\n\n                if (!entity || entity.type !== 'player') return;\n\n                if (entity.level !== info.level) {\n                    entity.level = info.level;\n                    self.info.create(\n                        Modules.Hits.LevelUp,\n                        null,\n                        entity.x,\n                        entity.y\n                    );\n                } else if (entity.id === self.game.player.id) {\n                    if (info.id === self.game.player.id) {\n                        self.game.player.setExperience(\n                            info.experience,\n                            info.nextExperience,\n                            info.prevExperience\n                        );\n                    }\n\n                    self.info.create(\n                        Modules.Hits.Experience,\n                        [info.amount],\n                        entity.x,\n                        entity.y\n                    );\n                }\n\n                self.interface.profile.update();\n            });\n\n            self.messages.onDeath(function(id) {\n                var entity = self.entities.get(id);\n\n                if (!entity || id !== self.game.player.id) return;\n\n                self.audio.play(Modules.AudioTypes.SFX, 'death');\n\n                self.game.player.dead = true;\n                self.game.player.removeTarget();\n                self.game.player.orientation = Modules.Orientation.Down;\n\n                self.app.body.addClass('death');\n            });\n\n            self.messages.onAudio(function(song) {\n                self.audio.songName = song;\n\n                if (Detect.isSafari() && !self.audio.song) return;\n\n                self.audio.update();\n            });\n\n            self.messages.onNPC(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.NPCOpcode.Talk:\n                        var entity = self.entities.get(info.id),\n                            message = info.text,\n                            isNPC = !info.nonNPC;\n\n                        if (!entity) return;\n\n                        if (isNPC) {\n                            if (!message) {\n                                sound = 'npc-end';\n                                self.bubble.destroy(info.id);\n                            } else {\n                                var bubble = self.bubble.create(\n                                    info.id,\n                                    message\n                                );\n\n                                self.bubble.setTo(entity);\n\n                                if (\n                                    self.renderer.mobile &&\n                                    self.renderer.autoCentre\n                                ) {\n                                    self.renderer.camera.centreOn(\n                                        self.game.player\n                                    );\n                                }\n                            }\n                        } else {\n                            self.bubble.create(\n                                info.id,\n                                message,\n                                self.time,\n                                5000\n                            );\n                            self.bubble.setTo(entity);\n                        }\n\n                        var sound = 'npc';\n\n                        self.audio.play(Modules.AudioTypes.SFX, sound);\n\n                        self.game.player.disableAction = true;\n\n                        break;\n\n                    case Packets.NPCOpcode.Bank:\n                        self.interface.bank.display();\n                        break;\n\n                    case Packets.NPCOpcode.Enchant:\n                        self.interface.enchant.display();\n                        break;\n\n                    case Packets.NPCOpcode.Countdown:\n                        var cEntity = self.entities.get(info.id),\n                            countdown = info.countdown;\n\n                        if (cEntity) cEntity.setCountdown(countdown);\n\n                        break;\n                }\n            });\n\n            self.messages.onRespawn(function(id, x, y) {\n                if (id !== self.game.player.id) {\n                    log.error('Player id mismatch.');\n                    return;\n                }\n\n                self.game.player.setGridPosition(x, y);\n                self.entities.addEntity(self.game.player);\n                self.renderer.camera.centreOn(self.game.player);\n\n                self.game.player.currentAnimation = null;\n                self.game.player.setSprite(\n                    self.game.getSprite(self.game.player.getSpriteName())\n                );\n                self.game.player.idle();\n\n                self.game.player.dead = false;\n            });\n\n            self.messages.onEnchant(function(opcode, info) {\n                var type = info.type,\n                    index = info.index;\n\n                switch (opcode) {\n                    case Packets.EnchantOpcode.Select:\n                        self.interface.enchant.add(type, index);\n\n                        break;\n\n                    case Packets.EnchantOpcode.Remove:\n                        self.interface.enchant.moveBack(type, index);\n\n                        break;\n                }\n            });\n\n            self.messages.onGuild(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.GuildOpcode.Create:\n                        break;\n\n                    case Packets.GuildOpcode.Join:\n                        break;\n                }\n            });\n\n            self.messages.onPointer(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.PointerOpcode.NPC:\n                        var entity = self.entities.get(info.id);\n\n                        if (!entity) return;\n\n                        self.pointer.create(entity.id, Modules.Pointers.Entity);\n                        self.pointer.setToEntity(entity);\n\n                        break;\n\n                    case Packets.PointerOpcode.Location:\n                        self.pointer.create(info.id, Modules.Pointers.Position);\n                        self.pointer.setToPosition(\n                            info.id,\n                            info.x * 16,\n                            info.y * 16\n                        );\n\n                        break;\n\n                    case Packets.PointerOpcode.Relative:\n                        self.pointer.create(info.id, Modules.Pointers.Relative);\n                        self.pointer.setRelative(info.id, info.x, info.y);\n\n                        break;\n\n                    case Packets.PointerOpcode.Remove:\n                        self.pointer.clean();\n\n                        break;\n\n                    case Packets.PointerOpcode.Button:\n                        self.pointer.create(\n                            info.id,\n                            Modules.Pointers.Button,\n                            info.button\n                        );\n\n                        break;\n                }\n            });\n\n            self.messages.onPVP(function(id, pvp) {\n                if (self.game.player.id === id) self.pvp = pvp;\n                else {\n                    var entity = self.entities.get(id);\n\n                    if (entity) entity.pvp = pvp;\n                }\n            });\n\n            self.messages.onShop(function(opcode, info) {\n                var shopData = info.shopData;\n\n                switch (opcode) {\n                    case Packets.ShopOpcode.Open:\n                        self.interface.shop.open(shopData.id);\n                        self.interface.shop.update(shopData);\n\n                        break;\n\n                    case Packets.ShopOpcode.Buy:\n                        break;\n\n                    case Packets.ShopOpcode.Sell:\n                        break;\n\n                    case Packets.ShopOpcode.Refresh:\n                        if (self.interface.shop.isShopOpen(info.id))\n                            self.interface.shop.update(info);\n\n                        break;\n                }\n            });\n\n            self.messages.onMinigame(function(opcode, info) {\n                log.info('Lorem Ipsum.');\n            });\n\n            self.messages.onRegion(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.RegionOpcode.Render:\n                        self.map.synchronize(info);\n\n                        break;\n\n                    case Packets.RegionOpcode.Modify:\n                        self.map.data[info.index] = info.data;\n\n                        break;\n\n                    case Packets.RegionOpcode.Update:\n                        var entity = self.entities.get(info.id);\n\n                        if (!entity || entity.id === self.game.player.id)\n                            return;\n\n                        self.entities.removeEntity(entity);\n\n                        break;\n                }\n\n                self.map.updateCollisions();\n                self.entities.grids.resetPathingGrid();\n\n                self.renderer.forceRendering = true;\n                self.renderer.updateAnimatedTiles();\n            });\n\n            self.messages.onOverlay(function(opcode, info) {\n                switch (opcode) {\n                    case Packets.OverlayOpcode.Set:\n                        self.overlays.updateOverlay(info.image);\n\n                        if (!self.renderer.transitioning)\n                            self.renderer.updateDarkMask(info.colour);\n                        else self.queueColour = info.colour;\n\n                        break;\n\n                    case Packets.OverlayOpcode.Remove:\n                        self.renderer.removeAllLights();\n                        self.overlays.currentOverlay = null;\n\n                        break;\n\n                    case Packets.OverlayOpcode.Lamp:\n                        self.renderer.addLight(\n                            info.x,\n                            info.y,\n                            info.distance,\n                            info.diffuse,\n                            'rgba(0,0,0,0.4)',\n                            true\n                        );\n\n                        break;\n\n                    case Packets.OverlayOpcode.RemoveLamps:\n                        self.renderer.removeAllLights();\n\n                        break;\n\n                    case Packets.OverlayOpcode.Darkness:\n                        self.renderer.updateDarkMask(info.colour);\n\n                        break;\n                }\n            });\n\n            self.messages.onCamera(function(opcode, info) {\n                if (self.game.player.x === 0 || self.game.player.y === 0) {\n                    self.socket.send(Packets.Camera);\n                    return;\n                }\n\n                if (!self.renderer.camera.centered) return;\n\n                self.renderer.camera.forceCentre(self.game.player);\n                self.renderer.forceRendering = true;\n\n                switch (opcode) {\n                    case Packets.CameraOpcode.LockX:\n                        self.renderer.camera.lockX = true;\n                        break;\n\n                    case Packets.CameraOpcode.LockY:\n                        self.renderer.camera.lockY = true;\n                        break;\n\n                    case Packets.CameraOpcode.FreeFlow:\n                        self.renderer.removeNonRelativeLights();\n\n                        self.renderer.camera.lockX = false;\n                        self.renderer.camera.lockY = false;\n                        break;\n\n                    case Packets.CameraOpcode.Player:\n                        var middle = self.renderer.getMiddle();\n\n                        self.renderer.removeAllLights();\n                        self.renderer.addLight(\n                            middle.x,\n                            middle.y,\n                            160,\n                            0.8,\n                            'rgba(0,0,0,0.3)',\n                            false\n                        );\n\n                        break;\n                }\n            });\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/network/connection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "Kaetram-Open/client/js/network/messages.js",
    "content": "/* global log, _, Packets */\n\ndefine(function() {\n    return Class.extend({\n        /**\n         * Do not clutter up the Socket class with callbacks,\n         * have this class here until a better method arises in my head.\n         *\n         * This class should not have any complex functionality, its main\n         * role is to provide organization for packets and increase readability\n         *\n         * Please respect the order of the Packets Enum and arrange functions\n         * accordingly.\n         */\n\n        init: function(app) {\n            var self = this;\n\n            self.app = app;\n\n            self.messages = [];\n\n            self.messages[Packets.Handshake] = self.receiveHandshake;\n            self.messages[Packets.Welcome] = self.receiveWelcome;\n            self.messages[Packets.Spawn] = self.receiveSpawn;\n            self.messages[Packets.Equipment] = self.receiveEquipment;\n            self.messages[Packets.List] = self.receiveEntityList;\n            self.messages[Packets.Sync] = self.receiveSync;\n            self.messages[Packets.Movement] = self.receiveMovement;\n            self.messages[Packets.Teleport] = self.receiveTeleport;\n            self.messages[Packets.Despawn] = self.receiveDespawn;\n            self.messages[Packets.Combat] = self.receiveCombat;\n            self.messages[Packets.Animation] = self.receiveAnimation;\n            self.messages[Packets.Projectile] = self.receiveProjectile;\n            self.messages[Packets.Population] = self.receivePopulation;\n            self.messages[Packets.Points] = self.receivePoints;\n            self.messages[Packets.Network] = self.receiveNetwork;\n            self.messages[Packets.Chat] = self.receiveChat;\n            self.messages[Packets.Command] = self.receiveCommand;\n            self.messages[Packets.Inventory] = self.receiveInventory;\n            self.messages[Packets.Bank] = self.receiveBank;\n            self.messages[Packets.Ability] = self.receiveAbility;\n            self.messages[Packets.Quest] = self.receiveQuest;\n            self.messages[Packets.Notification] = self.receiveNotification;\n            self.messages[Packets.Blink] = self.receiveBlink;\n            self.messages[Packets.Heal] = self.receiveHeal;\n            self.messages[Packets.Experience] = self.receiveExperience;\n            self.messages[Packets.Death] = self.receiveDeath;\n            self.messages[Packets.Audio] = self.receiveAudio;\n            self.messages[Packets.NPC] = self.receiveNPC;\n            self.messages[Packets.Respawn] = self.receiveRespawn;\n            self.messages[Packets.Enchant] = self.receiveEnchant;\n            self.messages[Packets.Guild] = self.receiveGuild;\n            self.messages[Packets.Pointer] = self.receivePointer;\n            self.messages[Packets.PVP] = self.receivePVP;\n            self.messages[Packets.Shop] = self.receiveShop;\n            self.messages[Packets.Minigame] = self.receiveMinigame;\n            self.messages[Packets.Region] = self.receiveRegion;\n            self.messages[Packets.Overlay] = self.receiveOverlay;\n            self.messages[Packets.Camera] = self.receiveCamera;\n        },\n\n        handleData: function(data) {\n            var self = this,\n                packet = data.shift();\n\n            if (self.messages[packet] && _.isFunction(self.messages[packet]))\n                self.messages[packet].call(self, data);\n        },\n\n        handleBulkData: function(data) {\n            var self = this;\n\n            _.each(data, function(message) {\n                self.handleData(message);\n            });\n        },\n\n        handleUTF8: function(message) {\n            var self = this;\n\n            self.app.toggleLogin(false);\n\n            switch (message) {\n                case 'updated':\n                    self.app.sendError(null, 'The client has been updated!');\n                    break;\n\n                case 'full':\n                    self.app.sendError(null, 'The servers are currently full!');\n                    break;\n\n                case 'error':\n                    self.app.sendError(\n                        null,\n                        'The server has responded with an error!'\n                    );\n                    break;\n\n                case 'development':\n                    self.app.sendError(\n                        null,\n                        'The game is currently in development mode.'\n                    );\n                    break;\n\n                case 'disallowed':\n                    self.app.sendError(\n                        null,\n                        'The server is currently not accepting connections!'\n                    );\n                    break;\n\n                case 'maintenance':\n                    self.app.sendError(\n                        null,\n                        'Kaetram is currently under maintenance.'\n                    );\n                    break;\n\n                case 'userexists':\n                    self.app.sendError(\n                        null,\n                        'The username you have chosen already exists.'\n                    );\n                    break;\n\n                case 'emailexists':\n                    self.app.sendError(\n                        null,\n                        'The email you have chosen is not available.'\n                    );\n                    break;\n\n                case 'loggedin':\n                    self.app.sendError(\n                        null,\n                        'The player is already logged in!'\n                    );\n                    break;\n\n                case 'invalidlogin':\n                    self.app.sendError(\n                        null,\n                        'You have entered the wrong username or password.'\n                    );\n                    break;\n\n                case 'toofast':\n                    self.app.sendError(\n                        null,\n                        'You are trying to log in too fast from the same connection.'\n                    );\n                    break;\n\n                case 'malform':\n                    self.app.game.handleDisconnection(true);\n                    self.app.sendError(\n                        null,\n                        'Client has experienced a malfunction.'\n                    );\n\n                    break;\n\n                case 'timeout':\n                    self.app.sendError(\n                        null,\n                        'You have been disconnected for being inactive for too long.'\n                    );\n\n                    break;\n\n                default:\n                    self.app.sendError(\n                        null,\n                        'An unknown error has occurred, please refer to the forums.'\n                    );\n                    break;\n            }\n        },\n\n        /**\n         * Data Receivers\n         */\n\n        receiveHandshake: function(data) {\n            var self = this,\n                info = data.shift();\n\n            if (self.handshakeCallback) self.handshakeCallback(info);\n        },\n\n        receiveWelcome: function(data) {\n            var self = this,\n                playerData = data.shift();\n\n            if (self.welcomeCallback) self.welcomeCallback(playerData);\n        },\n\n        receiveSpawn: function(data) {\n            var self = this;\n\n            if (self.spawnCallback) self.spawnCallback(data);\n        },\n\n        receiveEquipment: function(data) {\n            var self = this,\n                equipType = data.shift(),\n                equipInfo = data.shift();\n\n            if (self.equipmentCallback)\n                self.equipmentCallback(equipType, equipInfo);\n        },\n\n        receiveEntityList: function(data) {\n            var self = this;\n\n            if (self.entityListCallback) self.entityListCallback(data);\n        },\n\n        receiveSync: function(data) {\n            var self = this;\n\n            if (self.syncCallback) self.syncCallback(data.shift());\n        },\n\n        receiveMovement: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.movementCallback) self.movementCallback(opcode, info);\n        },\n\n        receiveTeleport: function(data) {\n            var self = this,\n                info = data.shift();\n\n            if (self.teleportCallback) self.teleportCallback(info);\n        },\n\n        receiveDespawn: function(data) {\n            var self = this,\n                id = data.shift();\n\n            if (self.despawnCallback) self.despawnCallback(id);\n        },\n\n        receiveCombat: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.combatCallback) self.combatCallback(opcode, info);\n        },\n\n        receiveAnimation: function(data) {\n            var self = this,\n                id = data.shift(),\n                info = data.shift();\n\n            if (self.animationCallback) self.animationCallback(id, info);\n        },\n\n        receiveProjectile: function(data) {\n            var self = this,\n                type = data.shift(),\n                info = data.shift();\n\n            if (self.projectileCallback) self.projectileCallback(type, info);\n        },\n\n        receivePopulation: function(data) {\n            var self = this;\n\n            if (self.populationCallback) self.populationCallback(data.shift());\n        },\n\n        receivePoints: function(data) {\n            var self = this,\n                pointsData = data.shift();\n\n            if (self.pointsCallback) self.pointsCallback(pointsData);\n        },\n\n        receiveNetwork: function(data) {\n            var self = this,\n                opcode = data.shift();\n\n            if (self.networkCallback) self.networkCallback(opcode);\n        },\n\n        receiveChat: function(data) {\n            var self = this,\n                info = data.shift();\n\n            if (self.chatCallback) self.chatCallback(info);\n        },\n\n        receiveCommand: function(data) {\n            var self = this,\n                info = data.shift();\n\n            if (self.commandCallback) self.commandCallback(info);\n        },\n\n        receiveInventory: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.inventoryCallback) self.inventoryCallback(opcode, info);\n        },\n\n        receiveBank: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.bankCallback) self.bankCallback(opcode, info);\n        },\n\n        receiveAbility: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.abilityCallback) self.abilityCallback(opcode, info);\n        },\n\n        receiveQuest: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.questCallback) self.questCallback(opcode, info);\n        },\n\n        receiveNotification: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                message = data.shift();\n\n            if (self.notificationCallback)\n                self.notificationCallback(opcode, message);\n        },\n\n        receiveBlink: function(data) {\n            var self = this,\n                instance = data.shift();\n\n            if (self.blinkCallback) self.blinkCallback(instance);\n        },\n\n        receiveHeal: function(data) {\n            var self = this;\n\n            if (self.healCallback) self.healCallback(data.shift());\n        },\n\n        receiveExperience: function(data) {\n            var self = this;\n\n            if (self.experienceCallback) self.experienceCallback(data.shift());\n        },\n\n        receiveDeath: function(data) {\n            var self = this;\n\n            if (self.deathCallback) self.deathCallback(data.shift());\n        },\n\n        receiveAudio: function(data) {\n            var self = this;\n\n            if (self.audioCallback) self.audioCallback(data.shift());\n        },\n\n        receiveNPC: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.npcCallback) self.npcCallback(opcode, info);\n        },\n\n        receiveRespawn: function(data) {\n            var self = this,\n                id = data.shift(),\n                x = data.shift(),\n                y = data.shift();\n\n            if (self.respawnCallback) self.respawnCallback(id, x, y);\n        },\n\n        receiveEnchant: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.enchantCallback) self.enchantCallback(opcode, info);\n        },\n\n        receiveGuild: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.guildCallback) self.guildCallback(opcode, info);\n        },\n\n        receivePointer: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.pointerCallback) self.pointerCallback(opcode, info);\n        },\n\n        receivePVP: function(data) {\n            var self = this,\n                id = data.shift(),\n                pvp = data.shift();\n\n            if (self.pvpCallback) self.pvpCallback(id, pvp);\n        },\n\n        receiveShop: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.shopCallback) self.shopCallback(opcode, info);\n        },\n\n        receiveMinigame: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.minigameCallback) self.minigameCallback(opcode, info);\n        },\n\n        receiveRegion: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift(),\n                force = data.shift();\n\n            if (self.regionCallback) self.regionCallback(opcode, info, force);\n        },\n\n        receiveOverlay: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.overlayCallback) self.overlayCallback(opcode, info);\n        },\n\n        receiveCamera: function(data) {\n            var self = this,\n                opcode = data.shift(),\n                info = data.shift();\n\n            if (self.cameraCallback) self.cameraCallback(opcode, info);\n        },\n\n        /**\n         * Universal Callbacks\n         */\n\n        onHandshake: function(callback) {\n            this.handshakeCallback = callback;\n        },\n\n        onWelcome: function(callback) {\n            this.welcomeCallback = callback;\n        },\n\n        onSpawn: function(callback) {\n            this.spawnCallback = callback;\n        },\n\n        onEquipment: function(callback) {\n            this.equipmentCallback = callback;\n        },\n\n        onEntityList: function(callback) {\n            this.entityListCallback = callback;\n        },\n\n        onSync: function(callback) {\n            this.syncCallback = callback;\n        },\n\n        onMovement: function(callback) {\n            this.movementCallback = callback;\n        },\n\n        onTeleport: function(callback) {\n            this.teleportCallback = callback;\n        },\n\n        onDespawn: function(callback) {\n            this.despawnCallback = callback;\n        },\n\n        onCombat: function(callback) {\n            this.combatCallback = callback;\n        },\n\n        onAnimation: function(callback) {\n            this.animationCallback = callback;\n        },\n\n        onProjectile: function(callback) {\n            this.projectileCallback = callback;\n        },\n\n        onPopulation: function(callback) {\n            this.populationCallback = callback;\n        },\n\n        onPoints: function(callback) {\n            this.pointsCallback = callback;\n        },\n\n        onNetwork: function(callback) {\n            this.networkCallback = callback;\n        },\n\n        onChat: function(callback) {\n            this.chatCallback = callback;\n        },\n\n        onCommand: function(callback) {\n            this.commandCallback = callback;\n        },\n\n        onInventory: function(callback) {\n            this.inventoryCallback = callback;\n        },\n\n        onBank: function(callback) {\n            this.bankCallback = callback;\n        },\n\n        onAbility: function(callback) {\n            this.abilityCallback = callback;\n        },\n\n        onQuest: function(callback) {\n            this.questCallback = callback;\n        },\n\n        onNotification: function(callback) {\n            this.notificationCallback = callback;\n        },\n\n        onBlink: function(callback) {\n            this.blinkCallback = callback;\n        },\n\n        onHeal: function(callback) {\n            this.healCallback = callback;\n        },\n\n        onExperience: function(callback) {\n            this.experienceCallback = callback;\n        },\n\n        onDeath: function(callback) {\n            this.deathCallback = callback;\n        },\n\n        onAudio: function(callback) {\n            this.audioCallback = callback;\n        },\n\n        onNPC: function(callback) {\n            this.npcCallback = callback;\n        },\n\n        onRespawn: function(callback) {\n            this.respawnCallback = callback;\n        },\n\n        onEnchant: function(callback) {\n            this.enchantCallback = callback;\n        },\n\n        onGuild: function(callback) {\n            this.guildCallback = callback;\n        },\n\n        onPointer: function(callback) {\n            this.pointerCallback = callback;\n        },\n\n        onPVP: function(callback) {\n            this.pvpCallback = callback;\n        },\n\n        onShop: function(callback) {\n            this.shopCallback = callback;\n        },\n\n        onMinigame: function(callback) {\n            this.minigameCallback = callback;\n        },\n\n        onRegion: function(callback) {\n            this.regionCallback = callback;\n        },\n\n        onOverlay: function(callback) {\n            this.overlayCallback = callback;\n        },\n\n        onCamera: function(callback) {\n            this.cameraCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/network/messages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "Kaetram-Open/client/js/network/packets.js",
    "content": "Packets = {\n    Handshake: 0,\n    Intro: 1,\n    Welcome: 2,\n    Spawn: 3,\n    List: 4,\n    Who: 5,\n    Equipment: 6,\n    Ready: 7,\n    Sync: 8,\n    Movement: 9,\n    Teleport: 10,\n    Request: 11,\n    Despawn: 12,\n    Target: 13,\n    Combat: 14,\n    Animation: 15,\n    Projectile: 16,\n    Population: 17,\n    Points: 18,\n    Network: 19,\n    Chat: 20,\n    Command: 21,\n    Inventory: 22,\n    Bank: 23,\n    Ability: 24,\n    Quest: 25,\n    Notification: 26,\n    Blink: 27,\n    Heal: 28,\n    Experience: 29,\n    Death: 30,\n    Audio: 31,\n    NPC: 32,\n    Respawn: 33,\n    Trade: 34,\n    Enchant: 35,\n    Guild: 36,\n    Pointer: 37,\n    PVP: 38,\n    Click: 39,\n    Warp: 40,\n    Shop: 41,\n    Minigame: 42,\n    Region: 43,\n    Overlay: 44,\n    Camera: 45\n};\n\nPackets.IntroOpcode = {\n    Login: 0,\n    Register: 1,\n    Guest: 2\n};\n\nPackets.EquipmentOpcode = {\n    Batch: 0,\n    Equip: 1,\n    Unequip: 2\n};\n\nPackets.MovementOpcode = {\n    Request: 0,\n    Started: 1,\n    Step: 2,\n    Stop: 3,\n    Move: 4,\n    Orientate: 5,\n    Follow: 6,\n    Entity: 7,\n    Freeze: 8,\n    Stunned: 9\n};\n\nPackets.TargetOpcode = {\n    Talk: 0,\n    Attack: 1,\n    None: 2\n};\n\nPackets.CombatOpcode = {\n    Initiate: 0,\n    Hit: 1,\n    Finish: 2,\n    Sync: 3\n};\n\nPackets.ProjectileOpcode = {\n    Static: 0,\n    Dynamic: 1,\n    Create: 2,\n    Update: 3,\n    Impact: 4\n};\n\nPackets.NetworkOpcode = {\n    Ping: 0,\n    Pong: 1\n};\n\nPackets.InventoryOpcode = {\n    Batch: 0,\n    Add: 1,\n    Remove: 2,\n    Select: 3\n};\n\nPackets.BankOpcode = {\n    Batch: 0,\n    Add: 1,\n    Remove: 2,\n    Select: 3\n};\n\nPackets.QuestOpcode = {\n    QuestBatch: 0,\n    AchievementBatch: 1,\n    Progress: 2,\n    Finish: 3\n};\n\nPackets.NotificationOpcode = {\n    Ok: 0,\n    YesNo: 1,\n    Text: 2\n};\n\nPackets.NPCOpcode = {\n    Talk: 0,\n    Store: 1,\n    Bank: 2,\n    Enchant: 3,\n    Countdown: 4\n};\n\nPackets.TradeOpcode = {\n    Request: 1,\n    Accept: 2,\n    Decline: 3\n};\n\nPackets.EnchantOpcode = {\n    Select: 0,\n    Remove: 1,\n    Enchant: 2,\n    Update: 3\n};\n\nPackets.GuildOpcode = {\n    Create: 0,\n    Join: 1,\n    Leave: 2,\n    Rank: 3,\n    Loot: 4\n};\n\nPackets.PointerOpcode = {\n    Location: 0,\n    NPC: 1,\n    Relative: 2,\n    Remove: 3,\n    Button: 4\n};\n\nPackets.ShopOpcode = {\n    Open: 0,\n    Buy: 1,\n    Sell: 2,\n    Refresh: 3\n};\n\nPackets.MinigameOpcode = {\n    TeamWar: 1,\n\n    TeamWarOpcode: {\n        Enter: 0,\n        Team: 1,\n        Red: 2,\n        Blue: 3,\n        Leave: 4\n    }\n};\n\nPackets.RegionOpcode = {\n    Render: 0,\n    Modify: 1,\n    Collision: 2,\n    Update: 3,\n    Reset: 4\n};\n\nPackets.OverlayOpcode = {\n    Set: 0,\n    Remove: 1,\n    Lamp: 2,\n    RemoveLamps: 3,\n    Darkness: 4\n};\n\nPackets.CameraOpcode = {\n    LockX: 0,\n    LockY: 1,\n    FreeFlow: 2,\n    Player: 3\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/network/packets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "Kaetram-Open/client/js/network/socket.js",
    "content": "/* global log */\n\ndefine(['./packets', './messages'], function(Packets, Messages) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n            self.config = self.game.app.config;\n            self.connection = null;\n\n            self.listening = false;\n\n            self.disconnected = false;\n\n            self.messages = new Messages(self.game.app);\n        },\n\n        connect: function() {\n            var self = this,\n                url;\n\n            if (self.config.ssl) url = 'wss://' + self.config.ip;\n            else url = 'ws://' + self.config.ip + ':' + self.config.port;\n\n            self.connection = null;\n\n            self.connection = io(url, {\n                forceNew: true,\n                reconnection: false\n            });\n\n            self.connection.on('connect_error', function() {\n                log.info('Failed to connect to: ' + self.config.ip);\n\n                self.listening = false;\n\n                self.game.app.toggleLogin(false);\n\n                if (self.game.isDebug()) {\n                    self.game.app.sendError(\n                        null,\n                        \"Couldn't connect to \" +\n                            self.config.ip +\n                            ':' +\n                            self.config.port\n                    );\n                } else {\n                    self.game.app.sendError(\n                        null,\n                        'Could not connect to the game server.'\n                    );\n                }\n            });\n\n            self.connection.on('connect', function() {\n                self.listening = true;\n\n                log.info('Connection established...');\n\n                self.game.app.updateLoader('Preparing Handshake');\n\n                self.connection.emit('client', {\n                    gVer: self.config.version,\n                    cType: 'HTML5'\n                });\n            });\n\n            self.connection.on('message', function(message) {\n                var actualMessage = message.message ? message.message : message;\n\n                self.receive(actualMessage);\n            });\n\n            self.connection.on('disconnect', function() {\n                self.game.handleDisconnection();\n            });\n        },\n\n        receive: function(message) {\n            var self = this;\n\n            if (!self.listening) return;\n\n            if (message.startsWith('[')) {\n                var data = JSON.parse(message);\n\n                if (data.length > 1) self.messages.handleBulkData(data);\n                else self.messages.handleData(JSON.parse(message).shift());\n            } else self.messages.handleUTF8(message);\n        },\n\n        send: function(packet, data) {\n            var self = this,\n                json = JSON.stringify([packet, data]);\n\n            if (self.connection && self.connection.connected)\n                self.connection.send(json);\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/network/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/bubbles/blob.js",
    "content": "define(['../../utils/timer'], function(Timer) {\n    return Class.extend({\n        init: function(id, element, duration) {\n            var self = this;\n\n            self.id = id;\n            self.element = element;\n            self.duration = duration || 5000;\n\n            self.time = new Date().getTime();\n            self.timer = new Timer(self.time, self.duration);\n        },\n\n        isOver: function(time) {\n            return this.timer.isOver(time);\n        },\n\n        reset: function(time) {\n            this.timer.time = time;\n        },\n\n        destroy: function() {\n            $(this.element).remove();\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/bubbles/blob.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/camera.js",
    "content": "/* global Modules, log */\n\ndefine(function() {\n    return Class.extend({\n        init: function(renderer) {\n            var self = this;\n\n            self.renderer = renderer;\n            self.map = renderer.map;\n            self.app = renderer.game.app;\n\n            self.offset = 0.5;\n            self.x = 0;\n            self.y = 0;\n\n            self.dX = 0;\n            self.dY = 0;\n\n            self.gridX = 0;\n            self.gridY = 0;\n\n            self.prevGridX = 0;\n            self.prevGridY = 0;\n\n            self.tileSize = self.renderer.tileSize;\n\n            self.speed = 1;\n            self.panning = false;\n            self.centered = true;\n            self.player = null;\n\n            self.lockX = false;\n            self.lockY = false;\n\n            self.update();\n        },\n\n        update: function() {\n            var self = this,\n                scale = self.renderer.getScale(),\n                borderWidth = self.app.border.width(),\n                borderHeight = self.app.border.height(),\n                factorWidth = Math.ceil(borderWidth / self.tileSize / scale),\n                factorHeight = Math.ceil(borderHeight / self.tileSize / scale);\n\n            self.gridWidth = factorWidth;\n            self.gridHeight = factorHeight;\n\n            self.borderX =\n                self.map.width * self.tileSize - self.gridWidth * self.tileSize;\n            self.borderY =\n                self.map.height * self.tileSize -\n                self.gridHeight * self.tileSize;\n        },\n\n        setPosition: function(x, y) {\n            var self = this;\n\n            self.x = x;\n            self.y = y;\n\n            self.prevGridX = self.gridX;\n            self.prevGridY = self.gridY;\n\n            self.gridX = Math.floor(x / 16);\n            self.gridY = Math.floor(y / 16);\n        },\n\n        clip: function() {\n            this.setGridPosition(\n                Math.round(this.x / 16),\n                Math.round(this.y / 16)\n            );\n        },\n\n        center: function() {\n            var self = this;\n\n            if (self.centered) return;\n\n            self.centered = true;\n            self.centreOn(self.player);\n\n            self.renderer.verifyCentration();\n        },\n\n        decenter: function() {\n            var self = this;\n\n            if (!self.centered) return;\n\n            self.clip();\n            self.centered = false;\n\n            self.renderer.verifyCentration();\n        },\n\n        setGridPosition: function(x, y) {\n            var self = this;\n\n            self.prevGridX = self.gridX;\n            self.prevGridY = self.gridY;\n\n            self.gridX = x;\n            self.gridY = y;\n\n            self.x = self.gridX * 16;\n            self.y = self.gridY * 16;\n        },\n\n        setPlayer: function(player) {\n            var self = this;\n\n            self.player = player;\n\n            self.centreOn(self.player);\n        },\n\n        handlePanning: function(direction) {\n            var self = this;\n\n            if (!self.panning) return;\n\n            switch (direction) {\n                case Modules.Keys.Up:\n                    self.setPosition(self.x, self.y - 1);\n                    break;\n\n                case Modules.Keys.Down:\n                    self.setPosition(self.x, self.y + 1);\n                    break;\n\n                case Modules.Keys.Left:\n                    self.setPosition(self.x - 1, self.y);\n                    break;\n\n                case Modules.Keys.Right:\n                    self.setPosition(self.x + 1, self.y);\n                    break;\n            }\n        },\n\n        centreOn: function(entity) {\n            var self = this;\n\n            if (!entity) return;\n\n            var width = Math.floor(self.gridWidth / 2),\n                height = Math.floor(self.gridHeight / 2),\n                nextX = entity.x - width * self.tileSize,\n                nextY = entity.y - height * self.tileSize;\n\n            if (nextX >= 0 && nextX <= self.borderX && !self.lockX) {\n                self.x = nextX;\n                self.gridX = Math.round(entity.x / 16) - width;\n            } else self.offsetX(nextX);\n\n            if (nextY >= 0 && nextY <= self.borderY && !self.lockY) {\n                self.y = nextY;\n                self.gridY = Math.round(entity.y / 16) - height;\n            } else self.offsetY(nextY);\n        },\n\n        forceCentre: function(entity) {\n            var self = this;\n\n            if (!entity) return;\n\n            var width = Math.floor(self.gridWidth / 2),\n                height = Math.floor(self.gridHeight / 2);\n\n            self.x = entity.x - width * self.tileSize;\n            self.gridX = Math.round(entity.x / 16) - width;\n\n            self.y = entity.y - height * self.tileSize;\n            self.gridY = Math.round(entity.y / 16) - height;\n        },\n\n        offsetX: function(nextX) {\n            var self = this;\n\n            if (nextX <= 16) {\n                self.x = 0;\n                self.gridX = 0;\n            } else if (nextX >= self.borderX) {\n                self.x = self.borderX;\n                self.gridX = Math.round(self.borderX / 16);\n            }\n        },\n\n        offsetY: function(nextY) {\n            var self = this;\n\n            if (nextY <= 16) {\n                self.y = 0;\n                self.gridY = 0;\n            } else if (nextY >= self.borderY) {\n                self.y = self.borderY;\n                self.gridY = Math.round(self.borderY / 16);\n            }\n        },\n\n        zone: function(direction) {\n            var self = this;\n\n            switch (direction) {\n                case Modules.Orientation.Up:\n                    self.setGridPosition(\n                        self.gridX,\n                        self.gridY - self.gridHeight + 2\n                    );\n\n                    break;\n\n                case Modules.Orientation.Down:\n                    self.setGridPosition(\n                        self.gridX,\n                        self.gridY + self.gridHeight - 2\n                    );\n\n                    break;\n\n                case Modules.Orientation.Right:\n                    self.setGridPosition(\n                        self.gridX + self.gridWidth - 2,\n                        self.gridY\n                    );\n\n                    break;\n\n                case Modules.Orientation.Left:\n                    self.setGridPosition(\n                        self.gridX - self.gridWidth + 2,\n                        self.gridY\n                    );\n\n                    break;\n            }\n        },\n\n        forEachVisiblePosition: function(callback, offset) {\n            var self = this;\n\n            if (!offset) offset = 1;\n\n            for (\n                var y = self.gridY - offset,\n                    maxY = y + self.gridHeight + offset * 2;\n                y < maxY;\n                y++\n            ) {\n                for (\n                    var x = self.gridX - offset,\n                        maxX = x + self.gridWidth + offset * 2;\n                    x < maxX;\n                    x++\n                )\n                    callback(x, y);\n            }\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/camera.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/grids.js",
    "content": "/* global log */\n\ndefine(function() {\n    return Class.extend({\n        init: function(map) {\n            var self = this;\n\n            self.map = map;\n\n            self.renderingGrid = [];\n            self.pathingGrid = [];\n            self.entityGrid = [];\n            self.itemGrid = [];\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            for (var i = 0; i < self.map.height; i++) {\n                self.renderingGrid[i] = [];\n                self.pathingGrid[i] = [];\n                self.entityGrid[i] = [];\n                self.itemGrid[i] = [];\n\n                for (var j = 0; j < self.map.width; j++) {\n                    self.renderingGrid[i][j] = {};\n                    self.pathingGrid[i][j] = self.map.grid[i][j];\n                    self.entityGrid[i][j] = {};\n                    self.itemGrid[i][j] = {};\n                }\n            }\n\n            if (self.map.game.isDebug()) log.info('Finished generating grids.');\n        },\n\n        checkPathingGrid: function(player, xRadius, yRadius) {\n            var self = this;\n\n            for (\n                var y = player.gridY - yRadius;\n                y < player.gridY + yRadius;\n                y++\n            ) {\n                for (\n                    var x = player.gridX - xRadius;\n                    x < player.gridX + xRadius;\n                    x++\n                ) {\n                    if (\n                        !self.map.isColliding(x, y) &&\n                        _.size(self.entityGrid[y][x] === 0)\n                    )\n                        self.removeFromPathingGrid(x, y);\n                }\n            }\n        },\n\n        resetPathingGrid: function() {\n            var self = this;\n\n            self.pathingGrid = [];\n\n            for (var i = 0; i < self.map.height; i++) {\n                self.pathingGrid[i] = [];\n\n                for (var j = 0; j < self.map.width; j++)\n                    self.pathingGrid[i][j] = self.map.grid[i][j];\n            }\n        },\n\n        addToRenderingGrid: function(entity, x, y) {\n            var self = this;\n\n            if (!self.map.isOutOfBounds(x, y))\n                self.renderingGrid[y][x][entity.id] = entity;\n        },\n\n        addToPathingGrid: function(x, y) {\n            this.pathingGrid[y][x] = 1;\n        },\n\n        addToEntityGrid: function(entity, x, y) {\n            var self = this;\n\n            if (entity && self.entityGrid[y][x])\n                self.entityGrid[y][x][entity.id] = entity;\n        },\n\n        addToItemGrid: function(item, x, y) {\n            var self = this;\n\n            if (item && self.itemGrid[y][x])\n                self.itemGrid[y][x][item.id] = item;\n        },\n\n        removeFromRenderingGrid: function(entity, x, y) {\n            var self = this;\n\n            if (\n                entity &&\n                self.renderingGrid[y][x] &&\n                entity.id in self.renderingGrid[y][x]\n            )\n                delete self.renderingGrid[y][x][entity.id];\n        },\n\n        removeFromPathingGrid: function(x, y) {\n            this.pathingGrid[y][x] = 0;\n        },\n\n        removeFromMapGrid: function(x, y) {\n            this.map.grid[y][x] = 0;\n        },\n\n        removeFromEntityGrid: function(entity, x, y) {\n            var self = this;\n\n            if (\n                entity &&\n                self.entityGrid[y][x] &&\n                entity.id in self.entityGrid[y][x]\n            )\n                delete self.entityGrid[y][x][entity.id];\n        },\n\n        removeFromItemGrid: function(item, x, y) {\n            var self = this;\n\n            if (item && self.itemGrid[y][x][item.id])\n                delete self.itemGrid[y][x][item.id];\n        },\n\n        removeEntity: function(entity) {\n            var self = this;\n\n            if (entity) {\n                self.removeFromEntityGrid(entity, entity.gridX, entity.gridY);\n                self.removeFromPathingGrid(entity.gridX, entity.gridY);\n                self.removeFromRenderingGrid(\n                    entity,\n                    entity.gridX,\n                    entity.gridY\n                );\n\n                if (entity.nextGridX > -1 && entity.nextGridY > -1) {\n                    self.removeFromEntityGrid(\n                        entity,\n                        entity.nextGridX,\n                        entity.nextGridY\n                    );\n                    self.removeFromPathingGrid(\n                        entity.nextGridX,\n                        entity.nextGridY\n                    );\n                }\n            }\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/grids.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/infos/splat.js",
    "content": "/* global Modules */\n\ndefine(function() {\n    return Class.extend({\n        init: function(id, type, text, x, y, statique) {\n            var self = this;\n\n            self.id = id;\n            self.type = type;\n            self.text = text;\n            self.x = x;\n            self.y = y;\n\n            self.statique = statique;\n\n            self.opacity = 1.0;\n            self.lastTime = 0;\n            self.speed = 100;\n\n            self.duration = 1000;\n        },\n\n        setColours: function(fill, stroke) {\n            this.fill = fill;\n            this.stroke = stroke;\n        },\n\n        setDuration: function(duration) {\n            this.duration = duration;\n        },\n\n        tick: function() {\n            var self = this;\n\n            if (!self.statique) self.y -= 1;\n\n            self.opacity -= 70 / self.duration;\n\n            if (self.opacity < 0) self.destroy();\n        },\n\n        update: function(time) {\n            var self = this;\n\n            if (time - self.lastTime > self.speed) {\n                self.lastTime = time;\n                self.tick();\n            }\n        },\n\n        destroy: function() {\n            var self = this;\n\n            if (self.destroyCallback) self.destroyCallback(self.id);\n        },\n\n        onDestroy: function(callback) {\n            this.destroyCallback = callback;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/infos/splat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/overlay.js",
    "content": "/* global log */\n\ndefine(function() {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n\n            self.overlays = {};\n            self.currentOverlay = null;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.overlays['fog.png'] = self.loadOverlay('fog.png');\n        },\n\n        loadOverlay: function(overlayName) {\n            var self = this,\n                overlay = new Image();\n\n            overlay.crossOrigin = 'Anonymous';\n            overlay.src = 'img/overlays/' + overlayName;\n\n            overlay.onload = function() {\n                if (self.game.isDebug()) log.info('Loaded ' + overlayName);\n            };\n\n            return overlay;\n        },\n\n        updateOverlay(overlay) {\n            var self = this;\n\n            if (overlay in self.overlays)\n                self.currentOverlay = self.overlays[overlay];\n            else self.currentOverlay = overlay;\n        },\n\n        getFog: function() {\n            return this.currentOverlay;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/overlay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/pointers/pointer.js",
    "content": "define(function() {\n    return Class.extend({\n        init: function(id, element, type) {\n            var self = this;\n\n            self.id = id;\n            self.element = element;\n            self.type = type;\n\n            self.blinkInterval = null;\n            self.visible = true;\n\n            self.x = -1;\n            self.y = -1;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            self.blinkInterval = setInterval(function() {\n                if (self.visible) self.hide();\n                else self.show();\n\n                self.visible = !self.visible;\n            }, 600);\n        },\n\n        destroy: function() {\n            var self = this;\n\n            clearInterval(self.blinkInterval);\n\n            if (self.type === Modules.Pointers.Button) self.hide();\n            else self.element.remove();\n        },\n\n        setPosition: function(x, y) {\n            var self = this;\n\n            self.x = x;\n            self.y = y;\n        },\n\n        show: function() {\n            if (this.type === Modules.Pointers.Button)\n                this.element.addClass('active');\n            else this.element.css('display', 'block');\n        },\n\n        hide: function() {\n            if (this.type === Modules.Pointers.Button)\n                this.element.removeClass('active');\n            else this.element.css('display', 'none');\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/pointers/pointer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/renderer.js",
    "content": "/* global _, m4, log, Detect */\n\nvar DarkMask = illuminated.DarkMask,\n    Lamp = illuminated.Lamp,\n    Lighting = illuminated.Lighting,\n    Vec2 = illuminated.Vec2;\n\ndefine([\n    'jquery',\n    './camera',\n    './tile',\n    '../entity/character/player/player',\n    '../entity/character/character',\n    '../entity/objects/item'\n], function($, Camera, Tile, Player, Character, Item) {\n    return Class.extend({\n        init: function(\n            background,\n            entities,\n            foreground,\n            overlay,\n            textCanvas,\n            cursor,\n            game\n        ) {\n            var self = this;\n\n            self.canvas = document.getElementById('canvas');\n            self.background = background;\n            self.entities = entities;\n            self.foreground = foreground;\n            self.overlay = overlay;\n            self.textCanvas = textCanvas;\n            self.cursor = cursor;\n\n            self.context = self.entities.getContext('2d');\n            self.backContext = self.background.getContext('2d');\n            self.foreContext = self.foreground.getContext('2d');\n            self.overlayContext = self.overlay.getContext('2d');\n            self.textContext = self.textCanvas.getContext('2d');\n            self.cursorContext = self.cursor.getContext('2d');\n\n            self.contexts = [self.context, self.backContext, self.foreContext];\n            self.canvases = [\n                self.background,\n                self.entities,\n                self.foreground,\n                self.overlay,\n                self.textCanvas,\n                self.cursor\n            ];\n\n            self.allContexts = [\n                self.context,\n                self.backContext,\n                self.foreContext,\n                self.overlayContext,\n                self.textContext,\n                self.cursorContext\n            ];\n\n            self.context.imageSmoothingEnabled = false;\n            self.backContext.imageSmoothingEnabled = false;\n            self.foreContext.imageSmoothingEnabled = false;\n            self.overlayContext.imageSmoothingEnabled = false;\n            self.textContext.imageSmoothingEnabled = false;\n            self.cursorContext.imageSmoothingEnabled = false;\n\n            self.lightings = [];\n            self.textures = {};\n\n            self.game = game;\n            self.camera = null;\n            self.entities = null;\n            self.input = null;\n\n            self.checkDevice();\n\n            self.tileSize = 16;\n            self.fontSize = 10;\n\n            self.screenWidth = 0;\n            self.screenHeight = 0;\n\n            self.time = new Date();\n\n            self.fps = 0;\n            self.frameCount = 0;\n            self.renderedFrame = [0, 0];\n            self.lastTarget = [0, 0];\n\n            self.animatedTiles = {};\n            self.drawnTiles = [];\n\n            self.resizeTimeout = null;\n            self.autoCentre = false;\n\n            self.drawTarget = false;\n            self.selectedCellVisible = false;\n\n            self.stopRendering = false;\n            self.animateTiles = true;\n            self.debugging = false;\n            self.brightness = 100;\n            self.drawNames = true;\n            self.drawLevels = true;\n            self.forceRendering = false;\n\n            self.load();\n        },\n\n        stop: function() {\n            var self = this;\n\n            self.camera = null;\n            self.input = null;\n            self.stopRendering = true;\n\n            self.forEachContext(function(context) {\n                context.fillStyle = '#12100D';\n                context.fillRect(\n                    0,\n                    0,\n                    context.canvas.width,\n                    context.canvas.height\n                );\n            });\n        },\n\n        load: function() {\n            var self = this;\n\n            self.scale = self.getScale();\n            self.superScaling = self.getSuperScaling();\n\n            self.loadLights();\n            self.handleScaling();\n        },\n\n        removeSmoothing: function() {\n            var self = this;\n\n            self.forAllContexts(function(context) {\n                context.imageSmoothingQuality = 'low';\n\n                context.imageSmoothingEnabled = false;\n                context.webkitImageSmoothingEnabled = false;\n                context.mozImageSmoothingEnabled = false;\n                context.msImageSmoothingEnabled = false;\n                context.oImageSmoothingEnabled = false;\n            });\n        },\n\n        loadSizes: function() {\n            var self = this;\n\n            if (!self.camera) return;\n\n            self.lightTileSize = self.tileSize * self.superScaling;\n\n            self.screenWidth = self.camera.gridWidth * self.tileSize;\n            self.screenHeight = self.camera.gridHeight * self.tileSize;\n\n            self.canvasWidth = self.screenWidth * self.superScaling;\n            self.canvasHeight = self.screenHeight * self.superScaling;\n\n            self.forEachCanvas(function(canvas) {\n                canvas.width = self.canvasWidth;\n                canvas.height = self.canvasHeight;\n            });\n        },\n\n        loadCamera: function() {\n            var self = this,\n                storage = self.game.storage;\n\n            self.camera = new Camera(this);\n\n            self.loadSizes();\n\n            if (\n                storage.data.new &&\n                (self.firefox ||\n                    parseFloat(Detect.androidVersion()) < 6.0 ||\n                    parseFloat(Detect.iOSVersion() < 9.0) ||\n                    Detect.isIpad())\n            ) {\n                self.camera.centered = false;\n\n                storage.data.settings.centerCamera = false;\n                storage.save();\n            }\n        },\n\n        loadLights: function() {\n            var self = this;\n\n            self.darkMask = new DarkMask({\n                lights: [],\n                color: 'rgba(0, 0, 0, 0.84)'\n            });\n\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\n        },\n\n        resize: function() {\n            var self = this;\n\n            self.stopRendering = true;\n\n            self.clearAll();\n\n            self.checkDevice();\n\n            if (!self.resizeTimeout) {\n                self.resizeTimeout = setTimeout(function() {\n                    self.scale = self.getScale();\n                    self.clearScreen(self.cursorContext);\n\n                    if (self.camera) self.camera.update();\n\n                    self.loadSizes();\n\n                    if (self.entities) self.entities.update();\n\n                    if (self.camera) self.camera.centreOn(self.game.player);\n\n                    if (self.game.interface) self.game.interface.resize();\n\n                    self.stopRendering = false;\n                    self.resizeTimeout = null;\n\n                    self.updateAnimatedTiles();\n                }, 500);\n            }\n        },\n\n        render: function() {\n            var self = this;\n\n            if (self.stopRendering) return;\n\n            self.clear();\n\n            self.clearText();\n\n            self.saveAll();\n\n            self.removeSmoothing();\n\n            /**\n             * Rendering related draws\n             */\n\n            self.draw();\n\n            self.drawOverlays();\n\n            self.drawTargetCell();\n\n            self.drawSelectedCell();\n\n            self.drawEntities();\n\n            self.drawInfos();\n\n            self.drawDebugging();\n\n            self.drawCursor();\n\n            self.calculateFPS();\n\n            self.restoreAll();\n        },\n\n        /**\n         * Context Drawing\n         */\n\n        draw: function() {\n            var self = this;\n\n            self.updateDrawingView();\n\n            self.forEachVisibleTile(function(id, index) {\n                var isHighTile = self.map.isHighTile(id),\n                    isLightTile = self.map.isLightTile(id),\n                    context = isLightTile\n                        ? self.overlayContext\n                        : isHighTile\n                        ? self.foreContext\n                        : self.backContext;\n\n                if (!self.map.isAnimatedTile(id) || !self.animateTiles)\n                    self.drawTile(context, id, self.map.width, index);\n            });\n\n            if (self.animateTiles) {\n                self.forEachAnimatedTile(function(tile) {\n                    self.drawTile(\n                        self.backContext,\n                        tile.id,\n                        self.map.width,\n                        tile.index\n                    );\n                    tile.loaded = true;\n                });\n            }\n        },\n\n        drawOverlays: function() {\n            var self = this,\n                overlay = self.game.overlays.getFog();\n\n            if (overlay) {\n                self.overlayContext.save();\n\n                if (overlay !== 'empty') {\n                    self.overlayContext.fillStyle = self.overlayContext.createPattern(\n                        overlay,\n                        'repeat'\n                    );\n                    self.overlayContext.fillRect(\n                        0,\n                        0,\n                        self.screenWidth * self.superScaling,\n                        self.screenHeight * self.superScaling\n                    );\n                    self.overlayContext.fill();\n                }\n\n                self.overlayContext.globalCompositeOperation = 'lighter';\n\n                self.forEachLighting(function(lighting) {\n                    if (self.inRadius(lighting)) self.drawLighting(lighting);\n                });\n\n                self.overlayContext.globalCompositeOperation = 'source-over';\n                self.darkMask.render(self.overlayContext);\n\n                self.overlayContext.restore();\n            }\n        },\n\n        drawInfos: function() {\n            var self = this;\n\n            if (self.game.info.getCount() === 0) return;\n\n            self.game.info.forEachInfo(function(info) {\n                self.textContext.save();\n                self.textContext.font = '20px AdvoCut';\n                self.setCameraView(self.textContext);\n                self.textContext.globalAlpha = info.opacity;\n                self.drawText(\n                    '' + info.text,\n                    Math.floor(info.x + 8),\n                    Math.floor(info.y),\n                    true,\n                    info.fill,\n                    info.stroke\n                );\n                self.textContext.restore();\n            });\n        },\n\n        drawDebugging: function() {\n            var self = this;\n\n            if (!self.debugging) return;\n\n            self.drawFPS();\n\n            if (!self.mobile) {\n                self.drawPosition();\n                self.drawCollisions();\n            }\n\n            self.drawPathing();\n        },\n\n        drawEntities: function() {\n            var self = this;\n\n            self.forEachVisibleEntity(function(entity) {\n                if (entity.spriteLoaded) self.drawEntity(entity);\n            });\n        },\n\n        drawEntity: function(entity) {\n            var self = this,\n                sprite = entity.sprite,\n                animation = entity.currentAnimation,\n                data = entity.renderingData;\n\n            if (!sprite || !animation || !entity.isVisible()) return;\n\n            var frame = animation.currentFrame,\n                x = frame.x * self.superScaling,\n                y = frame.y * self.superScaling,\n                dx = entity.x * self.superScaling,\n                dy = entity.y * self.superScaling,\n                flipX = dx + self.tileSize * self.superScaling,\n                flipY = dy + data.height;\n\n            self.context.save();\n            self.setCameraView(self.context);\n\n            if (entity.id !== self.game.player.id)\n                self.context.globalCompositeOperation = 'destination-over';\n\n            if (data.sprite !== sprite) {\n                data.sprite = sprite;\n\n                data.width = sprite.width * self.superScaling;\n                data.height = sprite.height * self.superScaling;\n                data.ox = sprite.offsetX * self.superScaling;\n                data.oy = sprite.offsetY * self.superScaling;\n\n                if (entity.angled) data.angle = (entity.angle * Math.PI) / 180;\n\n                if (entity.hasShadow()) {\n                    data.shadowWidth =\n                        self.shadowSprite.width * self.superScaling;\n                    data.shadowHeight =\n                        self.shadowSprite.height * self.superScaling;\n\n                    data.shadowOffsetY =\n                        entity.shadowOffsetY * self.superScaling;\n                }\n            }\n\n            if (entity.fading) self.context.globalAlpha = entity.fadingAlpha;\n\n            if (entity.spriteFlipX) {\n                self.context.translate(flipX, dy);\n                self.context.scale(-1, 1);\n            } else if (entity.spriteFlipY) {\n                self.context.translate(dx, flipY);\n                self.context.scale(1, -1);\n            } else self.context.translate(dx, dy);\n\n            if (entity.angled) self.context.rotate(data.angle);\n\n            if (entity.hasShadow()) {\n                self.context.globalCompositeOperation = 'source-over';\n\n                self.context.drawImage(\n                    self.shadowSprite.image,\n                    0,\n                    0,\n                    data.shadowWidth,\n                    data.shadowHeight,\n                    0,\n                    data.shadowOffsetY,\n                    data.shadowWidth,\n                    data.shadowHeight\n                );\n            }\n\n            self.drawEntityBack(entity);\n\n            self.context.drawImage(\n                sprite.image,\n                x,\n                y,\n                data.width,\n                data.height,\n                data.ox,\n                data.oy,\n                data.width,\n                data.height\n            );\n\n            self.drawEntityFore(entity);\n\n            self.context.restore();\n\n            self.drawHealth(entity);\n\n            if (!self.game.overlays.getFog()) self.drawName(entity);\n        },\n\n        drawEntityBack: function(entity) {\n            var self = this;\n\n            /**\n             * Function used to draw special effects prior\n             * to rendering the entity.\n             */\n        },\n\n        drawEntityFore: function(entity) {\n            var self = this;\n\n            /**\n             * Function used to draw special effects after\n             * having rendererd the entity\n             */\n\n            if (\n                entity instanceof Character &&\n                !entity.dead &&\n                !entity.teleporting\n            ) {\n                if (entity.hasWeapon()) {\n                    var weapon = self.entities.getSprite(\n                        entity.weapon.getString()\n                    );\n\n                    if (weapon) {\n                        if (!weapon.loaded) weapon.load();\n\n                        var animation = entity.currentAnimation,\n                            weaponAnimationData =\n                                weapon.animationData[animation.name],\n                            frame = entity.currentAnimation.currentFrame,\n                            index =\n                                frame.index < weaponAnimationData.length\n                                    ? frame.index\n                                    : frame.index % weaponAnimationData.length,\n                            weaponX = weapon.width * index * self.superScaling,\n                            weaponY =\n                                weapon.height *\n                                animation.row *\n                                self.superScaling,\n                            weaponWidth = weapon.width * self.superScaling,\n                            weaponHeight = weapon.height * self.superScaling;\n\n                        self.context.drawImage(\n                            weapon.image,\n                            weaponX,\n                            weaponY,\n                            weaponWidth,\n                            weaponHeight,\n                            weapon.offsetX * self.superScaling,\n                            weapon.offsetY * self.superScaling,\n                            weaponWidth,\n                            weaponHeight\n                        );\n                    }\n                }\n\n                if (\n                    entity.terror ||\n                    entity.stunned ||\n                    entity.critical ||\n                    entity.explosion\n                ) {\n                    var sprite = self.entities.getSprite(\n                        entity.getActiveEffect()\n                    );\n\n                    if (!sprite.loaded) sprite.load();\n\n                    if (sprite) {\n                        var animation = entity.getEffectAnimation(),\n                            index = animation.currentFrame.index,\n                            x = sprite.width * index * self.superScaling,\n                            y =\n                                sprite.height *\n                                animation.row *\n                                self.superScaling,\n                            width = sprite.width * self.superScaling,\n                            height = sprite.height * self.superScaling,\n                            offsetX = sprite.offsetX * self.superScaling,\n                            offsetY = sprite.offsetY * self.superScaling;\n\n                        self.context.drawImage(\n                            sprite.image,\n                            x,\n                            y,\n                            width,\n                            height,\n                            offsetX,\n                            offsetY,\n                            width,\n                            height\n                        );\n                    }\n                }\n            }\n\n            if (entity instanceof Item) {\n                var sparksAnimation = self.entities.sprites.sparksAnimation,\n                    sparksFrame = sparksAnimation.currentFrame,\n                    sparksX =\n                        self.sparksSprite.width *\n                        sparksFrame.index *\n                        self.superScaling,\n                    sparksY =\n                        self.sparksSprite.height *\n                        sparksAnimation.row *\n                        self.superScaling,\n                    sparksWidth = self.sparksSprite.width * self.superScaling,\n                    sparksHeight = self.sparksSprite.height * self.superScaling;\n\n                self.context.drawImage(\n                    self.sparksSprite.image,\n                    sparksX,\n                    sparksY,\n                    sparksWidth,\n                    sparksHeight,\n                    0,\n                    0,\n                    sparksWidth,\n                    sparksHeight\n                );\n            }\n        },\n\n        drawHealth: function(entity) {\n            var self = this;\n\n            if (\n                !entity.hitPoints ||\n                entity.hitPoints < 0 ||\n                !entity.healthBarVisible\n            )\n                return;\n\n            var barLength = 16,\n                healthX = entity.x * self.superScaling - barLength / 2 + 8,\n                healthY = (entity.y - 9) * self.superScaling,\n                healthWidth = Math.round(\n                    (entity.hitPoints / entity.maxHitPoints) *\n                        barLength *\n                        self.superScaling\n                ),\n                healthHeight = 2 * self.superScaling;\n\n            self.context.save();\n            self.setCameraView(self.context);\n            self.context.strokeStyle = '#00000';\n            self.context.lineWidth = 1;\n            self.context.strokeRect(\n                healthX,\n                healthY,\n                barLength * self.superScaling,\n                healthHeight\n            );\n            self.context.fillStyle = '#FD0000';\n            self.context.fillRect(healthX, healthY, healthWidth, healthHeight);\n            self.context.restore();\n        },\n\n        drawName: function(entity) {\n            var self = this;\n\n            if (entity.hidden || (!self.drawNames && !self.drawLevels)) return;\n\n            var colour = entity.wanted ? 'red' : 'white';\n\n            if (entity.rights > 1) colour = '#ba1414';\n            else if (entity.rights > 0) colour = '#a59a9a';\n\n            if (entity.id === self.game.player.id) colour = '#fcda5c';\n\n            self.textContext.save();\n            self.setCameraView(self.textContext);\n            self.textContext.font = '11px AdvoCut';\n\n            if (entity.drawNames()) {\n                if (!entity.hasCounter) {\n                    if (\n                        self.drawNames &&\n                        (entity.type === 'mob' || entity.type === 'player')\n                    ) {\n                        self.drawText(\n                            entity.type === 'player'\n                                ? entity.username\n                                : entity.name,\n                            entity.x + 8,\n                            entity.y - (self.drawLevels ? 20 : 10),\n                            true,\n                            colour,\n                            '#000'\n                        );\n                    }\n\n                    if (\n                        self.drawLevels &&\n                        (entity.type === 'mob' || entity.type === 'player')\n                    ) {\n                        self.drawText(\n                            'Level ' + entity.level,\n                            entity.x + 8,\n                            entity.y - (entity.type === 'player' ? 12 : 10),\n                            true,\n                            colour,\n                            '#000'\n                        );\n                    }\n\n                    if (entity.type === 'item' && entity.count > 1) {\n                        self.drawText(\n                            entity.count,\n                            entity.x + 8,\n                            entity.y - 10,\n                            true,\n                            colour\n                        );\n                    }\n                } else {\n                    if (self.game.time - entity.countdownTime > 1000) {\n                        entity.countdownTime = self.game.time;\n                        entity.counter--;\n                    }\n\n                    if (entity.counter <= 0) entity.hasCounter = false;\n\n                    self.drawText(\n                        entity.counter,\n                        entity.x + 8,\n                        entity.y - 10,\n                        true,\n                        colour\n                    );\n                }\n            }\n\n            self.textContext.restore();\n        },\n\n        drawLighting: function(lighting) {\n            var self = this;\n\n            if (lighting.relative) {\n                var lightX =\n                        (lighting.light.origX - self.camera.x / 16) *\n                        self.lightTileSize,\n                    lightY =\n                        (lighting.light.origY - self.camera.y / 16) *\n                        self.lightTileSize;\n\n                lighting.light.position = new Vec2(lightX, lightY);\n                lighting.compute(self.overlay.width, self.overlay.height);\n                self.darkMask.compute(self.overlay.width, self.overlay.height);\n            } else if (!lighting.computed) {\n                lighting.compute(self.overlay.width, self.overlay.height);\n                lighting.computed = true;\n            }\n\n            lighting.render(self.overlayContext);\n        },\n\n        drawCursor: function() {\n            var self = this;\n\n            if (\n                self.tablet ||\n                self.mobile ||\n                self.hasRenderedMouse() ||\n                self.input.cursorMoved\n            )\n                return;\n\n            var cursor = self.input.cursor,\n                scaling = 14 * self.superScaling;\n\n            self.clearScreen(self.cursorContext);\n            self.cursorContext.save();\n\n            if (cursor && self.scale > 1) {\n                if (!cursor.loaded) cursor.load();\n\n                if (cursor.loaded) {\n                    self.cursorContext.drawImage(\n                        cursor.image,\n                        0,\n                        0,\n                        scaling,\n                        scaling,\n                        self.input.mouse.x,\n                        self.input.mouse.y,\n                        scaling,\n                        scaling\n                    );\n                }\n            }\n\n            self.cursorContext.restore();\n\n            self.saveMouse();\n        },\n\n        calculateFPS: function() {\n            var self = this;\n\n            if (!self.debugging) return;\n\n            var currentTime = new Date(),\n                timeDiff = currentTime - self.time;\n\n            if (timeDiff >= 1000) {\n                self.realFPS = self.frameCount;\n                self.frameCount = 0;\n                self.time = currentTime;\n                self.fps = self.realFPS;\n            }\n\n            self.frameCount++;\n        },\n\n        drawFPS: function() {\n            this.drawText('FPS: ' + this.realFPS, 10, 11, false, 'white');\n        },\n\n        drawPosition: function() {\n            var self = this,\n                player = self.game.player;\n\n            self.drawText(\n                'x: ' + player.gridX + ' y: ' + player.gridY,\n                10,\n                31,\n                false,\n                'white'\n            );\n            self.drawText(\n                'x: ' +\n                    self.input.getCoords().x +\n                    ' y: ' +\n                    self.input.getCoords().y +\n                    ' instance: ' +\n                    self.input.hoveringInstance,\n                10,\n                51,\n                false,\n                'white'\n            );\n        },\n\n        drawCollisions: function() {\n            var self = this,\n                pathingGrid = self.entities.grids.pathingGrid;\n\n            if (!pathingGrid) return;\n\n            self.camera.forEachVisiblePosition(function(x, y) {\n                if (\n                    x < 0 ||\n                    y < 0 ||\n                    x > self.map.width - 1 ||\n                    y > self.map.height - 1\n                )\n                    return;\n\n                if (pathingGrid[y][x] !== 0)\n                    self.drawCellHighlight(x, y, 'rgba(50, 50, 255, 0.5)');\n            });\n        },\n\n        drawPathing: function() {\n            var self = this;\n\n            if (!self.game.player.hasPath()) return;\n\n            _.each(self.game.player.path, function(path) {\n                self.drawCellHighlight(\n                    path[0],\n                    path[1],\n                    'rgba(50, 255, 50, 0.5)'\n                );\n            });\n        },\n\n        drawSelectedCell: function() {\n            var self = this;\n\n            if (!self.input.selectedCellVisible || self.input.keyMovement)\n                return;\n\n            var posX = self.input.selectedX,\n                posY = self.input.selectedY,\n                tD = self.input.getTargetData(); // target data\n\n            if (tD) {\n                self.context.save();\n                self.setCameraView(self.context);\n\n                self.context.drawImage(\n                    tD.sprite.image,\n                    tD.x,\n                    tD.y,\n                    tD.width,\n                    tD.height,\n                    tD.dx,\n                    tD.dy,\n                    tD.dw,\n                    tD.dh\n                );\n\n                self.context.restore();\n            }\n        },\n\n        /**\n         * Primitive drawing functions\n         */\n\n        drawTile: function(context, tileId, gridWidth, cellId) {\n            var self = this;\n\n            if (tileId < 0) return;\n\n            var tileset = self.map.getTilesetFromId(tileId);\n\n            if (!tileset) return;\n\n            tileId -= tileset.firstGID - 1;\n\n            var setWidth = tileset.width / self.tileSize / tileset.scale;\n\n            self.drawScaledImage(\n                context,\n                tileset,\n                self.getX(tileId + 1, setWidth) * self.tileSize,\n                Math.floor(tileId / setWidth) * self.tileSize,\n                self.tileSize,\n                self.tileSize,\n                self.getX(cellId + 1, gridWidth) * self.tileSize,\n                Math.floor(cellId / gridWidth) * self.tileSize\n            );\n        },\n\n        drawScaledImage: function(context, image, x, y, width, height, dx, dy) {\n            var self = this,\n                tilesetScale = image.scale,\n                scale = self.superScaling;\n\n            if (!context) return;\n\n            context.drawImage(\n                image,\n                x * tilesetScale, // Source X\n                y * tilesetScale, // Source Y\n                width * tilesetScale, // Source Width\n                height * tilesetScale, // Source Height\n                dx * scale, // Destination X\n                dy * scale, // Destination Y\n                width * scale, // Destination Width\n                height * scale\n            ); // Destination Height\n        },\n\n        drawText: function(text, x, y, centered, colour, strokeColour) {\n            var self = this,\n                strokeSize = 1,\n                context = self.textContext;\n\n            if (self.scale > 2) strokeSize = 3;\n\n            if (text && x && y) {\n                context.save();\n\n                if (centered) context.textAlign = 'center';\n\n                context.strokeStyle = strokeColour || '#373737';\n                context.lineWidth = strokeSize;\n                context.strokeText(\n                    text,\n                    x * self.superScaling,\n                    y * self.superScaling\n                );\n                context.fillStyle = colour || 'white';\n                context.fillText(\n                    text,\n                    x * self.superScaling,\n                    y * self.superScaling\n                );\n\n                context.restore();\n            }\n        },\n\n        updateAnimatedTiles: function() {\n            var self = this;\n\n            if (!self.animateTiles) return;\n\n            self.forEachVisibleTile(function(id, index) {\n                /**\n                 * We don't want to reinitialize animated tiles that already exist\n                 * and are within the visible camera proportions. This way we can parse\n                 * it every time the tile moves slightly.\n                 */\n\n                if (!self.map.isAnimatedTile(id)) return;\n\n                /**\n                 * Push the pre-existing tiles.\n                 */\n\n                if (!(index in self.animatedTiles)) {\n                    var tile = new Tile(id, index, self.map),\n                        position = self.map.indexToGridPosition(tile.index);\n\n                    tile.setPosition(position);\n\n                    self.animatedTiles[index] = tile;\n                }\n            }, 2);\n        },\n\n        drawCellRect: function(x, y, colour) {\n            var self = this,\n                multiplier = self.tileSize * self.superScaling;\n\n            self.context.save();\n            self.setCameraView(self.context);\n\n            self.context.lineWidth = 2 * self.superScaling;\n\n            self.context.translate(x + 2, y + 2);\n\n            self.context.strokeStyle = colour;\n            self.context.strokeRect(0, 0, multiplier - 4, multiplier - 4);\n\n            self.context.restore();\n        },\n\n        drawCellHighlight: function(x, y, colour) {\n            var self = this;\n\n            self.drawCellRect(\n                x * self.superScaling * self.tileSize,\n                y * self.superScaling * self.tileSize,\n                colour\n            );\n        },\n\n        drawTargetCell: function() {\n            var self = this;\n\n            if (\n                self.mobile ||\n                self.tablet ||\n                !self.input.targetVisible ||\n                !self.input ||\n                !self.camera ||\n                !self.map ||\n                self.input.keyMovement\n            )\n                return;\n\n            var location = self.input.getCoords();\n\n            if (\n                !(\n                    location.x === self.input.selectedX &&\n                    location.y === self.input.selectedY\n                )\n            ) {\n                var isColliding = self.map.isColliding(location.x, location.y);\n\n                self.drawCellHighlight(\n                    location.x,\n                    location.y,\n                    isColliding\n                        ? 'rgba(230, 0, 0, 0.7)'\n                        : self.input.targetColour\n                );\n            }\n        },\n\n        /**\n         * Primordial Rendering functions\n         */\n\n        forEachVisibleIndex: function(callback, offset) {\n            var self = this;\n\n            self.camera.forEachVisiblePosition(function(x, y) {\n                if (!self.map.isOutOfBounds(x, y))\n                    callback(self.map.gridPositionToIndex(x, y) - 1);\n            }, offset);\n        },\n\n        forEachVisibleTile: function(callback, offset) {\n            var self = this;\n\n            if (!self.map || !self.map.mapLoaded) return;\n\n            self.forEachVisibleIndex(function(index) {\n                var indexData = self.map.data[index];\n\n                if (Array.isArray(indexData)) {\n                    _.each(indexData, function(id) {\n                        callback(id - 1, index);\n                    });\n                } else if (!isNaN(self.map.data[index] - 1))\n                    callback(self.map.data[index] - 1, index);\n            }, offset);\n        },\n\n        forEachAnimatedTile: function(callback) {\n            _.each(this.animatedTiles, function(tile) {\n                callback(tile);\n            });\n        },\n\n        forEachVisibleEntity: function(callback) {\n            var self = this;\n\n            if (!self.entities || !self.camera) return;\n\n            var grids = self.entities.grids;\n\n            self.camera.forEachVisiblePosition(function(x, y) {\n                if (\n                    !self.map.isOutOfBounds(x, y) &&\n                    grids.renderingGrid[y][x]\n                ) {\n                    _.each(grids.renderingGrid[y][x], function(entity) {\n                        callback(entity);\n                    });\n                }\n            });\n        },\n\n        isVisiblePosition: function(x, y) {\n            return (\n                y >= this.camera.gridY &&\n                y < this.camera.gridY + this.camera.gridHeight &&\n                x >= this.camera.gridX &&\n                x < this.camera.gridX + this.camera.gridWidth\n            );\n        },\n\n        getScale: function() {\n            return this.game.getScaleFactor();\n        },\n\n        getSuperScaling: function() {\n            return 2;\n        },\n\n        clearContext: function() {\n            this.context.clearRect(\n                0,\n                0,\n                this.screenWidth * this.scale,\n                this.screenHeight * this.scale\n            );\n        },\n\n        clearText: function() {\n            this.textContext.clearRect(\n                0,\n                0,\n                this.textCanvas.width,\n                this.textCanvas.height\n            );\n            this.overlayContext.clearRect(\n                0,\n                0,\n                this.overlay.width,\n                this.overlay.height\n            );\n        },\n\n        restore: function() {\n            this.forEachContext(function(context) {\n                context.restore();\n            });\n        },\n\n        clearAll: function() {\n            this.forEachContext(function(context) {\n                context.clearRect(\n                    0,\n                    0,\n                    context.canvas.width,\n                    context.canvas.height\n                );\n            });\n        },\n\n        clear: function() {\n            this.forEachContext(function(context) {\n                context.clearRect(\n                    0,\n                    0,\n                    context.canvas.width,\n                    context.canvas.height\n                );\n            });\n        },\n\n        handleScaling: function() {\n            var self = this;\n\n            /**\n             * Using scale factors to zoom canvas may\n             * have some adverse performance effects.\n             * This is a temporary solution.\n             * Eventually, we will have to scale the sprites\n             * to 1.5 times their current size to obtain\n             * the same effect, with no performance hit. //hopefully\n             */\n\n            self.canvas.style.transformOrigin = '0 0';\n            self.canvas.style.transform = 'scale(1.5)';\n        },\n\n        saveAll: function() {\n            this.forEachContext(function(context) {\n                context.save();\n            });\n        },\n\n        restoreAll: function() {\n            this.forEachContext(function(context) {\n                context.restore();\n            });\n        },\n\n        isIntersecting: function(rectOne, rectTwo) {\n            return (\n                rectTwo.left > rectOne.right ||\n                rectTwo.right < rectOne.left ||\n                rectTwo.top > rectOne.bottom ||\n                rectTwo.bottom < rectOne.top\n            );\n        },\n\n        focus: function() {\n            this.forEachContext(function(context) {\n                context.focus();\n            });\n        },\n\n        transition: function(duration, forward, callback) {\n            var self = this,\n                textCanvas = $('#textCanvas'),\n                hasThreshold = function() {\n                    return forward ? self.brightness > 99 : self.brightness < 1;\n                };\n\n            self.transitioning = true;\n\n            self.transitionInterval = setInterval(function() {\n                self.brightness += forward ? 6 : -6;\n\n                textCanvas.css(\n                    'background',\n                    'rgba(0,0,0,' + (1 - self.brightness / 100) + ')'\n                );\n\n                if (hasThreshold()) {\n                    clearInterval(self.transitionInterval);\n                    self.transitionInterval = null;\n\n                    self.transitioning = false;\n\n                    callback();\n                }\n            }, duration);\n        },\n\n        /**\n         * Rendering Functions\n         */\n\n        updateView: function() {\n            var self = this;\n\n            self.forEachContext(function(context) {\n                self.setCameraView(context);\n            });\n        },\n\n        updateDrawingView: function() {\n            var self = this;\n\n            self.forEachDrawingContext(function(context) {\n                self.setCameraView(context);\n            });\n        },\n\n        setCameraView: function(context) {\n            var self = this;\n\n            if (!self.camera || self.stopRendering) return;\n\n            context.translate(\n                -self.camera.x * self.superScaling,\n                -self.camera.y * self.superScaling\n            );\n        },\n\n        clearScreen: function(context) {\n            context.clearRect(\n                0,\n                0,\n                this.context.canvas.width,\n                this.context.canvas.height\n            );\n        },\n\n        hasRenderedMouse: function() {\n            return (\n                this.input.lastMousePosition.x === this.input.mouse.x &&\n                this.input.lastMousePosition.y === this.input.mouse.y\n            );\n        },\n\n        saveMouse: function() {\n            var self = this;\n\n            self.input.lastMousePosition.x = self.input.mouse.x;\n            self.input.lastMousePosition.y = self.input.mouse.y;\n        },\n\n        adjustBrightness: function(level) {\n            var self = this;\n\n            if (level < 0 || level > 100) return;\n\n            $('#textCanvas').css(\n                'background',\n                'rgba(0, 0, 0, ' + (0.5 - level / 200) + ')'\n            );\n        },\n\n        loadStaticSprites: function() {\n            var self = this;\n\n            self.shadowSprite = self.entities.getSprite('shadow16');\n\n            if (!self.shadowSprite.loaded) self.shadowSprite.load();\n\n            self.sparksSprite = self.entities.getSprite('sparks');\n\n            if (!self.sparksSprite.loaded) self.sparksSprite.load();\n        },\n\n        hasDrawnTile: function(id) {\n            return this.drawnTiles.indexOf(id) > -1;\n        },\n\n        /**\n         * Miscellaneous functions\n         */\n\n        forAllContexts: function(callback) {\n            _.each(this.allContexts, function(context) {\n                callback(context);\n            });\n        },\n\n        forEachContext: function(callback) {\n            _.each(this.contexts, function(context) {\n                callback(context);\n            });\n        },\n\n        forEachDrawingContext: function(callback) {\n            _.each(this.contexts, function(context) {\n                if (context.canvas.id !== 'entities') callback(context);\n            });\n        },\n\n        forEachCanvas: function(callback) {\n            _.each(this.canvases, function(canvas) {\n                callback(canvas);\n            });\n        },\n\n        forEachLighting: function(callback) {\n            _.each(this.lightings, function(lighting) {\n                callback(lighting);\n            });\n        },\n\n        getX: function(index, width) {\n            if (index === 0) return 0;\n\n            return index % width === 0 ? width - 1 : (index % width) - 1;\n        },\n\n        checkDevice: function() {\n            var self = this;\n\n            self.mobile = Detect.isMobile();\n            self.tablet = Detect.isTablet();\n            self.firefox = Detect.isFirefox();\n        },\n\n        verifyCentration: function() {\n            this.forceRendering =\n                (this.mobile || this.tablet) && this.camera.centered;\n        },\n\n        isPortableDevice: function() {\n            return this.mobile || this.tablet;\n        },\n\n        updateDarkMask: function(color) {\n            var self = this;\n\n            self.darkMask.color = color;\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\n        },\n\n        addLight: function(x, y, distance, diffuse, color, relative) {\n            var self = this,\n                light = new Lamp(\n                    self.getLightData(x, y, distance, diffuse, color)\n                ),\n                lighting = new Lighting({\n                    light: light,\n                    objects: [],\n                    diffuse: light.diffuse\n                });\n\n            light.origX = light.position.x;\n            light.origY = light.position.y;\n\n            light.diff = Math.round(light.distance / 16);\n\n            if (self.hasLighting(lighting)) return;\n\n            if (relative) lighting.relative = relative;\n\n            self.lightings.push(lighting);\n            self.darkMask.lights.push(light);\n\n            self.drawLighting(lighting);\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\n        },\n\n        removeAllLights: function() {\n            var self = this;\n\n            self.lightings = [];\n            self.darkMask.lights = [];\n\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\n        },\n\n        removeNonRelativeLights: function() {\n            var self = this;\n\n            _.each(self.lightings, function(lighting) {\n                if (!lighting.light.relative) {\n                    self.lightings.splice(i, 1);\n                    self.darkMask.lights.splice(i, 1);\n                }\n            });\n\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\n        },\n\n        getLightData: function(x, y, distance, diffuse, color) {\n            return {\n                position: new Vec2(x, y),\n                distance: distance,\n                diffuse: diffuse,\n                color: color,\n                radius: 0,\n                samples: 2,\n                roughness: 0,\n                angle: 0\n            };\n        },\n\n        hasLighting: function(lighting) {\n            var self = this;\n\n            for (var i = 0; i < self.lightings.length; i++) {\n                var light = self.lightings[i].light;\n\n                if (\n                    lighting.light.origX === light.origX &&\n                    lighting.light.origY === light.origY &&\n                    lighting.light.distance === light.distance\n                )\n                    return true;\n            }\n\n            return false;\n        },\n\n        inRadius: function(lighting) {\n            var self = this,\n                position = {\n                    x: lighting.light.origX,\n                    y: lighting.light.origY,\n                    diff: lighting.light.diff\n                };\n\n            return (\n                position.x > self.camera.gridX - position.diff &&\n                position.x <\n                    self.camera.gridX + self.camera.gridWidth + position.diff &&\n                position.y > self.camera.gridY - position.diff &&\n                position.y <\n                    self.camera.gridY + self.camera.gridHeight + position.diff\n            );\n        },\n\n        getMiddle: function() {\n            return {\n                x: this.overlay.width / 2,\n                y: this.overlay.height / 2\n            };\n        },\n\n        /**\n         * Setters\n         */\n\n        setTileset: function(tileset) {\n            this.tileset = tileset;\n        },\n\n        setMap: function(map) {\n            this.map = map;\n        },\n\n        setEntities: function(entities) {\n            this.entities = entities;\n        },\n\n        setInput: function(input) {\n            this.input = input;\n        },\n\n        /**\n         * Getters\n         */\n\n        getTargetBounds: function(x, y) {\n            var self = this,\n                bounds = {},\n                tx = x || self.input.selectedX,\n                ty = y || self.input.selectedY;\n\n            bounds.x = (tx * self.tileSize - self.camera.x) * self.superScaling;\n            bounds.y = (ty * self.tileSize - self.camera.y) * self.superScaling;\n            bounds.width = self.tileSize * self.superScaling;\n            bounds.height = self.tileSize * self.superScaling;\n            bounds.left = bounds.x;\n            bounds.right = bounds.x + bounds.width;\n            bounds.top = bounds.y;\n            bounds.bottom = bounds.y + bounds.height;\n\n            return bounds;\n        },\n\n        getTileset: function() {\n            return this.tileset;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/renderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "DarkMask",
    "memberof": "Kaetram-Open/client/js/renderer/renderer.js",
    "static": true,
    "longname": "Kaetram-Open/client/js/renderer/renderer.js~DarkMask",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/renderer/renderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/tile.js",
    "content": "define(function() {\n    return Class.extend({\n        init: function(id, index, map) {\n            var self = this;\n\n            self.id = id;\n            self.index = index;\n            self.map = map;\n\n            self.animationInfo = map.getTileAnimation(id);\n\n            self.animationIndex = 0;\n            self.lastTime = 0;\n\n            self.loaded = false;\n        },\n\n        setPosition: function(position) {\n            this.x = position.x;\n            this.y = position.y;\n        },\n\n        update: function() {\n            this.id = this.animationInfo[this.animationIndex].tileID - 1;\n        },\n\n        animate: function(time) {\n            var self = this;\n\n            if (\n                time - self.lastTime >\n                self.animationInfo[self.animationIndex].duration\n            ) {\n                self.update();\n                self.lastTime = time;\n\n                if (self.animationIndex >= self.animationInfo.length - 1)\n                    self.animationIndex = 0;\n                else self.animationIndex++;\n            }\n        },\n\n        getPosition: function() {\n            return this.x && this.y ? [this.x, this.y] : [0, 0];\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/tile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/updater.js",
    "content": "/* global log, Modules */\n\ndefine(['../entity/character/character'], function(Character) {\n    return Class.extend({\n        init: function(game) {\n            var self = this;\n\n            self.game = game;\n            self.camera = game.getCamera();\n            self.renderer = game.renderer;\n            self.input = game.input;\n            self.sprites = null;\n        },\n\n        update: function() {\n            this.timeDifferential = (new Date() - this.lastUpdate) / 1000;\n\n            this.animateTiles();\n            this.updateEntities();\n            this.input.updateCursor();\n            this.updateKeyboard();\n            this.updateAnimations();\n            this.updateInfos();\n            this.updateBubbles();\n\n            this.lastUpdate = new Date();\n        },\n\n        animateTiles: function() {\n            var self = this,\n                time = self.game.time;\n\n            if (!self.renderer.animateTiles) return;\n\n            self.renderer.forEachAnimatedTile(function(tile) {\n                tile.animate(time);\n            });\n        },\n\n        updateEntities: function() {\n            var self = this;\n\n            self.game.entities.forEachEntity(function(entity) {\n                if (entity.spriteLoaded) {\n                    self.updateFading(entity);\n\n                    var animation = entity.currentAnimation;\n\n                    if (animation) animation.update(self.game.time);\n\n                    if (entity instanceof Character) {\n                        if (entity.critical && entity.criticalAnimation)\n                            entity.criticalAnimation.update(self.game.time);\n\n                        if (entity.terror && entity.terrorAnimation)\n                            entity.terrorAnimation.update(self.game.time);\n\n                        if (entity.stunned && entity.stunAnimation)\n                            entity.stunAnimation.update(self.game.time);\n\n                        if (entity.explosion && entity.explosionAnimation)\n                            entity.explosionAnimation.update(self.game.time);\n\n                        if (entity.movement && entity.movement.inProgress)\n                            entity.movement.step(self.game.time);\n\n                        if (entity.hasPath() && !entity.movement.inProgress) {\n                            var tick = Math.round(266 / entity.movementSpeed);\n\n                            switch (entity.orientation) {\n                                case Modules.Orientation.Left:\n                                    entity.movement.start(\n                                        self.game.time,\n                                        function(x) {\n                                            entity.x = x;\n                                            entity.moved();\n                                        },\n                                        function() {\n                                            entity.x = entity.movement.endValue;\n                                            entity.moved();\n                                            entity.nextStep();\n                                        },\n                                        entity.x - tick,\n                                        entity.x - 16,\n                                        entity.movementSpeed\n                                    );\n\n                                    break;\n\n                                case Modules.Orientation.Right:\n                                    entity.movement.start(\n                                        self.game.time,\n                                        function(x) {\n                                            entity.x = x;\n                                            entity.moved();\n                                        },\n                                        function() {\n                                            entity.x = entity.movement.endValue;\n                                            entity.moved();\n                                            entity.nextStep();\n                                        },\n                                        entity.x + tick,\n                                        entity.x + 16,\n                                        entity.movementSpeed\n                                    );\n\n                                    break;\n\n                                case Modules.Orientation.Up:\n                                    entity.movement.start(\n                                        self.game.time,\n                                        function(y) {\n                                            entity.y = y;\n                                            entity.moved();\n                                        },\n                                        function() {\n                                            entity.y = entity.movement.endValue;\n                                            entity.moved();\n                                            entity.nextStep();\n                                        },\n                                        entity.y - tick,\n                                        entity.y - 16,\n                                        entity.movementSpeed\n                                    );\n\n                                    break;\n\n                                case Modules.Orientation.Down:\n                                    entity.movement.start(\n                                        self.game.time,\n                                        function(y) {\n                                            entity.y = y;\n                                            entity.moved();\n                                        },\n                                        function() {\n                                            entity.y = entity.movement.endValue;\n                                            entity.moved();\n                                            entity.nextStep();\n                                        },\n                                        entity.y + tick,\n                                        entity.y + 16,\n                                        entity.movementSpeed\n                                    );\n\n                                    break;\n                            }\n                        }\n                    } else if (entity.type === 'projectile') {\n                        var mDistance = entity.speed * self.timeDifferential,\n                            dx = entity.destX - entity.x,\n                            dy = entity.destY - entity.y,\n                            tDistance = Math.sqrt(dx * dx + dy * dy),\n                            amount = mDistance / tDistance;\n\n                        if (amount > 1) amount = 1;\n\n                        entity.x += dx * amount;\n                        entity.y += dy * amount;\n\n                        if (tDistance < 5) entity.impact();\n                    }\n                }\n            });\n        },\n\n        updateFading: function(entity) {\n            var self = this;\n\n            if (!entity || !entity.fading) return;\n\n            var duration = 1000,\n                time = self.game.time,\n                dt = time - entity.fadingTime;\n\n            if (dt > duration) {\n                entity.isFading = false;\n                entity.fadingAlpha = 1;\n            } else entity.fadingAlpha = dt / duration;\n        },\n\n        updateKeyboard: function() {\n            var self = this,\n                player = self.game.player,\n                position = {\n                    x: player.gridX,\n                    y: player.gridY\n                };\n\n            if (player.frozen) return;\n\n            if (player.moveUp) position.y--;\n            else if (player.moveDown) position.y++;\n            else if (player.moveRight) position.x++;\n            else if (player.moveLeft) position.x--;\n\n            if (player.hasKeyboardMovement()) self.input.keyMove(position);\n        },\n\n        updateAnimations: function() {\n            var self = this,\n                target = self.input.targetAnimation;\n\n            if (target && self.input.selectedCellVisible)\n                target.update(self.game.time);\n\n            if (!self.sprites) return;\n\n            var sparks = self.sprites.sparksAnimation;\n\n            if (sparks) sparks.update(self.game.time);\n        },\n\n        updateInfos: function() {\n            if (this.game.info) this.game.info.update(this.game.time);\n        },\n\n        updateBubbles: function() {\n            if (this.game.bubble) this.game.bubble.update(this.game.time);\n\n            if (this.game.pointer) this.game.pointer.update();\n        },\n\n        setSprites: function(sprites) {\n            this.sprites = sprites;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/renderer/updater.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "Kaetram-Open/client/js/text.js",
    "content": "/*\n RequireJS text 0.26.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.\n Available via the MIT or new BSD license.\n see: http://github.com/jrburke/requirejs for details\n */\n(function() {\n    var j = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        l = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        m = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        n = typeof location !== 'undefined' && location.href,\n        i = [];\n    define(function() {\n        var e, h, k;\n        typeof window !== 'undefined' && window.navigator && window.document\n            ? (h = function(a, b) {\n                  var c = e.createXhr();\n                  c.open('GET', a, !0);\n                  c.onreadystatechange = function() {\n                      c.readyState === 4 && b(c.responseText);\n                  };\n                  c.send(null);\n              })\n            : typeof process !== 'undefined' &&\n              process.versions &&\n              process.versions.node\n            ? ((k = require.nodeRequire('fs')),\n              (h = function(a, b) {\n                  b(k.readFileSync(a, 'utf8'));\n              }))\n            : typeof Packages !== 'undefined' &&\n              (h = function(a, b) {\n                  var c = new java.io.File(a),\n                      g = java.lang.System.getProperty('line.separator'),\n                      c = new java.io.BufferedReader(\n                          new java.io.InputStreamReader(\n                              new java.io.FileInputStream(c),\n                              'utf-8'\n                          )\n                      ),\n                      d,\n                      f,\n                      e = '';\n                  try {\n                      d = new java.lang.StringBuffer();\n                      (f = c.readLine()) &&\n                          f.length() &&\n                          f.charAt(0) === 65279 &&\n                          (f = f.substring(1));\n                      for (d.append(f); (f = c.readLine()) !== null; )\n                          d.append(g), d.append(f);\n                      e = String(d.toString());\n                  } finally {\n                      c.close();\n                  }\n                  b(e);\n              });\n        return (e = {\n            version: '0.26.0',\n            strip: function(a) {\n                if (a) {\n                    var a = a.replace(l, ''),\n                        b = a.match(m);\n                    b && (a = b[1]);\n                } else a = '';\n                return a;\n            },\n            jsEscape: function(a) {\n                return a\n                    .replace(/(['\\\\])/g, '\\\\$1')\n                    .replace(/[\\f]/g, '\\\\f')\n                    .replace(/[\\b]/g, '\\\\b')\n                    .replace(/[\\n]/g, '\\\\n')\n                    .replace(/[\\t]/g, '\\\\t')\n                    .replace(/[\\r]/g, '\\\\r');\n            },\n            createXhr: function() {\n                var a, b, c;\n                if (typeof XMLHttpRequest !== 'undefined')\n                    return new XMLHttpRequest();\n                else {\n                    for (b = 0; b < 3; b++) {\n                        c = j[b];\n                        try {\n                            a = new ActiveXObject(c);\n                        } catch (e) {}\n                        if (a) {\n                            j = [c];\n                            break;\n                        }\n                    }\n                }\n                if (!a)\n                    throw Error('createXhr(): XMLHttpRequest not available');\n                return a;\n            },\n            get: h,\n            parseName: function(a) {\n                var b = !1,\n                    c = a.indexOf('.'),\n                    e = a.substring(0, c),\n                    a = a.substring(c + 1, a.length),\n                    c = a.indexOf('!');\n                c !== -1 &&\n                    ((b = a.substring(c + 1, a.length)),\n                    (b = b === 'strip'),\n                    (a = a.substring(0, c)));\n                return { moduleName: e, ext: a, strip: b };\n            },\n            xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n            canUseXhr: function(a, b, c, g) {\n                var d = e.xdRegExp.exec(a),\n                    f;\n                if (!d) return !0;\n                a = d[2];\n                d = d[3];\n                d = d.split(':');\n                f = d[1];\n                d = d[0];\n                return (\n                    (!a || a === b) &&\n                    (!d || d === c) &&\n                    ((!f && !d) || f === g)\n                );\n            },\n            finishLoad: function(a, b, c, g, d) {\n                c = b ? e.strip(c) : c;\n                d.isBuild && d.inlineText && (i[a] = c);\n                g(c);\n            },\n            load: function(a, b, c, g) {\n                var d = e.parseName(a),\n                    f = d.moduleName + '.' + d.ext,\n                    h = b.toUrl(f);\n                !n || e.canUseXhr(h)\n                    ? e.get(h, function(b) {\n                          e.finishLoad(a, d.strip, b, c, g);\n                      })\n                    : b([f], function(a) {\n                          e.finishLoad(\n                              d.moduleName + '.' + d.ext,\n                              d.strip,\n                              a,\n                              c,\n                              g\n                          );\n                      });\n            },\n            write: function(a, b, c) {\n                if (b in i) {\n                    var g = e.jsEscape(i[b]);\n                    c(\n                        \"define('\" +\n                            a +\n                            '!' +\n                            b +\n                            \"', function () { return '\" +\n                            g +\n                            \"';});\\n\"\n                    );\n                }\n            },\n            writeFile: function(a, b, c, g, d) {\n                var b = e.parseName(b),\n                    f = b.moduleName + '.' + b.ext,\n                    h = c.toUrl(b.moduleName + '.' + b.ext) + '.js';\n                e.load(\n                    f,\n                    c,\n                    function() {\n                        e.write(\n                            a,\n                            f,\n                            function(a) {\n                                g(h, a);\n                            },\n                            d\n                        );\n                    },\n                    d\n                );\n            }\n        });\n    });\n})();\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/detect.js",
    "content": "Detect = {};\n\nDetect.isIpad = function() {\n    return /ipad/i.test(navigator.userAgent.toLowerCase());\n};\n\nDetect.isAndroid = function() {\n    return /Android/i.test(navigator.userAgent);\n};\n\nDetect.isWindows = function() {\n    return Detect.userAgentContains('Windows');\n};\n\nDetect.isChromeOnWindows = function() {\n    return (\n        Detect.userAgentContains('Chrome') &&\n        Detect.userAgentContains('Windows')\n    );\n};\n\nDetect.isCanaryOnWindows = function() {\n    return (\n        Detect.userAgentContains('Chrome/52') &&\n        Detect.userAgentContains('Windows')\n    );\n};\n\nDetect.isEdgeOnWindows = function() {\n    return (\n        Detect.userAgentContains('Edge') && Detect.userAgentContains('Windows')\n    );\n};\n\nDetect.isFirefox = function() {\n    return Detect.userAgentContains('Firefox');\n};\n\nDetect.isSafari = function() {\n    return (\n        Detect.userAgentContains('Safari') &&\n        !Detect.userAgentContains('Chrome')\n    );\n};\n\nDetect.isOpera = function() {\n    return Detect.userAgentContains('Opera');\n};\n\nDetect.isFirefoxAndroid = function() {\n    return (\n        Detect.userAgentContains('Android') &&\n        Detect.userAgentContains('Firefox')\n    );\n};\n\nDetect.userAgentContains = function(string) {\n    return navigator.userAgent.indexOf(string) !== -1;\n};\n\nDetect.getUserAgent = function() {\n    return navigator.userAgent.toString();\n};\n\nDetect.isTablet = function() {\n    var userAgent = navigator.userAgent.toLowerCase(),\n        isAppleTablet = /ipad/i.test(userAgent),\n        isAndroidTablet = /android/i.test(userAgent);\n\n    return (isAppleTablet || isAndroidTablet) && window.innerWidth >= 640;\n};\n\nDetect.isMobile = function() {\n    return window.innerWidth < 1000;\n};\n\nDetect.iOSVersion = function() {\n    if (window.MSStream) {\n        // There is some iOS in Windows Phone...\n        // https://msdn.microsoft.com/en-us/library/hh869301(v=vs.85).aspx\n        return '';\n    }\n    var match = navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/),\n        version;\n\n    if (match !== undefined && match !== null) {\n        version = [\n            parseInt(match[1], 10),\n            parseInt(match[2], 10),\n            parseInt(match[3] || 0, 10)\n        ];\n        return parseFloat(version.join('.'));\n    }\n\n    return '';\n};\n\nDetect.androidVersion = function() {\n    var userAgent = navigator.userAgent.split('Android'),\n        version;\n\n    if (userAgent.length > 1) version = userAgent[1].split(';')[0];\n\n    return version;\n};\n\nDetect.supportsWebGL = function() {\n    return !!document.createElement('canvas').getContext('webgl');\n};\n\nDetect.isAppleDevice = function() {\n    var devices = [\n        'iPad Simulator',\n        'iPhone Simulator',\n        'iPod Simulator',\n        'iPad',\n        'iPhone',\n        'iPod'\n    ];\n\n    if (navigator.platform) {\n        while (devices.length)\n            if ((navigator.platform = devices.pop())) return true;\n    }\n\n    return false;\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/utils/detect.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "isIpad",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isIpad",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "isAndroid",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isAndroid",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "isWindows",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isWindows",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "isChromeOnWindows",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isChromeOnWindows",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "isCanaryOnWindows",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isCanaryOnWindows",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "isEdgeOnWindows",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isEdgeOnWindows",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "isFirefox",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isFirefox",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "isSafari",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isSafari",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "isOpera",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isOpera",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "isFirefoxAndroid",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isFirefoxAndroid",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "userAgentContains",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~userAgentContains",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "getUserAgent",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~getUserAgent",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "isTablet",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isTablet",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "isMobile",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isMobile",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "iOSVersion",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~iOSVersion",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "androidVersion",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~androidVersion",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "supportsWebGL",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~supportsWebGL",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "isAppleDevice",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isAppleDevice",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/modules.js",
    "content": "Modules = {\n    Orientation: {\n        Up: 0,\n        Down: 1,\n        Left: 2,\n        Right: 3\n    },\n\n    Types: {\n        Player: 0\n    },\n\n    InputType: {\n        Key: 0,\n        LeftClick: 1\n    },\n\n    Actions: {\n        Idle: 0,\n        Attack: 1,\n        Walk: 2\n    },\n\n    Hits: {\n        Damage: 0,\n        Poison: 1,\n        Heal: 2,\n        Mana: 3,\n        Experience: 4,\n        LevelUp: 5,\n        Critical: 6,\n        Stun: 7,\n        Explosive: 8\n    },\n\n    Equipment: {\n        Armour: 0,\n        Weapon: 1,\n        Pendant: 2,\n        Ring: 3,\n        Boots: 4\n    },\n\n    Hovering: {\n        Colliding: 0,\n        Mob: 1,\n        Player: 2,\n        Item: 3,\n        NPC: 4,\n        Chest: 5\n    },\n\n    Keys: {\n        One: 49,\n        Two: 50,\n        Three: 51,\n        Four: 52,\n        Five: 53,\n        W: 87,\n        A: 65,\n        S: 83,\n        D: 68,\n        Up: 38,\n        Left: 37,\n        Down: 40,\n        Right: 39,\n        Esc: 27,\n        V: 86,\n        U: 85,\n        J: 74,\n        Enter: 13,\n        T: 84\n    },\n\n    AudioTypes: {\n        Music: 0,\n        SFX: 1\n    },\n\n    DamageColours: {\n        received: {\n            fill: 'rgb(255, 50, 50)',\n            stroke: 'rgb(255, 180, 180)'\n        },\n\n        inflicted: {\n            fill: 'white',\n            stroke: '#373737'\n        },\n\n        healed: {\n            fill: 'rgb(80, 255, 80)',\n            stroke: 'rgb(50, 120, 50)'\n        },\n\n        mana: {\n            fill: 'rgb(73, 94, 228)',\n            stroke: 'rgb(56, 63, 133)'\n        },\n\n        health: {\n            fill: 'white',\n            stroke: '#373737'\n        },\n\n        exp: {\n            fill: 'rgb(80, 180, 255)',\n            stroke: 'rgb(50, 180, 255)'\n        },\n\n        poison: {\n            fill: 'rgb(66, 183, 77)',\n            stroke: 'rgb(50, 120 , 50)'\n        }\n    },\n\n    Pointers: {\n        Entity: 0,\n        Position: 1,\n        Relative: 2\n    }\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/utils/modules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/pathfinder.js",
    "content": "/* global _, log */\n\ndefine(['../lib/astar'], function(AStar) {\n    return Class.extend({\n        init: function(width, height) {\n            var self = this;\n\n            self.width = width;\n            self.height = height;\n\n            self.mode = 'DEFAULT';\n\n            self.grid = null;\n            self.blankGrid = [];\n            self.ignores = [];\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            for (var i = 0; i < self.height; i++) {\n                self.blankGrid[i] = [];\n\n                for (var j = 0; j < self.width; j++) self.blankGrid[i][j] = 0;\n            }\n\n            // log.info('Successfully loaded the pathfinder!');\n        },\n\n        find: function(grid, entity, x, y, incomplete) {\n            var self = this,\n                start = [entity.gridX, entity.gridY],\n                end = [x, y],\n                path;\n\n            self.grid = grid;\n            self.applyIgnore(true);\n\n            path = AStar(self.grid, start, end, self.mode);\n\n            if (path.length === 0 && incomplete)\n                path = self.findIncomplete(start, end);\n\n            return path;\n        },\n\n        findIncomplete: function(start, end) {\n            var self = this,\n                incomplete = [],\n                perfect,\n                x,\n                y;\n\n            perfect = AStar(self.blankGrid, start, end, self.mode);\n\n            for (var i = perfect.length - 1; i > 0; i--) {\n                x = perfect[i][0];\n                y = perfect[i][1];\n\n                if (self.grid[y][x] === 0) {\n                    incomplete = AStar(self.grid, start, [x.y], self.mode);\n                    break;\n                }\n            }\n\n            return incomplete;\n        },\n\n        applyIgnore: function(ignored) {\n            var self = this,\n                x,\n                y,\n                g;\n\n            _.each(self.ignores, function(entity) {\n                x = entity.hasPath() ? entity.nextGridX : entity.gridX;\n                y = entity.hasPath() ? entity.nextGridY : entity.gridY;\n\n                if (x >= 0 && y >= 0) self.grid[y][x] = ignored ? 0 : 1;\n            });\n        },\n\n        ignoreEntity: function(entity) {\n            var self = this;\n\n            if (!entity) return;\n\n            self.ignores.push(entity);\n        },\n\n        clearIgnores: function() {\n            var self = this;\n\n            self.applyIgnore(false);\n            self.ignores = [];\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/utils/pathfinder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/queue.js",
    "content": "/* global _ */\n\ndefine(function() {\n    /**\n     * Very useful file used for queuing various objects,\n     * most notably used in the info controller to queue\n     * objects to delete\n     */\n\n    return Class.extend({\n        init: function() {\n            var self = this;\n\n            self.queue = [];\n        },\n\n        reset: function() {\n            this.queue = [];\n        },\n\n        add: function(object) {\n            this.queue.push(object);\n        },\n\n        getQueue: function() {\n            return this.queue;\n        },\n\n        forEachQueue: function(callback) {\n            _.each(this.queue, function(object) {\n                callback(object);\n            });\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/utils/queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/storage.js",
    "content": "define(function() {\n    var storage = window.localStorage,\n        name = 'data';\n\n    return Class.extend({\n        init: function(app) {\n            var self = this;\n\n            self.app = app;\n            self.data = null;\n\n            self.load();\n        },\n\n        load: function() {\n            var self = this;\n\n            if (storage.data) self.data = JSON.parse(storage.getItem(name));\n            else self.data = self.create();\n\n            if (self.data.clientVersion !== self.app.config.version) {\n                self.data = self.create();\n                self.save();\n            }\n        },\n\n        create: function() {\n            return {\n                new: true,\n                clientVersion: this.app.config.version,\n\n                player: {\n                    username: '',\n                    password: '',\n                    autoLogin: false,\n                    rememberMe: false,\n                    orientation: Modules.Orientation.Down\n                },\n\n                settings: {\n                    music: 100,\n                    sfx: 100,\n                    brightness: 100,\n                    soundEnabled: true,\n                    FPSCap: true,\n                    centerCamera: true,\n                    debug: false,\n                    showNames: true,\n                    showLevels: true\n                },\n\n                map: {\n                    regionData: [],\n                    collisions: []\n                }\n            };\n        },\n\n        save: function() {\n            if (this.data) storage.setItem(name, JSON.stringify(this.data));\n        },\n\n        clear: function() {\n            storage.removeItem(name);\n            this.data = this.create();\n        },\n\n        toggleRemember: function(toggle) {\n            var self = this;\n\n            self.data.player.rememberMe = toggle;\n            self.save();\n        },\n\n        setOrientation: function(orientation) {\n            var self = this,\n                player = self.getPlayer();\n\n            player.orientation = orientation;\n\n            self.save();\n        },\n\n        setPlayer: function(option, value) {\n            var self = this,\n                pData = self.getPlayer();\n\n            if (pData.hasOwnProperty(option)) pData[option] = value;\n\n            self.save();\n        },\n\n        setSettings: function(option, value) {\n            var self = this,\n                sData = self.getSettings();\n\n            if (sData.hasOwnProperty(option)) sData[option] = value;\n\n            self.save();\n        },\n\n        setRegionData: function(regionData, collisionData) {\n            var self = this;\n\n            self.data.map.regionData = regionData;\n            self.data.map.collisions = collisionData;\n\n            self.save();\n        },\n\n        getPlayer: function() {\n            return this.data.player;\n        },\n\n        getSettings: function() {\n            return this.data ? this.data.settings : null;\n        },\n\n        getRegionData: function() {\n            return this.data.map.regionData;\n        },\n\n        getCollisions: function() {\n            return this.data.map.collisions;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/utils/storage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/timer.js",
    "content": "define(function() {\n    return Class.extend({\n        init: function(start, duration) {\n            var self = this;\n\n            self.time = start;\n            self.duration = duration;\n        },\n\n        isOver: function(time) {\n            var self = this,\n                over = false;\n\n            if (time - self.time > self.duration) {\n                over = true;\n                self.time = time;\n            }\n\n            return over;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/utils/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/transition.js",
    "content": "define(function() {\n    return Class.extend({\n        init: function() {\n            var self = this;\n\n            self.startValue = 0;\n            self.endValue = 0;\n            self.duration = 0;\n            self.inProgress = false;\n        },\n\n        start: function(\n            currentTime,\n            updateFunction,\n            stopFunction,\n            startValue,\n            endValue,\n            duration\n        ) {\n            var self = this;\n\n            self.startTime = currentTime;\n            self.updateFunction = updateFunction;\n            self.stopFunction = stopFunction;\n            self.startValue = startValue;\n            self.endValue = endValue;\n            self.duration = duration;\n\n            self.inProgress = true;\n            self.count = 0;\n        },\n\n        step: function(currentTime) {\n            var self = this;\n\n            if (!self.inProgress) return;\n\n            if (self.count > 0) self.count--;\n            else {\n                var elapsed = currentTime - self.startTime;\n\n                if (elapsed > self.duration) elapsed = self.duration;\n\n                var diff = self.endValue - self.startValue,\n                    interval = Math.round(\n                        self.startValue + (diff / self.duration) * elapsed\n                    );\n\n                if (elapsed === self.duration || interval === self.endValue) {\n                    self.stop();\n                    if (self.stopFunction) self.stopFunction();\n                } else if (self.updateFunction) self.updateFunction(interval);\n            }\n        },\n\n        restart: function(currentTime, startValue, endValue) {\n            var self = this;\n\n            self.start(\n                currentTime,\n                self.updateFunction,\n                self.stopFunction,\n                startValue,\n                endValue,\n                self.duration\n            );\n            self.step(currentTime);\n        },\n\n        stop: function() {\n            this.inProgress = false;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/utils/transition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/util.js",
    "content": "/**\n * New version of the Bind Polyfill\n */\n\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function(oThis) {\n        if (typeof this !== 'function') {\n            // closest thing possible to the ECMAScript 5\n            // internal IsCallable function\n            throw new TypeError(\n                'Function.prototype.bind - what is trying to be bound is not callable'\n            );\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function() {},\n            fBound = function() {\n                return fToBind.apply(\n                    this instanceof fNOP ? this : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments))\n                );\n            };\n\n        if (this.prototype) {\n            // Function.prototype doesn't have a prototype property\n            fNOP.prototype = this.prototype;\n        }\n        fBound.prototype = new fNOP();\n\n        return fBound;\n    };\n}\n\nvar isInt = function(n) {\n    return n % 1 === 0;\n};\n\nvar TRANSITIONEND = 'transitionend webkitTransitionEnd oTransitionEnd';\n\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\nif (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = (function() {\n        return (\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame || // comment out if FF4 is slow (it caps framerate at ~30fps: https://bugzilla.mozilla.org/show_bug.cgi?id=630127)\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function(\n                /* function FrameRequestCallback */ callback,\n                /* DOMElement Element */ element\n            ) {\n                window.setTimeout(callback, 17);\n            }\n        );\n    })();\n}\n\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function(searchString, position) {\n        position = position || 0;\n        return this.substr(position, searchString.length) === searchString;\n    };\n}\n\nif (!String.prototype.includes) {\n    String.prototype.includes = function(search, start) {\n        'use strict';\n        if (typeof start !== 'number') start = 0;\n\n        if (start + search.length > this.length) return false;\n        else return this.indexOf(search, start) !== -1;\n    };\n}\n\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\nif (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n        value: function(searchElement, fromIndex) {\n            // 1. Let O be ? ToObject(this value).\n            if (this == null)\n                throw new TypeError('\"this\" is null or not defined');\n\n            var o = Object(this);\n\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\n            var len = o.length >>> 0;\n\n            // 3. If len is 0, return false.\n            if (len === 0) return false;\n\n            // 4. Let n be ? ToInteger(fromIndex).\n            //    (If fromIndex is undefined, this step produces the value 0.)\n            var n = fromIndex | 0;\n\n            // 5. If n ≥ 0, then\n            //  a. Let k be n.\n            // 6. Else n < 0,\n            //  a. Let k be len + n.\n            //  b. If k < 0, let k be 0.\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n            function sameValueZero(x, y) {\n                return (\n                    x === y ||\n                    (typeof x === 'number' &&\n                        typeof y === 'number' &&\n                        isNaN(x) &&\n                        isNaN(y))\n                );\n            }\n\n            // 7. Repeat, while k < len\n            while (k < len) {\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n                // b. If SameValueZero(searchElement, elementK) is true, return true.\n                // c. Increase k by 1.\n                if (sameValueZero(o[k], searchElement)) return true;\n\n                k++;\n            }\n\n            // 8. Return false\n            return false;\n        }\n    });\n}\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/js/utils/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "isInt",
    "memberof": "Kaetram-Open/client/js/utils/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/util.js~isInt",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "TRANSITIONEND",
    "memberof": "Kaetram-Open/client/js/utils/util.js",
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/util.js~TRANSITIONEND",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/js/utils/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "Kaetram-Open/client/sw.js",
    "content": "// This is the \"Offline page\" service worker\n\nconst CACHE = 'pwabuilder-page';\n\nconst offlineFallbackPage = 'index.html';\n\n// Install stage sets up the offline page in the cache and opens a new cache\nself.addEventListener('install', function(event) {\n    console.log('[PWA Builder] Install Event processing');\n\n    event.waitUntil(\n        caches.open(CACHE).then(function(cache) {\n            console.log('[PWA Builder] Cached offline page during install');\n\n            return cache.add(offlineFallbackPage);\n        })\n    );\n});\n\n// If any fetch fails, it will show the offline page.\nself.addEventListener('fetch', function(event) {\n    if (event.request.method !== 'GET') return;\n\n    event.respondWith(\n        fetch(event.request).catch(function(error) {\n            // The following validates that the request was for a navigation to a new document\n            if (\n                event.request.destination !== 'document' ||\n                event.request.mode !== 'navigate'\n            )\n                return;\n\n            console.error(\n                '[PWA Builder] Network request Failed. Serving offline page ' +\n                    error\n            );\n            return caches.open(CACHE).then(function(cache) {\n                return cache.match(offlineFallbackPage);\n            });\n        })\n    );\n});\n\n// This is an event that can be fired from your page to tell the SW to update the offline page\nself.addEventListener('refreshOffline', function() {\n    const offlinePageRequest = new Request(offlineFallbackPage);\n\n    return fetch(offlineFallbackPage).then(function(response) {\n        return caches.open(CACHE).then(function(cache) {\n            console.log(\n                '[PWA Builder] Offline page updated from refreshOffline event: ' +\n                    response.url\n            );\n            return cache.put(offlinePageRequest, response);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/client/sw.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "CACHE",
    "memberof": "Kaetram-Open/client/sw.js",
    "static": true,
    "longname": "Kaetram-Open/client/sw.js~CACHE",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/sw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "offlineFallbackPage",
    "memberof": "Kaetram-Open/client/sw.js",
    "static": true,
    "longname": "Kaetram-Open/client/sw.js~offlineFallbackPage",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/client/sw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/default.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat');\n\n/*\n * The default superclass for combat-related plugins.\n * It just shorteness the amount of work that needs to be done\n * when adding special entities.\n */\n\nclass Default extends Combat {\n    constructor(character) {\n        super(character);\n\n        let self = this;\n\n        self.character = character;\n    }\n}\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/data/combat/default.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/default.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/default.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "class",
    "name": "Default",
    "memberof": "Kaetram-Open/server/data/combat/default.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/default.js~Default",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/default.js~Default",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/default.js~Default#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/greatsquid.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\n    Modules = require('../../js/util/modules');\n\nclass GreatSquid extends Combat {\n    constructor(character) {\n        character.spawnDistance = 15;\n        super(character);\n\n        let self = this;\n\n        self.character = character;\n\n        self.lastTerror = new Date().getTime();\n    }\n\n    hit(character, target, hitInfo) {\n        let self = this;\n\n        if (self.canUseTerror) {\n            hitInfo.type = Modules.Hits.Stun;\n\n            self.lastTerror = new Date().getTime();\n        }\n\n        super.hit(character, target, hitInfo);\n    }\n\n    canUseTerror() {\n        return new Date().getTime() - this.lastTerror > 15000;\n    }\n}\n\nmodule.exports = GreatSquid;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/data/combat/greatsquid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/greatsquid.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "class",
    "name": "GreatSquid",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/greatsquid.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid#hit",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "canUseTerror",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid#canUseTerror",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/ogrelord.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\n    Messages = require('../../js/network/messages'),\n    Packets = require('../../js/network/packets'),\n    Modules = require('../../js/util/modules'),\n    Utils = require('../../js/util/utils'),\n    _ = require('underscore');\n\nclass OgreLord extends Combat {\n    constructor(character) {\n        super(character);\n\n        let self = this;\n\n        self.character = character;\n\n        self.dialogues = [\n            'Get outta my swamp',\n            'No, not the onion.',\n            'My minions give me strength! You stand no chance!'\n        ];\n\n        self.minions = [];\n\n        self.lastSpawn = 0;\n\n        self.loaded = false;\n\n        character.projectile = Modules.Projectiles.Boulder;\n        character.projectileName = 'projectile-boulder';\n\n        character.onDeath(() => {\n            self.reset();\n        });\n    }\n\n    load() {\n        let self = this;\n\n        self.talkingInterval = setInterval(() => {\n            if (self.character.hasTarget()) self.forceTalk(self.getMessage());\n        }, 9000);\n\n        self.updateInterval = setInterval(() => {\n            self.character.armourLevel = 50 + self.minions.length * 15;\n        }, 2000);\n\n        self.loaded = true;\n    }\n\n    hit(character, target, hitInfo) {\n        let self = this;\n\n        if (self.isAttacked()) self.beginMinionAttack();\n\n        if (!character.isNonDiagonal(target)) {\n            let distance = character.getDistance(target);\n\n            if (distance < 7) {\n                hitInfo.isRanged = true;\n                character.attackRange = 7;\n            }\n        }\n\n        if (self.canSpawn()) self.spawnMinions();\n\n        super.hit(character, target, hitInfo);\n    }\n\n    forceTalk(message) {\n        let self = this;\n\n        if (!self.world) return;\n\n        self.world.push(Packets.PushOpcode.Regions, {\n            regionId: self.character.region,\n            message: new Messages.NPC(Packets.NPCOpcode.Talk, {\n                id: self.character.instance,\n                text: message,\n                nonNPC: true\n            })\n        });\n    }\n\n    getMessage() {\n        return this.dialogues[Utils.randomInt(0, this.dialogues.length - 1)];\n    }\n\n    spawnMinions() {\n        let self = this,\n            xs = [414, 430, 415, 420, 429],\n            ys = [172, 173, 183, 185, 180];\n\n        self.lastSpawn = new Date().getTime();\n\n        self.forceTalk('Now you shall see my true power!');\n\n        for (let i = 0; i < xs.length; i++)\n            self.minions.push(self.world.spawnMob(12, xs[i], ys[i]));\n\n        _.each(self.minions, minion => {\n            minion.onDeath(() => {\n                if (self.isLast()) self.lastSpawn = new Date().getTime();\n\n                self.minions.splice(self.minions.indexOf(minion), 1);\n            });\n\n            if (self.isAttacked()) self.beginMinionAttack();\n        });\n\n        if (!self.loaded) self.load();\n    }\n\n    beginMinionAttack() {\n        let self = this;\n\n        if (!self.hasMinions()) return;\n\n        _.each(self.minions, minion => {\n            let randomTarget = self.getRandomTarget();\n\n            if (!minion.hasTarget() && randomTarget)\n                minion.combat.begin(randomTarget);\n        });\n    }\n\n    reset() {\n        let self = this;\n\n        self.lastSpawn = 0;\n\n        let listCopy = self.minions.slice();\n\n        for (let i = 0; i < listCopy.length; i++) self.world.kill(listCopy[i]);\n\n        clearInterval(self.talkingInterval);\n        clearInterval(self.updateInterval);\n\n        self.talkingInterval = null;\n        self.updateInterval = null;\n\n        self.loaded = false;\n    }\n\n    getRandomTarget() {\n        let self = this;\n\n        if (self.isAttacked()) {\n            let keys = Object.keys(self.attackers),\n                randomAttacker =\n                    self.attackers[keys[Utils.randomInt(0, keys.length)]];\n\n            if (randomAttacker) return randomAttacker;\n        }\n\n        if (self.character.hasTarget()) return self.character.target;\n\n        return null;\n    }\n\n    hasMinions() {\n        return this.minions.length > 0;\n    }\n\n    isLast() {\n        return this.minions.length === 1;\n    }\n\n    canSpawn() {\n        return (\n            new Date().getTime() - this.lastSpawn > 50000 &&\n            !this.hasMinions() &&\n            this.isAttacked()\n        );\n    }\n}\n\nmodule.exports = OgreLord;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/data/combat/ogrelord.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/ogrelord.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "OgreLord",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/ogrelord.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#load",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#hit",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "forceTalk",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#forceTalk",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "getMessage",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#getMessage",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "spawnMinions",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#spawnMinions",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "beginMinionAttack",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#beginMinionAttack",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "reset",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#reset",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "getRandomTarget",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#getRandomTarget",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "hasMinions",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#hasMinions",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "isLast",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#isLast",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "canSpawn",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#canSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/piratecaptain.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\n    Utils = require('../../js/util/utils'),\n    Messages = require('../../js/network/messages'),\n    Packets = require('../../js/network/packets'),\n    Modules = require('../../js/util/modules');\n\nclass PirateCaptain extends Combat {\n    constructor(character) {\n        character.spawnDistance = 20;\n        super(character);\n\n        let self = this;\n\n        self.character = character;\n\n        self.teleportLocations = [];\n\n        self.lastTeleportIndex = 0;\n        self.lastTeleport = 0;\n\n        self.location = {\n            x: self.character.x,\n            y: self.character.y\n        };\n\n        self.load();\n    }\n\n    load() {\n        let self = this,\n            south = { x: 251, y: 574 },\n            west = { x: 243, y: 569 },\n            east = { x: 258, y: 568 },\n            north = { x: 251, y: 563 };\n\n        self.teleportLocations.push(north, south, west, east);\n    }\n\n    hit(character, target, hitInfo) {\n        let self = this;\n        if (self.canTeleport()) self.teleport();\n        else super.hit(character, target, hitInfo);\n    }\n\n    teleport() {\n        let self = this,\n            position = self.getRandomPosition();\n\n        if (!position) return;\n\n        self.stop();\n\n        self.lastTeleport = new Date().getTime();\n        self.lastTeleportIndex = position.index;\n\n        self.character.setPosition(position.x, position.y);\n\n        if (self.world) {\n            self.world.push(Packets.PushOpcode.Regions, {\n                regionId: self.character.region,\n                message: new Messages.Teleport({\n                    id: self.character.instance,\n                    x: self.character.x,\n                    y: self.character.y,\n                    withAnimation: true\n                })\n            });\n        }\n\n        self.forEachAttacker(attacker => {\n            attacker.removeTarget();\n        });\n\n        if (self.character.hasTarget()) self.begin(self.character.target);\n    }\n\n    getRandomPosition() {\n        let self = this,\n            random = Utils.randomInt(0, self.teleportLocations.length - 1),\n            position = self.teleportLocations[random];\n\n        if (!position || random === self.lastTeleportIndex) return null;\n\n        return {\n            x: position.x,\n            y: position.y,\n            index: random\n        };\n    }\n\n    canTeleport() {\n        // Just randomize the teleportation for shits and giggles.\n        return (\n            new Date().getTime() - this.lastTeleport > 10000 &&\n            Utils.randomInt(0, 4) === 2\n        );\n    }\n\n    getHealthPercentage() {\n        // Floor it to avoid random floats\n        return Math.floor(\n            (this.character.hitPoints / self.character.maxHitPoints) * 100\n        );\n    }\n}\n\nmodule.exports = PirateCaptain;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/data/combat/piratecaptain.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/piratecaptain.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "PirateCaptain",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/piratecaptain.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#load",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#hit",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "teleport",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#teleport",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "getRandomPosition",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#getRandomPosition",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *, \"index\": *}"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "canTeleport",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#canTeleport",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "getHealthPercentage",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#getHealthPercentage",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/queenant.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\n    Packets = require('../../js/network/packets'),\n    Messages = require('../../js/network/messages'),\n    Utils = require('../../js/util/utils'),\n    _ = require('underscore');\n\nclass QueenAnt extends Combat {\n    /*\n     * The queen ant is a little more complex as it uses\n     * AoE attacks and has a stun timer.\n     */\n\n    constructor(character) {\n        character.spawnDistance = 18;\n        super(character);\n\n        let self = this;\n\n        self.character = character;\n\n        self.lastActionThreshold = 10000; // AoE Attack Threshold.\n\n        self.aoeTimeout = null;\n\n        self.aoeCountdown = 5;\n        self.aoeRadius = 2;\n        self.lastAoE = 0;\n\n        self.minionCount = 7;\n        self.lastSpawn = 0;\n        self.minions = [];\n\n        self.frozen = false;\n\n        self.character.onDeath(() => {\n            /**\n             * This is to prevent the boss from dealing\n             * any powerful AoE attack after dying.\n             */\n\n            self.lastSpawn = 0;\n\n            if (self.aoeTimeout) {\n                clearTimeout(self.aoeTimeout);\n                self.aoeTimeout = null;\n            }\n\n            let listCopy = self.minions.slice();\n\n            for (let i = 0; i < listCopy.length; i++)\n                self.world.kill(listCopy[i]);\n        });\n\n        self.character.onReturn(() => {\n            clearTimeout(self.aoeTimeout);\n            self.aoeTimeout = null;\n        });\n    }\n\n    begin(attacker) {\n        let self = this;\n\n        self.resetAoE();\n\n        super.begin(attacker);\n    }\n\n    hit(attacker, target, hitInfo) {\n        let self = this;\n\n        if (self.frozen) return;\n\n        if (self.canCastAoE()) {\n            self.doAoE();\n            return;\n        }\n\n        if (self.canSpawn()) self.spawnMinions();\n\n        if (self.isAttacked()) self.beginMinionAttack();\n\n        super.hit(attacker, target, hitInfo);\n    }\n\n    doAoE() {\n        let self = this;\n\n        /**\n         * The reason this function does not use its superclass\n         * representation is because of the setTimeout function\n         * which does not allow us to call super().\n         */\n\n        self.resetAoE();\n\n        self.lastHit = self.getTime();\n\n        self.pushFreeze(true);\n\n        self.pushCountdown(self.aoeCountdown);\n\n        self.aoeTimeout = setTimeout(() => {\n            self.dealAoE(self.aoeRadius, true);\n\n            self.pushFreeze(false);\n        }, 5000);\n    }\n\n    spawnMinions() {\n        let self = this;\n\n        self.lastSpawn = new Date().getTime();\n\n        for (let i = 0; i < self.minionCount; i++) {\n            self.minions.push(\n                self.world.spawnMob(13, self.character.x, self.character.y)\n            );\n        }\n\n        _.each(self.minions, minion => {\n            minion.aggressive = true;\n            minion.spawnDistance = 12;\n\n            minion.onDeath(() => {\n                if (self.isLast()) self.lastSpawn = new Date().getTime();\n\n                self.minions.splice(self.minions.indexOf(minion), 1);\n            });\n\n            if (self.isAttacked()) self.beginMinionAttack();\n        });\n    }\n\n    beginMinionAttack() {\n        let self = this;\n\n        if (!self.hasMinions()) return;\n\n        _.each(self.minions, minion => {\n            let randomTarget = self.getRandomTarget();\n\n            if (!minion.hasTarget() && randomTarget)\n                minion.combat.begin(randomTarget);\n        });\n    }\n\n    resetAoE() {\n        this.lastAoE = new Date().getTime();\n    }\n\n    getRandomTarget() {\n        let self = this;\n\n        if (self.isAttacked()) {\n            let keys = Object.keys(self.attackers),\n                randomAttacker =\n                    self.attackers[keys[Utils.randomInt(0, keys.length)]];\n\n            if (randomAttacker) return randomAttacker;\n        }\n\n        if (self.character.hasTarget()) return self.character.target;\n\n        return null;\n    }\n\n    pushFreeze(state) {\n        let self = this;\n\n        self.character.frozen = state;\n        self.character.stunned = state;\n    }\n\n    pushCountdown(count) {\n        let self = this;\n\n        self.world.push(Packets.PushOpcode.Regions, {\n            regionId: self.character.region,\n            message: new Messages.NPC(Packets.NPCOpcode.Countdown, {\n                id: self.character.instance,\n                countdown: count\n            })\n        });\n    }\n\n    getMinions() {\n        let self = this,\n            grids = self.world.getGrids();\n    }\n\n    isLast() {\n        return this.minions.length === 1;\n    }\n\n    hasMinions() {\n        return this.minions.length > 0;\n    }\n\n    canCastAoE() {\n        return new Date().getTime() - this.lastAoE > 30000;\n    }\n\n    canSpawn() {\n        return (\n            new Date().getTime() - this.lastSpawn > 45000 &&\n            !this.hasMinions() &&\n            this.isAttacked()\n        );\n    }\n}\n\nmodule.exports = QueenAnt;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/data/combat/queenant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/queenant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 182,
    "kind": "class",
    "name": "QueenAnt",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/queenant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "begin",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#begin",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#hit",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "doAoE",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#doAoE",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "spawnMinions",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#spawnMinions",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "beginMinionAttack",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#beginMinionAttack",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "resetAoE",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#resetAoE",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "lastAoE",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#lastAoE",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getRandomTarget",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#getRandomTarget",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "pushFreeze",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#pushFreeze",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "pushCountdown",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#pushCountdown",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "getMinions",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#getMinions",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "isLast",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#isLast",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "hasMinions",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#hasMinions",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "canCastAoE",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#canCastAoE",
    "access": "public",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "canSpawn",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#canSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/skeletonking.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\n    Utils = require('../../js/util/utils'),\n    _ = require('underscore');\n\nclass SkeletonKing extends Combat {\n    /**\n     * First of its kind, the Skeleton King will spawn 4 minions.\n     * Two sorcerers on (x + 1, y + 1) & (x - 1, y + 1)\n     *\n     * And two death knights on (x + 1, y - 1) & (x - 1, y - 1)\n     */\n\n    constructor(character) {\n        character.spawnDistance = 10;\n        super(character);\n\n        let self = this;\n\n        self.lastSpawn = 0;\n\n        self.minions = [];\n\n        character.onDeath(() => {\n            self.reset();\n        });\n    }\n\n    reset() {\n        let self = this;\n\n        self.lastSpawn = 0;\n\n        let listCopy = self.minions.slice();\n\n        for (let i = 0; i < listCopy.length; i++) self.world.kill(listCopy[i]);\n    }\n\n    hit(character, target, hitInfo) {\n        let self = this;\n\n        if (self.isAttacked()) self.beginMinionAttack();\n\n        if (self.canSpawn()) self.spawnMinions();\n\n        super.hit(character, target, hitInfo);\n    }\n\n    spawnMinions() {\n        let self = this,\n            x = self.character.x,\n            y = self.character.y;\n\n        self.lastSpawn = new Date().getTime();\n\n        if (!self.colliding(x + 2, y - 2))\n            self.minions.push(self.world.spawnMob(17, x + 2, y + 2));\n\n        if (!self.colliding(x - 2, y - 2))\n            self.minions.push(self.world.spawnMob(17, x - 2, y + 2));\n\n        if (!self.colliding(x + 1, y + 1))\n            self.minions.push(self.world.spawnMob(11, x + 1, y - 1));\n\n        if (!self.colliding(x - 1, y + 1))\n            self.minions.push(self.world.spawnMob(11, x - 1, y - 1));\n\n        _.each(self.minions, minion => {\n            minion.onDeath(() => {\n                if (self.isLast()) self.lastSpawn = new Date().getTime();\n\n                self.minions.splice(self.minions.indexOf(minion), 1);\n            });\n\n            if (self.isAttacked()) self.beginMinionAttack();\n        });\n    }\n\n    beginMinionAttack() {\n        let self = this;\n\n        if (!self.hasMinions()) return;\n\n        _.each(self.minions, minion => {\n            let randomTarget = self.getRandomTarget();\n\n            if (!minion.hasTarget() && randomTarget)\n                minion.combat.begin(randomTarget);\n        });\n    }\n\n    getRandomTarget() {\n        let self = this;\n\n        if (self.isAttacked()) {\n            let keys = Object.keys(self.attackers),\n                randomAttacker =\n                    self.attackers[keys[Utils.randomInt(0, keys.length)]];\n\n            if (randomAttacker) return randomAttacker;\n        }\n\n        if (self.character.hasTarget()) return self.character.target;\n\n        return null;\n    }\n\n    hasMinions() {\n        return this.minions.length > 0;\n    }\n\n    isLast() {\n        return this.minions.length === 1;\n    }\n\n    canSpawn() {\n        return (\n            new Date().getTime() - this.lastSpawn > 25000 &&\n            !this.hasMinions() &&\n            this.isAttacked()\n        );\n    }\n}\n\nmodule.exports = SkeletonKing;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/data/combat/skeletonking.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/skeletonking.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "SkeletonKing",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/skeletonking.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#constructor",
    "access": "public",
    "description": "First of its kind, the Skeleton King will spawn 4 minions.\nTwo sorcerers on (x + 1, y + 1) & (x - 1, y + 1)\n\nAnd two death knights on (x + 1, y - 1) & (x - 1, y - 1)",
    "lineNumber": 13
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "reset",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#reset",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#hit",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "spawnMinions",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#spawnMinions",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "beginMinionAttack",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#beginMinionAttack",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "getRandomTarget",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#getRandomTarget",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "hasMinions",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#hasMinions",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "isLast",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#isLast",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "canSpawn",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#canSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/tenebris.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\n    Messages = require('../../js/network/messages'),\n    Packets = require('../../js/network/packets'),\n    Utils = require('../../js/util/utils');\n\nclass Tenebris extends Combat {\n    constructor(character) {\n        character.spawnDistance = 24;\n        super(character);\n\n        let self = this;\n\n        self.illusions = [];\n        self.firstIllusionKilled = false;\n\n        self.lastIllusion = new Date().getTime();\n        self.respawnDelay = 95000;\n\n        character.onDeath(() => {\n            if (self.isIllusion()) {\n                if (!self.firstIllusionKilled) self.spawnTenbris();\n                else {\n                    self.removeIllusions();\n\n                    self.reset();\n                }\n            }\n        });\n\n        if (!self.isIllusion()) self.forceTalk('Who dares summon Tenebris!');\n    }\n\n    reset() {\n        let self = this;\n\n        self.illusions = [];\n        self.firstIllusionKilled = false;\n\n        setTimeout(() => {\n            let offset = Utils.positionOffset(4);\n\n            self.world.spawnMob(105, 48 + offset.x, 338 + offset.y);\n        }, self.respawnDelay);\n    }\n\n    hit(attacker, target, hitInfo) {\n        let self = this;\n\n        if (self.isAttacked()) self.beginIllusionAttack();\n\n        if (self.canSpawn()) self.spawnIllusions();\n\n        super.hit(attacker, target, hitInfo);\n    }\n\n    spawnTenbris() {\n        let self = this;\n\n        self.world.spawnMob(104, self.character.x, self.character.y);\n    }\n\n    spawnIllusions() {\n        let self = this;\n\n        self.illusions.push(\n            self.world.spawnMob(105, self.character.x + 1, self.character.y + 1)\n        );\n        self.illusions.push(\n            self.world.spawnMob(105, self.character.x - 1, self.character.y + 1)\n        );\n\n        _.each(self.illusions, illusion => {\n            illusion.onDeath(() => {\n                if (self.isLast()) self.lastIllusion = new Date().getTime();\n\n                self.illusions.splice(self.illusions.indexOf(illusion), 1);\n            });\n\n            if (self.isAttacked()) self.beginIllusionAttack();\n        });\n\n        self.character.setPosition(62, 343);\n\n        self.world.push(Packets.PushOpcode.Regions, {\n            regionId: self.character.region,\n            message: new Messages.Teleport({\n                id: self.character.instance,\n                x: self.character.x,\n                y: self.character.y,\n                withAnimation: true\n            })\n        });\n    }\n\n    removeIllusions() {\n        let self = this;\n\n        self.lastIllusion = 0;\n\n        let listCopy = self.illusions.slice();\n\n        for (let i = 0; i < listCopy.length; i++) self.world.kill(listCopy[i]);\n    }\n\n    beginIllusionAttack() {\n        let self = this;\n\n        if (!self.hasIllusions()) return;\n\n        _.each(self.illusions, illusion => {\n            let target = self.getRandomTarget();\n\n            if (!illusion.hasTarget && target) illusion.combat.begin(target);\n        });\n    }\n\n    getRandomTarget() {\n        let self = this;\n\n        if (self.isAttacked()) {\n            let keys = Object.keys(self.attackers),\n                randomAttacker =\n                    self.attackers[keys[Utils.randomInt(0, keys.length)]];\n\n            if (randomAttacker) return randomAttacker;\n        }\n\n        if (self.character.hasTarget()) return self.character.target;\n\n        return null;\n    }\n\n    forceTalk(instance, message) {\n        let self = this;\n\n        if (!self.world) return;\n\n        self.world.push(Packets.PushOpcode.Regions, {\n            regionId: self.character.region,\n            message: new Messages.NPC(Packets.NPCOpcode.Talk, {\n                id: instance,\n                text: message,\n                nonNPC: true\n            })\n        });\n    }\n\n    isLast() {\n        return this.illusions.length === 1;\n    }\n\n    canSpawn() {\n        return (\n            !this.isIllusion() &&\n            !this.hasIllusions &&\n            new Date().getTime() - this.lastIllusion === 45000 &&\n            Utils.randomInt(0, 4) === 2\n        );\n    }\n\n    isIllusion() {\n        return this.character.id === 105;\n    }\n\n    hasIllusions() {\n        return this.illusions.length > 0;\n    }\n}\n\nmodule.exports = Tenebris;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/data/combat/tenebris.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/tenebris.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "Tenebris",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/combat/tenebris.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "reset",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#reset",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#hit",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "spawnTenbris",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#spawnTenbris",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "spawnIllusions",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#spawnIllusions",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "removeIllusions",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#removeIllusions",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "beginIllusionAttack",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#beginIllusionAttack",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "getRandomTarget",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#getRandomTarget",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "forceTalk",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#forceTalk",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "isLast",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#isLast",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "canSpawn",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#canSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "isIllusion",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#isIllusion",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "hasIllusions",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#hasIllusions",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "Kaetram-Open/server/data/items/flask.js",
    "content": "/* global module */\n\nlet Items = require('../../js/util/items'),\n    Utils = require('../../js/util/utils');\n\nclass Flask {\n    constructor() {\n        let self = this;\n\n        self.id = 190;\n\n        self.healAmount = 0;\n        self.manaAmount = 0;\n\n        let customData = Items.getCustomData(self.id);\n\n        if (customData) {\n            self.healAmount = customData.healAmount ? customData.healAmount : 0;\n            self.manaAmount = customData.manaAmount ? customData.manaAmount : 0;\n        }\n    }\n\n    onUse(character) {\n        let self = this;\n\n        if (self.healAmount) character.healHitPoints(self.healAmount);\n\n        if (self.manaAmount) character.healManaPoints(self.manaAmount);\n    }\n}\n\nmodule.exports = Flask;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/data/items/flask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/data/items/flask.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/items/flask.js~Items",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/items/flask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "Flask",
    "memberof": "Kaetram-Open/server/data/items/flask.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/items/flask.js~Flask",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/data/items/flask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/items/flask.js~Flask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/items/flask.js~Flask#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "onUse",
    "memberof": "Kaetram-Open/server/data/items/flask.js~Flask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/items/flask.js~Flask#onUse",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/commands.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Messages = require('../network/messages'),\n    Packets = require('../network/packets'),\n    MapClient = require('../../data/map/world_client'),\n    config = require('../../config');\n\nclass Commands {\n    constructor(player) {\n        let self = this;\n\n        self.player = player;\n        self.world = player.world;\n    }\n\n    parse(rawText) {\n        let self = this,\n            blocks = rawText.substring(1).split(' ');\n\n        if (blocks.length < 1) return;\n\n        let command = blocks.shift();\n\n        self.handlePlayerCommands(command, blocks);\n\n        if (self.player.rights > 0)\n            self.handleModeratorCommands(command, blocks);\n\n        if (self.player.rights > 1) self.handleAdminCommands(command, blocks);\n    }\n\n    handlePlayerCommands(command, blocks) {\n        let self = this;\n\n        switch (command) {\n            case 'players':\n                let population = self.world.getPopulation(),\n                    singular = population === 1;\n\n                self.player.notify(\n                    `There ${singular ? 'is' : 'are'} currently ${population} ${\n                        singular ? 'person' : 'people'\n                    } online.`\n                );\n\n                return;\n\n            case 'tutstage':\n                log.info(self.player.getTutorial().stage);\n\n                return;\n\n            case 'coords':\n                self.player.send(\n                    new Messages.Notification(\n                        Packets.NotificationOpcode.Text,\n                        'x: ' + self.player.x + ' y: ' + self.player.y\n                    )\n                );\n\n                return;\n\n            case 'progress':\n                let tutorialQuest = self.player.getTutorial();\n\n                self.player.send(\n                    new Messages.Quest(Packets.QuestOpcode.Progress, {\n                        id: tutorialQuest.id,\n                        stage: tutorialQuest.stage\n                    })\n                );\n\n                return;\n\n            case 'global':\n                self.world.push(Packets.PushOpcode.Broadcast, {\n                    message: new Messages.Chat({\n                        name: self.player.username,\n                        text: blocks.join(' '),\n                        isGlobal: true,\n                        withBubble: false,\n                        colour: 'rgba(191, 191, 63, 1.0)'\n                    })\n                });\n\n                return;\n\n            case 'region':\n                log.info(self.player.region);\n                return;\n\n            case 'getintroduction':\n                log.info(self.player.quests.getQuest(0).getStage());\n                return;\n\n            case 'resetintro':\n                let introduction = self.player.quests.getQuest(0);\n\n                introduction.setStage(0);\n                introduction.clearPointers();\n                introduction.update();\n                introduction.updatePointers();\n\n                self.player.updateRegion();\n                self.player.save();\n        }\n    }\n\n    handleModeratorCommands(command, blocks) {\n        let self = this;\n\n        switch (command) {\n            case 'mute':\n            case 'ban':\n                let duration = blocks.shift(),\n                    targetName = blocks.join(' '),\n                    user = self.world.getPlayerByName(targetName);\n\n                if (!user) return;\n\n                if (!duration) duration = 24;\n\n                let timeFrame = new Date().getTime() + duration * 60 * 60;\n\n                if (command === 'mute') user.mute = timeFrame;\n                else if (command === 'ban') {\n                    user.ban = timeFrame;\n                    user.save();\n\n                    user.sendUTF8('ban');\n                    user.connection.close('banned');\n                }\n\n                user.save();\n\n                return;\n\n            case 'unmute':\n                let uTargetName = blocks.join(' '),\n                    uUser = self.world.getPlayerByName(uTargetName);\n\n                if (!uTargetName) return;\n\n                uUser.mute = new Date().getTime() - 3600;\n\n                uUser.save();\n        }\n    }\n\n    handleAdminCommands(command, blocks) {\n        let self = this,\n            username,\n            player;\n\n        switch (command) {\n            case 'spawn':\n                let spawnId = parseInt(blocks.shift()),\n                    count = parseInt(blocks.shift()),\n                    ability = parseInt(blocks.shift()),\n                    abilityLevel = parseInt(blocks.shift());\n\n                if (!spawnId || !count) return;\n\n                self.player.inventory.add({\n                    id: spawnId,\n                    count: count,\n                    ability: ability || -1,\n                    abilityLevel: abilityLevel || -1\n                });\n\n                return;\n\n            case 'maxhealth':\n                self.player.notify(\n                    'Max health is ' + self.player.hitPoints.getMaxHitPoints()\n                );\n\n                return;\n\n            case 'ipban':\n                return;\n\n            case 'drop':\n                let id = parseInt(blocks.shift()),\n                    dCount = parseInt(blocks.shift());\n\n                if (!id) return;\n\n                if (!dCount) dCount = 1;\n\n                self.world.dropItem(id, dCount, self.player.x, self.player.y);\n\n                return;\n\n            case 'ghost':\n                self.player.equip('ghost', 1, -1, -1);\n\n                return;\n\n            case 'notify':\n                self.player.notify('Hello!!!');\n\n                return;\n\n            case 'teleport':\n                let x = parseInt(blocks.shift()),\n                    y = parseInt(blocks.shift()),\n                    withAnimation = parseInt(blocks.shift());\n\n                log.info(!!withAnimation);\n\n                if (x && y) {\n                    self.player.teleport(x, y, false, !!withAnimation);\n                }\n\n                return;\n\n            case 'teletome':\n                username = blocks.join(' ');\n                player = self.world.getPlayerByName(username);\n\n                if (player) player.teleport(self.player.x, self.player.y);\n\n                return;\n\n            case 'teleto':\n                username = blocks.join(' ');\n                player = self.world.getPlayerByName(username);\n\n                if (player) self.player.teleport(player.x, player.y);\n\n                return;\n\n            case 'nohit':\n                log.info('invincinil');\n\n                self.player.invincible = !self.player.invincible;\n\n                return;\n\n            case 'mob':\n                let npcId = parseInt(blocks.shift());\n\n                self.world.spawnMob(npcId, self.player.x, self.player.y);\n\n                return;\n\n            case 'pointer':\n                if (blocks.length > 1) {\n                    let posX = parseInt(blocks.shift()),\n                        posY = parseInt(blocks.shift());\n\n                    if (!posX || !posY) return;\n\n                    self.player.send(\n                        new Messages.Pointer(Packets.PointerOpcode.Location, {\n                            id: self.player.instance,\n                            x: posX,\n                            y: posY\n                        })\n                    );\n                } else {\n                    let instance = blocks.shift();\n\n                    if (!instance) return;\n\n                    self.player.send(\n                        new Messages.Pointer(Packets.PointerOpcode.NPC, {\n                            id: instance\n                        })\n                    );\n                }\n\n                return;\n\n            case 'teleall':\n                _.each(self.world.players, player => {\n                    player.teleport(self.player.x, self.player.y);\n                });\n\n                return;\n\n            case 'attackaoe':\n                let radius = parseInt(blocks.shift());\n\n                if (!radius) radius = 1;\n\n                self.player.combat.dealAoE(radius);\n\n                return;\n\n            case 'addexp':\n                let exp = parseInt(blocks.shift());\n\n                if (!exp) return;\n\n                self.player.addExperience(exp);\n\n                return;\n\n            case 'region':\n                let tileX = parseInt(blocks.shift()),\n                    tileY = parseInt(blocks.shift()),\n                    tileInfo = parseInt(blocks.shift());\n\n                if (!tileX || !tileY) return;\n\n                let tileIndex = self.world.region.gridPositionToIndex(\n                    tileX - 1,\n                    tileY\n                );\n\n                log.info('Sending Tile: ' + tileIndex);\n\n                self.world.push(Packets.PushOpcode.Player, {\n                    player: self.player,\n                    message: new Messages.Region(Packets.RegionOpcode.Modify, {\n                        index: tileIndex,\n                        data: tileInfo\n                    })\n                });\n\n                return;\n\n            case 'gettile':\n                let getTileX = parseInt(blocks.shift()),\n                    getTileY = parseInt(blocks.shift());\n\n                if (!getTileX || !getTileY) return;\n\n                let getTileIndex = self.world.region.gridPositionToIndex(\n                    getTileX - 1,\n                    getTileY\n                );\n\n                log.info('Tile Index: ' + getTileIndex);\n                log.info('Tile Info: ' + MapClient.data[getTileIndex]);\n                log.info(\n                    'Actual Index: ' +\n                        self.world.map.getActualTileIndex(getTileIndex)\n                );\n\n                return;\n\n            case 'instance':\n                self.world.region.createInstance(\n                    self.player,\n                    self.player.region\n                );\n                return;\n\n            case 'checkregion':\n                self.player.notify('Current Region: ' + self.player.region);\n                return;\n\n            case 'deinstance':\n                self.world.region.deleteInstance(self.player);\n                return;\n\n            case 'debug':\n                self.player.send(\n                    new Messages.Command({\n                        command: 'debug'\n                    })\n                );\n                return;\n\n            case 'addexperience':\n                self.player.addExperience(parseInt(blocks.shift()));\n                return;\n\n            case 'attackrange':\n                log.info(self.player.attackRange);\n                return;\n\n            case 'resetregions':\n                log.info('Resetting regions...');\n\n                self.player.regionsLoaded = [];\n                self.player.updateRegion();\n\n                return;\n\n            case 'finishQuest':\n                self.player.quests.getQuest(1).finish();\n\n                break;\n\n            case 'finishAchievement':\n                self.player.quests.achievements[0].finish();\n\n                break;\n\n            case 'resetAchievement':\n                self.player.quests.achievements[1].setProgress(0);\n\n                break;\n\n            case 'clear':\n                self.player.inventory.forEachSlot(slot => {\n                    if (slot !== -1)\n                        self.player.inventory.remove(slot.id, slot.count);\n                });\n\n                break;\n        }\n    }\n}\n\nmodule.exports = Commands;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/controllers/commands.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/commands.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "class",
    "name": "Commands",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/commands.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "parse",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#parse",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "rawText",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "handlePlayerCommands",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#handlePlayerCommands",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "blocks",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "handleModeratorCommands",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#handleModeratorCommands",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "blocks",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "handleAdminCommands",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#handleAdminCommands",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "blocks",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/incoming.js",
    "content": "/* global module */\n\nlet Packets = require('../network/packets'),\n    Request = require('request'),\n    config = require('../../config.json'),\n    _ = require('underscore'),\n    Messages = require('../network/messages'),\n    sanitizer = require('sanitizer'),\n    Commands = require('./commands'),\n    Items = require('../util/items'),\n    Creator = require('../database/mongodb/creator'),\n    Utils = require('../util/utils');\n\nclass Incoming {\n    constructor(player) {\n        let self = this;\n\n        self.player = player;\n        self.connection = self.player.connection;\n        self.world = self.player.world;\n        self.database = self.player.database;\n        self.commands = new Commands(self.player);\n\n        self.connection.listen(data => {\n            let packet = data.shift(),\n                message = data[0];\n\n            if (!Utils.validPacket(packet)) {\n                log.error(\n                    'Non-existent packet received: ' + packet + ' data: '\n                );\n                log.error(message);\n\n                return;\n            }\n\n            self.player.refreshTimeout();\n\n            switch (packet) {\n                case Packets.Intro:\n                    self.handleIntro(message);\n                    break;\n\n                case Packets.Ready:\n                    self.handleReady(message);\n                    break;\n\n                case Packets.Who:\n                    self.handleWho(message);\n                    break;\n\n                case Packets.Equipment:\n                    self.handleEquipment(message);\n                    break;\n\n                case Packets.Movement:\n                    self.handleMovement(message);\n                    break;\n\n                case Packets.Request:\n                    self.handleRequest(message);\n                    break;\n\n                case Packets.Target:\n                    self.handleTarget(message);\n                    break;\n\n                case Packets.Combat:\n                    self.handleCombat(message);\n                    break;\n\n                case Packets.Projectile:\n                    self.handleProjectile(message);\n                    break;\n\n                case Packets.Network:\n                    self.handleNetwork(message);\n                    break;\n\n                case Packets.Chat:\n                    self.handleChat(message);\n                    break;\n\n                case Packets.Inventory:\n                    self.handleInventory(message);\n                    break;\n\n                case Packets.Bank:\n                    self.handleBank(message);\n                    break;\n\n                case Packets.Respawn:\n                    self.handleRespawn(message);\n                    break;\n\n                case Packets.Trade:\n                    self.handleTrade(message);\n                    break;\n\n                case Packets.Enchant:\n                    self.handleEnchant(message);\n                    break;\n\n                case Packets.Click:\n                    self.handleClick(message);\n                    break;\n\n                case Packets.Warp:\n                    self.handleWarp(message);\n                    break;\n\n                case Packets.Shop:\n                    self.handleShop(message);\n                    break;\n\n                case Packets.Region:\n                    self.handleRegion(message);\n                    break;\n\n                case Packets.Camera:\n                    self.handleCamera(message);\n                    break;\n            }\n        });\n    }\n\n    handleIntro(message) {\n        let self = this,\n            loginType = message.shift(),\n            username = message.shift().toLowerCase(),\n            password = message.shift(),\n            isRegistering = loginType === Packets.IntroOpcode.Register,\n            isGuest = loginType === Packets.IntroOpcode.Guest,\n            email = isRegistering ? message.shift() : '',\n            formattedUsername = username\n                ? username.charAt(0).toUpperCase() + username.slice(1)\n                : '';\n\n        self.player.username = formattedUsername\n            .substr(0, 32)\n            .trim()\n            .toLowerCase();\n        self.player.password = password.substr(0, 32);\n        self.player.email = email.substr(0, 128).toLowerCase();\n\n        if (self.introduced) return;\n\n        if (self.world.playerInWorld(self.player.username)) {\n            self.connection.sendUTF8('loggedin');\n            self.connection.close('Player already logged in..');\n            return;\n        }\n\n        if (config.overrideAuth) {\n            self.database.login(self.player);\n            return;\n        }\n\n        if (config.offlineMode) {\n            let creator = new Creator(null);\n\n            self.player.load(Creator.getFullData(self.player));\n            self.player.intro();\n\n            return;\n        }\n\n        self.introduced = true;\n\n        if (isRegistering) {\n            self.database.exists(self.player, result => {\n                if (result.exists) {\n                    self.connection.sendUTF8(result.type + 'exists');\n                    self.connection.close(result.type + ' is not available.');\n                } else self.database.register(self.player);\n            });\n        } else if (isGuest) {\n            self.player.username = 'Guest' + Utils.randomInt(0, 2000000);\n            self.player.password = null;\n            self.player.email = null;\n            self.player.isGuest = true;\n\n            self.database.login(self.player);\n        } else {\n            self.database.verify(self.player, result => {\n                if (result.status === 'success')\n                    self.database.login(self.player);\n                else {\n                    self.connection.sendUTF8('invalidlogin');\n                    self.connection.close(\n                        'Wrong password entered for: ' + self.player.username\n                    );\n                }\n            });\n        }\n    }\n\n    handleReady(message) {\n        let self = this,\n            isReady = message.shift(),\n            preloadedData = message.shift(),\n            userAgent = message.shift();\n\n        if (!isReady) return;\n\n        if (self.player.regionsLoaded.length > 0 && !preloadedData)\n            self.player.regionsLoaded = [];\n\n        self.player.ready = true;\n\n        self.world.region.handle(self.player);\n        self.world.region.push(self.player);\n\n        self.player.sendEquipment();\n        self.player.loadInventory();\n        self.player.loadQuests();\n\n        if (self.world.map.isOutOfBounds(self.player.x, self.player.y))\n            self.player.setPosition(50, 89);\n\n        if (self.player.userAgent !== userAgent) {\n            self.player.userAgent = userAgent;\n\n            self.player.regionsLoaded = [];\n            self.player.updateRegion(true);\n        }\n\n        self.player.save();\n\n        if (self.player.readyCallback) self.player.readyCallback();\n    }\n\n    handleWho(message) {\n        let self = this;\n\n        _.each(message.shift(), id => {\n            let entity = self.world.getEntityByInstance(id);\n\n            if (entity && entity.id)\n                self.player.send(new Messages.Spawn(entity));\n        });\n    }\n\n    handleEquipment(message) {\n        let self = this,\n            opcode = message.shift();\n\n        switch (opcode) {\n            case Packets.EquipmentOpcode.Unequip:\n                let type = message.shift();\n\n                if (!self.player.inventory.hasSpace()) {\n                    self.player.send(\n                        new Messages.Notification(\n                            Packets.NotificationOpcode.Text,\n                            'You do not have enough space in your inventory.'\n                        )\n                    );\n                    return;\n                }\n\n                switch (type) {\n                    case 'weapon':\n                        if (!self.player.hasWeapon()) return;\n\n                        self.player.inventory.add(self.player.weapon.getItem());\n                        self.player.setWeapon(-1, -1, -1, -1);\n\n                        break;\n\n                    case 'armour':\n                        if (\n                            self.player.hasArmour() &&\n                            self.player.armour.id === 114\n                        )\n                            return;\n\n                        self.player.inventory.add(self.player.armour.getItem());\n                        self.player.setArmour(114, 1, -1, -1);\n\n                        break;\n\n                    case 'pendant':\n                        if (!self.player.hasPendant()) return;\n\n                        self.player.inventory.add(\n                            self.player.pendant.getItem()\n                        );\n                        self.player.setPendant(-1, -1, -1, -1);\n\n                        break;\n\n                    case 'ring':\n                        if (!self.player.hasRing()) return;\n\n                        self.player.inventory.add(self.player.ring.getItem());\n                        self.player.setRing(-1, -1, -1, -1);\n\n                        break;\n\n                    case 'boots':\n                        if (!self.player.hasBoots()) return;\n\n                        self.player.inventory.add(self.player.boots.getItem());\n                        self.player.setBoots(-1, -1, -1, -1);\n\n                        break;\n                }\n\n                self.player.send(\n                    new Messages.Equipment(Packets.EquipmentOpcode.Unequip, [\n                        type\n                    ])\n                );\n                self.player.sync();\n\n                break;\n        }\n    }\n\n    handleMovement(message) {\n        let self = this,\n            opcode = message.shift(),\n            orientation;\n\n        if (!self.player || self.player.dead) return;\n\n        switch (opcode) {\n            case Packets.MovementOpcode.Request:\n                let requestX = message.shift(),\n                    requestY = message.shift(),\n                    playerX = message.shift(),\n                    playerY = message.shift();\n\n                if (self.preventNoClip(requestX, requestY))\n                    self.player.guessPosition(requestX, requestY);\n\n                break;\n\n            case Packets.Movement.Started:\n                let selectedX = message.shift(),\n                    selectedY = message.shift(),\n                    pX = message.shift(),\n                    pY = message.shift();\n\n                if (\n                    pX !== self.player.x ||\n                    pY !== self.player.y ||\n                    self.player.stunned ||\n                    !self.preventNoClip(selectedX, selectedY)\n                )\n                    return;\n\n                self.player.moving = true;\n\n                break;\n\n            case Packets.MovementOpcode.Step:\n                let x = message.shift(),\n                    y = message.shift();\n\n                if (self.player.stunned || !self.preventNoClip(x, y)) return;\n\n                self.player.setPosition(x, y);\n\n                break;\n\n            case Packets.MovementOpcode.Stop:\n                let posX = message.shift(),\n                    posY = message.shift(),\n                    id = message.shift(),\n                    hasTarget = message.shift(),\n                    entity = self.world.getEntityByInstance(id);\n\n                orientation = message.shift();\n\n                if (entity && entity.type === 'item')\n                    self.player.inventory.add(entity);\n\n                if (self.world.map.isDoor(posX, posY) && !hasTarget) {\n                    let destination = self.world.map.getDoorDestination(\n                        posX,\n                        posY\n                    );\n\n                    self.player.teleport(destination.x, destination.y, true);\n                } else {\n                    self.player.setPosition(posX, posY);\n                    self.player.setOrientation(orientation);\n                }\n\n                self.player.moving = false;\n                self.player.lastMovement = new Date().getTime();\n\n                break;\n\n            case Packets.MovementOpcode.Entity:\n                let instance = message.shift(),\n                    entityX = message.shift(),\n                    entityY = message.shift(),\n                    oEntity = self.world.getEntityByInstance(instance);\n\n                if (\n                    !oEntity ||\n                    (oEntity.x === entityX && oEntity.y === entityY)\n                )\n                    return;\n\n                oEntity.setPosition(entityX, entityY);\n\n                if (oEntity.hasTarget()) oEntity.combat.forceAttack();\n\n                break;\n\n            case Packets.MovementOpcode.Orientate:\n                orientation = message.shift();\n\n                self.world.push(Packets.PushOpcode.Regions, {\n                    regionId: self.player.region,\n                    message: new Messages.Movement(\n                        Packets.MovementOpcode.Orientate,\n                        [self.player.instance, orientation]\n                    )\n                });\n\n                break;\n        }\n    }\n\n    handleRequest(message) {\n        let self = this,\n            id = message.shift();\n\n        if (id !== self.player.instance) return;\n\n        self.world.region.push(self.player);\n    }\n\n    handleTarget(message) {\n        let self = this,\n            opcode = message.shift(),\n            instance = message.shift();\n\n        log.debug('Targeted: ' + instance);\n\n        switch (opcode) {\n            case Packets.TargetOpcode.Talk:\n                let entity = self.world.getEntityByInstance(instance);\n\n                if (!entity || !self.player.isAdjacent(entity)) return;\n\n                if (entity.type === 'chest') {\n                    entity.openChest();\n                    return;\n                }\n\n                if (entity.dead) return;\n\n                if (self.player.npcTalkCallback)\n                    self.player.npcTalkCallback(entity);\n\n                break;\n\n            case Packets.TargetOpcode.Attack:\n                let target = self.world.getEntityByInstance(instance);\n\n                if (\n                    !target ||\n                    target.dead ||\n                    !self.canAttack(self.player, target)\n                )\n                    return;\n\n                self.world.push(Packets.PushOpcode.Regions, {\n                    regionId: target.region,\n                    message: new Messages.Combat(\n                        Packets.CombatOpcode.Initiate,\n                        {\n                            attackerId: self.player.instance,\n                            targetId: target.instance\n                        }\n                    )\n                });\n\n                break;\n\n            case Packets.TargetOpcode.None:\n                self.player.combat.stop();\n                self.player.removeTarget();\n\n                break;\n        }\n    }\n\n    handleCombat(message) {\n        let self = this,\n            opcode = message.shift();\n\n        switch (opcode) {\n            case Packets.CombatOpcode.Initiate:\n                let attacker = self.world.getEntityByInstance(message.shift()),\n                    target = self.world.getEntityByInstance(message.shift());\n\n                if (\n                    !target ||\n                    target.dead ||\n                    !attacker ||\n                    attacker.dead ||\n                    !self.canAttack(attacker, target)\n                )\n                    return;\n\n                attacker.setTarget(target);\n\n                if (!attacker.combat.started) attacker.combat.forceAttack();\n                else {\n                    attacker.combat.start();\n\n                    attacker.combat.attack(target);\n                }\n\n                if (target.combat) target.combat.addAttacker(attacker);\n\n                break;\n        }\n    }\n\n    handleProjectile(message) {\n        let self = this,\n            type = message.shift();\n\n        switch (type) {\n            case Packets.ProjectileOpcode.Impact:\n                let projectile = self.world.getEntityByInstance(\n                        message.shift()\n                    ),\n                    target = self.world.getEntityByInstance(message.shift());\n\n                if (!target || target.dead || !projectile) return;\n\n                self.world.handleDamage(\n                    projectile.owner,\n                    target,\n                    projectile.damage\n                );\n                self.world.removeProjectile(projectile);\n\n                if (\n                    target.combat.started ||\n                    target.dead ||\n                    target.type !== 'mob'\n                )\n                    return;\n\n                target.begin(projectile.owner);\n\n                break;\n        }\n    }\n\n    handleNetwork(message) {\n        let self = this,\n            opcode = message.shift();\n\n        switch (opcode) {\n            case Packets.NetworkOpcode.Pong:\n                log.info('Pingy pongy pung pong.');\n                break;\n        }\n    }\n\n    handleChat(message) {\n        let self = this,\n            text = sanitizer.escape(sanitizer.sanitize(message.shift()));\n\n        if (!text || text.length < 1 || !/\\S/.test(text)) return;\n\n        if (text.charAt(0) === '/' || text.charAt(0) === ';')\n            self.commands.parse(text);\n        else {\n            if (self.player.isMuted()) {\n                self.player.send(\n                    new Messages.Notification(\n                        Packets.NotificationOpcode.Text,\n                        'You are currently muted.'\n                    )\n                );\n                return;\n            }\n\n            if (!self.player.canTalk) {\n                self.player.send(\n                    new Messages.Notification(\n                        Packets.NotificationOpcode.Text,\n                        'You are not allowed to talk for the duration of this event.'\n                    )\n                );\n                return;\n            }\n\n            if (config.debug) log.info(`${self.player.username} - ${text}`);\n\n            self.world.push(Packets.PushOpcode.Regions, {\n                regionId: self.player.region,\n                message: new Messages.Chat({\n                    id: self.player.instance,\n                    name: self.player.username,\n                    withBubble: true,\n                    text: text,\n                    duration: 7000\n                })\n            });\n        }\n    }\n\n    handleInventory(message) {\n        let self = this,\n            opcode = message.shift(),\n            id;\n\n        switch (opcode) {\n            case Packets.InventoryOpcode.Remove:\n                let item = message.shift(),\n                    count;\n\n                if (!item) return;\n\n                if (item.count > 1) count = message.shift();\n\n                id = Items.stringToId(item.string);\n\n                let iSlot = self.player.inventory.slots[item.index];\n\n                if (count > iSlot.count) count = iSlot.count;\n\n                if (\n                    self.player.inventory.remove(\n                        id,\n                        count || item.count,\n                        item.index\n                    )\n                ) {\n                    self.world.dropItem(\n                        id,\n                        count || 1,\n                        self.player.x,\n                        self.player.y\n                    );\n                }\n\n                break;\n\n            case Packets.InventoryOpcode.Select:\n                let index = message.shift(),\n                    slot = self.player.inventory.slots[index],\n                    string = slot.string,\n                    sCount = slot.count,\n                    ability = slot.ability,\n                    abilityLevel = slot.abilityLevel;\n\n                if (!slot) return;\n\n                id = Items.stringToId(slot.string);\n\n                if (slot.equippable) {\n                    if (!self.player.canEquip(string)) return;\n\n                    self.player.inventory.remove(id, slot.count, slot.index);\n\n                    self.player.equip(string, sCount, ability, abilityLevel);\n                } else if (slot.edible) {\n                    self.player.inventory.remove(id, 1, slot.index);\n\n                    self.player.eat(id);\n                }\n\n                break;\n        }\n    }\n\n    handleBank(message) {\n        let self = this,\n            opcode = message.shift();\n\n        switch (opcode) {\n            case Packets.BankOpcode.Select:\n                let type = message.shift(),\n                    index = message.shift(),\n                    isBank = type === 'bank';\n\n                if (isBank) {\n                    let bankSlot = self.player.bank.slots[index];\n\n                    // Infinite stacks move all at onces, otherwise move one by one.\n                    let moveAmount =\n                        Items.maxStackSize(bankSlot.id) === -1\n                            ? bankSlot.count\n                            : 1;\n\n                    if (self.player.inventory.add(bankSlot, moveAmount))\n                        self.player.bank.remove(bankSlot.id, moveAmount, index);\n                } else {\n                    let inventorySlot = self.player.inventory.slots[index];\n\n                    if (\n                        self.player.bank.add(\n                            inventorySlot.id,\n                            inventorySlot.count,\n                            inventorySlot.ability,\n                            inventorySlot.abilityLevel\n                        )\n                    ) {\n                        self.player.inventory.remove(\n                            inventorySlot.id,\n                            inventorySlot.count,\n                            index\n                        );\n                    }\n                }\n\n                break;\n        }\n    }\n\n    handleRespawn(message) {\n        let self = this,\n            instance = message.shift();\n\n        if (self.player.instance !== instance) return;\n\n        let spawn = self.player.getSpawn();\n\n        self.player.dead = false;\n        self.player.setPosition(spawn.x, spawn.y);\n\n        self.world.push(Packets.PushOpcode.Regions, {\n            regionId: self.player.region,\n            message: new Messages.Spawn(self.player),\n            ignoreId: self.player.instance\n        });\n\n        self.player.send(\n            new Messages.Respawn(\n                self.player.instance,\n                self.player.x,\n                self.player.y\n            )\n        );\n\n        self.player.revertPoints();\n    }\n\n    handleTrade(message) {\n        let self = this,\n            opcode = message.shift(),\n            oPlayer = self.world.getEntityByInstance(message.shift());\n\n        if (!oPlayer || !opcode) return;\n\n        switch (opcode) {\n            case Packets.TradeOpcode.Request:\n                break;\n\n            case Packets.TradeOpcode.Accept:\n                break;\n\n            case Packets.TradeOpcode.Decline:\n                break;\n        }\n    }\n\n    handleEnchant(message) {\n        let self = this,\n            opcode = message.shift();\n\n        switch (opcode) {\n            case Packets.EnchantOpcode.Select:\n                let index = message.shift(),\n                    item = self.player.inventory.slots[index],\n                    type = 'item';\n\n                if (Items.isShard(item.id)) type = 'shards';\n\n                self.player.enchant.add(type, item);\n\n                break;\n\n            case Packets.EnchantOpcode.Remove:\n                self.player.enchant.remove(message.shift());\n\n                break;\n\n            case Packets.EnchantOpcode.Enchant:\n                self.player.enchant.enchant();\n\n                break;\n        }\n    }\n\n    handleClick(message) {\n        let self = this,\n            type = message.shift(),\n            state = message.shift();\n\n        switch (type) {\n            case 'profile':\n                self.player.toggleProfile(state);\n\n                break;\n\n            case 'inventory':\n                self.player.toggleInventory(state);\n\n                break;\n\n            case 'warp':\n                self.player.toggleWarp(state);\n\n                break;\n        }\n    }\n\n    handleWarp(message) {\n        let self = this,\n            id = parseInt(message.shift()) - 1;\n\n        if (self.player.warp) self.player.warp.warp(id);\n    }\n\n    handleShop(message) {\n        let self = this,\n            opcode = message.shift(),\n            shopId = message.shift();\n\n        switch (opcode) {\n            case Packets.ShopOpcode.Buy:\n                let buyId = message.shift(),\n                    amount = message.shift();\n\n                if (!buyId || !amount) {\n                    self.player.notify('Incorrect purchase packets.');\n                    return;\n                }\n\n                log.debug(\n                    'Received Buy: ' + shopId + ' ' + buyId + ' ' + amount\n                );\n\n                self.world.shops.buy(self.player, shopId, buyId, amount);\n\n                break;\n        }\n    }\n\n    handleCamera(message) {\n        let self = this;\n\n        log.info(self.player.x + ' ' + self.player.y);\n\n        self.player.cameraArea = null;\n        self.player.handler.detectCamera(self.player.x, self.player.y);\n    }\n\n    canAttack(attacker, target) {\n        /**\n         * Used to prevent client-sided manipulation. The client will send the packet to start combat\n         * but if it was modified by a presumed hacker, it will simply cease when it arrives to this condition.\n         */\n\n        if (attacker.type === 'mob' || target.type === 'mob') return true;\n\n        return (\n            attacker.type === 'player' &&\n            target.type === 'player' &&\n            attacker.pvp &&\n            target.pvp\n        );\n    }\n\n    preventNoClip(x, y) {\n        let self = this,\n            isMapColliding = self.world.map.isColliding(x, y),\n            isInstanceColliding = self.player.doors.hasCollision(x, y);\n\n        if (isMapColliding || isInstanceColliding) {\n            self.player.stopMovement(true);\n            self.player.notify(\n                'We have detected no-clipping in your client. Please submit a bug report.'\n            );\n\n            let x =\n                    self.player.previousX < 0\n                        ? self.player.x\n                        : self.player.previousX,\n                y =\n                    self.player.previousY < 0\n                        ? self.player.y\n                        : self.player.previousY;\n\n            self.player.teleport(x, y, false, true);\n            return false;\n        }\n\n        return true;\n    }\n}\n\nmodule.exports = Incoming;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/controllers/incoming.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "Packets",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Packets",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/incoming.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "class",
    "name": "Incoming",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/incoming.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "handleIntro",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleIntro",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "handleReady",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleReady",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "handleWho",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleWho",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "handleEquipment",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleEquipment",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "handleMovement",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleMovement",
    "access": "public",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "handleRequest",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleRequest",
    "access": "public",
    "description": null,
    "lineNumber": 430,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "handleTarget",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleTarget",
    "access": "public",
    "description": null,
    "lineNumber": 439,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "handleCombat",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleCombat",
    "access": "public",
    "description": null,
    "lineNumber": 495,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "handleProjectile",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 528,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "handleNetwork",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleNetwork",
    "access": "public",
    "description": null,
    "lineNumber": 561,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "handleChat",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleChat",
    "access": "public",
    "description": null,
    "lineNumber": 572,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "handleInventory",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleInventory",
    "access": "public",
    "description": null,
    "lineNumber": 616,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "handleBank",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleBank",
    "access": "public",
    "description": null,
    "lineNumber": 681,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "handleRespawn",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleRespawn",
    "access": "public",
    "description": null,
    "lineNumber": 725,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "handleTrade",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleTrade",
    "access": "public",
    "description": null,
    "lineNumber": 753,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "handleEnchant",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleEnchant",
    "access": "public",
    "description": null,
    "lineNumber": 772,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "handleClick",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleClick",
    "access": "public",
    "description": null,
    "lineNumber": 800,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "handleWarp",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleWarp",
    "access": "public",
    "description": null,
    "lineNumber": 823,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "handleShop",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleShop",
    "access": "public",
    "description": null,
    "lineNumber": 830,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "handleCamera",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleCamera",
    "access": "public",
    "description": null,
    "lineNumber": 855,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "canAttack",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#canAttack",
    "access": "public",
    "description": null,
    "lineNumber": 864,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "preventNoClip",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#preventNoClip",
    "access": "public",
    "description": null,
    "lineNumber": 880,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/minigames.js",
    "content": "/* global module */\n\nlet TeamWar = require('../minigames/impl/teamwar');\n\nclass Minigames {\n    constructor(world) {\n        let self = this;\n\n        self.world = world;\n\n        self.minigames = {};\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        self.minigames.TeamWar = new TeamWar();\n    }\n\n    getTeamWar() {\n        return this.minigames.TeamWar;\n    }\n}\n\nmodule.exports = Minigames;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/controllers/minigames.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "TeamWar",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~TeamWar",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/minigames.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 268,
    "kind": "class",
    "name": "Minigames",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~Minigames",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/minigames.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js~Minigames",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~Minigames#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js~Minigames",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~Minigames#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "getTeamWar",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js~Minigames",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~Minigames#getTeamWar",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/quests.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Introduction = require('../game/entity/character/player/quest/impl/introduction'),\n    BulkySituation = require('../game/entity/character/player/quest/impl/bulkysituation'),\n    QuestData = require('../../data/quests.json'),\n    AchievementData = require('../../data/achievements.json'),\n    Achievement = require('../game/entity/character/player/achievement');\n\nclass Quests {\n    constructor(player) {\n        let self = this;\n\n        self.player = player;\n\n        self.quests = {};\n        self.achievements = {};\n\n        self.load();\n    }\n\n    load() {\n        let self = this,\n            questCount = 0;\n\n        _.each(QuestData, quest => {\n            if (questCount === 0)\n                self.quests[quest.id] = new Introduction(self.player, quest);\n            else if (questCount === 1)\n                self.quests[quest.id] = new BulkySituation(self.player, quest);\n\n            questCount++;\n        });\n\n        _.each(AchievementData, achievement => {\n            self.achievements[achievement.id] = new Achievement(\n                achievement.id,\n                self.player\n            );\n        });\n    }\n\n    updateQuests(ids, stages) {\n        let self = this;\n\n        if (!ids || !stages) {\n            _.each(self.quests, quest => {\n                quest.load(0);\n            });\n\n            return;\n        }\n\n        for (let id = 0; id < ids.length; id++) {\n            if (!isNaN(parseInt(ids[id])) && self.quests[id])\n                self.quests[id].load(stages[id]);\n        }\n\n        if (self.questsReadyCallback) self.questsReadyCallback();\n    }\n\n    updateAchievements(ids, progress) {\n        let self = this;\n\n        for (let id = 0; id < ids.length; id++) {\n            if (!isNaN(parseInt(ids[id])) && self.achievements[id])\n                self.achievements[id].setProgress(progress[id]);\n        }\n\n        if (self.achievementsReadyCallback) self.achievementsReadyCallback();\n    }\n\n    getQuest(id) {\n        let self = this;\n\n        if (id in self.quests) return self.quests[id];\n\n        return null;\n    }\n\n    getQuests() {\n        let self = this,\n            ids = '',\n            stages = '';\n\n        for (let id = 0; id < self.getQuestSize(); id++) {\n            let quest = self.quests[id];\n\n            ids += id + ' ';\n            stages += quest.stage + ' ';\n        }\n\n        return {\n            username: self.player.username,\n            ids: ids,\n            stages: stages\n        };\n    }\n\n    getAchievements() {\n        let self = this,\n            ids = '',\n            progress = '';\n\n        for (let id = 0; id < self.getAchievementSize(); id++) {\n            ids += id + ' ';\n            progress += self.achievements[id].progress + ' ';\n        }\n\n        return {\n            username: self.player.username,\n            ids: ids,\n            progress: progress\n        };\n    }\n\n    getAchievementData() {\n        let self = this,\n            achievements = [];\n\n        self.forEachAchievement(achievement => {\n            achievements.push(achievement.getInfo());\n        });\n\n        return {\n            achievements: achievements\n        };\n    }\n\n    getQuestData() {\n        let self = this,\n            quests = [];\n\n        self.forEachQuest(quest => {\n            quests.push(quest.getInfo());\n        });\n\n        return {\n            quests: quests\n        };\n    }\n\n    forEachQuest(callback) {\n        _.each(this.quests, quest => {\n            callback(quest);\n        });\n    }\n\n    forEachAchievement(callback) {\n        _.each(this.achievements, achievement => {\n            callback(achievement);\n        });\n    }\n\n    getQuestsCompleted() {\n        let self = this,\n            count = 0;\n\n        for (let id in self.quests) {\n            if (self.quests.hasOwnProperty(id))\n                if (self.quests[id].isFinished()) count++;\n        }\n\n        return count;\n    }\n\n    getAchievementsCompleted() {\n        let self = this,\n            count = 0;\n\n        for (let id in self.achievements) {\n            if (self.achievements.hasOwnProperty(id))\n                if (self.achievements[id].isFinished()) count++;\n        }\n\n        return count;\n    }\n\n    getQuestSize() {\n        return Object.keys(this.quests).length;\n    }\n\n    getAchievementSize() {\n        return Object.keys(this.achievements).length;\n    }\n\n    getQuestByNPC(npc) {\n        let self = this;\n\n        /**\n         * Iterate through the quest list in the order it has been\n         * added so that NPC's that are required by multiple quests\n         * follow the proper order.\n         */\n\n        for (let id in self.quests) {\n            if (self.quests.hasOwnProperty(id)) {\n                let quest = self.quests[id];\n\n                if (quest.hasNPC(npc.id)) return quest;\n            }\n        }\n\n        return null;\n    }\n\n    getAchievementByNPC(npc) {\n        let self = this;\n\n        for (let id in self.achievements) {\n            if (self.achievements.hasOwnProperty(id)) {\n                if (\n                    self.achievements[id].data.npc === npc.id &&\n                    !self.achievements[id].isFinished()\n                )\n                    return self.achievements[id];\n            }\n        }\n\n        return null;\n    }\n\n    getAchievementByMob(mob) {\n        let self = this;\n\n        for (let id in self.achievements) {\n            if (self.achievements.hasOwnProperty(id)) {\n                if (self.achievements[id].data.mob === mob.id)\n                    return self.achievements[id];\n            }\n        }\n\n        return null;\n    }\n\n    isQuestMob(mob) {\n        let self = this;\n\n        for (let id in self.quests) {\n            if (self.quests.hasOwnProperty(id)) {\n                let quest = self.quests[id];\n\n                if (!quest.isFinished() && quest.hasMob(mob.id)) return true;\n            }\n        }\n    }\n\n    isAchievementMob(mob) {\n        let self = this;\n\n        for (let id in self.achievements) {\n            if (self.achievements.hasOwnProperty(id)) {\n                if (\n                    self.achievements[id].data.mob === mob.id &&\n                    !self.achievements[id].isFinished()\n                )\n                    return true;\n            }\n        }\n\n        return false;\n    }\n\n    isQuestNPC(npc) {\n        let self = this;\n\n        for (let id in self.quests) {\n            if (self.quests.hasOwnProperty(id)) {\n                let quest = self.quests[id];\n\n                if (!quest.isFinished() && quest.hasNPC(npc.id)) return true;\n            }\n        }\n    }\n\n    isAchievementNPC(npc) {\n        let self = this;\n\n        for (let id in self.achievements) {\n            if (self.achievements.hasOwnProperty(id)) {\n                if (\n                    self.achievements[id].data.npc === npc.id &&\n                    !self.achievements[id].isFinished()\n                )\n                    return true;\n            }\n        }\n\n        return false;\n    }\n\n    onAchievementsReady(callback) {\n        this.achievementsReadyCallback = callback;\n    }\n\n    onQuestsReady(callback) {\n        this.questsReadyCallback = callback;\n    }\n}\n\nmodule.exports = Quests;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/controllers/quests.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/quests.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "class",
    "name": "Quests",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/quests.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#load",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "updateQuests",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#updateQuests",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "stages",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "updateAchievements",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#updateAchievements",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "progress",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "getQuest",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuest",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "getQuests",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuests",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"username\": *, \"ids\": *, \"stages\": *}"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "getAchievements",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievements",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"username\": *, \"ids\": *, \"progress\": *}"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "getAchievementData",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementData",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"achievements\": *}"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getQuestData",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuestData",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"quests\": *}"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "forEachQuest",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#forEachQuest",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "forEachAchievement",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#forEachAchievement",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "getQuestsCompleted",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuestsCompleted",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "getAchievementsCompleted",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementsCompleted",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "getQuestSize",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuestSize",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "getAchievementSize",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementSize",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "getQuestByNPC",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuestByNPC",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "getAchievementByNPC",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementByNPC",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "getAchievementByMob",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementByMob",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "mob",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "isQuestMob",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#isQuestMob",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [
      {
        "name": "mob",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "isAchievementMob",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#isAchievementMob",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "params": [
      {
        "name": "mob",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "isQuestNPC",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#isQuestNPC",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "isAchievementNPC",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#isAchievementNPC",
    "access": "public",
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "onAchievementsReady",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#onAchievementsReady",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "achievementsReadyCallback",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#achievementsReadyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "onQuestsReady",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#onQuestsReady",
    "access": "public",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "questsReadyCallback",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#questsReadyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/shops.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    ShopData = require('../util/shops'),\n    Items = require('../util/items'),\n    Messages = require('../network/messages'),\n    Packets = require('../network/packets');\n\nclass Shops {\n    constructor(world) {\n        let self = this;\n\n        self.world = world;\n\n        self.interval = 60000;\n        self.shopInterval = null;\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        self.shopInterval = setInterval(() => {\n            _.each(ShopData.Data, info => {\n                for (let i = 0; i < info.count; i++) {\n                    if (info.count[i] < info.originalCount[i])\n                        ShopData.increment(info.id, info.items[i], 1);\n                }\n            });\n        }, self.interval);\n    }\n\n    open(player, npcId) {\n        let self = this;\n\n        player.send(\n            new Messages.Shop(Packets.ShopOpcode.Open, {\n                instance: player.instance,\n                npcId: npcId,\n                shopData: self.getShopData(npcId)\n            })\n        );\n    }\n\n    buy(player, npcId, buyId, count) {\n        let self = this,\n            cost = ShopData.getCost(npcId, buyId, count),\n            currency = self.getCurrency(npcId),\n            stock = ShopData.getStock(npcId, buyId);\n\n        if (!cost || !currency || !stock) {\n            log.info('Invalid shop data.');\n            return;\n        }\n\n        // TODO: Make it so that when you have the exact coin count, it removes coins and replaces it with the item purchased.\n\n        if (stock === 0) {\n            player.notify('This item is currently out of stock.');\n            return;\n        }\n\n        if (!player.inventory.contains(currency, cost)) {\n            player.notify('You do not have enough money to purchase this.');\n            return;\n        }\n\n        if (!player.inventory.hasSpace()) {\n            player.notify('You do not have enough space in your inventory.');\n            return;\n        }\n\n        if (count > stock) count = stock;\n\n        player.inventory.remove(currency, cost);\n        player.inventory.add({\n            id: ShopData.getItem(npcId, buyId),\n            count: count,\n            ability: -1,\n            abilityLevel: -1\n        });\n\n        ShopData.decrement(npcId, buyId, count);\n\n        self.refresh(npcId);\n    }\n\n    refresh(shop) {\n        let self = this;\n\n        self.world.push(Packets.PushOpcode.Broadcast, {\n            message: new Messages.Shop(\n                Packets.ShopOpcode.Refresh,\n                self.getShopData(shop)\n            )\n        });\n    }\n\n    getCurrency(npcId) {\n        let shop = ShopData.Ids[npcId];\n\n        if (!shop) return null;\n\n        return shop.currency;\n    }\n\n    getShopData(npcId) {\n        let self = this,\n            strings = [],\n            names = [],\n            items = ShopData.getItems(npcId);\n\n        for (let i = 0; i < items.length; i++) {\n            strings.push(Items.idToString(items[i]));\n            names.push(Items.idToName(items[i]));\n        }\n\n        return {\n            id: npcId,\n            strings: strings,\n            names: names,\n            counts: ShopData.getCount(npcId)\n        };\n    }\n}\n\nmodule.exports = Shops;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/controllers/shops.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/shops.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "Shops",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/controllers/shops.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#load",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "open",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#open",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "npcId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "buy",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#buy",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "npcId",
        "types": [
          "*"
        ]
      },
      {
        "name": "buyId",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "refresh",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "shop",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "getCurrency",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#getCurrency",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "npcId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "getShopData",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#getShopData",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "npcId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"id\": *, \"strings\": *, \"names\": *, \"counts\": *}"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "file",
    "name": "Kaetram-Open/server/js/database/database.js",
    "content": "/* global module */\n\nlet MongoDB = require('./mongodb/mongodb'),\n    config = require('../../config');\n\nclass Database {\n    constructor(databaseType) {\n        let self = this;\n\n        self.database = null;\n        self.databaseType = databaseType;\n\n        switch (self.databaseType) {\n            case 'mongo':\n            case 'mongodb':\n                self.database = new MongoDB(\n                    config.mongoHost,\n                    config.mongoPort,\n                    config.mongoUser,\n                    config.mongoPassword,\n                    config.mongoDatabase\n                );\n                break;\n\n            default:\n                log.error(\n                    'The database ' + self.databaseType + ' could not be found.'\n                );\n                break;\n        }\n    }\n\n    getDatabase() {\n        let self = this;\n\n        if (!self.database) {\n            log.error(\n                '[Database] No database is currently present. It is advised against proceeding in this state.'\n            );\n        }\n\n        return self.database;\n    }\n}\n\nmodule.exports = Database;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/database/database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "variable",
    "name": "MongoDB",
    "memberof": "Kaetram-Open/server/js/database/database.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/database.js~MongoDB",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/database/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 313,
    "kind": "class",
    "name": "Database",
    "memberof": "Kaetram-Open/server/js/database/database.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/database.js~Database",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/database/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/database/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/database.js~Database#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "getDatabase",
    "memberof": "Kaetram-Open/server/js/database/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/database.js~Database#getDatabase",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "Kaetram-Open/server/js/database/mongodb/creator.js",
    "content": "/* global module */\n\nlet bcrypt = require('bcrypt'),\n    config = require('../../../config');\n\nclass Creator {\n    constructor(database) {\n        this.database = database;\n    }\n\n    save(player) {\n        let self = this;\n\n        self.database.getDatabase(database => {\n            let playerData = database.collection('player_data'),\n                playerEquipment = database.collection('player_equipment'),\n                playerQuests = database.collection('player_quests'),\n                playerAchievements = database.collection('player_achievements'),\n                playerBank = database.collection('player_bank'),\n                playerRegions = database.collection('player_regions'),\n                playerAbilities = database.collection('player_abilities'),\n                playerInventory = database.collection('player_inventory');\n\n            self.savePlayerData(playerData, player);\n            self.savePlayerEquipment(playerEquipment, player);\n            self.savePlayerQuests(playerQuests, player);\n            self.savePlayerAchievements(playerAchievements, player);\n            self.savePlayerBank(playerBank, player);\n            self.savePlayerRegions(playerRegions, player);\n            self.savePlayerAbilities(playerAbilities, player);\n            self.savePlayerInventory(playerInventory, player, () => {\n                database.close();\n            });\n        });\n    }\n\n    savePlayerData(collection, player) {\n        Creator.getPlayerData(player, data => {\n            collection.updateOne(\n                {\n                    username: player.username\n                },\n                { $set: data },\n                {\n                    upsert: true\n                },\n                (error, result) => {\n                    if (error) throw error;\n\n                    if (result) {\n                        log.debug(\n                            'Player ' +\n                                player.username +\n                                ' data has been saved successfully.'\n                        );\n                    }\n                }\n            );\n        });\n    }\n\n    savePlayerEquipment(collection, player) {\n        collection.updateOne(\n            {\n                username: player.username\n            },\n            { $set: Creator.getPlayerEquipment(player) },\n            {\n                upsert: true\n            },\n            (error, result) => {\n                if (error) throw error;\n\n                if (result) {\n                    log.debug(\n                        'Player ' +\n                            player.username +\n                            ' equipment data has been saved successfully.'\n                    );\n                }\n            }\n        );\n    }\n\n    savePlayerQuests(collection, player) {\n        collection.updateOne(\n            {\n                username: player.username\n            },\n            { $set: player.quests.getQuests() },\n            {\n                upsert: true\n            },\n            (error, result) => {\n                if (error) throw error;\n\n                if (result) {\n                    log.debug(\n                        'Player ' +\n                            player.username +\n                            ' quest data has been saved successfully.'\n                    );\n                }\n            }\n        );\n    }\n\n    savePlayerAchievements(collection, player) {\n        collection.updateOne(\n            {\n                username: player.username\n            },\n            { $set: player.quests.getAchievements() },\n            {\n                upsert: true\n            },\n            (error, result) => {\n                if (error) throw error;\n\n                if (result) {\n                    log.debug(\n                        'Player ' +\n                            player.username +\n                            ' achievement data has been saved successfully.'\n                    );\n                }\n            }\n        );\n    }\n\n    savePlayerBank(collection, player) {\n        collection.updateOne(\n            {\n                username: player.username\n            },\n            { $set: player.bank.getArray() },\n            {\n                upsert: true\n            },\n            (error, result) => {\n                if (error) throw error;\n\n                if (result) {\n                    log.debug(\n                        'Player ' +\n                            player.username +\n                            ' bank data has been saved successfully.'\n                    );\n                }\n            }\n        );\n    }\n\n    savePlayerRegions(collection, player) {\n        collection.updateOne(\n            {\n                username: player.username\n            },\n            {\n                $set: {\n                    regions: player.regionsLoaded.toString(),\n                    gameVersion: config.gver\n                }\n            },\n            {\n                upsert: true\n            },\n            (error, result) => {\n                if (error) throw error;\n\n                if (result) {\n                    log.debug(\n                        'Player ' +\n                            player.username +\n                            ' regions data has been saved successfully.'\n                    );\n                }\n            }\n        );\n    }\n\n    savePlayerAbilities(collection, player) {\n        collection.updateOne(\n            {\n                username: player.username\n            },\n            { $set: player.abilities.getArray() },\n            {\n                upsert: true\n            },\n            (error, result) => {\n                if (error) throw error;\n\n                if (result) {\n                    log.debug(\n                        'Player ' +\n                            player.username +\n                            ' abilities data has been saved successfully.'\n                    );\n                }\n            }\n        );\n    }\n\n    savePlayerInventory(collection, player, callback) {\n        collection.updateOne(\n            {\n                username: player.username\n            },\n            { $set: player.inventory.getArray() },\n            {\n                upsert: true\n            },\n            (error, result) => {\n                if (error) throw error;\n\n                if (result) {\n                    log.debug(\n                        'Player ' +\n                            player.username +\n                            ' inventory data has been saved successfully.'\n                    );\n                }\n            }\n        );\n    }\n\n    static getPasswordHash(password, callback) {\n        bcrypt.hash(password, 10, (error, hash) => {\n            if (error) throw error;\n\n            callback(hash);\n        });\n    }\n\n    static getPlayerData(player, callback) {\n        Creator.getPasswordHash(player.password, hash => {\n            callback({\n                username: player.username,\n                password: hash,\n                email: player.email,\n                x: player.x,\n                y: player.y,\n                experience: player.experience,\n                kind: player.kind,\n                rights: player.rights,\n                poisoned: player.poisoned,\n                hitPoints: player.getHitPoints(),\n                mana: player.getMana(),\n                pvpKills: player.pvpKills,\n                pvpDeaths: player.pvpDeaths,\n                orientation: player.orientation,\n                rank: player.rank,\n                ban: player.ban,\n                mute: player.mute,\n                membership: player.membership,\n                lastLogin: player.lastLogin,\n                lastWarp: player.lastWarp,\n                guildName: player.guildName,\n                invisibleIds: player.formatInvisibles(),\n                userAgent: player.userAgent\n            });\n        });\n    }\n\n    static getPlayerEquipment(player) {\n        return {\n            username: player.username,\n            armour: [\n                player.armour ? player.armour.getId() : 114,\n                player.armour ? player.armour.getCount() : 0,\n                player.armour ? player.armour.getAbility() : 0,\n                player.armour ? player.armour.getAbilityLevel() : 0\n            ],\n            weapon: [\n                player.weapon ? player.weapon.getId() : -1,\n                player.weapon ? player.weapon.getCount() : 0,\n                player.weapon ? player.weapon.getAbility() : 0,\n                player.weapon ? player.weapon.getAbilityLevel() : 0\n            ],\n            pendant: [\n                player.pendant ? player.pendant.getId() : -1,\n                player.pendant ? player.pendant.getCount() : 0,\n                player.pendant ? player.pendant.getAbility() : 0,\n                player.pendant ? player.pendant.getAbilityLevel() : 0\n            ],\n            ring: [\n                player.ring ? player.ring.getId() : -1,\n                player.ring ? player.ring.getCount() : 0,\n                player.ring ? player.ring.getAbility() : 0,\n                player.ring ? player.ring.getAbilityLevel() : 0\n            ],\n            boots: [\n                player.boots ? player.boots.getId() : -1,\n                player.boots ? player.boots.getCount() : 0,\n                player.boots ? player.boots.getAbility() : 0,\n                player.boots ? player.boots.getAbilityLevel() : 0\n            ]\n        };\n    }\n\n    /**\n     * Crossed over from the MySQL database. This should be refined\n     * fairly soon as it is just unnecessary code for speed development.\n     * The above object arrays should just be concatenated.\n     */\n\n    static getFullData(player) {\n        let position = player.getSpawn();\n\n        return {\n            username: player.username,\n            password: player.password,\n            email: player.email ? player.email : 'null',\n            x: position.x,\n            y: position.y,\n            kind: player.kind ? player.kind : 0,\n            rights: player.rights ? player.rights : 0,\n            hitPoints: player.hitPoints ? player.hitPoints : 100,\n            mana: player.mana ? player.mana : 20,\n            poisoned: player.poisoned ? player.poisoned : 0,\n            experience: player.experience ? player.experience : 0,\n            ban: player.ban ? player.ban : 0,\n            mute: player.mute ? player.mute : 0,\n            rank: player.rank ? player.rank : 0,\n            membership: player.membership ? player.membership : 0,\n            lastLogin: player.lastLogin ? player.lastLogin : 0,\n            pvpKills: player.pvpKills ? player.pvpKills : 0,\n            pvpDeaths: player.pvpDeaths ? player.pvpDeaths : 0,\n            orientation: player.orientation ? player.orientation : 0,\n            lastWarp: player.warp.lastWarp ? player.warp.lastWarp : 0,\n            armour: [\n                player.armour ? player.armour.getId() : 114,\n                player.armour ? player.armour.getCount() : 0,\n                player.armour ? player.armour.getAbility() : 0,\n                player.armour ? player.armour.getAbilityLevel() : 0\n            ],\n            weapon: [\n                player.weapon ? player.weapon.getId() : -1,\n                player.weapon ? player.weapon.getCount() : 0,\n                player.weapon ? player.weapon.getAbility() : 0,\n                player.weapon ? player.weapon.getAbilityLevel() : 0\n            ],\n            pendant: [\n                player.pendant ? player.pendant.getId() : -1,\n                player.pendant ? player.pendant.getCount() : 0,\n                player.pendant ? player.pendant.getAbility() : 0,\n                player.pendant ? player.pendant.getAbilityLevel() : 0\n            ],\n            ring: [\n                player.ring ? player.ring.getId() : -1,\n                player.ring ? player.ring.getCount() : 0,\n                player.ring ? player.ring.getAbility() : 0,\n                player.ring ? player.ring.getAbilityLevel() : 0\n            ],\n            boots: [\n                player.boots ? player.boots.getId() : -1,\n                player.boots ? player.boots.getCount() : 0,\n                player.boots ? player.boots.getAbility() : 0,\n                player.boots ? player.boots.getAbilityLevel() : 0\n            ]\n        };\n    }\n}\n\nmodule.exports = Creator;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/database/mongodb/creator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "variable",
    "name": "bcrypt",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~bcrypt",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/database/mongodb/creator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "class",
    "name": "Creator",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/database/mongodb/creator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 319,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "database",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#database",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "save",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#save",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "savePlayerData",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerData",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "savePlayerEquipment",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerEquipment",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "savePlayerQuests",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerQuests",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "savePlayerAchievements",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerAchievements",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "savePlayerBank",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerBank",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "savePlayerRegions",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerRegions",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "savePlayerAbilities",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerAbilities",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "savePlayerInventory",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerInventory",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "getPasswordHash",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator.getPasswordHash",
    "access": "public",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "params": [
      {
        "name": "password",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "getPlayerData",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator.getPlayerData",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "getPlayerEquipment",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator.getPlayerEquipment",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"username\": *, \"armour\": *, \"weapon\": *, \"pendant\": *, \"ring\": *, \"boots\": *}"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "getFullData",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator.getFullData",
    "access": "public",
    "description": "Crossed over from the MySQL database. This should be refined\nfairly soon as it is just unnecessary code for speed development.\nThe above object arrays should just be concatenated.",
    "lineNumber": 308,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"username\": *, \"password\": *, \"email\": *, \"x\": *, \"y\": *, \"kind\": *, \"rights\": *, \"hitPoints\": *, \"mana\": *, \"poisoned\": *, \"experience\": *, \"ban\": *, \"mute\": *, \"rank\": *, \"membership\": *, \"lastLogin\": *, \"pvpKills\": *, \"pvpDeaths\": *, \"orientation\": *, \"lastWarp\": *, \"armour\": *, \"weapon\": *, \"pendant\": *, \"ring\": *, \"boots\": *}"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "file",
    "name": "Kaetram-Open/server/js/database/mongodb/loader.js",
    "content": "/* global module */\n\nclass Loader {\n    constructor(database) {\n        this.database = database;\n    }\n\n    getInventory(player, callback) {\n        let self = this;\n\n        self.database.getDatabase(database => {\n            let inventory = database.collection('player_inventory'),\n                cursor = inventory.find({ username: player.username });\n\n            cursor.toArray().then(inventoryArray => {\n                let info = inventoryArray[0];\n\n                if (info) {\n                    if (info.username !== player.username) {\n                        log.notice(\n                            '[Loader] Mismatch in usernames whilst retrieving inventory data for: ' +\n                                player.username\n                        );\n                    }\n\n                    callback(\n                        info.ids.split(' '),\n                        info.counts.split(' '),\n                        info.abilities.split(' '),\n                        info.abilityLevels.split(' ')\n                    );\n                } else callback(null, null, null, null);\n            });\n        });\n    }\n\n    getBank(player, callback) {\n        let self = this;\n\n        self.database.getDatabase(database => {\n            let bank = database.collection('player_bank'),\n                cursor = bank.find({ username: player.username });\n\n            cursor.toArray().then(bankArray => {\n                let info = bankArray[0];\n\n                if (info) {\n                    if (info.username !== player.username) {\n                        log.notice(\n                            '[Loader] Mismatch in usernames whilst retrieving bank data for: ' +\n                                player.username\n                        );\n                    }\n\n                    callback(\n                        info.ids.split(' '),\n                        info.counts.split(' '),\n                        info.abilities.split(' '),\n                        info.abilityLevels.split(' ')\n                    );\n                }\n            });\n        });\n    }\n\n    getQuests(player, callback) {\n        let self = this;\n\n        self.database.getDatabase(database => {\n            let quests = database.collection('player_quests'),\n                cursor = quests.find({ username: player.username });\n\n            cursor.toArray().then(questArray => {\n                let info = questArray[0];\n\n                if (info) {\n                    if (info.username !== player.username) {\n                        log.notice(\n                            '[Loader] Mismatch in usernames whilst retrieving quest data for: ' +\n                                player.username\n                        );\n                    }\n\n                    callback(info.ids.split(' '), info.stages.split(' '));\n                } else callback(null, null);\n            });\n        });\n    }\n\n    getAchievements(player, callback) {\n        let self = this;\n\n        self.database.getDatabase(database => {\n            let achievements = database.collection('player_achievements'),\n                cursor = achievements.find({ username: player.username });\n\n            cursor.toArray().then(achievementsArray => {\n                let info = achievementsArray[0];\n\n                if (info) {\n                    if (info.username !== player.username) {\n                        log.notice(\n                            '[Loader] Mismatch in usernames whilst retrieving achievement data for: ' +\n                                player.username\n                        );\n                    }\n\n                    callback(info.ids.split(' '), info.progress.split(' '));\n                }\n            });\n        });\n    }\n}\n\nmodule.exports = Loader;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/database/mongodb/loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 335,
    "kind": "class",
    "name": "Loader",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/database/mongodb/loader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 336,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "database",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#database",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "getInventory",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#getInventory",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "getBank",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#getBank",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "getQuests",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#getQuests",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "getAchievements",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#getAchievements",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "content": "/* global module */\n\nlet MongoClient = require('mongodb').MongoClient,\n    Loader = require('./loader'),\n    Creator = require('./creator'),\n    bcrypt = require('bcrypt'),\n    _ = require('underscore'),\n    config = require('../../../config');\n\nclass MongoDB {\n    constructor(host, port, user, password, database) {\n        let self = this;\n\n        self.host = host;\n        self.port = port;\n        self.user = user;\n        self.password = password;\n        self.database = database;\n\n        self.loader = new Loader(self);\n        self.creator = new Creator(self);\n\n        self.connection = null;\n    }\n\n    getDatabase(callback, type) {\n        let self = this,\n            URL = `mongodb://${self.host}:${self.port}/${self.database}`;\n\n        if (config.mongoAuth)\n            URL = `mongodb://${self.user}:${self.password}@${self.host}:${self.port}/${self.database}`;\n\n        let client = new MongoClient(URL, {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n            wtimeout: 5\n        });\n\n        if (self.connection) {\n            callback(self.connection);\n            return;\n        }\n\n        client.connect((error, newClient) => {\n            if (error) throw error;\n\n            self.connection = newClient.db(self.database);\n\n            callback(self.connection);\n        });\n    }\n\n    login(player) {\n        let self = this;\n\n        self.getDatabase(database => {\n            let dataCursor = database\n                    .collection('player_data')\n                    .find({ username: player.username }),\n                equipmentCursor = database\n                    .collection('player_equipment')\n                    .find({ username: player.username }),\n                regionsCursor = database\n                    .collection('player_regions')\n                    .find({ username: player.username });\n\n            dataCursor.toArray().then(playerData => {\n                equipmentCursor.toArray().then(equipmentData => {\n                    regionsCursor.toArray().then(regionData => {\n                        if (playerData.length === 0) self.register(player);\n                        else {\n                            let playerInfo = playerData[0],\n                                equipmentInfo = equipmentData[0],\n                                regions = regionData[0];\n\n                            playerInfo.armour = equipmentInfo.armour;\n                            playerInfo.weapon = equipmentInfo.weapon;\n                            playerInfo.pendant = equipmentInfo.pendant;\n                            playerInfo.ring = equipmentInfo.ring;\n                            playerInfo.boots = equipmentInfo.boots;\n\n                            if (\n                                regions &&\n                                regions.gameVersion === config.gver\n                            ) {\n                                player.regionsLoaded = regions.regions.split(\n                                    ','\n                                );\n                            }\n\n                            player.load(playerInfo);\n                            player.intro();\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    verify(player, callback) {\n        let self = this;\n\n        self.getDatabase(database => {\n            let dataCursor = database\n                .collection('player_data')\n                .find({ username: player.username });\n\n            dataCursor.toArray().then(data => {\n                if (data.length === 0) callback({ status: 'error' });\n                else {\n                    let info = data[0];\n\n                    bcrypt.compare(\n                        player.password,\n                        info.password,\n                        (error, result) => {\n                            if (error) throw error;\n\n                            if (result) callback({ status: 'success' });\n                            else callback({ status: 'error' });\n                        }\n                    );\n                }\n            });\n        });\n    }\n\n    register(player) {\n        let self = this;\n\n        self.getDatabase(database => {\n            let playerData = database.collection('player_data'),\n                cursor = playerData.find({ username: player.username });\n\n            cursor.toArray().then(info => {\n                if (info.length === 0) {\n                    log.info(\n                        'No player data found for ' +\n                            player.username +\n                            '. Creating user.'\n                    );\n\n                    player.new = true;\n\n                    player.load(Creator.getFullData(player));\n                    player.intro();\n                }\n            });\n        });\n    }\n\n    exists(player, callback) {\n        let self = this;\n\n        self.getDatabase(database => {\n            let playerData = database.collection('player_data'),\n                emailCursor = playerData.find({ email: player.email }),\n                usernameCursor = playerData.find({ username: player.username });\n\n            log.info(\n                'Looking for - ' + player.email + ' or ' + player.username\n            );\n\n            emailCursor.toArray().then(emailArray => {\n                if (emailArray.length === 0) {\n                    usernameCursor.toArray().then(usernameArray => {\n                        if (usernameArray.length === 0)\n                            callback({ exists: false });\n                        else callback({ exists: true, type: 'user' });\n                    });\n                } else callback({ exists: true, type: 'email' });\n            });\n        });\n    }\n\n    delete(player) {\n        let self = this;\n\n        self.getDatabase(database => {\n            let collections = [\n                'player_data',\n                'player_equipment',\n                'player_inventory',\n                'player_abilities',\n                'player_bank',\n                'player_quests',\n                'player_achievements'\n            ];\n\n            _.each(collections, col => {\n                let collection = database.collection(col);\n\n                collection.deleteOne(\n                    {\n                        username: player.username\n                    },\n                    (error, result) => {\n                        if (error) throw error;\n\n                        if (result) {\n                            log.info(\n                                'Player ' +\n                                    player.username +\n                                    ' has been deleted.'\n                            );\n                        }\n                    }\n                );\n            });\n        });\n    }\n\n    registeredCount(callback) {\n        this.getDatabase(database => {\n            let collection = database.collection('player_data');\n\n            collection.countDocuments().then(count => {\n                callback(count);\n            });\n        });\n    }\n}\n\nmodule.exports = MongoDB;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "variable",
    "name": "MongoClient",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoClient",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "class",
    "name": "MongoDB",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 345,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "getDatabase",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#getDatabase",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "login",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#login",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "verify",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#verify",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "register",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#register",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "exists",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#exists",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "delete",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#delete",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "registeredCount",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#registeredCount",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 353,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/character.js",
    "content": "/* global module */\n\nlet Entity = require('../entity'),\n    Modules = require('../../../util/modules'),\n    Mobs = require('../../../util/mobs'),\n    Combat = require('./combat/combat');\n\nclass Character extends Entity {\n    constructor(id, type, instance, x, y) {\n        super(id, type, instance, x, y);\n\n        let self = this;\n\n        self.level = -1;\n\n        self.movementSpeed = 150;\n        self.attackRange = 1;\n        self.attackRate = 1000;\n        self.healingRate = 7000;\n\n        self.spawnDistance = 7;\n\n        self.previousX = -1;\n        self.previousY = -1;\n\n        self.hitPoints = -1;\n        self.maxHitPoints = -1;\n\n        self.dead = false;\n        self.aggressive = false;\n        self.aggroRange = 2;\n\n        self.target = null;\n        self.potentialTarget = null;\n\n        self.stunTimeout = null;\n\n        self.projectile = Modules.Projectiles.Arrow;\n        self.projectileName = 'projectile-pinearrow';\n\n        self.healingInterval = null;\n\n        self.loadCombat();\n        self.startHealing();\n    }\n\n    loadCombat() {\n        let self = this;\n\n        /**\n         * Ternary could be used here, but readability\n         * would become nonexistent.\n         */\n\n        if (Mobs.hasCombatPlugin(self.id))\n            self.combat = new (Mobs.isNewCombatPlugin(self.id))(self);\n        else self.combat = new Combat(self);\n    }\n\n    startHealing() {\n        let self = this;\n\n        self.healingInterval = setInterval(() => {\n            if (!self.hasTarget() && !self.combat.isAttacked() && !self.dead)\n                self.heal(1);\n        }, 5000);\n    }\n\n    stopHealing() {\n        let self = this;\n\n        clearInterval(self.healingInterval);\n        self.healingInterval = null;\n    }\n\n    setStun(stun) {\n        let self = this;\n\n        self.stunned = stun;\n\n        if (self.stunCallback) self.stunCallback(stun);\n    }\n\n    hit(attacker) {\n        let self = this;\n\n        if (self.hitCallback) self.hitCallback(attacker);\n    }\n\n    heal(amount) {\n        let self = this;\n\n        self.setHitPoints(self.hitPoints + amount);\n\n        if (self.hitPoints >= self.maxHitPoints)\n            self.hitPoints = self.maxHitPoints;\n    }\n\n    addExperience() {\n        // Unimplemented.\n    }\n\n    isRanged() {\n        return this.attackRange > 1;\n    }\n\n    applyDamage(damage) {\n        this.hitPoints -= damage;\n    }\n\n    isDead() {\n        return this.hitPoints < 1 || this.dead;\n    }\n\n    getCombat() {\n        return this.combat;\n    }\n\n    getHitPoints() {\n        return this.hitPoints;\n    }\n\n    getMaxHitPoints() {\n        return this.maxHitPoints;\n    }\n\n    setPosition(x, y) {\n        let self = this;\n\n        self.previousX = self.x;\n        self.previousY = self.y;\n\n        super.setPosition(x, y);\n\n        if (self.movementCallback) self.movementCallback(x, y);\n    }\n\n    setTarget(target) {\n        let self = this;\n\n        self.target = target;\n\n        if (self.targetCallback) self.targetCallback(target);\n    }\n\n    setPotentialTarget(potentialTarget) {\n        this.potentialTarget = potentialTarget;\n    }\n\n    setHitPoints(hitPoints) {\n        let self = this;\n\n        self.hitPoints = hitPoints;\n\n        if (self.hitPointsCallback) self.hitPointsCallback();\n    }\n\n    getProjectile() {\n        return this.projectile;\n    }\n\n    getProjectileName() {\n        return this.projectileName;\n    }\n\n    getDrop() {\n        return null;\n    }\n\n    hasMaxHitPoitns() {\n        return this.hitPoints >= this.maxHitPoints;\n    }\n\n    removeTarget() {\n        let self = this;\n\n        if (self.removeTargetCallback) self.removeTargetCallback();\n\n        self.clearTarget();\n    }\n\n    hasTarget() {\n        return !(this.target === null);\n    }\n\n    hasPotentialTarget(potentialTarget) {\n        return this.potentialTarget === potentialTarget;\n    }\n\n    clearTarget() {\n        this.target = null;\n    }\n\n    onTarget(callback) {\n        this.targetCallback = callback;\n    }\n\n    onRemoveTarget(callback) {\n        this.removeTargetCallback = callback;\n    }\n\n    onMovement(callback) {\n        this.movementCallback = callback;\n    }\n\n    onHit(callback) {\n        this.hitCallback = callback;\n    }\n\n    onHealthChange(callback) {\n        this.healthChangeCallback = callback;\n    }\n\n    onDamage(callback) {\n        this.damageCallback = callback;\n    }\n\n    onStunned(callback) {\n        this.stunCallback = callback;\n    }\n\n    onSubAoE(callback) {\n        this.subAoECallback = callback;\n    }\n}\n\nmodule.exports = Character;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/character.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 354,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/character.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 355,
    "kind": "class",
    "name": "Character",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/character.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 356,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "loadCombat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#loadCombat",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "startHealing",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#startHealing",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "stopHealing",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#stopHealing",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "setStun",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setStun",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "stun",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hit",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "heal",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#heal",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "addExperience",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#addExperience",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "applyDamage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#applyDamage",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "damage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "member",
    "name": "hitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "isDead",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#isDead",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "getCombat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getCombat",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "getHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "getMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "setPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setPosition",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "setTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setTarget",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "setPotentialTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setPotentialTarget",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "potentialTarget",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "potentialTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#potentialTarget",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "setHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "hitPoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "getProjectile",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "getProjectileName",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getProjectileName",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "getDrop",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getDrop",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "hasMaxHitPoitns",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hasMaxHitPoitns",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "removeTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#removeTarget",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "hasTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hasTarget",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "hasPotentialTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hasPotentialTarget",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "potentialTarget",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "clearTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#clearTarget",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "target",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#target",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "onTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onTarget",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "targetCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#targetCallback",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "onRemoveTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onRemoveTarget",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "removeTargetCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#removeTargetCallback",
    "access": "public",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "onMovement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onMovement",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "movementCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#movementCallback",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "onHit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onHit",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "hitCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hitCallback",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "onHealthChange",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onHealthChange",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "healthChangeCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#healthChangeCallback",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "onDamage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onDamage",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "damageCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#damageCallback",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "onStunned",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onStunned",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "stunCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#stunCallback",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "onSubAoE",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onSubAoE",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "subAoECallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#subAoECallback",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Hit = require('./hit'),\n    CombatQueue = require('./combatqueue'),\n    Utils = require('../../../../util/utils'),\n    Formulas = require('../../../../util/formulas'),\n    Modules = require('../../../../util/modules'),\n    Messages = require('../../../../network/messages'),\n    Packets = require('../../../../network/packets');\n\nclass Combat {\n    constructor(character) {\n        let self = this;\n\n        self.character = character;\n        self.world = null;\n\n        self.attackers = {};\n\n        self.retaliate = false;\n\n        self.queue = new CombatQueue();\n\n        self.attacking = false;\n\n        self.attackLoop = null;\n        self.followLoop = null;\n        self.checkLoop = null;\n\n        self.first = false;\n        self.started = false;\n        self.lastAction = -1;\n        self.lastHit = -1;\n\n        self.lastActionThreshold = 7000;\n\n        self.cleanTimeout = null;\n\n        self.character.onSubAoE((radius, hasTerror) => {\n            self.dealAoE(radius, hasTerror);\n        });\n\n        self.character.onDamage((target, hitInfo) => {\n            if (\n                self.isPlayer() &&\n                self.character.hasBreakableWeapon() &&\n                Formulas.getWeaponBreak(self.character, target)\n            )\n                self.character.breakWeapon();\n\n            if (hitInfo.type === Modules.Hits.Stun) {\n                target.setStun(true);\n\n                if (target.stunTimeout) clearTimeout(target.stunTimeout);\n\n                target.stunTimeout = setTimeout(() => {\n                    target.setStun(false);\n                }, 3000);\n            }\n        });\n    }\n\n    begin(attacker) {\n        let self = this;\n\n        self.start();\n\n        self.character.setTarget(attacker);\n        self.addAttacker(attacker);\n\n        attacker.combat.addAttacker(self.character); // For mobs attacking players..\n\n        self.attack(attacker);\n    }\n\n    start() {\n        let self = this;\n\n        if (self.started) return;\n\n        self.lastAction = new Date().getTime();\n\n        self.attackLoop = setInterval(() => {\n            self.parseAttack();\n        }, self.character.attackRate);\n\n        self.followLoop = setInterval(() => {\n            self.parseFollow();\n        }, 400);\n\n        self.checkLoop = setInterval(() => {\n            self.parseCheck();\n        }, 1000);\n\n        self.started = true;\n    }\n\n    stop() {\n        let self = this;\n\n        if (!self.started) return;\n\n        clearInterval(self.attackLoop);\n        clearInterval(self.followLoop);\n        clearInterval(self.checkLoop);\n\n        self.attackLoop = null;\n        self.followLoop = null;\n        self.checkLoop = null;\n\n        self.started = false;\n    }\n\n    parseAttack() {\n        let self = this;\n\n        if (!self.world || !self.queue || self.character.stunned) return;\n\n        if (self.character.hasTarget() && self.inProximity()) {\n            if (self.queue.hasQueue()) {\n                self.hit(\n                    self.character,\n                    self.character.target,\n                    self.queue.getHit()\n                );\n            }\n\n            if (self.character.target && !self.character.target.isDead())\n                self.attack(self.character.target);\n\n            self.sync();\n\n            self.lastAction = self.getTime();\n        } else self.queue.clear();\n    }\n\n    parseFollow() {\n        let self = this;\n\n        if (self.character.frozen || self.character.stunned) return;\n\n        if (self.isMob()) {\n            if (!self.character.isRanged()) self.sendFollow();\n\n            if (self.isAttacked() || self.character.hasTarget())\n                self.lastAction = self.getTime();\n\n            if (self.onSameTile()) {\n                let newPosition = self.getNewPosition();\n\n                self.move(self.character, newPosition.x, newPosition.y);\n            }\n\n            if (self.character.hasTarget() && !self.inProximity()) {\n                let attacker = self.getClosestAttacker();\n\n                if (attacker) self.follow(self.character, attacker);\n            }\n        }\n    }\n\n    parseCheck() {\n        let self = this;\n\n        if (self.getTime() - self.lastAction > self.lastActionThreshold) {\n            self.stop();\n\n            self.forget();\n        }\n    }\n\n    attack(target) {\n        let self = this,\n            hit;\n\n        if (self.isPlayer()) hit = self.character.getHit(target);\n        else {\n            hit = new Hit(\n                Modules.Hits.Damage,\n                Formulas.getDamage(self.character, target)\n            );\n        }\n\n        if (!hit) return;\n\n        self.queue.add(hit);\n    }\n\n    sync() {\n        let self = this;\n\n        if (self.character.type !== 'mob') return;\n\n        self.world.push(Packets.PushOpcode.Regions, {\n            regionId: self.character.region,\n            message: new Messages.Combat(Packets.CombatOpcode.Sync, {\n                attackerId: self.character.instance, // irrelevant\n                targetId: self.character.instance, // can be the same since we're acting on an entity.\n                x: self.character.x,\n                y: self.character.y\n            })\n        });\n    }\n\n    dealAoE(radius, hasTerror) {\n        let self = this;\n\n        /**\n         * TODO - Find a way to implement special effects without hardcoding them.\n         */\n\n        if (!self.world) return;\n\n        let entities = self.world\n            .getGrids()\n            .getSurroundingEntities(self.character, radius);\n\n        _.each(entities, entity => {\n            let hitData = new Hit(\n                Modules.Hits.Damage,\n                Formulas.getAoEDamage(self.character, entity)\n            ).getData();\n\n            hitData.isAoE = true;\n            hitData.hasTerror = hasTerror;\n\n            self.hit(self.character, entity, hitData);\n        });\n    }\n\n    forceAttack() {\n        let self = this;\n\n        if (!self.character.target || !self.inProximity()) return;\n\n        self.stop();\n        self.start();\n\n        self.attackCount(2, self.character.target);\n        self.hit(self.character, self.character.target, self.queue.getHit());\n    }\n\n    attackCount(count, target) {\n        let self = this;\n\n        for (let i = 0; i < count; i++) self.attack(target);\n    }\n\n    addAttacker(character) {\n        let self = this;\n\n        if (self.hasAttacker(character)) return;\n\n        self.attackers[character.instance] = character;\n    }\n\n    removeAttacker(character) {\n        let self = this;\n\n        if (self.hasAttacker(character))\n            delete self.attackers[character.instance];\n\n        if (!self.isAttacked()) self.sendToSpawn();\n    }\n\n    sendToSpawn() {\n        let self = this;\n\n        if (!self.isMob()) return;\n\n        self.character.return();\n\n        self.world.push(Packets.PushOpcode.Regions, {\n            regionId: self.character.region,\n            message: new Messages.Movement(Packets.MovementOpcode.Move, {\n                id: self.character.instance,\n                x: self.character.x,\n                y: self.character.y,\n                forced: false,\n                teleport: false\n            })\n        });\n    }\n\n    hasAttacker(character) {\n        let self = this;\n\n        if (!self.isAttacked()) return;\n\n        return character.instance in self.attackers;\n    }\n\n    onSameTile() {\n        let self = this;\n\n        if (!self.character.target || self.character.type !== 'mob') return;\n\n        return (\n            self.character.x === self.character.target.x &&\n            self.character.y === self.character.target.y\n        );\n    }\n\n    isAttacked() {\n        return this.attackers && Object.keys(this.attackers).length > 0;\n    }\n\n    getNewPosition() {\n        let self = this,\n            position = {\n                x: self.character.x,\n                y: self.character.y\n            };\n\n        let random = Utils.randomInt(0, 3);\n\n        if (random === 0) position.x++;\n        else if (random === 1) position.y--;\n        else if (random === 2) position.x--;\n        else if (random === 3) position.y++;\n\n        return position;\n    }\n\n    isRetaliating() {\n        return (\n            this.isPlayer() &&\n            !this.character.hasTarget() &&\n            this.retaliate &&\n            !this.character.moving &&\n            new Date().getTime() - this.character.lastMovement > 1500\n        );\n    }\n\n    inProximity() {\n        let self = this;\n\n        if (!self.character.target) return;\n\n        let targetDistance = self.character.getDistance(self.character.target),\n            range = self.character.attackRange;\n\n        if (self.character.isRanged()) return targetDistance <= range;\n\n        return self.character.isNonDiagonal(self.character.target);\n    }\n\n    getClosestAttacker() {\n        let self = this,\n            closest = null,\n            lowestDistance = 100;\n\n        self.forEachAttacker(attacker => {\n            let distance = self.character.getDistance(attacker);\n\n            if (distance < lowestDistance) closest = attacker;\n        });\n\n        return closest;\n    }\n\n    setWorld(world) {\n        let self = this;\n\n        if (!self.world) self.world = world;\n    }\n\n    forget() {\n        let self = this;\n\n        self.attackers = {};\n        self.character.removeTarget();\n\n        if (self.forgetCallback) self.forgetCallback();\n    }\n\n    move(character, x, y) {\n        let self = this;\n\n        /**\n         * The server and mob types can parse the mob movement\n         */\n\n        if (character.type !== 'mob') return;\n\n        character.setPosition(x, y);\n    }\n\n    hit(character, target, hitInfo) {\n        let self = this,\n            time = self.getTime();\n\n        if (time - self.lastHit < self.character.attackRate && !hitInfo.isAoE)\n            return;\n\n        if (character.isRanged() || hitInfo.isRanged) {\n            let projectile = self.world.createProjectile(\n                [character, target],\n                hitInfo\n            );\n\n            self.world.push(Packets.PushOpcode.Regions, {\n                regionId: character.region,\n                message: new Messages.Projectile(\n                    Packets.ProjectileOpcode.Create,\n                    projectile.getData()\n                )\n            });\n        } else {\n            self.world.push(Packets.PushOpcode.Regions, {\n                regionId: character.region,\n                message: new Messages.Combat(Packets.CombatOpcode.Hit, {\n                    attackerId: character.instance,\n                    targetId: target.instance,\n                    hitInfo: hitInfo\n                })\n            });\n\n            self.world.handleDamage(character, target, hitInfo.damage);\n        }\n\n        if (character.damageCallback) character.damageCallback(target, hitInfo);\n\n        self.lastHit = self.getTime();\n    }\n\n    follow(character, target) {\n        this.world.push(Packets.PushOpcode.Regions, {\n            regionId: character.region,\n            message: new Messages.Movement(Packets.MovementOpcode.Follow, {\n                attackerId: character.instance,\n                targetId: target.instance,\n                isRanged: character.isRanged,\n                attackRange: character.attackRange\n            })\n        });\n    }\n\n    end() {\n        this.world.push(Packets.PushOpcode.Regions, {\n            regionId: this.character.region,\n            message: new Messages.Combat(Packets.CombatOpcode.Finish, {\n                attackerId: this.character.instance,\n                targetId: null\n            })\n        });\n    }\n\n    sendFollow() {\n        let self = this;\n\n        if (!self.character.hasTarget() || self.character.target.isDead())\n            return;\n\n        let ignores = [self.character.instance, self.character.target.instance];\n\n        self.world.push(Packets.PushOpcode.Selectively, {\n            message: new Messages.Movement(Packets.MovementOpcode.Follow, {\n                attackerId: self.character.instance,\n                targetId: self.character.target.instance\n            }),\n            ignores: ignores\n        });\n    }\n\n    forEachAttacker(callback) {\n        _.each(this.attackers, attacker => {\n            callback(attacker);\n        });\n    }\n\n    onForget(callback) {\n        this.forgetCallback = callback;\n    }\n\n    targetOutOfBounds() {\n        let self = this;\n\n        if (!self.character.hasTarget() || !self.isMob()) return;\n\n        let spawnPoint = self.character.spawnLocation,\n            target = self.character.target;\n\n        return (\n            Utils.getDistance(\n                spawnPoint[0],\n                spawnPoint[1],\n                target.x,\n                target.y\n            ) > self.character.spawnDistance\n        );\n    }\n\n    getTime() {\n        return new Date().getTime();\n    }\n\n    colliding(x, y) {\n        return this.world.map.isColliding(x, y);\n    }\n\n    isPlayer() {\n        return this.character.type === 'player';\n    }\n\n    isMob() {\n        return this.character.type === 'mob';\n    }\n\n    isTargetMob() {\n        return this.character.target.type === 'mob';\n    }\n\n    canAttackAoE(target) {\n        return (\n            this.isMob() ||\n            target.type === 'mob' ||\n            (this.isPlayer() &&\n                target.type === 'player' &&\n                target.pvp &&\n                this.character.pvp)\n        );\n    }\n}\n\nmodule.exports = Combat;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 402,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 403,
    "kind": "class",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 404,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "begin",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#begin",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "start",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#start",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "stop",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#stop",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "parseAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#parseAttack",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "parseFollow",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#parseFollow",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "parseCheck",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#parseCheck",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "attack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#attack",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "sync",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#sync",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "dealAoE",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#dealAoE",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTerror",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "forceAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#forceAttack",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "attackCount",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#attackCount",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "addAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#addAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "removeAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#removeAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "sendToSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#sendToSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "hasAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#hasAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 286,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "onSameTile",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#onSameTile",
    "access": "public",
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "isAttacked",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isAttacked",
    "access": "public",
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "getNewPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#getNewPosition",
    "access": "public",
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "isRetaliating",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isRetaliating",
    "access": "public",
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "inProximity",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#inProximity",
    "access": "public",
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "getClosestAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#getClosestAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "setWorld",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#setWorld",
    "access": "public",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [
      {
        "name": "world",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "forget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#forget",
    "access": "public",
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "move",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#move",
    "access": "public",
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#hit",
    "access": "public",
    "description": null,
    "lineNumber": 390,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "follow",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#follow",
    "access": "public",
    "description": null,
    "lineNumber": 428,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "end",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#end",
    "access": "public",
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "sendFollow",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#sendFollow",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "forEachAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#forEachAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 467,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "onForget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#onForget",
    "access": "public",
    "description": null,
    "lineNumber": 473,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "forgetCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#forgetCallback",
    "access": "public",
    "description": null,
    "lineNumber": 474,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "targetOutOfBounds",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#targetOutOfBounds",
    "access": "public",
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "getTime",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#getTime",
    "access": "public",
    "description": null,
    "lineNumber": 495,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "colliding",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#colliding",
    "access": "public",
    "description": null,
    "lineNumber": 499,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "isPlayer",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 503,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "isMob",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isMob",
    "access": "public",
    "description": null,
    "lineNumber": 507,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "isTargetMob",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isTargetMob",
    "access": "public",
    "description": null,
    "lineNumber": 511,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "canAttackAoE",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#canAttackAoE",
    "access": "public",
    "description": null,
    "lineNumber": 515,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js",
    "content": "/* global module */\n\nclass CombatQueue {\n    constructor() {\n        this.hitQueue = [];\n    }\n\n    add(hit) {\n        this.hitQueue.push(hit);\n    }\n\n    hasQueue() {\n        return this.hitQueue.length > 0;\n    }\n\n    clear() {\n        this.hitQueue = [];\n    }\n\n    getHit() {\n        let self = this;\n\n        if (self.hitQueue.length < 1) return;\n\n        return self.hitQueue.shift().getData();\n    }\n}\n\nmodule.exports = CombatQueue;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 444,
    "kind": "class",
    "name": "CombatQueue",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 446,
    "kind": "member",
    "name": "hitQueue",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#hitQueue",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#add",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "hit",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "hasQueue",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#hasQueue",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "clear",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#clear",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "getHit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#getHit",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/combat/hit.js",
    "content": "/* global module */\n\nclass Hit {\n    constructor(type, damage) {\n        let self = this;\n\n        self.type = type;\n        self.damage = damage;\n\n        self.ranged = false;\n        self.aoe = false;\n        self.terror = false;\n    }\n\n    isRanged() {\n        return this.ranged;\n    }\n\n    isAoE() {\n        return this.aoe;\n    }\n\n    getDamage() {\n        return this.damage;\n    }\n\n    getData() {\n        return {\n            type: this.type,\n            damage: this.damage,\n            isRanged: this.isRanged(),\n            isAoE: this.isAoE(),\n            hasTerror: this.terror\n        };\n    }\n}\n\nmodule.exports = Hit;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/combat/hit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 453,
    "kind": "class",
    "name": "Hit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/combat/hit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 454,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "isAoE",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#isAoE",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "getDamage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#getDamage",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#getData",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"damage\": *, \"isRanged\": *, \"isAoE\": *, \"hasTerror\": *}"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Character = require('../character'),\n    Mobs = require('../../../../util/mobs'),\n    Utils = require('../../../../util/utils'),\n    Items = require('../../../../util/items'),\n    MobHandler = require('./mobhandler');\n\nclass Mob extends Character {\n    constructor(id, instance, x, y, world) {\n        super(id, 'mob', instance, x, y);\n\n        let self = this;\n\n        if (!Mobs.exists(id)) return;\n\n        self.world = world;\n\n        self.data = Mobs.Ids[self.id];\n        self.hitPoints = self.data.hitPoints;\n        self.maxHitPoints = self.data.hitPoints;\n        self.drops = self.data.drops;\n\n        self.respawnDelay = self.data.spawnDelay;\n\n        self.level = self.data.level;\n\n        self.armourLevel = self.data.armour;\n        self.weaponLevel = self.data.weapon;\n        self.attackRange = self.data.attackRange;\n        self.aggroRange = self.data.aggroRange;\n        self.aggressive = self.data.aggressive;\n\n        self.spawnLocation = [x, y];\n\n        self.dead = false;\n        self.boss = false;\n        self.static = false;\n        self.hiddenName = false;\n\n        self.roaming = false;\n        self.maxRoamingDistance = 3;\n\n        self.projectileName = self.getProjectileName();\n    }\n\n    load() {\n        let self = this;\n\n        self.handler = new MobHandler(self, self.world);\n    }\n\n    refresh() {\n        let self = this;\n\n        self.hitPoints = self.data.hitPoints;\n        self.maxHitPoints = self.data.hitPoints;\n\n        if (self.refreshCallback) self.refreshCallback();\n    }\n\n    getDrop() {\n        let self = this;\n\n        if (!self.drops) return null;\n\n        let min = 0,\n            percent = 0,\n            random = Utils.randomInt(0, 1000);\n\n        for (let drop in self.drops) {\n            if (self.drops.hasOwnProperty(drop)) {\n                let chance = self.drops[drop];\n\n                min = percent;\n                percent += chance;\n\n                if (random >= min && random < percent) {\n                    let count = 1;\n\n                    if (drop === 'gold') {\n                        count = Utils.randomInt(\n                            1,\n                            self.level *\n                                Math.floor(\n                                    Math.pow(2, self.level / 7) /\n                                        (self.level / 4)\n                                )\n                        );\n                    }\n\n                    return {\n                        id: Items.stringToId(drop),\n                        count: count\n                    };\n                }\n            }\n        }\n\n        return null;\n    }\n\n    getProjectileName() {\n        return this.data.projectileName\n            ? this.data.projectileName\n            : 'projectile-pinearrow';\n    }\n\n    canAggro(player) {\n        let self = this;\n\n        if (self.hasTarget()) return false;\n\n        if (!self.aggressive) return false;\n\n        if (Math.floor(self.level * 1.5) < player.level) return false;\n\n        if (!player.hasAggressionTimer()) return false;\n\n        return self.isNear(player, self.aggroRange);\n    }\n\n    destroy() {\n        let self = this;\n\n        self.dead = true;\n        self.clearTarget();\n        self.resetPosition();\n        self.respawn();\n\n        if (self.area) self.area.removeEntity(self);\n    }\n\n    return() {\n        let self = this;\n\n        self.clearTarget();\n        self.resetPosition();\n        self.setPosition(self.x, self.y);\n    }\n\n    isRanged() {\n        return this.attackRange > 1;\n    }\n\n    distanceToSpawn() {\n        return this.getCoordDistance(\n            this.spawnLocation[0],\n            this.spawnLocation[1]\n        );\n    }\n\n    isAtSpawn() {\n        return (\n            this.x === this.spawnLocation[0] && this.y === this.spawnLocation[1]\n        );\n    }\n\n    isOutsideSpawn() {\n        return this.distanceToSpawn() > this.spawnDistance;\n    }\n\n    addToChestArea(chestAreas) {\n        let self = this,\n            area = _.find(chestAreas, area => {\n                return area.contains(self.x, self.y);\n            });\n\n        if (area) area.addEntity(self);\n    }\n\n    respawn() {\n        let self = this;\n\n        /**\n         * Some entities are static (only spawned once during an event)\n         * Meanwhile, other entities act as an illusion to another entity,\n         * so the resawning script is handled elsewhere.\n         */\n\n        if (!self.static || self.respawnDelay === -1) return;\n\n        setTimeout(() => {\n            if (self.respawnCallback) self.respawnCallback();\n        }, self.respawnDelay);\n    }\n\n    getState() {\n        let self = this,\n            base = super.getState();\n\n        base.hitPoints = self.hitPoints;\n        base.maxHitPoints = self.maxHitPoints;\n        base.attackRange = self.attackRange;\n        base.level = self.level;\n        base.hiddenName = self.hiddenName;\n\n        return base;\n    }\n\n    resetPosition() {\n        let self = this;\n\n        self.setPosition(self.spawnLocation[0], self.spawnLocation[1]);\n    }\n\n    onRespawn(callback) {\n        this.respawnCallback = callback;\n    }\n\n    onReturn(callback) {\n        this.returnCallback = callback;\n    }\n\n    onRefresh(callback) {\n        this.refreshCallback = callback;\n    }\n\n    onDeath(callback) {\n        this.deathCallback = callback;\n    }\n}\n\nmodule.exports = Mob;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 460,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 461,
    "kind": "class",
    "name": "Mob",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "Character"
    ],
    "ignore": true
  },
  {
    "__docId__": 462,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#load",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "refresh",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "getDrop",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#getDrop",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "getProjectileName",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#getProjectileName",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "canAggro",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#canAggro",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "destroy",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "return",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#return",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "distanceToSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#distanceToSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "isAtSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#isAtSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "isOutsideSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#isOutsideSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "addToChestArea",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#addToChestArea",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [
      {
        "name": "chestAreas",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "respawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#respawn",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "getState",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#getState",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "resetPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#resetPosition",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "onRespawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#onRespawn",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "respawnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#respawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "onReturn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#onReturn",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "returnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#returnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "onRefresh",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#onRefresh",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "refreshCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#refreshCallback",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "onDeath",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#onDeath",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "deathCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#deathCallback",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "content": "let Utils = require('../../../../util/utils'),\n    Messages = require('../../../../network/messages'),\n    Packets = require('../../../../network/packets');\n\nclass MobHandler {\n    constructor(mob, world) {\n        let self = this;\n\n        self.mob = mob;\n        self.world = world;\n        self.map = world.map;\n\n        self.roamingInterval = null;\n        self.spawnLocation = mob.spawnLocation;\n        self.maxRoamingDistance = mob.maxRoamingDistance;\n\n        self.load();\n        self.loadCallbacks();\n    }\n\n    load() {\n        let self = this;\n\n        if (!self.mob.roaming) return;\n\n        self.roamingInterval = setInterval(() => {\n            if (!self.mob.dead) {\n                let newX =\n                        self.mob.x +\n                        Utils.randomInt(\n                            -self.maxRoamingDistance,\n                            self.maxRoamingDistance\n                        ),\n                    newY =\n                        self.mob.y +\n                        Utils.randomInt(\n                            -self.maxRoamingDistance,\n                            self.maxRoamingDistance\n                        ),\n                    distance = Utils.getDistance(\n                        self.spawnLocation[0],\n                        self.spawnLocation[1],\n                        newX,\n                        newY\n                    );\n\n                if (self.map.isColliding(newX, newY)) return;\n\n                if (self.map.isEmpty(newX, newY)) return;\n\n                if (self.map.isDoor(newX, newY)) return;\n\n                if (distance < self.mob.maxRoamingDistance) return;\n\n                if (self.mob.combat.started) return;\n\n                self.mob.setPosition(newX, newY);\n\n                self.world.push(Packets.PushOpcode.Regions, {\n                    regionId: self.mob.region,\n                    message: new Messages.Movement(\n                        Packets.MovementOpcode.Move,\n                        {\n                            id: self.mob.instance,\n                            x: newX,\n                            y: newY\n                        }\n                    )\n                });\n            }\n        }, 5000);\n    }\n\n    loadCallbacks() {\n        let self = this;\n\n        /* self.mob.onMovement((x, y) => {\n\n\n            console.trace(`x: ${x}, y: ${y}`);\n        });*/\n    }\n}\n\nmodule.exports = MobHandler;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 487,
    "kind": "variable",
    "name": "Utils",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 488,
    "kind": "class",
    "name": "MobHandler",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 489,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler#load",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "loadCallbacks",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler#loadCallbacks",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 492,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    AbilityInfo = require('../../../../../util/abilities');\n\nclass Abilities {\n    constructor(player) {\n        let self = this;\n\n        self.player = player;\n\n        self.abilities = {};\n\n        self.shortcuts = [];\n\n        self.shortcutSize = 5;\n    }\n\n    addAbility(ability) {\n        this.abilities[ability.name] = ability;\n    }\n\n    addShortcut(ability) {\n        let self = this;\n\n        if (self.shortcutSize >= 5) return;\n\n        self.shortcuts.push(ability.name);\n    }\n\n    removeAbility(ability) {\n        let self = this;\n\n        if (self.isShortcut(ability))\n            self.removeShortcut(self.shortcuts.indexOf(ability.name));\n\n        delete self.abilities[ability.name];\n    }\n\n    removeShortcut(index) {\n        if (index > -1) this.shortcuts.splice(index, 1);\n    }\n\n    hasAbility(ability) {\n        _.each(this.abilities, uAbility => {\n            if (uAbility.name === ability.name) return true;\n        });\n\n        return false;\n    }\n\n    isShortcut(ability) {\n        return this.shortcuts.indexOf(ability.name) > -1;\n    }\n\n    getArray() {\n        let self = this,\n            abilities = '',\n            abilityLevels = '',\n            shortcuts = self.shortcuts.toString();\n\n        _.each(self.abilities, ability => {\n            abilities += ability.name;\n            abilityLevels += ability.level;\n        });\n\n        return {\n            username: self.player.username,\n            abilities: abilities,\n            abilityLevels: abilityLevels,\n            shortcuts: shortcuts\n        };\n    }\n}\n\nmodule.exports = Abilities;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 493,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 494,
    "kind": "class",
    "name": "Abilities",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 495,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "addAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#addAbility",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "addShortcut",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#addShortcut",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "removeAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#removeAbility",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "removeShortcut",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#removeShortcut",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "hasAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#hasAbility",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "isShortcut",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#isShortcut",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "getArray",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#getArray",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"username\": *, \"abilities\": *, \"abilityLevels\": *, \"shortcuts\": *}"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "content": "/* global module */\n\nlet Abilities = require('../../../../../../util/abilities');\n\nclass Ability {\n    constructor(name, type) {\n        let self = this;\n\n        self.name = name;\n        self.type = type;\n\n        self.level = -1;\n\n        self.data = Abilities.Data[name];\n    }\n}\n\nmodule.exports = Ability;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 504,
    "kind": "variable",
    "name": "Abilities",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js~Abilities",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 505,
    "kind": "class",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 506,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js~Ability",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js~Ability#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 507,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "content": "/* global module */\n\nlet Ability = require('./ability');\n\nclass FireStrike extends Ability {\n    constructor(name, type) {\n        super(name, type);\n    }\n}\n\nmodule.exports = FireStrike;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 508,
    "kind": "variable",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 509,
    "kind": "class",
    "name": "FireStrike",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js~FireStrike",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Ability"
    ],
    "ignore": true
  },
  {
    "__docId__": 510,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js~FireStrike",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js~FireStrike#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 511,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "content": "/* global module */\n\nlet Ability = require('./ability');\n\nclass IceStrike extends Ability {\n    constructor(name, type) {\n        super(name, type);\n    }\n}\n\nmodule.exports = IceStrike;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 512,
    "kind": "variable",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 513,
    "kind": "class",
    "name": "IceStrike",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js~IceStrike",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Ability"
    ],
    "ignore": true
  },
  {
    "__docId__": 514,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js~IceStrike",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js~IceStrike#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 515,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "content": "/* global module */\n\nlet Ability = require('./ability');\n\nclass Run extends Ability {\n    constructor(name, type) {\n        super(name, type);\n    }\n}\n\nmodule.exports = Run;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 516,
    "kind": "variable",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 517,
    "kind": "class",
    "name": "Run",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js~Run",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Ability"
    ],
    "ignore": true
  },
  {
    "__docId__": 518,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js~Run",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js~Run#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 519,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "content": "/* global module */\n\nlet Data = require('../../../../../data/achievements'),\n    Messages = require('../../../../network/messages'),\n    Packets = require('../../../../network/packets'),\n    Modules = require('../../../../util/modules');\n\nclass Achievement {\n    constructor(id, player) {\n        let self = this;\n\n        self.id = id;\n        self.player = player;\n\n        self.progress = 0;\n\n        self.data = Data[self.id];\n\n        self.name = self.data.name;\n        self.description = self.data.description;\n\n        self.discovered = false;\n    }\n\n    step() {\n        let self = this;\n\n        if (self.isThreshold()) return;\n\n        self.progress++;\n\n        self.update();\n\n        self.player.send(\n            new Messages.Quest(Packets.QuestOpcode.Progress, {\n                id: self.id,\n                name: self.name,\n                progress: self.progress,\n                count: self.data.count,\n                isQuest: false\n            })\n        );\n    }\n\n    converse(npc) {\n        let self = this;\n\n        if (self.isThreshold() || self.hasItem()) self.finish(npc);\n        else {\n            self.player.send(\n                new Messages.NPC(Packets.NPCOpcode.Talk, {\n                    id: npc.instance,\n                    text: npc.talk(self.data.text)\n                })\n            );\n\n            if (!self.isStarted() && npc.talkIndex === 0) self.step();\n        }\n    }\n\n    finish(npc) {\n        let self = this,\n            rewardType = self.data.rewardType;\n\n        switch (rewardType) {\n            case Modules.Achievements.Rewards.Item:\n                if (!self.player.inventory.hasSpace()) {\n                    self.player.notify(\n                        'You do not have enough space in your inventory to finish this achievement.'\n                    );\n                    return;\n                }\n\n                self.player.inventory.add({\n                    id: self.data.item,\n                    count: self.data.itemCount\n                });\n\n                break;\n\n            case Modules.Achievements.Rewards.Experience:\n                self.player.addExperience(self.data.reward);\n\n                break;\n        }\n\n        self.setProgress(9999);\n        self.update();\n\n        self.player.send(\n            new Messages.Quest(Packets.QuestOpcode.Finish, {\n                id: self.id,\n                name: self.name,\n                isQuest: false\n            })\n        );\n\n        if (npc && self.player.npcTalkCallback)\n            self.player.npcTalkCallback(npc);\n    }\n\n    update() {\n        this.player.save();\n    }\n\n    isThreshold() {\n        return this.progress >= this.data.count;\n    }\n\n    hasItem() {\n        let self = this;\n\n        if (\n            self.data.type === Modules.Achievements.Type.Scavenge &&\n            self.player.inventory.contains(self.data.item)\n        ) {\n            self.player.inventory.remove(self.data.item, self.data.itemCount);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    setProgress(progress) {\n        this.progress = parseInt(progress);\n    }\n\n    isStarted() {\n        return this.progress > 0;\n    }\n\n    isFinished() {\n        return this.progress > 9998;\n    }\n\n    getInfo() {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.data.type,\n            description: this.description,\n            count: this.data.count ? this.data.count : 1,\n            progress: this.progress,\n            finished: this.isFinished()\n        };\n    }\n}\n\nmodule.exports = Achievement;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 520,
    "kind": "variable",
    "name": "Data",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Data",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 521,
    "kind": "class",
    "name": "Achievement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 522,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "step",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#step",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "converse",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#converse",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "finish",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#finish",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "update",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#update",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "isThreshold",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#isThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "hasItem",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#hasItem",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "setProgress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#setProgress",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "progress",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "progress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#progress",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "isStarted",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#isStarted",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "isFinished",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#isFinished",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "getInfo",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#getInfo",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"id\": *, \"name\": *, \"type\": *, \"description\": *, \"count\": *, \"progress\": *, \"finished\": *}"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Container = require('../container'),\n    Messages = require('../../../../../../network/messages'),\n    Packets = require('../../../../../../network/packets'),\n    Items = require('../../../../../../util/items');\n\nclass Bank extends Container {\n    constructor(owner, size) {\n        super('Bank', owner, size);\n\n        this.open = false;\n    }\n\n    load(ids, counts, abilities, abilityLevels) {\n        super.load(ids, counts, abilities, abilityLevels);\n\n        this.owner.send(\n            new Messages.Bank(Packets.BankOpcode.Batch, [this.size, this.slots])\n        );\n    }\n\n    add(id, count, ability, abilityLevel) {\n        let self = this;\n\n        if (!self.canHold(id, count)) {\n            self.owner.send(\n                new Messages.Notification(\n                    Packets.NotificationOpcode.Text,\n                    'You do not have enough space in your bank.'\n                )\n            );\n            return false;\n        }\n\n        let slot = super.add(id, parseInt(count), ability, abilityLevel);\n\n        self.owner.send(new Messages.Bank(Packets.BankOpcode.Add, slot));\n        self.owner.save();\n\n        return true;\n    }\n\n    remove(id, count, index) {\n        let self = this;\n\n        if (!super.remove(index, id, count)) return;\n\n        self.owner.send(\n            new Messages.Bank(Packets.BankOpcode.Remove, {\n                index: parseInt(index),\n                count: count\n            })\n        );\n\n        self.owner.save();\n    }\n}\n\nmodule.exports = Bank;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 535,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 536,
    "kind": "class",
    "name": "Bank",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "Container"
    ],
    "ignore": true
  },
  {
    "__docId__": 537,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "open",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#open",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "counts",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilities",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 540,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#add",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#remove",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 542,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Slot = require('./slot'),\n    Items = require('../../../../../util/items'),\n    Constants = require('../../../../../util/constants');\n\nclass Container {\n    constructor(type, owner, size) {\n        let self = this;\n\n        self.type = type;\n        self.owner = owner;\n        self.size = size;\n\n        self.slots = [];\n\n        for (let i = 0; i < self.size; i++) self.slots.push(new Slot(i));\n    }\n\n    load(ids, counts, abilities, abilityLevels) {\n        let self = this;\n\n        /**\n         * Fill each slot with manual data or the database\n         */\n\n        if (ids.length !== self.slots.length)\n            log.error('[' + self.type + '] Mismatch in container size.');\n\n        for (let i = 0; i < self.slots.length; i++) {\n            self.slots[i].load(\n                ids[i],\n                counts[i],\n                abilities[i],\n                abilityLevels[i]\n            );\n        }\n    }\n\n    loadEmpty() {\n        let self = this,\n            data = [];\n\n        for (let i = 0; i < self.size; i++) data.push(-1);\n\n        self.load(data, data, data, data);\n    }\n\n    add(id, count, ability, abilityLevel) {\n        let self = this;\n\n        // log.info('Trying to pickup ' + count + ' x ' + id);\n        let maxStackSize =\n            Items.maxStackSize(id) === -1\n                ? Constants.MAX_STACK\n                : Items.maxStackSize(id);\n\n        // log.info('Max stack size = ' + maxStackSize);\n\n        if (!id || count < 0 || count > maxStackSize) return null;\n\n        if (!Items.isStackable(id)) {\n            if (self.hasSpace()) {\n                let nsSlot = self.slots[self.getEmptySlot()]; // non-stackable slot\n\n                nsSlot.load(id, count, ability, abilityLevel);\n\n                return nsSlot;\n            }\n        } else {\n            if (maxStackSize === -1 || self.type === 'Bank') {\n                let sSlot = self.getSlot(id);\n\n                if (sSlot) {\n                    sSlot.increment(count);\n                    return sSlot;\n                } else {\n                    if (self.hasSpace()) {\n                        let slot = self.slots[self.getEmptySlot()];\n\n                        slot.load(id, count, ability, abilityLevel);\n\n                        return slot;\n                    }\n                }\n            } else {\n                let remainingItems = count;\n\n                for (let i = 0; i < self.slots.length; i++) {\n                    if (self.slots[i].id === id) {\n                        let rSlot = self.slots[i];\n\n                        let available = maxStackSize - rSlot.count;\n\n                        if (available >= remainingItems) {\n                            rSlot.increment(remainingItems);\n\n                            return rSlot;\n                        } else if (available > 0) {\n                            rSlot.increment(available);\n                            remainingItems -= available;\n                        }\n                    }\n                }\n\n                if (remainingItems > 0 && self.hasSpace()) {\n                    let rrSlot = self.slots[self.getEmptySlot()];\n\n                    rrSlot.load(id, remainingItems, ability, abilityLevel);\n\n                    return rrSlot;\n                }\n            }\n        }\n    }\n\n    canHold(id, count) {\n        let self = this;\n\n        if (!Items.isStackable(id)) return self.hasSpace();\n\n        if (self.hasSpace()) return true;\n\n        let maxStackSize = Items.maxStackSize(id);\n\n        if ((self.type === 'Bank' || maxStackSize === -1) && self.contains(id))\n            return true;\n\n        if (maxStackSize !== -1 && count > maxStackSize) return false;\n\n        let remainingSpace = 0;\n\n        for (let i = 0; i < self.slots.length; i++) {\n            if (self.slots[i].id === id)\n                remainingSpace += maxStackSize - self.slots[i].count;\n        }\n\n        return remainingSpace >= count;\n    }\n\n    remove(index, id, count) {\n        /**\n         * Perform item validity prior to calling the method.\n         */\n\n        let self = this,\n            slot = self.slots[index];\n\n        if (!slot) return false;\n\n        if (Items.isStackable(id)) {\n            if (count >= slot.count) slot.empty();\n            else slot.decrement(count);\n        } else slot.empty();\n\n        return true;\n    }\n\n    getSlot(id) {\n        let self = this;\n\n        for (let i = 0; i < self.slots.length; i++)\n            if (self.slots[i].id === id) return self.slots[i];\n\n        return null;\n    }\n\n    contains(id, count) {\n        let self = this;\n\n        if (!count || count === 'undefined') count = 1;\n\n        for (let index in self.slots) {\n            let slot = self.slots[index];\n\n            if (slot.id === id) return slot.count >= count;\n        }\n\n        return false;\n    }\n\n    containsSpaces(count) {\n        let self = this,\n            emptySpaces = [];\n\n        for (let i = 0; i < self.slots.length; i++)\n            if (self.slots[i].id === -1) emptySpaces.push(self.slots[i]);\n\n        return emptySpaces.length === count;\n    }\n\n    hasSpace() {\n        return this.getEmptySlot() > -1;\n    }\n\n    getEmptySlot() {\n        let self = this;\n\n        for (let i = 0; i < self.slots.length; i++)\n            if (self.slots[i].id === -1) return i;\n\n        return -1;\n    }\n\n    getIndex(id) {\n        let self = this;\n\n        /**\n         * Used when the index is not determined,\n         * returns the first item found based on the id.\n         */\n\n        for (let i = 0; i < self.slots.length; i++)\n            if (self.slots[i].id === id) return i;\n\n        return -1;\n    }\n\n    check() {\n        let self = this;\n\n        _.each(self.slots, slot => {\n            if (isNaN(slot.id)) slot.empty();\n        });\n    }\n\n    forEachSlot(callback) {\n        let self = this;\n\n        for (let i = 0; i < self.slots.length; i++) callback(self.slots[i]);\n    }\n\n    getArray() {\n        let self = this,\n            ids = '',\n            counts = '',\n            abilities = '',\n            abilityLevels = '';\n\n        for (let i = 0; i < self.slots.length; i++) {\n            ids += self.slots[i].id + ' ';\n            counts += self.slots[i].count + ' ';\n            abilities += self.slots[i].ability + ' ';\n            abilityLevels += self.slots[i].abilityLevel + ' ';\n        }\n\n        return {\n            username: self.owner.username,\n            ids: ids.slice(0, -1),\n            counts: counts.slice(0, -1),\n            abilities: abilities.slice(0, -1),\n            abilityLevels: abilityLevels.slice(0, -1)\n        };\n    }\n}\n\nmodule.exports = Container;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 543,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 544,
    "kind": "class",
    "name": "Container",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 545,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#load",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "counts",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilities",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "loadEmpty",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#loadEmpty",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#add",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "canHold",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#canHold",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#remove",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "getSlot",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#getSlot",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "contains",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#contains",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "containsSpaces",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#containsSpaces",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "hasSpace",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#hasSpace",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "getEmptySlot",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#getEmptySlot",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "getIndex",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#getIndex",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "check",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#check",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "forEachSlot",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#forEachSlot",
    "access": "public",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "getArray",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#getArray",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"username\": *, \"ids\": *, \"counts\": *, \"abilities\": *, \"abilityLevels\": *}"
      ]
    }
  },
  {
    "__docId__": 560,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/constants.js",
    "content": "/* global module */\n\nmodule.exports = {\n    InventoryFull: 'You do not have enough space in your inventory!',\n    NoDrop: 'You cannot drop an item here.'\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/containers/inventory/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 561,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Container = require('../container'),\n    Messages = require('../../../../../../network/messages'),\n    Packets = require('../../../../../../network/packets'),\n    Constants = require('./constants'),\n    Items = require('../../../../../../util/items');\n\nclass Inventory extends Container {\n    constructor(owner, size) {\n        super('Inventory', owner, size);\n    }\n\n    load(ids, counts, abilities, abilityLevels) {\n        super.load(ids, counts, abilities, abilityLevels);\n\n        this.owner.send(\n            new Messages.Inventory(Packets.InventoryOpcode.Batch, [\n                this.size,\n                this.slots\n            ])\n        );\n    }\n\n    add(item, count) {\n        let self = this;\n\n        if (!count) count = -1;\n\n        if (count === -1)\n            // default to moving whole stack\n            count = parseInt(item.count);\n\n        if (!self.canHold(item.id, count)) {\n            self.owner.send(\n                new Messages.Notification(\n                    Packets.NotificationOpcode.Text,\n                    Constants.InventoryFull\n                )\n            );\n            return false;\n        }\n\n        let slot = super.add(item.id, count, item.ability, item.abilityLevel);\n\n        if (!slot) return false;\n\n        self.owner.send(\n            new Messages.Inventory(Packets.InventoryOpcode.Add, slot)\n        );\n\n        self.owner.save();\n\n        if (item.instance) self.owner.world.removeItem(item);\n\n        return true;\n    }\n\n    remove(id, count, index) {\n        let self = this;\n\n        if (!id || !count) return false;\n\n        if (!index) index = self.getIndex(id);\n\n        if (!super.remove(index, id, count)) return false;\n\n        self.owner.send(\n            new Messages.Inventory(Packets.InventoryOpcode.Remove, {\n                index: parseInt(index),\n                count: count\n            })\n        );\n\n        self.owner.save();\n\n        return true;\n    }\n}\n\nmodule.exports = Inventory;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 562,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 563,
    "kind": "class",
    "name": "Inventory",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "Container"
    ],
    "ignore": true
  },
  {
    "__docId__": 564,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory#load",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "counts",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilities",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory#add",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory#remove",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "content": "/* global module */\n\nlet Items = require('../../../../../util/items');\n\nclass Slot {\n    constructor(index) {\n        let self = this;\n\n        self.index = index;\n\n        self.id = -1;\n        self.count = -1;\n        self.ability = -1;\n        self.abilityLevel = -1;\n\n        self.string = null;\n    }\n\n    load(id, count, ability, abilityLevel) {\n        let self = this;\n\n        self.id = parseInt(id);\n        self.count = parseInt(count);\n        self.ability = parseInt(ability);\n        self.abilityLevel = parseInt(abilityLevel);\n\n        self.string = Items.idToString(self.id);\n        self.edible = Items.isEdible(self.id);\n        self.equippable = Items.isEquippable(self.string);\n\n        self.verify();\n    }\n\n    empty() {\n        let self = this;\n\n        self.id = -1;\n        self.count = -1;\n        self.ability = -1;\n        self.abilityLevel = -1;\n\n        self.string = null;\n    }\n\n    increment(amount) {\n        let self = this;\n\n        self.count += parseInt(amount);\n\n        self.verify();\n    }\n\n    decrement(amount) {\n        let self = this;\n\n        self.count -= parseInt(amount);\n\n        if (self.count < 1) {\n            log.error(\n                '[Slot] Item ' +\n                    self.id +\n                    ' has a count below 1 -> count: ' +\n                    self.count\n            );\n        }\n\n        self.verify();\n    }\n\n    verify() {\n        let self = this;\n\n        if (isNaN(self.count) || self.count < 1) self.count = 1;\n    }\n\n    getData() {\n        return {\n            index: this.index,\n            string: this.string,\n            count: this.count,\n            ability: this.ability,\n            abilityLevel: this.abilityLevel\n        };\n    }\n}\n\nmodule.exports = Slot;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 569,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Items",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 570,
    "kind": "class",
    "name": "Slot",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 571,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#load",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "empty",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#empty",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "increment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#increment",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "decrement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#decrement",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "verify",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#verify",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#getData",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"index\": *, \"string\": *, \"count\": *, \"ability\": *, \"abilityLevel\": *}"
      ]
    }
  },
  {
    "__docId__": 578,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    DoorData = require('../../../../../data/doors'),\n    Messages = require('../../../../network/messages'),\n    Packets = require('../../../../network/packets');\n\nclass Doors {\n    constructor(player) {\n        let self = this;\n\n        self.world = player.world;\n        self.player = player;\n\n        self.doors = {};\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        _.each(DoorData, door => {\n            self.doors[door.id] = {\n                id: door.id,\n                x: door.x,\n                y: door.y,\n                status: door.status,\n                requirement: door.requirement,\n                level: door.level,\n                questId: door.questId,\n                closedIds: door.closedIds,\n                openIds: door.openIds\n            };\n        });\n    }\n\n    getStatus(door) {\n        let self = this;\n\n        switch (door.requirement) {\n            case 'quest':\n                let quest = self.player.quests.getQuest(door.questId);\n\n                if (door.status === 'open') return door.status;\n\n                return quest && quest.hasDoorUnlocked(door) ? 'open' : 'closed';\n\n            case 'level':\n                return self.player.level >= door.level ? 'open' : 'closed';\n        }\n    }\n\n    getTiles(door) {\n        let self = this,\n            tiles = {\n                indexes: [],\n                data: [],\n                collisions: []\n            };\n\n        let status = self.getStatus(door),\n            doorState = {\n                open: door.openIds,\n                closed: door.closedIds\n            };\n\n        _.each(doorState[status], (value, key) => {\n            tiles.indexes.push(parseInt(key));\n            tiles.data.push(value.data);\n            tiles.collisions.push(value.isColliding);\n        });\n\n        return tiles;\n    }\n\n    getAllTiles() {\n        let self = this,\n            allTiles = {\n                indexes: [],\n                data: [],\n                collisions: []\n            };\n\n        _.each(self.doors, door => {\n            let tiles = self.getTiles(door);\n\n            allTiles.indexes.push.apply(allTiles.indexes, tiles.indexes);\n            allTiles.data.push.apply(allTiles.data, tiles.data);\n            allTiles.collisions.push.apply(\n                allTiles.collisions,\n                tiles.collisions\n            );\n        });\n\n        return allTiles;\n    }\n\n    hasCollision(x, y) {\n        let self = this,\n            tiles = self.getAllTiles(),\n            tileIndex = self.world.map.gridPositionToIndex(x, y),\n            index = tiles.indexes.indexOf(tileIndex) - 1;\n\n        return index < 0 ? false : tiles.collisions[index];\n    }\n\n    getDoor(x, y, callback) {\n        this.forEachDoor(door => {\n            callback(door.x === x && door.y === y ? door : null);\n        });\n    }\n\n    isDoor(x, y, callback) {\n        this.forEachDoor(door => {\n            callback(door.x === x && door.y === y);\n        });\n    }\n\n    forEachDoor(callback) {\n        _.each(this.doors, door => {\n            callback(door);\n        });\n    }\n}\n\nmodule.exports = Doors;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 579,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 580,
    "kind": "class",
    "name": "Doors",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 581,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#load",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "getStatus",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#getStatus",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "door",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "getTiles",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#getTiles",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "door",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "getAllTiles",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#getAllTiles",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "hasCollision",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#hasCollision",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "getDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#getDoor",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "isDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#isDoor",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "forEachDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#forEachDoor",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 590,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "content": "/* global module */\n\nlet Items = require('../../../../util/items'),\n    Messages = require('../../../../network/messages'),\n    Packets = require('../../../../network/packets'),\n    Utils = require('../../../../util/utils');\n\nclass Enchant {\n    /**\n     * Tier 1 - Damage/Armour boost (1-5%)\n     * Tier 2 - Damage boost (1-10% & 10% for special ability or special ability level up)\n     * Tier 3 - Damage boost (1-15% & 15% for special ability or special ability level up)\n     * Tier 4 - Damage boost (1-20% & 20% for special ability or special ability level up)\n     * Tier 5 - Damage boost (1-40% & 25% for special ability or special ability level up)\n     */\n\n    constructor(player) {\n        let self = this;\n\n        self.player = player;\n\n        self.selectedItem = null;\n        self.selectedShards = null;\n    }\n\n    add(type, item) {\n        let self = this,\n            isItem = item === 'item';\n\n        if (isItem && !Items.isEnchantable(item.id)) return;\n\n        if (type === 'item') {\n            if (self.selectedItem) self.remove('item');\n\n            self.selectedItem = item;\n        } else if (type === 'shards') {\n            if (self.selectedShards) self.remove('shards');\n\n            self.selectedShards = item;\n        }\n\n        self.player.send(\n            new Messages.Enchant(Packets.EnchantOpcode.Select, {\n                type: type,\n                index: item.index\n            })\n        );\n    }\n\n    remove(type) {\n        let self = this,\n            index;\n\n        if (type === 'item' && self.selectedItem) {\n            index = self.selectedItem.index;\n\n            self.selectedItem = null;\n        } else if (type === 'shards' && self.selectedShards) {\n            index = self.selectedShards.index;\n\n            self.selectedShards = null;\n        }\n\n        self.player.send(\n            new Messages.Enchant(Packets.EnchantOpcode.Remove, {\n                type: type,\n                index: index\n            })\n        );\n    }\n\n    convert(shard) {\n        let self = this;\n\n        if (!Items.isShard(shard.id) || !self.player.inventory.hasSpace())\n            return;\n\n        let tier = Items.getShardTier(shard.id);\n\n        if (shard.count < 11 && tier > 5) return;\n\n        for (let i = 0; i < shard.count; i += 10) {\n            self.player.inventory.remove(shard.id, 10, shard.index);\n\n            self.player.inventory.add({\n                id: shard.id + 1,\n                count: 1,\n                ability: -1,\n                abilityLevel: -1\n            });\n        }\n    }\n\n    enchant() {\n        let self = this;\n\n        if (!self.selectedItem) {\n            self.player.notify('You have not selected an item to enchant.');\n            return;\n        }\n\n        if (!self.selectedShards) {\n            self.player.notify('You have to select shards to infuse.');\n            return;\n        }\n\n        if (!self.verify()) {\n            self.player.notify('This item cannot be enchanted.');\n            return;\n        }\n\n        if (self.selectedShards.count < 10) {\n            self.player.notify(\n                'You must have a minimum of 10 shards to enchant.'\n            );\n            return;\n        }\n\n        /**\n         * Implement probabilities here based on the number of shards\n         * and reason them out.\n         */\n\n        let tier = self.selectedItem.tier;\n\n        self.selectedItem.count = Utils.randomInt(\n            1,\n            tier === 5 ? 40 : 5 * tier\n        );\n\n        if (tier < 2) return;\n\n        if (self.hasAbility(self.selectedItem)) {\n            if (self.selectedItem.abilityLevel < 5)\n                self.selectedItem.abilityLevel++;\n            else self.generateAbility();\n        }\n\n        self.player.inventory.remove(\n            self.selectedShards.id,\n            10,\n            self.selectedShards.index\n        );\n        self.player.sync();\n    }\n\n    generateAbility() {\n        let self = this,\n            type = Items.getType(self.selectedItem.id),\n            probability = Utils.randomInt(0, 100);\n\n        if (probability > 5 + 5 * self.selectedShards.tier) return;\n\n        switch (type) {\n            case 'armor':\n            case 'armorarcher':\n                self.selectedItem.ability = Utils.randomInt(2, 3);\n\n                break;\n\n            case 'weapon':\n                self.selectedItem.ability = Utils.randomInt(0, 1);\n\n                break;\n\n            case 'weaponarcher':\n                self.selectedItem.ability = Utils.randomInt(4, 5);\n\n                break;\n\n            case 'pendant':\n                break;\n\n            case 'ring':\n                break;\n\n            case 'boots':\n                break;\n        }\n    }\n\n    verify() {\n        return (\n            Items.isEnchantable(this.selectedItem.id) &&\n            Items.isShard(this.selectedShards.id)\n        );\n    }\n\n    hasAbility(item) {\n        return item.ability !== -1;\n    }\n}\n\nmodule.exports = Enchant;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 591,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Items",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 592,
    "kind": "class",
    "name": "Enchant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 593,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#constructor",
    "access": "public",
    "description": "Tier 1 - Damage/Armour boost (1-5%)\nTier 2 - Damage boost (1-10% & 10% for special ability or special ability level up)\nTier 3 - Damage boost (1-15% & 15% for special ability or special ability level up)\nTier 4 - Damage boost (1-20% & 20% for special ability or special ability level up)\nTier 5 - Damage boost (1-40% & 25% for special ability or special ability level up)",
    "lineNumber": 17
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#add",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#remove",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "convert",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#convert",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "shard",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "enchant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#enchant",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "generateAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#generateAbility",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "verify",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#verify",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "hasAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#hasAbility",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "content": "/* global module */\n\nlet Equipment = require('./equipment'),\n    Items = require('../../../../../util/items'),\n    Modules = require('../../../../../util/modules');\n\nclass Armour extends Equipment {\n    constructor(name, id, count, ability, abilityLevel) {\n        super(name, id, count, ability, abilityLevel);\n\n        this.defense = Items.getArmourLevel(name);\n    }\n\n    hasAntiStun() {\n        return this.ability === 6;\n    }\n\n    setDefense(defense) {\n        this.defense = defense;\n    }\n\n    getDefense() {\n        return this.defense;\n    }\n\n    getType() {\n        return Modules.Equipment.Armour;\n    }\n}\n\nmodule.exports = Armour;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 602,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 603,
    "kind": "class",
    "name": "Armour",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 604,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 605,
    "kind": "member",
    "name": "defense",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#defense",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "hasAntiStun",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#hasAntiStun",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "setDefense",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#setDefense",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "defense",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "getDefense",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#getDefense",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#getType",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "content": "/* global module */\n\nlet Equipment = require('./equipment'),\n    Items = require('../../../../../util/items'),\n    Modules = require('../../../../../util/modules');\n\nclass Boots extends Equipment {\n    constructor(name, id, count, ability, abilityLevel) {\n        super(name, id, count, ability, abilityLevel);\n\n        this.bootsLevel = Items.getBootsLevel(name);\n    }\n\n    getBaseAmplifier() {\n        return 1.0 + this.bootsLevel / 200;\n    }\n\n    getType() {\n        return Modules.Equipment.Boots;\n    }\n}\n\nmodule.exports = Boots;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 612,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 613,
    "kind": "class",
    "name": "Boots",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 614,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "bootsLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots#bootsLevel",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "method",
    "name": "getBaseAmplifier",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots#getBaseAmplifier",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots#getType",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "content": "/* global module */\n\nlet Items = require('../../../../../util/items');\n\nclass Equipment {\n    constructor(name, id, count, ability, abilityLevel) {\n        let self = this;\n\n        self.name = name;\n        self.id = id;\n        self.count = count || 0;\n        self.ability = ability || 0;\n        self.abilityLevel = abilityLevel || 0;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    getCount() {\n        return this.count;\n    }\n\n    getAbility() {\n        return this.ability;\n    }\n\n    getAbilityLevel() {\n        return this.abilityLevel;\n    }\n\n    getBaseAmplifier() {\n        return 1.0;\n    }\n\n    getType() {\n        return -1;\n    }\n\n    getData() {\n        return {\n            type: this.getType(),\n            name: Items.idToName(this.id),\n            string: Items.idToString(this.id),\n            count: this.count,\n            ability: this.ability,\n            abilityLevel: this.abilityLevel\n        };\n    }\n\n    getString() {\n        return Items.idToString(this.id);\n    }\n\n    getItem() {\n        return {\n            name: this.name,\n            string: Items.idToString(this.id),\n            id: this.id,\n            count: this.count,\n            ability: this.ability,\n            abilityLevel: this.abilityLevel\n        };\n    }\n}\n\nmodule.exports = Equipment;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 619,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Items",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 620,
    "kind": "class",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 621,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "getName",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getName",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "getId",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getId",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "getCount",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getCount",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "getAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getAbility",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "getAbilityLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getAbilityLevel",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "getBaseAmplifier",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getBaseAmplifier",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getType",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getData",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"name\": *, \"string\": *, \"count\": *, \"ability\": *, \"abilityLevel\": *}"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "getString",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getString",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "getItem",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getItem",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"name\": *, \"string\": *, \"id\": *, \"count\": *, \"ability\": *, \"abilityLevel\": *}"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "content": "/* global module */\n\nlet Equipment = require('./equipment'),\n    Items = require('../../../../../util/items'),\n    Modules = require('../../../../../util/modules');\n\nclass Pendant extends Equipment {\n    constructor(name, id, count, ability, abilityLevel) {\n        super(name, id, count, ability, abilityLevel);\n\n        this.pendantLevel = Items.getPendantLevel(name);\n    }\n\n    getBaseAmplifier() {\n        return 1.0 + this.pendantLevel / 100;\n    }\n\n    getType() {\n        return Modules.Equipment.Pendant;\n    }\n}\n\nmodule.exports = Pendant;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 633,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 634,
    "kind": "class",
    "name": "Pendant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 635,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 636,
    "kind": "member",
    "name": "pendantLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant#pendantLevel",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "getBaseAmplifier",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant#getBaseAmplifier",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant#getType",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "content": "/* global module */\n\nlet Equipment = require('./equipment'),\n    Items = require('../../../../../util/items'),\n    Modules = require('../../../../../util/modules');\n\nclass Ring extends Equipment {\n    constructor(name, id, count, ability, abilityLevel) {\n        super(name, id, count, ability, abilityLevel);\n\n        this.ringLevel = Items.getRingLevel(name);\n    }\n\n    getBaseAmplifier() {\n        return 1.0 + this.ringLevel / 100;\n    }\n\n    getType() {\n        return Modules.Equipment.Ring;\n    }\n}\n\nmodule.exports = Ring;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 640,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 641,
    "kind": "class",
    "name": "Ring",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 642,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 643,
    "kind": "member",
    "name": "ringLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring#ringLevel",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "getBaseAmplifier",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring#getBaseAmplifier",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring#getType",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "content": "/* global module */\n\nlet Equipment = require('./equipment'),\n    Items = require('../../../../../util/items'),\n    Modules = require('../../../../../util/modules');\n\nclass Weapon extends Equipment {\n    constructor(name, id, count, ability, abilityLevel) {\n        super(name, id, count, ability, abilityLevel);\n\n        let self = this;\n\n        self.level = Items.getWeaponLevel(name);\n        self.ranged = Items.isArcherWeapon(name);\n\n        self.breakable = false;\n    }\n\n    hasCritical() {\n        return this.ability === 1;\n    }\n\n    hasExplosive() {\n        return this.ability === 4;\n    }\n\n    hasStun() {\n        return this.ability === 5;\n    }\n\n    isRanged() {\n        return this.ranged;\n    }\n\n    setLevel(level) {\n        this.level = level;\n    }\n\n    getLevel() {\n        return this.level;\n    }\n\n    getType() {\n        return Modules.Equipment.Weapon;\n    }\n}\n\nmodule.exports = Weapon;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 647,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 648,
    "kind": "class",
    "name": "Weapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 649,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "hasCritical",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#hasCritical",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "hasExplosive",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#hasExplosive",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "hasStun",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#hasStun",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "method",
    "name": "setLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#setLevel",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 655,
    "kind": "member",
    "name": "level",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#level",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "getLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#getLevel",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#getType",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 658,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "content": "/* global module */\n\nlet Messages = require('../../../../network/messages'),\n    Packets = require('../../../../network/packets');\n\nclass Guild {\n    constructor(player, data) {\n        let self = this;\n\n        self.player = player;\n        self.data = data;\n    }\n\n    join() {\n        let self = this;\n\n        if (self.data && self.data.name) self.leave();\n    }\n\n    leave() {\n        let self = this;\n\n        if (!self.data) {\n            self.player.notify('You are not in a guild.');\n            return;\n        }\n\n        self.getController().remove(self.player, self.data.string);\n\n        self.data = null;\n\n        self.player.send(new Messages.Guild(Packets.GuildOpcode.Leave));\n    }\n\n    /*\n     * We keep each player up to date with changes\n     * to the guild.\n     */\n\n    update(data) {\n        let self = this;\n\n        // Do a server-sided update.\n        self.data = data;\n\n        // Do a client-sided update.\n        self.player.send(new Messages.Guild(Packets.GuildOpcode.Update, data));\n    }\n\n    getController() {\n        return this.player.world.guilds;\n    }\n}\n\nmodule.exports = Guild;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 659,
    "kind": "variable",
    "name": "Messages",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Messages",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 660,
    "kind": "class",
    "name": "Guild",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 661,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "join",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#join",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "leave",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#leave",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "update",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#update",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "getController",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#getController",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Messages = require('../../../../network/messages'),\n    Packets = require('../../../../network/packets'),\n    Npcs = require('../../../../util/npcs'),\n    Shops = require('../../../../util/shops');\n\nclass Handler {\n    constructor(player) {\n        let self = this;\n\n        self.player = player;\n        self.world = player.world;\n        self.map = player.world.map;\n\n        self.updateInterval = 400; // 400 milliseconds\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        self.player.updateInterval = setInterval(() => {\n            self.detectAggro();\n        }, 400);\n\n        self.player.onMovement((x, y) => {\n            self.player.checkRegions();\n\n            self.detectPVP(x, y);\n            self.detectMusic(x, y);\n            self.detectOverlay(x, y);\n            self.detectCamera(x, y);\n            self.detectLights(x, y);\n        });\n\n        self.player.onDeath(() => {});\n\n        self.player.onHit((attacker, damage) => {\n            /**\n             * Handles actions whenever the player\n             * instance is hit by 'damage' amount\n             */\n\n            if (self.player.combat.isRetaliating())\n                self.player.combat.begin(attacker);\n        });\n\n        self.player.onKill(character => {\n            if (self.player.quests.isAchievementMob(character)) {\n                let achievement = self.player.quests.getAchievementByMob(\n                    character\n                );\n\n                if (achievement && achievement.isStarted())\n                    self.player.quests.getAchievementByMob(character).step();\n            }\n        });\n\n        self.player.onRegion(() => {\n            self.player.lastRegionChange = new Date().getTime();\n\n            self.world.region.handle(self.player);\n            self.world.region.push(self.player);\n        });\n\n        self.player.connection.onClose(() => {\n            self.player.stopHealing();\n\n            self.world.removePlayer(self.player);\n        });\n\n        self.player.onTalkToNPC(npc => {\n            if (self.player.quests.isQuestNPC(npc)) {\n                self.player.quests.getQuestByNPC(npc).triggerTalk(npc);\n\n                return;\n            }\n\n            if (self.player.quests.isAchievementNPC(npc)) {\n                self.player.quests.getAchievementByNPC(npc).converse(npc);\n\n                return;\n            }\n\n            if (Shops.isShopNPC(npc.id)) {\n                self.world.shops.open(self.player, npc.id);\n                return;\n            }\n\n            switch (Npcs.getType(npc.id)) {\n                case 'banker':\n                    self.player.send(\n                        new Messages.NPC(Packets.NPCOpcode.Bank, {})\n                    );\n                    return;\n\n                case 'enchanter':\n                    self.player.send(\n                        new Messages.NPC(Packets.NPCOpcode.Enchant, {})\n                    );\n                    break;\n            }\n\n            let text = Npcs.getText(npc.id);\n\n            if (!text) return;\n\n            self.player.send(\n                new Messages.NPC(Packets.NPCOpcode.Talk, {\n                    id: npc.instance,\n                    text: npc.talk(text)\n                })\n            );\n        });\n    }\n\n    detectAggro() {\n        let self = this,\n            region = self.world.region.regions[self.player.region];\n\n        if (!region) return;\n\n        _.each(region.entities, entity => {\n            if (entity && entity.type === 'mob' && self.canEntitySee(entity)) {\n                let aggro = entity.canAggro(self.player);\n\n                if (aggro) entity.combat.begin(self.player);\n            }\n        });\n    }\n\n    detectMusic(x, y) {\n        let self = this,\n            musicArea = _.find(self.world.getMusicAreas(), area => {\n                return area.contains(x, y);\n            });\n\n        if (musicArea && self.player.currentSong !== musicArea.id)\n            self.player.updateMusic(musicArea.id);\n    }\n\n    detectPVP(x, y) {\n        let self = this,\n            pvpArea = _.find(self.world.getPVPAreas(), area => {\n                return area.contains(x, y);\n            });\n\n        self.player.updatePVP(!!pvpArea);\n    }\n\n    detectOverlay(x, y) {\n        let self = this,\n            overlayArea = _.find(self.world.getOverlayAreas(), area => {\n                return area.contains(x, y);\n            });\n\n        self.player.updateOverlay(overlayArea);\n    }\n\n    detectCamera(x, y) {\n        let self = this,\n            cameraArea = _.find(self.world.getCameraAreas(), area => {\n                return area.contains(x, y);\n            });\n\n        self.player.updateCamera(cameraArea);\n    }\n\n    detectLights(x, y) {\n        let self = this;\n\n        _.each(self.map.lights, light => {\n            if (\n                self.map.nearLight(light, x, y) &&\n                !self.player.hasLoadedLight(light)\n            ) {\n                self.player.lightsLoaded.push(light);\n                self.player.send(\n                    new Messages.Overlay(Packets.OverlayOpcode.Lamp, light)\n                );\n            }\n        });\n    }\n\n    canEntitySee(entity) {\n        return (\n            !this.player.hasInvisible(entity) &&\n            !this.player.hasInvisibleId(entity.id)\n        );\n    }\n}\n\nmodule.exports = Handler;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 667,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 668,
    "kind": "class",
    "name": "Handler",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 669,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#load",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "detectAggro",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectAggro",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "detectMusic",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectMusic",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "detectPVP",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectPVP",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "detectOverlay",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectOverlay",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 675,
    "kind": "method",
    "name": "detectCamera",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectCamera",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 676,
    "kind": "method",
    "name": "detectLights",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectLights",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "canEntitySee",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#canEntitySee",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 678,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/player.js",
    "content": "/* global module */\n\nlet Character = require('../character'),\n    Incoming = require('../../../../controllers/incoming'),\n    Armour = require('./equipment/armour'),\n    Weapon = require('./equipment/weapon'),\n    Pendant = require('./equipment/pendant'),\n    Ring = require('./equipment/ring'),\n    Boots = require('./equipment/boots'),\n    Items = require('../../../../util/items'),\n    Messages = require('../../../../network/messages'),\n    Formulas = require('../../../../util/formulas'),\n    HitPoints = require('./points/hitpoints'),\n    Mana = require('./points/mana'),\n    Packets = require('../../../../network/packets'),\n    Modules = require('../../../../util/modules'),\n    Handler = require('./handler'),\n    Quests = require('../../../../controllers/quests'),\n    Inventory = require('./containers/inventory/inventory'),\n    Abilities = require('./ability/abilities'),\n    Bank = require('./containers/bank/bank'),\n    config = require('../../../../../config.json'),\n    Enchant = require('./enchant'),\n    Utils = require('../../../../util/utils'),\n    Hit = require('../combat/hit'),\n    Trade = require('./trade'),\n    Warp = require('./warp'),\n    Guild = require('./guild'),\n    Doors = require('./doors');\n\nclass Player extends Character {\n    constructor(world, database, connection, clientId) {\n        super(-1, 'player', connection.id, -1, -1);\n\n        let self = this;\n\n        self.world = world;\n        self.database = database;\n        self.connection = connection;\n\n        self.clientId = clientId;\n\n        self.incoming = new Incoming(self);\n\n        self.ready = false;\n\n        self.moving = false;\n        self.potentialPosition = null;\n        self.futurePosition = null;\n\n        self.regionPosition = null;\n        self.newRegion = false;\n\n        self.team = null;\n        self.userAgent = null;\n\n        self.disconnectTimeout = null;\n        self.timeoutDuration = 1000 * 60 * 10; // 10 minutes\n        self.lastRegionChange = new Date().getTime();\n\n        self.handler = new Handler(self);\n\n        self.inventory = new Inventory(self, 20);\n        self.abilities = new Abilities(self);\n        self.enchant = new Enchant(self);\n        self.bank = new Bank(self, 56);\n        self.quests = new Quests(self);\n        self.trade = new Trade(self);\n        self.doors = new Doors(self);\n        self.warp = new Warp(self);\n\n        self.introduced = false;\n        self.currentSong = null;\n        self.acceptedTrade = false;\n        self.invincible = false;\n        self.noDamage = false;\n        self.isGuest = false;\n\n        self.pvp = false;\n\n        self.canTalk = true;\n\n        self.profileDialogOpen = false;\n\n        self.instanced = false;\n        self.visible = true;\n\n        self.regionsLoaded = [];\n        self.lightsLoaded = [];\n    }\n\n    load(data) {\n        let self = this;\n\n        self.kind = data.kind;\n        self.rights = data.rights;\n        self.experience = data.experience;\n        self.ban = data.ban;\n        self.mute = data.mute;\n        self.membership = data.membership;\n        self.lastLogin = data.lastLogin;\n        self.pvpKills = data.pvpKills;\n        self.pvpDeaths = data.pvpDeaths;\n        self.orientation = data.orientation;\n\n        self.warp.setLastWarp(data.lastWarp);\n\n        self.level = Formulas.expToLevel(self.experience);\n        self.nextExperience = Formulas.nextExp(self.experience);\n        self.prevExperience = Formulas.prevExp(self.experience);\n        self.hitPoints = new HitPoints(\n            data.hitPoints,\n            Formulas.getMaxHitPoints(self.level)\n        );\n        self.mana = new Mana(data.mana, Formulas.getMaxMana(self.level));\n\n        if (data.invisibleIds)\n            self.invisiblesIds = data.invisibleIds.split(' ');\n\n        self.userAgent = data.userAgent;\n\n        let armour = data.armour,\n            weapon = data.weapon,\n            pendant = data.pendant,\n            ring = data.ring,\n            boots = data.boots;\n\n        self.setPosition(data.x, data.y);\n        self.setArmour(armour[0], armour[1], armour[2], armour[3]);\n        self.setWeapon(weapon[0], weapon[1], weapon[2], weapon[3]);\n        self.setPendant(pendant[0], pendant[1], pendant[2], pendant[3]);\n        self.setRing(ring[0], ring[1], ring[2], ring[3]);\n        self.setBoots(boots[0], boots[1], boots[2], boots[3]);\n\n        self.guild = new Guild(self, null);\n    }\n\n    loadInventory() {\n        let self = this;\n\n        if (config.offlineMode) {\n            self.inventory.loadEmpty();\n            return;\n        }\n\n        self.database.loader.getInventory(\n            self,\n            (ids, counts, skills, skillLevels) => {\n                if (ids === null && counts === null) {\n                    self.inventory.loadEmpty();\n                    return;\n                }\n\n                if (ids.length !== self.inventory.size) self.save();\n\n                self.inventory.load(ids, counts, skills, skillLevels);\n                self.inventory.check();\n\n                self.loadBank();\n            }\n        );\n    }\n\n    loadBank() {\n        let self = this;\n\n        if (config.offlineMode) {\n            self.bank.loadEmpty();\n            return;\n        }\n\n        self.database.loader.getBank(\n            self,\n            (ids, counts, skills, skillLevels) => {\n                if (ids.length !== self.bank.size) self.save();\n\n                self.bank.load(ids, counts, skills, skillLevels);\n                self.bank.check();\n            }\n        );\n    }\n\n    loadQuests() {\n        let self = this;\n\n        if (config.offlineMode) return;\n\n        self.database.loader.getAchievements(self, (ids, progress) => {\n            ids.pop();\n            progress.pop();\n\n            if (self.quests.getAchievementSize() !== ids.length) {\n                log.info('Mismatch in achievements data.');\n\n                self.save();\n            }\n\n            self.quests.updateAchievements(ids, progress);\n        });\n\n        self.database.loader.getQuests(self, (ids, stages) => {\n            if (!ids || !stages) {\n                self.quests.updateQuests(ids, stages);\n                return;\n            }\n\n            /* Removes the empty space created by the loader */\n\n            ids.pop();\n            stages.pop();\n\n            if (self.quests.getQuestSize() !== ids.length) {\n                log.info('Mismatch in quest data.');\n\n                self.save();\n            }\n\n            self.quests.updateQuests(ids, stages);\n        });\n\n        self.quests.onAchievementsReady(() => {\n            self.send(\n                new Messages.Quest(\n                    Packets.QuestOpcode.AchievementBatch,\n                    self.quests.getAchievementData()\n                )\n            );\n\n            /* Update region here because we receive quest info */\n            self.updateRegion();\n\n            self.achievementsLoaded = true;\n        });\n\n        self.quests.onQuestsReady(() => {\n            self.send(\n                new Messages.Quest(\n                    Packets.QuestOpcode.QuestBatch,\n                    self.quests.getQuestData()\n                )\n            );\n\n            /* Update region here because we receive quest info */\n            self.updateRegion();\n\n            self.questsLoaded = true;\n        });\n    }\n\n    intro() {\n        let self = this;\n\n        if (self.ban > new Date()) {\n            self.connection.sendUTF8('ban');\n            self.connection.close('Player: ' + self.username + ' is banned.');\n        }\n\n        if (self.x <= 0 || self.y <= 0) self.sendToSpawn();\n\n        if (self.hitPoints.getHitPoints() < 0)\n            self.hitPoints.setHitPoints(self.getMaxHitPoints());\n\n        if (self.mana.getMana() < 0) self.mana.setMana(self.mana.getMaxMana());\n\n        self.verifyRights();\n\n        let info = {\n            instance: self.instance,\n            username:\n                self.username.charAt(0).toUpperCase() + self.username.substr(1),\n            x: self.x,\n            y: self.y,\n            kind: self.kind,\n            rights: self.rights,\n            hitPoints: self.hitPoints.getData(),\n            mana: self.mana.getData(),\n            experience: self.experience,\n            nextExperience: self.nextExperience,\n            prevExperience: self.prevExperience,\n            level: self.level,\n            lastLogin: self.lastLogin,\n            pvpKills: self.pvpKills,\n            pvpDeaths: self.pvpDeaths,\n            orientation: self.orientation\n        };\n\n        self.regionPosition = [self.x, self.y];\n\n        /**\n         * Send player data to client here\n         */\n\n        self.world.addPlayer(self);\n\n        self.send(new Messages.Welcome(info));\n    }\n\n    verifyRights() {\n        let self = this;\n\n        if (config.moderators.indexOf(self.username.toLowerCase()) > -1)\n            self.rights = 1;\n\n        if (\n            config.administrators.indexOf(self.username.toLowerCase()) > -1 ||\n            config.offlineMode\n        )\n            self.rights = 2;\n    }\n\n    addExperience(exp) {\n        let self = this;\n\n        self.experience += exp;\n\n        let oldLevel = self.level;\n\n        self.level = Formulas.expToLevel(self.experience);\n        self.nextExperience = Formulas.nextExp(self.experience);\n        self.prevExperience = Formulas.prevExp(self.experience);\n\n        if (oldLevel !== self.level) {\n            self.hitPoints.setMaxHitPoints(\n                Formulas.getMaxHitPoints(self.level)\n            );\n\n            self.updateRegion();\n        }\n\n        let data = {\n            id: self.instance,\n            level: self.level\n        };\n\n        /**\n         * Sending two sets of data as other users do not need to\n         * know the experience of another player.. (yet).\n         */\n\n        self.sendToAdjacentRegions(\n            self.region,\n            new Messages.Experience(data),\n            self.instance\n        );\n\n        data.amount = exp;\n        data.experience = self.experience;\n        data.nextExperience = self.nextExperience;\n        data.prevExperience = self.prevExperience;\n\n        self.send(new Messages.Experience(data));\n    }\n\n    heal(amount) {\n        let self = this;\n\n        /**\n         * Passed from the superclass...\n         */\n\n        if (!self.hitPoints || !self.mana) return;\n\n        self.hitPoints.heal(amount);\n        self.mana.heal(amount);\n\n        self.sync();\n    }\n\n    healHitPoints(amount) {\n        let self = this,\n            type = 'health';\n\n        self.hitPoints.heal(amount);\n\n        self.sync();\n\n        self.sendToAdjacentRegions(\n            self.region,\n            new Messages.Heal({\n                id: self.instance,\n                type: type,\n                amount: amount\n            })\n        );\n    }\n\n    healManaPoints(amount) {\n        let self = this,\n            type = 'mana';\n\n        self.mana.heal(amount);\n\n        self.sync();\n\n        self.sendToAdjacentRegions(\n            self.region,\n            new Messages.Heal({\n                id: self.instance,\n                type: type,\n                amount: amount\n            })\n        );\n    }\n\n    eat(id) {\n        let self = this,\n            item = Items.getPlugin(id);\n\n        if (!item) return;\n\n        new item().onUse(self);\n    }\n\n    equip(string, count, ability, abilityLevel) {\n        let self = this,\n            data = Items.getData(string),\n            type,\n            id;\n\n        if (!data || data === 'null') return;\n\n        if (Items.isArmour(string)) type = Modules.Equipment.Armour;\n        else if (Items.isWeapon(string)) type = Modules.Equipment.Weapon;\n        else if (Items.isPendant(string)) type = Modules.Equipment.Pendant;\n        else if (Items.isRing(string)) type = Modules.Equipment.Ring;\n        else if (Items.isBoots(string)) type = Modules.Equipment.Boots;\n\n        id = Items.stringToId(string);\n\n        switch (type) {\n            case Modules.Equipment.Armour:\n                if (self.hasArmour() && self.armour.id !== 114)\n                    self.inventory.add(self.armour.getItem());\n\n                self.setArmour(id, count, ability, abilityLevel);\n                break;\n\n            case Modules.Equipment.Weapon:\n                if (self.hasWeapon()) self.inventory.add(self.weapon.getItem());\n\n                self.setWeapon(id, count, ability, abilityLevel);\n                break;\n\n            case Modules.Equipment.Pendant:\n                if (self.hasPendant())\n                    self.inventory.add(self.pendant.getItem());\n\n                self.setPendant(id, count, ability, abilityLevel);\n                break;\n\n            case Modules.Equipment.Ring:\n                if (self.hasRing()) self.inventory.add(self.ring.getItem());\n\n                self.setRing(id, count, ability, abilityLevel);\n                break;\n\n            case Modules.Equipment.Boots:\n                if (self.hasBoots()) self.inventory.add(self.boots.getItem());\n\n                self.setBoots(id, count, ability, abilityLevel);\n                break;\n        }\n\n        self.send(\n            new Messages.Equipment(Packets.EquipmentOpcode.Equip, {\n                type: type,\n                name: Items.idToName(id),\n                string: string,\n                count: count,\n                ability: ability,\n                abilityLevel: abilityLevel\n            })\n        );\n\n        self.sync();\n    }\n\n    updateRegion(force) {\n        this.world.region.sendRegion(this, this.region, force);\n    }\n\n    isInvisible(instance) {\n        let self = this,\n            entity = self.world.getEntityByInstance(instance);\n\n        if (!entity) return false;\n\n        return super.hasInvisibleId(entity.id) || super.hasInvisible(entity);\n    }\n\n    formatInvisibles() {\n        return this.invisiblesIds.join(' ');\n    }\n\n    canEquip(string) {\n        let self = this,\n            requirement = Items.getLevelRequirement(string);\n\n        if (requirement > self.level) {\n            self.notify(\n                'You must be at least level ' + requirement + ' to equip this.'\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    die() {\n        let self = this;\n\n        self.dead = true;\n\n        if (self.deathCallback) self.deathCallback();\n\n        self.send(new Messages.Death(self.instance));\n    }\n\n    teleport(x, y, isDoor, animate) {\n        let self = this;\n\n        if (isDoor && !self.finishedTutorial()) {\n            if (self.doorCallback) self.doorCallback(x, y);\n\n            return;\n        }\n\n        self.sendToAdjacentRegions(\n            self.region,\n            new Messages.Teleport({\n                id: self.instance,\n                x: x,\n                y: y,\n                withAnimation: animate\n            })\n        );\n\n        self.setPosition(x, y);\n        // self.checkRegions();\n\n        self.world.cleanCombat(self);\n    }\n\n    updatePVP(pvp) {\n        let self = this;\n\n        /**\n         * No need to update if the state is the same\n         */\n\n        if (self.pvp === pvp) return;\n\n        if (self.pvp && !pvp) self.notify('You are no longer in a PvP zone!');\n        else self.notify('You have entered a PvP zone!');\n\n        self.pvp = pvp;\n\n        self.sendToRegion(new Messages.PVP(self.instance, self.pvp));\n    }\n\n    updateOverlay(overlay) {\n        let self = this;\n\n        if (self.overlayArea === overlay) return;\n\n        self.overlayArea = overlay;\n\n        if (overlay && overlay.id) {\n            self.lightsLoaded = [];\n\n            self.send(\n                new Messages.Overlay(Packets.OverlayOpcode.Set, {\n                    image: overlay.fog ? overlay.fog : 'empty',\n                    colour: 'rgba(0,0,0,' + overlay.darkness + ')'\n                })\n            );\n        } else self.send(new Messages.Overlay(Packets.OverlayOpcode.Remove));\n    }\n\n    updateCamera(camera) {\n        let self = this;\n\n        if (self.cameraArea === camera) return;\n\n        self.cameraArea = camera;\n\n        if (camera) {\n            switch (camera.type) {\n                case 'lockX':\n                    self.send(new Messages.Camera(Packets.CameraOpcode.LockX));\n                    break;\n\n                case 'lockY':\n                    self.send(new Messages.Camera(Packets.CameraOpcode.LockY));\n                    break;\n\n                case 'player':\n                    self.send(new Messages.Camera(Packets.CameraOpcode.Player));\n                    break;\n            }\n        } else self.send(new Messages.Camera(Packets.CameraOpcode.FreeFlow));\n    }\n\n    updateMusic(song) {\n        let self = this;\n\n        self.currentSong = song;\n\n        self.send(new Messages.Audio(song));\n    }\n\n    revertPoints() {\n        let self = this;\n\n        self.hitPoints.setHitPoints(self.hitPoints.getMaxHitPoints());\n        self.mana.setMana(self.mana.getMaxMana());\n\n        self.sync();\n    }\n\n    applyDamage(damage) {\n        this.hitPoints.decrement(damage);\n    }\n\n    toggleProfile(state) {\n        let self = this;\n\n        self.profileDialogOpen = state;\n\n        if (self.profileToggleCallback) self.profileToggleCallback(state);\n    }\n\n    toggleInventory(state) {\n        let self = this;\n\n        self.inventoryOpen = state;\n\n        if (self.inventoryToggleCallback) self.inventoryToggleCallback(state);\n    }\n\n    toggleWarp(state) {\n        let self = this;\n\n        self.warpOpen = state;\n\n        if (self.warpToggleCallback) self.warpToggleCallback(state);\n    }\n\n    getMana() {\n        return this.mana.getMana();\n    }\n\n    getMaxMana() {\n        return this.mana.getMaxMana();\n    }\n\n    getHitPoints() {\n        return this.hitPoints.getHitPoints();\n    }\n\n    getMaxHitPoints() {\n        return this.hitPoints.getMaxHitPoints();\n    }\n\n    getTutorial() {\n        return this.quests.getQuest(Modules.Quests.Introduction);\n    }\n\n    /**\n     * Setters\n     */\n\n    setArmour(id, count, ability, abilityLevel) {\n        let self = this;\n\n        if (!id) return;\n\n        self.armour = new Armour(\n            Items.idToString(id),\n            id,\n            count,\n            ability,\n            abilityLevel\n        );\n    }\n\n    breakWeapon() {\n        let self = this;\n\n        self.notify('Your weapon has been broken.');\n\n        self.setWeapon(-1, 0, 0, 0);\n\n        self.sendEquipment();\n    }\n\n    setWeapon(id, count, ability, abilityLevel) {\n        let self = this;\n\n        if (!id) return;\n\n        self.weapon = new Weapon(\n            Items.idToString(id),\n            id,\n            count,\n            ability,\n            abilityLevel\n        );\n\n        if (self.weapon.ranged) self.attackRange = 7;\n    }\n\n    setPendant(id, count, ability, abilityLevel) {\n        let self = this;\n\n        if (!id) return;\n\n        self.pendant = new Pendant(\n            Items.idToString(id),\n            id,\n            count,\n            ability,\n            abilityLevel\n        );\n    }\n\n    setRing(id, count, ability, abilityLevel) {\n        let self = this;\n\n        if (!id) return;\n\n        self.ring = new Ring(\n            Items.idToString(id),\n            id,\n            count,\n            ability,\n            abilityLevel\n        );\n    }\n\n    setBoots(id, count, ability, abilityLevel) {\n        let self = this;\n\n        if (!id) return;\n\n        self.boots = new Boots(\n            Items.idToString(id),\n            id,\n            count,\n            ability,\n            abilityLevel\n        );\n    }\n\n    guessPosition(x, y) {\n        this.potentialPosition = {\n            x: x,\n            y: y\n        };\n    }\n\n    setPosition(x, y) {\n        let self = this;\n\n        if (self.dead) return;\n\n        if (self.world.map.isOutOfBounds(x, y)) {\n            x = 50;\n            y = 89;\n        }\n\n        super.setPosition(x, y);\n\n        self.sendToAdjacentRegions(\n            self.region,\n            new Messages.Movement(Packets.MovementOpcode.Move, {\n                id: self.instance,\n                x: x,\n                y: y,\n                forced: false,\n                teleport: false\n            }),\n            self.instance\n        );\n    }\n\n    setOrientation(orientation) {\n        let self = this;\n\n        self.orientation = orientation;\n\n        if (self.orientationCallback)\n            // Will be necessary in the future.\n            self.orientationCallback;\n    }\n\n    setFuturePosition(x, y) {\n        /**\n         * Most likely will be used for anti-cheating methods\n         * of calculating the actual time and duration for the\n         * displacement.\n         */\n\n        this.futurePosition = {\n            x: x,\n            y: y\n        };\n    }\n\n    loadRegion(regionId) {\n        this.regionsLoaded.push(regionId);\n    }\n\n    hasLoadedRegion(region) {\n        return this.regionsLoaded.indexOf(region) > -1;\n    }\n\n    hasLoadedLight(light) {\n        return this.lightsLoaded.indexOf(light) > -1;\n    }\n\n    timeout() {\n        let self = this;\n\n        self.connection.sendUTF8('timeout');\n        self.connection.close('Player timed out.');\n    }\n\n    refreshTimeout() {\n        let self = this;\n\n        clearTimeout(self.disconnectTimeout);\n\n        self.disconnectTimeout = setTimeout(() => {\n            self.timeout();\n        }, self.timeoutDuration);\n    }\n\n    /**\n     * Getters\n     */\n\n    hasArmour() {\n        return (\n            this.armour && this.armour.name !== 'null' && this.armour.id !== -1\n        );\n    }\n\n    hasWeapon() {\n        return (\n            this.weapon && this.weapon.name !== 'null' && this.weapon.id !== -1\n        );\n    }\n\n    hasBreakableWeapon() {\n        return this.weapon && this.weapon.breakable;\n    }\n\n    hasPendant() {\n        return (\n            this.pendant &&\n            this.pendant.name !== 'null' &&\n            this.pendant.id !== -1\n        );\n    }\n\n    hasRing() {\n        return this.ring && this.ring.name !== 'null' && this.ring.id !== -1;\n    }\n\n    hasBoots() {\n        return this.boots && this.boots.name !== 'null' && this.boots.id !== -1;\n    }\n\n    hasMaxHitPoints() {\n        return this.getHitPoints() >= this.hitPoints.getMaxHitPoints();\n    }\n\n    hasMaxMana() {\n        return this.mana.getMana() >= this.mana.getMaxMana();\n    }\n\n    hasSpecialAttack() {\n        return (\n            this.weapon &&\n            (this.weapon.hasCritical() ||\n                this.weapon.hasExplosive() ||\n                this.weapon.hasStun())\n        );\n    }\n\n    hasGuild() {}\n\n    canBeStunned() {\n        return true;\n    }\n\n    getState() {\n        let self = this;\n\n        return {\n            type: self.type,\n            id: self.instance,\n            name: self.username,\n            x: self.x,\n            y: self.y,\n            rights: self.rights,\n            level: self.level,\n            pvp: self.pvp,\n            pvpKills: self.pvpKills,\n            pvpDeaths: self.pvpDeaths,\n            orientation: self.orientation,\n            hitPoints: self.hitPoints.getData(),\n            mana: self.mana.getData(),\n            armour: self.armour.getData(),\n            weapon: self.weapon.getData(),\n            pendant: self.pendant.getData(),\n            ring: self.ring.getData(),\n            boots: self.boots.getData()\n        };\n    }\n\n    getRemoteAddress() {\n        return this.connection.socket.conn.remoteAddress;\n    }\n\n    getSpawn() {\n        let self = this,\n            position;\n\n        /**\n         * Here we will implement functions from quests and\n         * other special events and determine a spawn point.\n         */\n\n        return self.finishedTutorial() ? { x: 324, y: 86 } : { x: 17, y: 557 };\n    }\n\n    getHit(target) {\n        let self = this;\n\n        let defaultDamage = Formulas.getDamage(self, target),\n            isSpecial =\n                100 - self.weapon.abilityLevel < Utils.randomInt(0, 100);\n\n        if (!self.hasSpecialAttack() || !isSpecial)\n            return new Hit(Modules.Hits.Damage, defaultDamage);\n\n        switch (self.weapon.ability) {\n            case Modules.Enchantment.Critical:\n                /**\n                 * Still experimental, not sure how likely it is that you're\n                 * gonna do a critical strike. I just do not want it getting\n                 * out of hand, it's easier to buff than to nerf..\n                 */\n\n                let multiplier = 1.0 + self.weapon.abilityLevel,\n                    damage = defaultDamage * multiplier;\n\n                return new Hit(Modules.Hits.Critical, damage);\n\n            case Modules.Enchantment.Stun:\n                return new Hit(Modules.Hits.Stun, defaultDamage);\n\n            case Modules.Enchantment.Explosive:\n                return new Hit(Modules.Hits.Explosive, defaultDamage);\n        }\n    }\n\n    isMuted() {\n        let self = this,\n            time = new Date().getTime();\n\n        return self.mute - time > 0;\n    }\n\n    isRanged() {\n        return this.weapon && this.weapon.isRanged();\n    }\n\n    isDead() {\n        return this.getHitPoints() < 1 || this.dead;\n    }\n\n    /**\n     * Miscellaneous\n     */\n\n    send(message) {\n        this.world.push(Packets.PushOpcode.Player, {\n            player: this,\n            message: message\n        });\n    }\n\n    sendToRegion(message) {\n        this.world.push(Packets.PushOpcode.Region, {\n            regionId: this.region,\n            message: message\n        });\n    }\n\n    sendToAdjacentRegions(regionId, message, ignoreId) {\n        this.world.push(Packets.PushOpcode.Regions, {\n            regionId: regionId,\n            message: message,\n            ignoreId: ignoreId\n        });\n    }\n\n    sendEquipment() {\n        let self = this,\n            info = {\n                armour: self.armour.getData(),\n                weapon: self.weapon.getData(),\n                pendant: self.pendant.getData(),\n                ring: self.ring.getData(),\n                boots: self.boots.getData()\n            };\n\n        self.send(new Messages.Equipment(Packets.EquipmentOpcode.Batch, info));\n    }\n\n    sendToSpawn() {\n        let self = this,\n            position = self.getSpawn();\n\n        self.x = position.x;\n        self.y = position.y;\n    }\n\n    sync(all) {\n        let self = this;\n\n        /**\n         * Function to be used for syncing up health,\n         * mana, exp, and other letiables\n         */\n\n        if (!self.hitPoints || !self.mana) return;\n\n        let info = {\n            id: self.instance,\n            hitPoints: self.getHitPoints(),\n            maxHitPoints: self.getMaxHitPoints(),\n            mana: self.mana.getMana(),\n            maxMana: self.mana.getMaxMana(),\n            experience: self.experience,\n            level: self.level,\n            armour: self.armour.getString(),\n            weapon: self.weapon.getData()\n        };\n\n        self.sendToAdjacentRegions(\n            self.region,\n            new Messages.Sync(info),\n            all ? null : self.instance\n        );\n\n        self.save();\n    }\n\n    notify(message) {\n        let self = this;\n\n        if (!message) return;\n\n        self.send(\n            new Messages.Notification(Packets.NotificationOpcode.Text, message)\n        );\n    }\n\n    stopMovement(force) {\n        /**\n         * Forcefully stopping the player will simply halt\n         * them in between tiles. Should only be used if they are\n         * being transported elsewhere.\n         */\n\n        let self = this;\n\n        self.send(\n            new Messages.Movement(Packets.MovementOpcode.Stop, {\n                instance: self.instance,\n                force: force\n            })\n        );\n    }\n\n    finishedTutorial() {\n        let self = this;\n\n        if (!self.quests || config.offlineMode) return true;\n\n        return self.quests.getQuest(0).isFinished() || !config.tutorialEnabled;\n    }\n\n    checkRegions() {\n        let self = this;\n\n        if (!self.regionPosition) return;\n\n        let diffX = Math.abs(self.regionPosition[0] - self.x),\n            diffY = Math.abs(self.regionPosition[1] - self.y);\n\n        if (diffX >= 10 || diffY >= 10) {\n            self.regionPosition = [self.x, self.y];\n\n            if (self.regionCallback) self.regionCallback();\n        }\n    }\n\n    movePlayer() {\n        let self = this;\n\n        /**\n         * Server-sided callbacks towards movement should\n         * not be able to be overwritten. In the case that\n         * this is used (for Quests most likely) the server must\n         * check that no hacker removed the constraint in the client-side.\n         * If they are not within the bounds, apply the according punishment.\n         */\n\n        self.send(new Messages.Movement(Packets.MovementOpcode.Started));\n    }\n\n    walkRandomly() {\n        let self = this;\n\n        setInterval(() => {\n            self.setPosition(\n                self.x + Utils.randomInt(-5, 5),\n                self.y + Utils.randomInt(-5, 5)\n            );\n        }, 2000);\n    }\n\n    killCharacter(character) {\n        let self = this;\n\n        if (self.killCallback) self.killCallback(character);\n    }\n\n    save() {\n        let self = this;\n\n        if (config.offlineMode || self.isGuest) return;\n\n        if ((!self.questsLoaded || !self.achievementsLoaded) && !self.new)\n            return;\n\n        self.database.creator.save(self);\n    }\n\n    inTutorial() {\n        return this.world.map.inTutorialArea(this);\n    }\n\n    hasAggressionTimer() {\n        return new Date().getTime() - this.lastRegionChange < 1200000; // 20 Minutes\n    }\n\n    onOrientation(callback) {\n        this.orientationCallback = callback;\n    }\n\n    onRegion(callback) {\n        this.regionCallback = callback;\n    }\n\n    onAttack(callback) {\n        this.attackCallback = callback;\n    }\n\n    onHit(callback) {\n        this.hitCallback = callback;\n    }\n\n    onKill(callback) {\n        this.killCallback = callback;\n    }\n\n    onDeath(callback) {\n        this.deathCallback = callback;\n    }\n\n    onTalkToNPC(callback) {\n        this.npcTalkCallback = callback;\n    }\n\n    onDoor(callback) {\n        this.doorCallback = callback;\n    }\n\n    onProfile(callback) {\n        this.profileToggleCallback = callback;\n    }\n\n    onInventory(callback) {\n        this.inventoryToggleCallback = callback;\n    }\n\n    onWarp(callback) {\n        this.warpToggleCallback = callback;\n    }\n\n    onReady(callback) {\n        this.readyCallback = callback;\n    }\n}\n\nmodule.exports = Player;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/player.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 679,
    "kind": "variable",
    "name": "Character",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Character",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 680,
    "kind": "class",
    "name": "Player",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "interface": false,
    "extends": [
      "Character"
    ],
    "ignore": true
  },
  {
    "__docId__": 681,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#load",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 683,
    "kind": "method",
    "name": "loadInventory",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#loadInventory",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "loadBank",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#loadBank",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "loadQuests",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#loadQuests",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "intro",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#intro",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "verifyRights",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#verifyRights",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "addExperience",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#addExperience",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [
      {
        "name": "exp",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "heal",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#heal",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "healHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#healHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "healManaPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#healManaPoints",
    "access": "public",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "eat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#eat",
    "access": "public",
    "description": null,
    "lineNumber": 405,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "equip",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#equip",
    "access": "public",
    "description": null,
    "lineNumber": 414,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "updateRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updateRegion",
    "access": "public",
    "description": null,
    "lineNumber": 478,
    "undocument": true,
    "params": [
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "isInvisible",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#isInvisible",
    "access": "public",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "formatInvisibles",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#formatInvisibles",
    "access": "public",
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "canEquip",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#canEquip",
    "access": "public",
    "description": null,
    "lineNumber": 495,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "die",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#die",
    "access": "public",
    "description": null,
    "lineNumber": 509,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "teleport",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#teleport",
    "access": "public",
    "description": null,
    "lineNumber": 519,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "isDoor",
        "types": [
          "*"
        ]
      },
      {
        "name": "animate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "updatePVP",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updatePVP",
    "access": "public",
    "description": null,
    "lineNumber": 544,
    "undocument": true,
    "params": [
      {
        "name": "pvp",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "updateOverlay",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updateOverlay",
    "access": "public",
    "description": null,
    "lineNumber": 561,
    "undocument": true,
    "params": [
      {
        "name": "overlay",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "updateCamera",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updateCamera",
    "access": "public",
    "description": null,
    "lineNumber": 580,
    "undocument": true,
    "params": [
      {
        "name": "camera",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "updateMusic",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updateMusic",
    "access": "public",
    "description": null,
    "lineNumber": 604,
    "undocument": true,
    "params": [
      {
        "name": "song",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "revertPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#revertPoints",
    "access": "public",
    "description": null,
    "lineNumber": 612,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "applyDamage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#applyDamage",
    "access": "public",
    "description": null,
    "lineNumber": 621,
    "undocument": true,
    "params": [
      {
        "name": "damage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "toggleProfile",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#toggleProfile",
    "access": "public",
    "description": null,
    "lineNumber": 625,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "toggleInventory",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#toggleInventory",
    "access": "public",
    "description": null,
    "lineNumber": 633,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "toggleWarp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#toggleWarp",
    "access": "public",
    "description": null,
    "lineNumber": 641,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "getMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getMana",
    "access": "public",
    "description": null,
    "lineNumber": 649,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "getMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 653,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "getHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 657,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "getMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 661,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "getTutorial",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getTutorial",
    "access": "public",
    "description": null,
    "lineNumber": 665,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "setArmour",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setArmour",
    "access": "public",
    "description": "Setters",
    "lineNumber": 673,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "breakWeapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#breakWeapon",
    "access": "public",
    "description": null,
    "lineNumber": 687,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "setWeapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setWeapon",
    "access": "public",
    "description": null,
    "lineNumber": 697,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "setPendant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setPendant",
    "access": "public",
    "description": null,
    "lineNumber": 713,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "setRing",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setRing",
    "access": "public",
    "description": null,
    "lineNumber": 727,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "setBoots",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setBoots",
    "access": "public",
    "description": null,
    "lineNumber": 741,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "guessPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#guessPosition",
    "access": "public",
    "description": null,
    "lineNumber": 755,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 721,
    "kind": "member",
    "name": "potentialPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#potentialPosition",
    "access": "public",
    "description": null,
    "lineNumber": 756,
    "undocument": true,
    "type": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "setPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setPosition",
    "access": "public",
    "description": null,
    "lineNumber": 762,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "setOrientation",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setOrientation",
    "access": "public",
    "description": null,
    "lineNumber": 787,
    "undocument": true,
    "params": [
      {
        "name": "orientation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "setFuturePosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setFuturePosition",
    "access": "public",
    "description": null,
    "lineNumber": 797,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 725,
    "kind": "member",
    "name": "futurePosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#futurePosition",
    "access": "public",
    "description": "Most likely will be used for anti-cheating methods\nof calculating the actual time and duration for the\ndisplacement.",
    "lineNumber": 804,
    "type": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "loadRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#loadRegion",
    "access": "public",
    "description": null,
    "lineNumber": 810,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "hasLoadedRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasLoadedRegion",
    "access": "public",
    "description": null,
    "lineNumber": 814,
    "undocument": true,
    "params": [
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "hasLoadedLight",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasLoadedLight",
    "access": "public",
    "description": null,
    "lineNumber": 818,
    "undocument": true,
    "params": [
      {
        "name": "light",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "timeout",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#timeout",
    "access": "public",
    "description": null,
    "lineNumber": 822,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "refreshTimeout",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#refreshTimeout",
    "access": "public",
    "description": null,
    "lineNumber": 829,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "hasArmour",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasArmour",
    "access": "public",
    "description": "Getters",
    "lineNumber": 843,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "hasWeapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasWeapon",
    "access": "public",
    "description": null,
    "lineNumber": 849,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "hasBreakableWeapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasBreakableWeapon",
    "access": "public",
    "description": null,
    "lineNumber": 855,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "hasPendant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasPendant",
    "access": "public",
    "description": null,
    "lineNumber": 859,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "hasRing",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasRing",
    "access": "public",
    "description": null,
    "lineNumber": 867,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "hasBoots",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasBoots",
    "access": "public",
    "description": null,
    "lineNumber": 871,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "hasMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 875,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "hasMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 879,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "hasSpecialAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasSpecialAttack",
    "access": "public",
    "description": null,
    "lineNumber": 883,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "hasGuild",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasGuild",
    "access": "public",
    "description": null,
    "lineNumber": 892,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "canBeStunned",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#canBeStunned",
    "access": "public",
    "description": null,
    "lineNumber": 894,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "getState",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getState",
    "access": "public",
    "description": null,
    "lineNumber": 898,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"id\": *, \"name\": *, \"x\": *, \"y\": *, \"rights\": *, \"level\": *, \"pvp\": *, \"pvpKills\": *, \"pvpDeaths\": *, \"orientation\": *, \"hitPoints\": *, \"mana\": *, \"armour\": *, \"weapon\": *, \"pendant\": *, \"ring\": *, \"boots\": *}"
      ]
    }
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "getRemoteAddress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getRemoteAddress",
    "access": "public",
    "description": null,
    "lineNumber": 923,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "getSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 927,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "getHit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getHit",
    "access": "public",
    "description": null,
    "lineNumber": 939,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "isMuted",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#isMuted",
    "access": "public",
    "description": null,
    "lineNumber": 970,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 977,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "isDead",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#isDead",
    "access": "public",
    "description": null,
    "lineNumber": 981,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "send",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#send",
    "access": "public",
    "description": "Miscellaneous",
    "lineNumber": 989,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "sendToRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sendToRegion",
    "access": "public",
    "description": null,
    "lineNumber": 996,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 751,
    "kind": "method",
    "name": "sendToAdjacentRegions",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sendToAdjacentRegions",
    "access": "public",
    "description": null,
    "lineNumber": 1003,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoreId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 752,
    "kind": "method",
    "name": "sendEquipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sendEquipment",
    "access": "public",
    "description": null,
    "lineNumber": 1011,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 753,
    "kind": "method",
    "name": "sendToSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sendToSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 1024,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "sync",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sync",
    "access": "public",
    "description": null,
    "lineNumber": 1032,
    "undocument": true,
    "params": [
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 755,
    "kind": "method",
    "name": "notify",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#notify",
    "access": "public",
    "description": null,
    "lineNumber": 1063,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 756,
    "kind": "method",
    "name": "stopMovement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#stopMovement",
    "access": "public",
    "description": null,
    "lineNumber": 1073,
    "undocument": true,
    "params": [
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 757,
    "kind": "method",
    "name": "finishedTutorial",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#finishedTutorial",
    "access": "public",
    "description": null,
    "lineNumber": 1090,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "checkRegions",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#checkRegions",
    "access": "public",
    "description": null,
    "lineNumber": 1098,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "movePlayer",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#movePlayer",
    "access": "public",
    "description": null,
    "lineNumber": 1113,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 760,
    "kind": "method",
    "name": "walkRandomly",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#walkRandomly",
    "access": "public",
    "description": null,
    "lineNumber": 1127,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 761,
    "kind": "method",
    "name": "killCharacter",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#killCharacter",
    "access": "public",
    "description": null,
    "lineNumber": 1138,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 762,
    "kind": "method",
    "name": "save",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#save",
    "access": "public",
    "description": null,
    "lineNumber": 1144,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "inTutorial",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#inTutorial",
    "access": "public",
    "description": null,
    "lineNumber": 1155,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 764,
    "kind": "method",
    "name": "hasAggressionTimer",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasAggressionTimer",
    "access": "public",
    "description": null,
    "lineNumber": 1159,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "method",
    "name": "onOrientation",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onOrientation",
    "access": "public",
    "description": null,
    "lineNumber": 1163,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "orientationCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#orientationCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1164,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 767,
    "kind": "method",
    "name": "onRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onRegion",
    "access": "public",
    "description": null,
    "lineNumber": 1167,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "regionCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#regionCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "onAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onAttack",
    "access": "public",
    "description": null,
    "lineNumber": 1171,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 770,
    "kind": "member",
    "name": "attackCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#attackCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1172,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "onHit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onHit",
    "access": "public",
    "description": null,
    "lineNumber": 1175,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 772,
    "kind": "member",
    "name": "hitCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hitCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1176,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "onKill",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onKill",
    "access": "public",
    "description": null,
    "lineNumber": 1179,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 774,
    "kind": "member",
    "name": "killCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#killCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1180,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "onDeath",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onDeath",
    "access": "public",
    "description": null,
    "lineNumber": 1183,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 776,
    "kind": "member",
    "name": "deathCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#deathCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1184,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 777,
    "kind": "method",
    "name": "onTalkToNPC",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onTalkToNPC",
    "access": "public",
    "description": null,
    "lineNumber": 1187,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 778,
    "kind": "member",
    "name": "npcTalkCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#npcTalkCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1188,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "onDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onDoor",
    "access": "public",
    "description": null,
    "lineNumber": 1191,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 780,
    "kind": "member",
    "name": "doorCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#doorCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1192,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "onProfile",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onProfile",
    "access": "public",
    "description": null,
    "lineNumber": 1195,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 782,
    "kind": "member",
    "name": "profileToggleCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#profileToggleCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1196,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "onInventory",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onInventory",
    "access": "public",
    "description": null,
    "lineNumber": 1199,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 784,
    "kind": "member",
    "name": "inventoryToggleCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#inventoryToggleCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1200,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "onWarp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onWarp",
    "access": "public",
    "description": null,
    "lineNumber": 1203,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 786,
    "kind": "member",
    "name": "warpToggleCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#warpToggleCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1204,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "onReady",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onReady",
    "access": "public",
    "description": null,
    "lineNumber": 1207,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 788,
    "kind": "member",
    "name": "readyCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#readyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1208,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 789,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "content": "/* global module */\n\nlet Points = require('./points');\n\nclass HitPoints extends Points {\n    constructor(hitPoints, maxHitPoints) {\n        super(hitPoints, maxHitPoints);\n    }\n\n    setHitPoints(hitPoints) {\n        let self = this;\n\n        super.setPoints(hitPoints);\n\n        if (self.hitPointsCallback) self.hitPointsCallback();\n    }\n\n    setMaxHitPoints(maxHitPoints) {\n        let self = this;\n\n        super.setMaxPoints(maxHitPoints);\n\n        if (self.maxHitPointsCallback) self.maxHitPointsCallback();\n    }\n\n    getHitPoints() {\n        return this.points;\n    }\n\n    getMaxHitPoints() {\n        return this.maxPoints;\n    }\n\n    onHitPoints(callback) {\n        return (this.hitPointsCallback = callback);\n    }\n\n    onMaxHitPoints(callback) {\n        return (this.maxHitPointsCallback = callback);\n    }\n}\n\nmodule.exports = HitPoints;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 790,
    "kind": "variable",
    "name": "Points",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~Points",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 791,
    "kind": "class",
    "name": "HitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Points"
    ],
    "ignore": true
  },
  {
    "__docId__": 792,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "setHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#setHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "hitPoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "setMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#setMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "maxHitPoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "getHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#getHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "getMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#getMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "onHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#onHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "onMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#onMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "content": "/* global module */\n\nlet Points = require('./points');\n\nclass Mana extends Points {\n    constructor(mana, maxMana) {\n        super(mana, maxMana);\n    }\n\n    setMana(mana) {\n        let self = this;\n\n        self.points = mana;\n\n        if (self.manaCallback) self.manaCallback();\n    }\n\n    setMaxMana(maxMana) {\n        let self = this;\n\n        self.maxPoints = maxMana;\n\n        if (self.maxManaCallback) self.maxManaCallback();\n    }\n\n    getMana() {\n        return this.points;\n    }\n\n    getMaxMana() {\n        return this.maxPoints;\n    }\n\n    onMana(callback) {\n        this.manaCallback = callback;\n    }\n\n    onMaxMana(callback) {\n        this.maxManaCallback = callback;\n    }\n}\n\nmodule.exports = Mana;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 800,
    "kind": "variable",
    "name": "Points",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Points",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 801,
    "kind": "class",
    "name": "Mana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Points"
    ],
    "ignore": true
  },
  {
    "__docId__": 802,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "setMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#setMana",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "mana",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "setMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#setMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "maxMana",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 805,
    "kind": "method",
    "name": "getMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#getMana",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 806,
    "kind": "method",
    "name": "getMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#getMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 807,
    "kind": "method",
    "name": "onMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#onMana",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 808,
    "kind": "member",
    "name": "manaCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#manaCallback",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 809,
    "kind": "method",
    "name": "onMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#onMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 810,
    "kind": "member",
    "name": "maxManaCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#maxManaCallback",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 811,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/points/points.js",
    "content": "/* global module */\n\nclass Points {\n    constructor(points, maxPoints) {\n        let self = this;\n\n        self.points = points;\n        self.maxPoints = maxPoints;\n    }\n\n    heal(amount) {\n        let self = this;\n\n        self.setPoints(self.points + amount);\n\n        if (self.healCallback) self.healCallback();\n    }\n\n    increment(amount) {\n        this.points += amount;\n    }\n\n    decrement(amount) {\n        this.points -= amount;\n    }\n\n    setPoints(points) {\n        let self = this;\n\n        self.points = points;\n\n        if (self.points >= self.maxPoints) self.points = self.maxPoints;\n    }\n\n    setMaxPoints(maxPoints) {\n        this.maxPoints = maxPoints;\n    }\n\n    getData() {\n        return [this.points, this.maxPoints];\n    }\n\n    onHeal(callback) {\n        this.healCallback = callback;\n    }\n}\n\nmodule.exports = Points;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/points/points.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 812,
    "kind": "class",
    "name": "Points",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/points/points.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 813,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "heal",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#heal",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "increment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#increment",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 816,
    "kind": "member",
    "name": "points",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#points",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "decrement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#decrement",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "setPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#setPoints",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "points",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "setMaxPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#setMaxPoints",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "maxPoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 821,
    "kind": "member",
    "name": "maxPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#maxPoints",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#getData",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 823,
    "kind": "method",
    "name": "onHeal",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#onHeal",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 824,
    "kind": "member",
    "name": "healCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#healCallback",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 825,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "content": "/* global module */\n\nlet Quest = require('../quest'),\n    Packets = require('../../../../../../network/packets'),\n    Messages = require('../../../../../../network/messages');\n\nclass BulkySituation extends Quest {\n    constructor(player, data) {\n        super(player, data);\n\n        let self = this;\n\n        self.player = player;\n        self.data = data;\n\n        self.lastNPC = null;\n    }\n\n    load(stage) {\n        let self = this;\n\n        super.load(stage);\n\n        if (self.stage > 9998) return;\n\n        self.loadCallbacks();\n    }\n\n    loadCallbacks() {\n        let self = this;\n\n        self.onNPCTalk(npc => {\n            if (self.hasRequirement()) {\n                self.progress('item');\n                return;\n            }\n\n            let conversation = self.getConversation(npc.id);\n\n            self.lastNPC = npc;\n\n            self.player.send(\n                new Messages.NPC(Packets.NPCOpcode.Talk, {\n                    id: npc.instance,\n                    text: npc.talk(conversation)\n                })\n            );\n\n            if (npc.talkIndex === 0) self.progress('talk');\n        });\n    }\n\n    progress(type) {\n        let self = this,\n            task = self.data.task[self.stage];\n\n        if (!task || task !== type) return;\n\n        if (self.stage === self.data.stages) {\n            self.finish();\n            return;\n        }\n\n        switch (type) {\n            case 'item':\n                self.player.inventory.remove(self.getItem(), 1);\n\n                break;\n        }\n\n        self.resetTalkIndex(self.lastNPC);\n\n        self.stage++;\n\n        self.player.send(\n            new Messages.Quest(Packets.QuestOpcode.Progress, {\n                id: self.id,\n                stage: self.stage,\n                isQuest: true\n            })\n        );\n\n        self.update();\n    }\n\n    finish() {\n        super.finish();\n    }\n\n    hasRequirement() {\n        return (\n            this.getTask() === 'item' &&\n            this.player.inventory.contains(this.getItem())\n        );\n    }\n}\n\nmodule.exports = BulkySituation;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 826,
    "kind": "variable",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 827,
    "kind": "class",
    "name": "BulkySituation",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Quest"
    ],
    "ignore": true
  },
  {
    "__docId__": 828,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#load",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "loadCallbacks",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#loadCallbacks",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "progress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#progress",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 832,
    "kind": "method",
    "name": "finish",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#finish",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 833,
    "kind": "method",
    "name": "hasRequirement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#hasRequirement",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 834,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "content": "/* global module */\n\nlet Quest = require('../quest'),\n    Packets = require('../../../../../../network/packets'),\n    Messages = require('../../../../../../network/messages');\n\nclass Introduction extends Quest {\n    constructor(player, data) {\n        super(player, data);\n\n        let self = this;\n\n        self.player = player;\n        self.data = data;\n\n        self.lastNPC = null;\n    }\n\n    load(stage) {\n        let self = this;\n\n        if (!self.player.inTutorial()) {\n            self.setStage(9999);\n            self.update();\n            return;\n        }\n\n        super.load(stage);\n\n        self.updatePointers();\n        self.toggleChat();\n\n        if (self.stage > 9998) return;\n\n        self.loadCallbacks();\n    }\n\n    loadCallbacks() {\n        let self = this;\n\n        self.onNPCTalk(npc => {\n            let conversation = self.getConversation(npc.id);\n\n            self.lastNPC = npc;\n\n            self.player.send(\n                new Messages.NPC(Packets.NPCOpcode.Talk, {\n                    id: npc.instance,\n                    text: npc.talk(conversation)\n                })\n            );\n\n            if (npc.talkIndex === 0) self.progress('talk');\n        });\n\n        self.player.onReady(() => {\n            self.updatePointers();\n        });\n\n        self.player.onDoor((destX, destY) => {\n            if (self.getTask() !== 'door') {\n                self.player.notify('You cannot go through this door yet.');\n                return;\n            }\n\n            if (!self.verifyDoor(self.player.x, self.player.y))\n                self.player.notify('You are not supposed to go through here.');\n            else {\n                self.progress('door');\n                self.player.teleport(destX, destY, false);\n            }\n        });\n\n        self.player.onProfile(isOpen => {\n            if (isOpen) self.progress('click');\n        });\n\n        self.player.onInventory(isOpen => {\n            if (isOpen) self.progress('click');\n        });\n\n        self.player.onWarp(isOpen => {\n            if (isOpen) self.progress('click');\n        });\n\n        self.player.onKill(character => {\n            if (self.data.kill[self.stage] === character.id)\n                self.progress('kill');\n        });\n    }\n\n    progress(type) {\n        let self = this,\n            task = self.data.task[self.stage];\n\n        if (!task || task !== type) return;\n\n        if (self.stage === self.data.stages) {\n            self.finish();\n            return;\n        }\n\n        switch (type) {\n            case 'talk':\n                if (self.stage === 6) self.player.updateRegion();\n\n                break;\n\n            case 'door':\n                if (self.stage === 7) {\n                    self.player.inventory.add({\n                        id: 248,\n                        count: 1,\n                        ability: -1,\n                        abilityLevel: -1\n                    });\n                } else if (self.stage === 15) {\n                    self.player.inventory.add({\n                        id: 87,\n                        count: 1,\n                        ability: -1,\n                        abilityLevel: -1\n                    });\n                }\n\n                break;\n        }\n\n        self.stage++;\n\n        self.clearPointers();\n        self.resetTalkIndex(self.lastNPC);\n\n        self.update();\n        self.updatePointers();\n\n        self.player.send(\n            new Messages.Quest(Packets.QuestOpcode.Progress, {\n                id: self.id,\n                stage: self.stage,\n                isQuest: true\n            })\n        );\n    }\n\n    isFinished() {\n        return super.isFinished() || !this.player.inTutorial();\n    }\n\n    toggleChat() {\n        this.player.canTalk = !this.player.canTalk;\n    }\n\n    setStage(stage) {\n        let self = this;\n\n        super.setStage(stage);\n\n        self.clearPointers();\n    }\n\n    finish() {\n        let self = this;\n\n        self.toggleChat();\n        super.finish();\n    }\n\n    hasDoorUnlocked(door) {\n        let self = this;\n\n        switch (door.id) {\n            case 0:\n                return self.stage > 5;\n        }\n\n        return false;\n    }\n\n    verifyDoor(destX, destY) {\n        let self = this,\n            doorData = self.data.doors[self.stage];\n\n        if (!doorData) return;\n\n        return doorData[0] === destX && doorData[1] === destY;\n    }\n\n    onFinishedLoading(callback) {\n        this.finishedCallback = callback;\n    }\n}\n\nmodule.exports = Introduction;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 835,
    "kind": "variable",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 836,
    "kind": "class",
    "name": "Introduction",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Quest"
    ],
    "ignore": true
  },
  {
    "__docId__": 837,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 838,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#load",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "loadCallbacks",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#loadCallbacks",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 840,
    "kind": "method",
    "name": "progress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#progress",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "isFinished",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#isFinished",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 842,
    "kind": "method",
    "name": "toggleChat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#toggleChat",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 843,
    "kind": "method",
    "name": "setStage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#setStage",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 844,
    "kind": "method",
    "name": "finish",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#finish",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 845,
    "kind": "method",
    "name": "hasDoorUnlocked",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#hasDoorUnlocked",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "door",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 846,
    "kind": "method",
    "name": "verifyDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#verifyDoor",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [
      {
        "name": "destX",
        "types": [
          "*"
        ]
      },
      {
        "name": "destY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 847,
    "kind": "method",
    "name": "onFinishedLoading",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#onFinishedLoading",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 848,
    "kind": "member",
    "name": "finishedCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#finishedCallback",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 849,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "content": "/* global module */\n\nlet Quest = require('../quest'),\n    Packets = require('../../../../../network/packets');\n\nclass Thelie extends Quest {\n    constructor(player, data) {\n        super(player, data);\n\n        let self = this;\n\n        self.player = player;\n        self.data = data;\n    }\n\n    load(stage) {\n        let self = this;\n\n        super.load(stage);\n    }\n}\n\nmodule.exports = Thelie;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 850,
    "kind": "variable",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 851,
    "kind": "class",
    "name": "Thelie",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "Quest"
    ],
    "ignore": true
  },
  {
    "__docId__": 852,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 853,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 854,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "content": "/* global module */\n\nlet Messages = require('../../../../../network/messages'),\n    Packets = require('../../../../../network/packets'),\n    Utils = require('../../../../../util/utils'),\n    _ = require('underscore');\n\nclass Quest {\n    constructor(player, data) {\n        let self = this;\n\n        self.player = player;\n        self.data = data;\n\n        self.id = data.id;\n        self.name = data.name;\n        self.description = data.description;\n\n        self.stage = 0;\n    }\n\n    load(stage) {\n        let self = this;\n\n        if (!stage) self.update();\n        else self.stage = parseInt(stage);\n    }\n\n    finish() {\n        let self = this;\n\n        if (self.hasItemReward()) {\n            let item = self.getItemReward();\n\n            if (item) {\n                if (self.hasInventorySpace(item.id, item.count))\n                    self.player.inventory.add(item.id, item.count);\n                else {\n                    self.player.notify(\n                        'You do not have enough space in your inventory.'\n                    );\n                    self.player.notify(\n                        'Please make room prior to finishing the quest.'\n                    );\n\n                    return;\n                }\n            }\n        }\n\n        self.setStage(9999);\n\n        self.player.send(\n            new Messages.Quest(Packets.QuestOpcode.Finish, {\n                id: self.id,\n                isQuest: true\n            })\n        );\n\n        self.update();\n    }\n\n    setStage(stage) {\n        let self = this;\n\n        self.stage = stage;\n        self.update();\n    }\n\n    triggerTalk(npc) {\n        let self = this;\n\n        if (self.npcTalkCallback) self.npcTalkCallback(npc);\n    }\n\n    update() {\n        return this.player.save();\n    }\n\n    getConversation(id) {\n        let self = this,\n            conversation = self.data.conversations[id];\n\n        if (!conversation || !conversation[self.stage]) return [''];\n\n        return conversation[self.stage];\n    }\n\n    updatePointers() {\n        let self = this;\n\n        if (!self.data.pointers) return;\n\n        let pointer = self.data.pointers[self.stage];\n\n        if (!pointer) return;\n\n        let opcode = pointer[0];\n\n        if (opcode === 4) {\n            self.player.send(\n                new Messages.Pointer(opcode, {\n                    id: Utils.generateRandomId(),\n                    button: pointer[1]\n                })\n            );\n        } else {\n            self.player.send(\n                new Messages.Pointer(opcode, {\n                    id: Utils.generateRandomId(),\n                    x: pointer[1],\n                    y: pointer[2]\n                })\n            );\n        }\n    }\n\n    forceTalk(npc, message) {\n        let self = this;\n\n        if (!npc) return;\n\n        npc.talkIndex = 0;\n\n        self.player.send(\n            new Messages.NPC(Packets.NPCOpcode.Talk, {\n                id: npc.instance,\n                text: message\n            })\n        );\n    }\n\n    resetTalkIndex(npc) {\n        let self = this;\n\n        /**\n         * Ensures that an NPC does not go off the conversation\n         * index and is resetted in order to start a new chat\n         */\n\n        if (!npc) return;\n\n        npc.talkIndex = 0;\n    }\n\n    clearPointers() {\n        this.player.send(\n            new Messages.Pointer(Packets.PointerOpcode.Remove, {})\n        );\n    }\n\n    onNPCTalk(callback) {\n        this.npcTalkCallback = callback;\n    }\n\n    static hasMob() {\n        return false;\n    }\n\n    hasNPC(id) {\n        return this.data.npcs.indexOf(id) > -1;\n    }\n\n    hasItemReward() {\n        return !!this.data.itemReward;\n    }\n\n    hasInventorySpace(id, count) {\n        return this.player.inventory.canHold(id, count);\n    }\n\n    hasDoorUnlocked(door) {\n        return this.stage > 9998;\n    }\n\n    isFinished() {\n        return this.stage > 9998;\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    getTask() {\n        return this.data.task[this.stage];\n    }\n\n    getItem() {\n        return this.data.itemReq ? this.data.itemReq[this.stage] : null;\n    }\n\n    getStage() {\n        return this.stage;\n    }\n\n    getItemReward() {\n        return this.hasItemReward() ? this.data.itemReward : null;\n    }\n\n    getDescription() {\n        return this.description;\n    }\n\n    getInfo() {\n        return {\n            id: this.getId(),\n            name: this.getName(),\n            description: this.getDescription(),\n            stage: this.getStage(),\n            finished: this.isFinished()\n        };\n    }\n}\n\nmodule.exports = Quest;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 855,
    "kind": "variable",
    "name": "Messages",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Messages",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 856,
    "kind": "class",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 857,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#load",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "finish",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#finish",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "setStage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#setStage",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "triggerTalk",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#triggerTalk",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 862,
    "kind": "method",
    "name": "update",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#update",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 863,
    "kind": "method",
    "name": "getConversation",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getConversation",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 864,
    "kind": "method",
    "name": "updatePointers",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#updatePointers",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 865,
    "kind": "method",
    "name": "forceTalk",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#forceTalk",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 866,
    "kind": "method",
    "name": "resetTalkIndex",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#resetTalkIndex",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "clearPointers",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#clearPointers",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 868,
    "kind": "method",
    "name": "onNPCTalk",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#onNPCTalk",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 869,
    "kind": "member",
    "name": "npcTalkCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#npcTalkCallback",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 870,
    "kind": "method",
    "name": "hasMob",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest.hasMob",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 871,
    "kind": "method",
    "name": "hasNPC",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#hasNPC",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 872,
    "kind": "method",
    "name": "hasItemReward",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#hasItemReward",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 873,
    "kind": "method",
    "name": "hasInventorySpace",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#hasInventorySpace",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 874,
    "kind": "method",
    "name": "hasDoorUnlocked",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#hasDoorUnlocked",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "door",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 875,
    "kind": "method",
    "name": "isFinished",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#isFinished",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 876,
    "kind": "method",
    "name": "getId",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getId",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 877,
    "kind": "method",
    "name": "getName",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getName",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 878,
    "kind": "method",
    "name": "getTask",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getTask",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "method",
    "name": "getItem",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getItem",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 880,
    "kind": "method",
    "name": "getStage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getStage",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 881,
    "kind": "method",
    "name": "getItemReward",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getItemReward",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 882,
    "kind": "method",
    "name": "getDescription",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getDescription",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 883,
    "kind": "method",
    "name": "getInfo",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getInfo",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"id\": *, \"name\": *, \"description\": *, \"stage\": *, \"finished\": *}"
      ]
    }
  },
  {
    "__docId__": 884,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "content": "/* global module */\n\nlet Modules = require('../../../../util/modules');\n\nclass Trade {\n    constructor(player) {\n        let self = this;\n\n        self.player = player;\n        self.oPlayer = null;\n\n        self.requestee = null;\n\n        self.state = null;\n        self.subState = null;\n\n        self.playerItems = [];\n        self.oPlayerItems = [];\n    }\n\n    start() {\n        let self = this;\n\n        self.oPlayer = self.requestee;\n        self.state = Modules.Trade.Started;\n    }\n\n    stop() {\n        let self = this;\n\n        self.oPlayer = null;\n        self.state = null;\n        self.subState = null;\n        self.requestee = null;\n\n        self.playerItems = [];\n        self.oPlayerItems = [];\n    }\n\n    finalize() {\n        let self = this;\n\n        if (!self.player.inventory.containsSpaces(self.oPlayerItems.length))\n            return;\n\n        for (let i in self.oPlayerItems) {\n            let item = self.oPlayerItems[i];\n\n            if (!item || item.id === -1) continue;\n\n            self.oPlayer.inventory.remove(item.id, item.count, item.index);\n            self.player.inventory.add(item);\n        }\n    }\n\n    select(slot) {\n        let self = this,\n            item = self.player.inventory.slots[slot];\n\n        if (!item || item.id === -1 || self.playerItems.indexOf(item) < 0)\n            return;\n\n        self.playerItems.push(item);\n    }\n\n    request(oPlayer) {\n        let self = this;\n\n        self.requestee = oPlayer;\n\n        if (oPlayer.trade.getRequestee() === self.player.instance) self.start();\n    }\n\n    accept() {\n        let self = this;\n\n        self.subState = Modules.Trade.Accepted;\n\n        if (self.oPlayer.trade.subState === Modules.Trade.Accepted) {\n            self.finalize();\n            self.oPlayer.trade.finalize();\n        }\n    }\n\n    getRequestee() {\n        let self = this;\n\n        if (!self.requestee) return null;\n\n        return self.requestee.instance;\n    }\n\n    decline() {\n        this.stop();\n    }\n\n    isStarted() {\n        return this.state !== null;\n    }\n}\n\nmodule.exports = Trade;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 885,
    "kind": "variable",
    "name": "Modules",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Modules",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 886,
    "kind": "class",
    "name": "Trade",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 887,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 888,
    "kind": "method",
    "name": "start",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#start",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 889,
    "kind": "method",
    "name": "stop",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#stop",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 890,
    "kind": "method",
    "name": "finalize",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#finalize",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 891,
    "kind": "method",
    "name": "select",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#select",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "slot",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 892,
    "kind": "method",
    "name": "request",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#request",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "oPlayer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 893,
    "kind": "method",
    "name": "accept",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#accept",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "getRequestee",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#getRequestee",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "method",
    "name": "decline",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#decline",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 896,
    "kind": "method",
    "name": "isStarted",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#isStarted",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 897,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "content": "/* global module */\n\nlet Modules = require('../../../../util/modules'),\n    Utils = require('../../../../util/utils');\n\nclass Warp {\n    constructor(player) {\n        let self = this;\n\n        self.player = player;\n\n        self.lastWarp = 0;\n        self.warpTimeout = 30000;\n    }\n\n    warp(id) {\n        let self = this;\n\n        if (!self.isCooldown()) {\n            self.player.notify(\n                'You must wait another ' + self.getDuration() + ' to warp.'\n            );\n            return;\n        }\n\n        let data = Modules.Warps[id];\n\n        if (!data) return;\n\n        let name = data[0],\n            x = data[3] ? data[1] + Utils.randomInt(0, 1) : data[1],\n            y = data[3] ? data[2] + Utils.randomInt(0, 1) : data[2],\n            levelRequirement = data[4];\n\n        log.info('Player Rights: ' + self.player.rights);\n\n        if (self.hasRequirement()) {\n            self.player.notify(\n                'You must be at least level ' +\n                    levelRequirement +\n                    ' to warp here!'\n            );\n            return;\n        }\n\n        self.player.teleport(x, y, false, true);\n\n        self.player.notify('You have been warped to ' + name);\n\n        self.lastWarp = new Date().getTime();\n    }\n\n    setLastWarp(lastWarp) {\n        let self = this;\n\n        if (isNaN(lastWarp)) {\n            self.lastWarp = 0;\n            self.player.save();\n        } else self.lastWarp = lastWarp;\n    }\n\n    isCooldown() {\n        return (\n            this.getDifference() > this.warpTimeout || this.player.rights > 1\n        );\n    }\n\n    hasRequirement(levelRequirement) {\n        return this.player.level < levelRequirement || !this.player.rights > 1;\n    }\n\n    getDuration() {\n        let self = this,\n            difference = this.warpTimeout - self.getDifference();\n\n        if (!difference) return '5 minutes';\n\n        return difference > 60000\n            ? Math.ceil(difference / 60000) + ' minutes'\n            : Math.floor(difference / 1000) + ' seconds';\n    }\n\n    getDifference() {\n        return new Date().getTime() - this.lastWarp;\n    }\n}\n\nmodule.exports = Warp;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 898,
    "kind": "variable",
    "name": "Modules",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Modules",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 899,
    "kind": "class",
    "name": "Warp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 900,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "warp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#warp",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "setLastWarp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#setLastWarp",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "lastWarp",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "isCooldown",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#isCooldown",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "hasRequirement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#hasRequirement",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "levelRequirement",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 905,
    "kind": "method",
    "name": "getDuration",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#getDuration",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 906,
    "kind": "method",
    "name": "getDifference",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#getDifference",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 907,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/entity.js",
    "content": "/* global module */\n\nlet Mobs = require('../../util/mobs'),\n    Items = require('../../util/items'),\n    NPCs = require('../../util/npcs');\n\nclass Entity {\n    constructor(id, type, instance, x, y) {\n        let self = this;\n\n        self.id = id;\n        self.type = type;\n        self.instance = instance;\n\n        self.x = x;\n        self.y = y;\n\n        self.oldX = x;\n        self.oldY = y;\n\n        self.combat = null;\n\n        self.dead = false;\n        self.recentRegions = [];\n\n        self.invisibles = {}; // For Entity Instances\n        self.invisiblesIds = []; // For Entity IDs\n    }\n\n    talk() {\n        return null;\n    }\n\n    getCombat() {\n        return null;\n    }\n\n    getDistance(entity) {\n        let self = this,\n            x = Math.abs(self.x - entity.x),\n            y = Math.abs(self.y - entity.y);\n\n        return x > y ? x : y;\n    }\n\n    getCoordDistance(toX, toY) {\n        let self = this,\n            x = Math.abs(self.x - toX),\n            y = Math.abs(self.y - toY);\n\n        return x > y ? x : y;\n    }\n\n    setPosition(x, y) {\n        let self = this;\n\n        self.x = x;\n        self.y = y;\n\n        if (self.setPositionCallback) self.setPositionCallback();\n    }\n\n    updatePosition() {\n        let self = this;\n\n        self.oldX = self.x;\n        self.oldY = self.y;\n    }\n\n    /**\n     * Used for determining whether an entity is\n     * within a given range to another entity.\n     * Especially useful for ranged attacks and whatnot.\n     */\n\n    isNear(entity, distance) {\n        let self = this,\n            dx = Math.abs(self.x - entity.x),\n            dy = Math.abs(self.y - entity.y);\n\n        return dx <= distance && dy <= distance;\n    }\n\n    isAdjacent(entity) {\n        return entity && this.getDistance(entity) < 2;\n    }\n\n    isNonDiagonal(entity) {\n        return (\n            this.isAdjacent(entity) &&\n            !(entity.x !== this.x && entity.y !== this.y)\n        );\n    }\n\n    hasSpecialAttack() {\n        return false;\n    }\n\n    isMob() {\n        return this.type === 'mob';\n    }\n\n    isNPC() {\n        return this.type === 'npc';\n    }\n\n    isItem() {\n        return this.type === 'item';\n    }\n\n    isPlayer() {\n        return this.type === 'player';\n    }\n\n    onSetPosition(callback) {\n        this.setPositionCallback = callback;\n    }\n\n    addInvisible(entity) {\n        this.invisibles[entity.instance] = entity;\n    }\n\n    addInvisibleId(entityId) {\n        this.invisiblesIds.push(entityId);\n    }\n\n    removeInvisible(entity) {\n        delete this.invisibles[entity.instance];\n    }\n\n    removeInvisibleId(entityId) {\n        let self = this,\n            index = self.invisiblesIds.indexOf(entityId);\n\n        if (index > -1) self.invisiblesIds.splice(index, 1);\n    }\n\n    hasInvisible(entity) {\n        return entity.instance in this.invisibles;\n    }\n\n    hasInvisibleId(entityId) {\n        return this.invisiblesIds.indexOf(entityId) > -1;\n    }\n\n    hasInvisibleInstance(instance) {\n        return instance in this.invisibles;\n    }\n\n    getState() {\n        let self = this,\n            string = self.isMob()\n                ? Mobs.idToString(self.id)\n                : self.isNPC()\n                ? NPCs.idToString(self.id)\n                : Items.idToString(self.id),\n            name = self.isMob()\n                ? Mobs.idToName(self.id)\n                : self.isNPC()\n                ? NPCs.idToName(self.id)\n                : Items.idToName(self.id);\n\n        return {\n            type: self.type,\n            id: self.instance,\n            string: string,\n            name: name,\n            x: self.x,\n            y: self.y\n        };\n    }\n}\n\nmodule.exports = Entity;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 908,
    "kind": "variable",
    "name": "Mobs",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Mobs",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/entity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 909,
    "kind": "class",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/entity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 910,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 911,
    "kind": "method",
    "name": "talk",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#talk",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 912,
    "kind": "method",
    "name": "getCombat",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#getCombat",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 913,
    "kind": "method",
    "name": "getDistance",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#getDistance",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 914,
    "kind": "method",
    "name": "getCoordDistance",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#getCoordDistance",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "toX",
        "types": [
          "*"
        ]
      },
      {
        "name": "toY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 915,
    "kind": "method",
    "name": "setPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#setPosition",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 916,
    "kind": "method",
    "name": "updatePosition",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#updatePosition",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 917,
    "kind": "method",
    "name": "isNear",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isNear",
    "access": "public",
    "description": "Used for determining whether an entity is\nwithin a given range to another entity.\nEspecially useful for ranged attacks and whatnot.",
    "lineNumber": 76,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "distance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 918,
    "kind": "method",
    "name": "isAdjacent",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isAdjacent",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "isNonDiagonal",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isNonDiagonal",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 920,
    "kind": "method",
    "name": "hasSpecialAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#hasSpecialAttack",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 921,
    "kind": "method",
    "name": "isMob",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isMob",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 922,
    "kind": "method",
    "name": "isNPC",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isNPC",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 923,
    "kind": "method",
    "name": "isItem",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isItem",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 924,
    "kind": "method",
    "name": "isPlayer",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 925,
    "kind": "method",
    "name": "onSetPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#onSetPosition",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 926,
    "kind": "member",
    "name": "setPositionCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#setPositionCallback",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 927,
    "kind": "method",
    "name": "addInvisible",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#addInvisible",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 928,
    "kind": "method",
    "name": "addInvisibleId",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#addInvisibleId",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "entityId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 929,
    "kind": "method",
    "name": "removeInvisible",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#removeInvisible",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 930,
    "kind": "method",
    "name": "removeInvisibleId",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#removeInvisibleId",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "entityId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 931,
    "kind": "method",
    "name": "hasInvisible",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#hasInvisible",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 932,
    "kind": "method",
    "name": "hasInvisibleId",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#hasInvisibleId",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "entityId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 933,
    "kind": "method",
    "name": "hasInvisibleInstance",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#hasInvisibleInstance",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 934,
    "kind": "method",
    "name": "getState",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#getState",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"id\": *, \"string\": *, \"name\": *, \"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 935,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/npc/npc.js",
    "content": "/* global module */\n\nlet Entity = require('../entity');\n\nclass NPC extends Entity {\n    constructor(id, instance, x, y) {\n        super(id, 'npc', instance, x, y);\n\n        this.talkIndex = 0;\n    }\n\n    talk(messages) {\n        let self = this,\n            message = messages[self.talkIndex];\n\n        if (self.talkIndex > messages.length - 1) self.talkIndex = 0;\n        else self.talkIndex++;\n\n        return message;\n    }\n}\n\nmodule.exports = NPC;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/npc/npc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 936,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/npc/npc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 937,
    "kind": "class",
    "name": "NPC",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/npc/npc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 938,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 939,
    "kind": "member",
    "name": "talkIndex",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC#talkIndex",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 940,
    "kind": "method",
    "name": "talk",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC#talk",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "messages",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 941,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/objects/chest.js",
    "content": "/* global module */\n\nlet Entity = require('../entity'),\n    Utils = require('../../../util/utils');\n\nclass Chest extends Entity {\n    constructor(id, instance, x, y) {\n        super(id, 'chest', instance, x, y);\n\n        let self = this;\n\n        self.respawnDuration = 25000;\n        self.static = false;\n\n        self.items = [];\n    }\n\n    openChest() {\n        let self = this;\n\n        if (self.openCallback) self.openCallback();\n    }\n\n    respawn() {\n        let self = this;\n\n        setTimeout(() => {\n            if (self.respawnCallback) self.respawnCallback();\n        }, self.respawnDuration);\n    }\n\n    getItem() {\n        let self = this,\n            random = Utils.randomInt(0, self.items.length - 1),\n            item = self.items[random];\n\n        /**\n         * We must ensure an item is always present in order\n         * to avoid any unforeseen circumstances.\n         */\n        if (!item) return;\n\n        return item;\n    }\n\n    onOpen(callback) {\n        this.openCallback = callback;\n    }\n\n    onRespawn(callback) {\n        this.respawnCallback = callback;\n    }\n}\n\nmodule.exports = Chest;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/objects/chest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 942,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/objects/chest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 943,
    "kind": "class",
    "name": "Chest",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/objects/chest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 944,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 945,
    "kind": "method",
    "name": "openChest",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#openChest",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 946,
    "kind": "method",
    "name": "respawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#respawn",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 947,
    "kind": "method",
    "name": "getItem",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#getItem",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 948,
    "kind": "method",
    "name": "onOpen",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#onOpen",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 949,
    "kind": "member",
    "name": "openCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#openCallback",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 950,
    "kind": "method",
    "name": "onRespawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#onRespawn",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 951,
    "kind": "member",
    "name": "respawnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#respawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 952,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/objects/item.js",
    "content": "/* global module */\n\nlet Entity = require('../entity');\n\nclass Item extends Entity {\n    constructor(id, instance, x, y) {\n        super(id, 'item', instance, x, y);\n\n        let self = this;\n\n        self.static = false;\n        self.dropped = false;\n        self.shard = false;\n\n        self.count = 1;\n        self.ability = 0;\n        self.abilityLevel = 0;\n        self.tier = 1;\n\n        self.respawnTime = 30000;\n        self.despawnDuration = 4000;\n        self.blinkDelay = 20000;\n        self.despawnDelay = 1000;\n\n        self.blinkTimeout = null;\n        self.despawnTimeout = null;\n    }\n\n    destroy() {\n        let self = this;\n\n        if (self.blinkTimeout) clearTimeout(self.blinkTimeout);\n\n        if (self.despawnTimeout) clearTimeout(self.despawnTimeout);\n\n        if (self.static) self.respawn();\n    }\n\n    despawn() {\n        let self = this;\n\n        self.blinkTimeout = setTimeout(() => {\n            if (self.blinkCallback) self.blinkCallback();\n\n            self.despawnTimeout = setTimeout(() => {\n                if (self.despawnCallback) self.despawnCallback();\n            }, self.despawnDuration);\n        }, self.blinkDelay);\n    }\n\n    respawn() {\n        let self = this;\n\n        setTimeout(() => {\n            if (self.respawnCallback) self.respawnCallback();\n        }, self.respawnTime);\n    }\n\n    getData() {\n        return [this.id, this.count, this.ability, this.abilityLevel];\n    }\n\n    getState() {\n        let self = this,\n            state = super.getState();\n\n        state.count = self.count;\n        state.ability = self.ability;\n        state.abilityLevel = self.abilityLevel;\n\n        return state;\n    }\n\n    setCount(count) {\n        this.count = count;\n    }\n\n    setAbility(ability) {\n        this.ability = ability;\n    }\n\n    setAbilityLevel(abilityLevel) {\n        this.abilityLevel = abilityLevel;\n    }\n\n    onRespawn(callback) {\n        this.respawnCallback = callback;\n    }\n\n    onBlink(callback) {\n        this.blinkCallback = callback;\n    }\n\n    onDespawn(callback) {\n        this.despawnCallback = callback;\n    }\n}\n\nmodule.exports = Item;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/objects/item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 953,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/objects/item.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 954,
    "kind": "class",
    "name": "Item",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/objects/item.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 955,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 956,
    "kind": "method",
    "name": "destroy",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 957,
    "kind": "method",
    "name": "despawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#despawn",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 958,
    "kind": "method",
    "name": "respawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#respawn",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 959,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#getData",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 960,
    "kind": "method",
    "name": "getState",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#getState",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 961,
    "kind": "method",
    "name": "setCount",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#setCount",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 962,
    "kind": "member",
    "name": "count",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#count",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 963,
    "kind": "method",
    "name": "setAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#setAbility",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 964,
    "kind": "member",
    "name": "ability",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#ability",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 965,
    "kind": "method",
    "name": "setAbilityLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#setAbilityLevel",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 966,
    "kind": "member",
    "name": "abilityLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#abilityLevel",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 967,
    "kind": "method",
    "name": "onRespawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#onRespawn",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 968,
    "kind": "member",
    "name": "respawnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#respawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 969,
    "kind": "method",
    "name": "onBlink",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#onBlink",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 970,
    "kind": "member",
    "name": "blinkCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#blinkCallback",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 971,
    "kind": "method",
    "name": "onDespawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#onDespawn",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 972,
    "kind": "member",
    "name": "despawnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#despawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 973,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "content": "/* global module */\n\nlet Entity = require('../entity');\n\nclass Projectile extends Entity {\n    constructor(id, instance) {\n        super(id, 'projectile', instance);\n\n        let self = this;\n\n        self.startX = -1;\n        self.startY = -1;\n\n        self.destX = -1;\n        self.destY = -1;\n\n        self.target = null;\n\n        self.damage = -1;\n\n        self.hitType = null;\n\n        self.owner = null;\n    }\n\n    setStart(x, y) {\n        let self = this;\n\n        self.x = x;\n        self.y = y;\n    }\n\n    /**\n     * TODO - Merge setTarget() && setStaticTarget into one function.\n     */\n\n    setTarget(target) {\n        let self = this;\n\n        self.target = target;\n\n        self.destX = target.x;\n        self.destY = target.y;\n    }\n\n    setStaticTarget(x, y) {\n        let self = this;\n\n        self.static = true;\n\n        self.destX = x;\n        self.destY = y;\n    }\n\n    getData() {\n        let self = this;\n\n        /**\n         * Refrain from creating a projectile unless\n         * an owner and a target are available.\n         */\n\n        if (!self.owner || !self.target) return;\n\n        return {\n            id: self.instance,\n            name: self.owner.projectileName,\n            characterId: self.owner.instance,\n            targetId: self.target.instance,\n            damage: self.damage,\n            special: self.special,\n            hitType: self.hitType,\n            type: self.type\n        };\n    }\n}\n\nmodule.exports = Projectile;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 974,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 975,
    "kind": "class",
    "name": "Projectile",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 976,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 977,
    "kind": "method",
    "name": "setStart",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#setStart",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 978,
    "kind": "method",
    "name": "setTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#setTarget",
    "access": "public",
    "description": "TODO - Merge setTarget() && setStaticTarget into one function.",
    "lineNumber": 37,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 979,
    "kind": "method",
    "name": "setStaticTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#setStaticTarget",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 980,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#getData",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"id\": *, \"name\": *, \"characterId\": *, \"targetId\": *, \"damage\": *, \"special\": *, \"hitType\": *, \"type\": *}"
      ]
    }
  },
  {
    "__docId__": 981,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/world.js",
    "content": "/* global module */\n\nlet config = require('../../config.json'),\n    Player = require('./entity/character/player/player'),\n    Map = require('../map/map'),\n    _ = require('underscore'),\n    Messages = require('../network/messages'),\n    Utils = require('../util/utils'),\n    Mobs = require('../util/mobs'),\n    Mob = require('./entity/character/mob/mob'),\n    NPCs = require('../util/npcs'),\n    NPC = require('./entity/npc/npc'),\n    Items = require('../util/items'),\n    Item = require('./entity/objects/item'),\n    Chest = require('./entity/objects/chest'),\n    Character = require('./entity/character/character'),\n    Projectile = require('./entity/objects/projectile'),\n    Packets = require('../network/packets'),\n    Formulas = require('../util/formulas'),\n    Modules = require('../util/modules'),\n    Shops = require('../controllers/shops'),\n    Region = require('../region/region'),\n    Network = require('../network/network');\n\nclass World {\n    constructor(id, socket, database) {\n        let self = this;\n\n        self.id = id;\n        self.socket = socket;\n        self.database = database;\n\n        self.playerCount = 0;\n\n        self.maxPlayers = config.maxPlayers;\n        self.updateTime = config.updateTime;\n\n        self.debug = false;\n\n        self.players = {};\n        self.entities = {};\n        self.items = {};\n        self.chests = {};\n        self.mobs = {};\n        self.npcs = {};\n        self.projectiles = {};\n\n        self.loadedRegions = false;\n\n        self.ready = false;\n\n        self.malformTimeout = null;\n    }\n\n    load(onWorldLoad) {\n        let self = this;\n\n        log.info('************ World ' + self.id + ' ***********');\n\n        /**\n         * The reason maps are loaded per each world is because\n         * we can have slight modifications for each world if we want in the\n         * future. Using region loading, we can just send the client\n         * whatever new map we have created server sided. Cleaner and nicer.\n         */\n\n        self.map = new Map(self);\n        self.map.isReady(() => {\n            log.info('The map has been successfully loaded!');\n\n            self.loaded();\n\n            self.spawnChests();\n            self.spawnEntities();\n\n            onWorldLoad();\n        });\n    }\n\n    loaded() {\n        let self = this;\n        /**\n         * Similar to Kaetram engine here, but it's loaded upon initialization\n         * rather than being called from elsewhere.\n         */\n\n        self.shops = new Shops(self);\n        self.region = new Region(self);\n        self.network = new Network(self);\n\n        self.ready = true;\n\n        self.tick();\n\n        log.info('********************************');\n    }\n\n    tick() {\n        let self = this;\n\n        setInterval(() => {\n            self.network.parsePackets();\n            self.region.parseRegions();\n        }, 1000 / self.updateTime);\n    }\n\n    /** **************************\n     * Entity related functions *\n     ****************************/\n\n    kill(entity) {\n        let self = this;\n\n        entity.applyDamage(entity.hitPoints);\n\n        self.push(Packets.PushOpcode.Regions, [\n            {\n                regionId: entity.region,\n                message: new Messages.Points({\n                    id: entity.instance,\n                    hitPoints: entity.getHitPoints(),\n                    mana: null\n                })\n            },\n            {\n                regionId: entity.region,\n                message: new Messages.Despawn(entity.instance)\n            }\n        ]);\n\n        self.handleDeath(entity, true);\n    }\n\n    handleDamage(attacker, target, damage) {\n        let self = this;\n\n        if (!attacker || !target || isNaN(damage) || target.invincible) return;\n\n        if (target.type === 'player' && target.hitCallback)\n            target.hitCallback(attacker, damage);\n\n        // Stop screwing with this - it's so the target retaliates.\n\n        target.hit(attacker);\n        target.applyDamage(damage);\n\n        self.push(Packets.PushOpcode.Regions, {\n            regionId: target.region,\n            message: new Messages.Points({\n                id: target.instance,\n                hitPoints: target.getHitPoints(),\n                mana: null\n            })\n        });\n\n        // If target has died...\n        if (target.getHitPoints() < 1) {\n            if (target.type === 'mob')\n                attacker.addExperience(Mobs.getXp(target.id));\n\n            if (attacker.type === 'player') attacker.killCharacter(target);\n\n            target.combat.forEachAttacker(attacker => {\n                attacker.removeTarget();\n            });\n\n            self.push(Packets.PushOpcode.Regions, [\n                {\n                    regionId: target.region,\n                    message: new Messages.Combat(Packets.CombatOpcode.Finish, {\n                        attackerId: attacker.instance,\n                        targetId: target.instance\n                    })\n                },\n                {\n                    regionId: target.region,\n                    message: new Messages.Despawn(target.instance)\n                }\n            ]);\n\n            self.handleDeath(target);\n        }\n    }\n\n    handleDeath(character, ignoreDrops) {\n        let self = this;\n\n        if (!character) return;\n\n        if (character.type === 'mob') {\n            let deathX = character.x,\n                deathY = character.y;\n\n            if (character.deathCallback) character.deathCallback();\n\n            self.removeEntity(character);\n\n            character.dead = true;\n\n            character.destroy();\n\n            character.combat.stop();\n\n            if (!ignoreDrops) {\n                let drop = character.getDrop();\n\n                if (drop) self.dropItem(drop.id, drop.count, deathX, deathY);\n            }\n        } else if (character.type === 'player') character.die();\n    }\n\n    createProjectile(info) {\n        let self = this,\n            attacker = info.shift(),\n            target = info.shift();\n\n        if (!attacker || !target) return null;\n\n        let startX = attacker.x,\n            startY = attacker.y,\n            type = attacker.getProjectile(),\n            hit = null,\n            projectile = new Projectile(\n                type,\n                Utils.generateInstance(5, type, startX + startY)\n            );\n\n        projectile.setStart(startX, startY);\n        projectile.setTarget(target);\n\n        if (attacker.type === 'player') hit = attacker.getHit(target);\n\n        projectile.damage = hit\n            ? hit.damage\n            : Formulas.getDamage(attacker, target, true);\n        projectile.hitType = hit ? hit.type : Modules.Hits.Damage;\n\n        projectile.owner = attacker;\n\n        self.addProjectile(projectile, projectile.owner.region);\n\n        return projectile;\n    }\n\n    getEntityByInstance(instance) {\n        if (instance in this.entities) return this.entities[instance];\n    }\n\n    spawnEntities() {\n        let self = this,\n            entities = 0;\n\n        _.each(self.map.staticEntities, data => {\n            let key = data.string,\n                isMob = !!Mobs.Properties[key],\n                isNpc = !!NPCs.Properties[key],\n                isItem = !!Items.Data[key],\n                info = isMob\n                    ? Mobs.Properties[key]\n                    : isNpc\n                    ? NPCs.Properties[key]\n                    : isItem\n                    ? Items.getData(key)\n                    : null,\n                position = self.map.indexToGridPosition(data.tileIndex);\n\n            position.x++;\n\n            if (!info || info === 'null') {\n                if (self.debug) {\n                    log.info(\n                        'Unknown object spawned at: ' +\n                            position.x +\n                            ' ' +\n                            position.y\n                    );\n                }\n\n                return;\n            }\n\n            let instance = Utils.generateInstance(\n                isMob ? 2 : isNpc ? 3 : 4,\n                info.id + entities,\n                position.x + entities,\n                position.y\n            );\n\n            if (isMob) {\n                let mob = new Mob(\n                    info.id,\n                    instance,\n                    position.x,\n                    position.y,\n                    self\n                );\n\n                mob.static = true;\n\n                if (data.roaming) mob.roaming = true;\n\n                if (Mobs.Properties[key].hiddenName)\n                    mob.hiddenName = Mobs.Properties[key].hiddenName;\n\n                mob.load();\n\n                mob.onRespawn(() => {\n                    mob.dead = false;\n\n                    mob.refresh();\n\n                    self.addMob(mob);\n                });\n\n                self.addMob(mob);\n            }\n\n            if (isNpc)\n                self.addNPC(new NPC(info.id, instance, position.x, position.y));\n\n            if (isItem) {\n                let item = self.createItem(\n                    info.id,\n                    instance,\n                    position.x,\n                    position.y\n                );\n                item.static = true;\n                self.addItem(item);\n            }\n\n            entities++;\n        });\n\n        log.info('Spawned ' + Object.keys(self.entities).length + ' entities!');\n    }\n\n    spawnChests() {\n        let self = this,\n            chests = 0;\n\n        _.each(self.map.chests, info => {\n            self.spawnChest(info.i, info.x, info.y, true);\n\n            chests++;\n        });\n\n        log.info(\n            'Spawned ' + Object.keys(self.chests).length + ' static chests'\n        );\n    }\n\n    spawnMob(id, x, y) {\n        let self = this,\n            instance = Utils.generateInstance(2, id, x + id, y),\n            mob = new Mob(id, instance, x, y);\n\n        if (!Mobs.exists(id)) return;\n\n        self.addMob(mob);\n\n        return mob;\n    }\n\n    spawnChest(items, x, y, staticChest) {\n        let self = this,\n            chestCount = Object.keys(self.chests).length,\n            instance = Utils.generateInstance(5, 194, chestCount, x, y),\n            chest = new Chest(194, instance, x, y);\n\n        chest.items = items;\n\n        if (staticChest) {\n            chest.static = staticChest;\n\n            chest.onRespawn(self.addChest.bind(self, chest));\n        }\n\n        chest.onOpen(() => {\n            /**\n             * Pretty simple concept, detect when the player opens the chest\n             * then remove it and drop an item instead. Give it a 25 second\n             * cooldown prior to respawning and voila.\n             */\n\n            self.removeChest(chest);\n\n            if (config.debug)\n                log.info(`Opening chest at x: ${chest.x}, y: ${chest.y}`);\n\n            self.dropItem(\n                Items.stringToId(chest.getItem()),\n                1,\n                chest.x,\n                chest.y\n            );\n        });\n\n        self.addChest(chest);\n\n        return chest;\n    }\n\n    createItem(id, instance, x, y) {\n        return new Item(id, instance, x, y);\n    }\n\n    dropItem(id, count, x, y) {\n        let self = this,\n            instance = Utils.generateInstance(\n                4,\n                id + Object.keys(self.entities).length,\n                x,\n                y\n            ),\n            item = self.createItem(id, instance, x, y);\n\n        item.count = count;\n        item.dropped = true;\n\n        self.addItem(item);\n        item.despawn();\n\n        if (config.debug) {\n            log.info(`Item - ${id} has been dropped at x: ${x}, y: ${y}.`);\n            log.info(`Item Region - ${item.region}`);\n        }\n\n        item.onBlink(() => {\n            self.push(Packets.PushOpcode.Broadcast, {\n                message: new Messages.Blink(item.intsance)\n            });\n        });\n\n        item.onDespawn(() => {\n            self.removeItem(item);\n        });\n    }\n\n    push(type, info) {\n        let self = this;\n\n        if (_.isArray(info)) {\n            _.each(info, i => {\n                self.push(type, i);\n            });\n            return;\n        }\n\n        if (!info.message) {\n            log.info('No message found whilst attempting to push.');\n            log.info(info);\n            return;\n        }\n\n        switch (type) {\n            case Packets.PushOpcode.Broadcast:\n                self.network.pushBroadcast(info.message);\n\n                break;\n\n            case Packets.PushOpcode.Selectively:\n                self.network.pushSelectively(info.message, info.ignores);\n\n                break;\n\n            case Packets.PushOpcode.Player:\n                self.network.pushToPlayer(info.player, info.message);\n\n                break;\n\n            case Packets.PushOpcode.Players:\n                self.network.pushToPlayers(info.players, info.message);\n\n                break;\n\n            case Packets.PushOpcode.Region:\n                self.network.pushToRegion(\n                    info.regionId,\n                    info.message,\n                    info.ignoreId\n                );\n\n                break;\n\n            case Packets.PushOpcode.Regions:\n                self.network.pushToAdjacentRegions(\n                    info.regionId,\n                    info.message,\n                    info.ignoreId\n                );\n\n                break;\n\n            case Packets.PushOpcode.NameArray:\n                self.network.pushToNameArray(info.names, info.message);\n\n                break;\n\n            case Packets.PushOpcode.OldRegions:\n                self.network.pushToOldRegions(info.player, info.message);\n\n                break;\n        }\n    }\n\n    addEntity(entity, region) {\n        let self = this;\n\n        if (entity.instance in self.entities)\n            log.info('Entity ' + entity.instance + ' already exists.');\n\n        self.entities[entity.instance] = entity;\n\n        if (entity.type !== 'projectile') self.region.handle(entity, region);\n\n        if (entity.x > 0 && entity.y > 0)\n            self.getGrids().addToEntityGrid(entity, entity.x, entity.y);\n\n        entity.onSetPosition(() => {\n            self.getGrids().updateEntityPosition(entity);\n\n            if (entity.isMob() && entity.isOutsideSpawn()) {\n                entity.removeTarget();\n                entity.combat.forget();\n                entity.combat.stop();\n\n                entity.return();\n\n                self.push(Packets.PushOpcode.Broadcast, [\n                    {\n                        message: new Messages.Combat(\n                            Packets.CombatOpcode.Finish,\n                            {\n                                attackerId: null,\n                                targetId: entity.instance\n                            }\n                        )\n                    },\n                    {\n                        message: new Messages.Movement(\n                            Packets.MovementOpcode.Move,\n                            {\n                                id: entity.instance,\n                                x: entity.x,\n                                y: entity.y,\n                                forced: false,\n                                teleport: false\n                            }\n                        )\n                    }\n                ]);\n            }\n        });\n\n        if (entity instanceof Character) {\n            entity.getCombat().setWorld(self);\n\n            entity.onStunned(stun => {\n                self.push(Packets.PushOpcode.Regions, {\n                    regionId: entity.region,\n                    message: new Messages.Movement(\n                        Packets.MovementOpcode.Stunned,\n                        {\n                            id: entity.instance,\n                            state: stun\n                        }\n                    )\n                });\n            });\n        }\n    }\n\n    addPlayer(player) {\n        let self = this;\n\n        self.addEntity(player);\n        self.players[player.instance] = player;\n\n        if (self.populationCallback) self.populationCallback();\n    }\n\n    addNPC(npc, region) {\n        let self = this;\n\n        self.addEntity(npc, region);\n        self.npcs[npc.instance] = npc;\n    }\n\n    addMob(mob, region) {\n        let self = this;\n\n        if (!Mobs.exists(mob.id)) {\n            log.error('Cannot spawn mob. ' + mob.id + ' does not exist.');\n            return;\n        }\n\n        self.addEntity(mob, region);\n        self.mobs[mob.instance] = mob;\n\n        mob.addToChestArea(self.getChestAreas());\n\n        mob.onHit(attacker => {\n            if (mob.isDead() || mob.combat.started) return;\n\n            mob.combat.begin(attacker);\n        });\n    }\n\n    addItem(item, region) {\n        let self = this;\n\n        if (item.static) item.onRespawn(self.addItem.bind(self, item));\n\n        self.addEntity(item, region);\n        self.items[item.instance] = item;\n    }\n\n    addProjectile(projectile, region) {\n        let self = this;\n\n        self.addEntity(projectile, region);\n        self.projectiles[projectile.instance] = projectile;\n    }\n\n    addChest(chest, region) {\n        let self = this;\n\n        self.addEntity(chest, region);\n        self.chests[chest.instance] = chest;\n    }\n\n    removeEntity(entity) {\n        let self = this;\n\n        if (entity.instance in self.entities)\n            delete self.entities[entity.instance];\n\n        if (entity.instance in self.mobs) delete self.mobs[entity.instance];\n\n        if (entity.instance in self.items) delete self.items[entity.instance];\n\n        self.getGrids().removeFromEntityGrid(entity, entity.x, entity.y);\n\n        self.region.remove(entity);\n    }\n\n    cleanCombat(entity) {\n        let self = this;\n\n        _.each(this.entities, oEntity => {\n            if (\n                oEntity instanceof Character &&\n                oEntity.combat.hasAttacker(entity)\n            )\n                oEntity.combat.removeAttacker(entity);\n        });\n    }\n\n    removeItem(item) {\n        let self = this;\n\n        self.removeEntity(item);\n        self.push(Packets.PushOpcode.Broadcast, {\n            message: new Messages.Despawn(item.instance)\n        });\n\n        if (item.static) item.respawn();\n    }\n\n    removePlayer(player) {\n        let self = this;\n\n        self.push(Packets.PushOpcode.Regions, {\n            regionId: player.region,\n            message: new Messages.Despawn(player.instance)\n        });\n\n        if (player.ready) player.save();\n\n        if (self.populationCallback) self.populationCallback();\n\n        self.removeEntity(player);\n\n        self.cleanCombat(player);\n\n        if (player.isGuest) self.database.delete(player);\n\n        delete self.players[player.instance];\n        delete self.network.packets[player.instance];\n    }\n\n    removeProjectile(projectile) {\n        let self = this;\n\n        self.removeEntity(projectile);\n\n        delete self.projectiles[projectile.instance];\n    }\n\n    removeChest(chest) {\n        let self = this;\n\n        self.removeEntity(chest);\n        self.push(Packets.PushOpcode.Broadcast, {\n            message: new Messages.Despawn(chest.instance)\n        });\n\n        if (chest.static) chest.respawn();\n        else delete self.chests[chest.instance];\n    }\n\n    playerInWorld(username) {\n        let self = this;\n\n        for (let id in self.players) {\n            if (self.players.hasOwnProperty(id)) {\n                if (\n                    self.players[id].username.toLowerCase() ===\n                    username.toLowerCase()\n                )\n                    return true;\n            }\n        }\n\n        return false;\n    }\n\n    getPlayerByName(name) {\n        let self = this;\n\n        for (let id in self.players) {\n            if (self.players.hasOwnProperty(id)) {\n                if (\n                    self.players[id].username.toLowerCase() ===\n                    name.toLowerCase()\n                )\n                    return self.players[id];\n            }\n        }\n\n        return null;\n    }\n\n    getPlayerByInstance(instance) {\n        let self = this;\n\n        if (instance in self.players) return self.players[instance];\n\n        return null;\n    }\n\n    forEachPlayer(callback) {\n        _.each(this.players, player => {\n            callback(player);\n        });\n    }\n\n    getPVPAreas() {\n        return this.map.areas.PVP.pvpAreas;\n    }\n\n    getMusicAreas() {\n        return this.map.areas.Music.musicAreas;\n    }\n\n    getChestAreas() {\n        return this.map.areas.Chests.chestAreas;\n    }\n\n    getOverlayAreas() {\n        return this.map.areas.Overlays.overlayAreas;\n    }\n\n    getCameraAreas() {\n        return this.map.areas.Cameras.cameraAreas;\n    }\n\n    getGrids() {\n        return this.map.grids;\n    }\n\n    getPopulation() {\n        return _.size(this.players);\n    }\n\n    onPlayerConnection(callback) {\n        this.playerConnectCallback = callback;\n    }\n\n    onPopulationChange(callback) {\n        this.populationCallback = callback;\n    }\n}\n\nmodule.exports = World;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/game/world.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 982,
    "kind": "variable",
    "name": "config",
    "memberof": "Kaetram-Open/server/js/game/world.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/world.js~config",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/world.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 983,
    "kind": "class",
    "name": "World",
    "memberof": "Kaetram-Open/server/js/game/world.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/world.js~World",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/game/world.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 984,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 985,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#load",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "onWorldLoad",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 986,
    "kind": "method",
    "name": "loaded",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#loaded",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 987,
    "kind": "method",
    "name": "tick",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#tick",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 988,
    "kind": "method",
    "name": "kill",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#kill",
    "access": "public",
    "description": "*************************\nEntity related functions *\n**************************",
    "lineNumber": 111,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 989,
    "kind": "method",
    "name": "handleDamage",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#handleDamage",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "damage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 990,
    "kind": "method",
    "name": "handleDeath",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#handleDeath",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoreDrops",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 991,
    "kind": "method",
    "name": "createProjectile",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#createProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 992,
    "kind": "method",
    "name": "getEntityByInstance",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getEntityByInstance",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 993,
    "kind": "method",
    "name": "spawnEntities",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#spawnEntities",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 994,
    "kind": "method",
    "name": "spawnChests",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#spawnChests",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 995,
    "kind": "method",
    "name": "spawnMob",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#spawnMob",
    "access": "public",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 996,
    "kind": "method",
    "name": "spawnChest",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#spawnChest",
    "access": "public",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "params": [
      {
        "name": "items",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "staticChest",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 997,
    "kind": "method",
    "name": "createItem",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#createItem",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 998,
    "kind": "method",
    "name": "dropItem",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#dropItem",
    "access": "public",
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 999,
    "kind": "method",
    "name": "push",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#push",
    "access": "public",
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1000,
    "kind": "method",
    "name": "addEntity",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addEntity",
    "access": "public",
    "description": null,
    "lineNumber": 507,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1001,
    "kind": "method",
    "name": "addPlayer",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 574,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1002,
    "kind": "method",
    "name": "addNPC",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addNPC",
    "access": "public",
    "description": null,
    "lineNumber": 583,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1003,
    "kind": "method",
    "name": "addMob",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addMob",
    "access": "public",
    "description": null,
    "lineNumber": 590,
    "undocument": true,
    "params": [
      {
        "name": "mob",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1004,
    "kind": "method",
    "name": "addItem",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addItem",
    "access": "public",
    "description": null,
    "lineNumber": 610,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1005,
    "kind": "method",
    "name": "addProjectile",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 619,
    "undocument": true,
    "params": [
      {
        "name": "projectile",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1006,
    "kind": "method",
    "name": "addChest",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addChest",
    "access": "public",
    "description": null,
    "lineNumber": 626,
    "undocument": true,
    "params": [
      {
        "name": "chest",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1007,
    "kind": "method",
    "name": "removeEntity",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removeEntity",
    "access": "public",
    "description": null,
    "lineNumber": 633,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1008,
    "kind": "method",
    "name": "cleanCombat",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#cleanCombat",
    "access": "public",
    "description": null,
    "lineNumber": 648,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1009,
    "kind": "method",
    "name": "removeItem",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removeItem",
    "access": "public",
    "description": null,
    "lineNumber": 660,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1010,
    "kind": "method",
    "name": "removePlayer",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removePlayer",
    "access": "public",
    "description": null,
    "lineNumber": 671,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1011,
    "kind": "method",
    "name": "removeProjectile",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removeProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 693,
    "undocument": true,
    "params": [
      {
        "name": "projectile",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1012,
    "kind": "method",
    "name": "removeChest",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removeChest",
    "access": "public",
    "description": null,
    "lineNumber": 701,
    "undocument": true,
    "params": [
      {
        "name": "chest",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1013,
    "kind": "method",
    "name": "playerInWorld",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#playerInWorld",
    "access": "public",
    "description": null,
    "lineNumber": 713,
    "undocument": true,
    "params": [
      {
        "name": "username",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1014,
    "kind": "method",
    "name": "getPlayerByName",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getPlayerByName",
    "access": "public",
    "description": null,
    "lineNumber": 729,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1015,
    "kind": "method",
    "name": "getPlayerByInstance",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getPlayerByInstance",
    "access": "public",
    "description": null,
    "lineNumber": 745,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1016,
    "kind": "method",
    "name": "forEachPlayer",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#forEachPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 753,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1017,
    "kind": "method",
    "name": "getPVPAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getPVPAreas",
    "access": "public",
    "description": null,
    "lineNumber": 759,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1018,
    "kind": "method",
    "name": "getMusicAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getMusicAreas",
    "access": "public",
    "description": null,
    "lineNumber": 763,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1019,
    "kind": "method",
    "name": "getChestAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getChestAreas",
    "access": "public",
    "description": null,
    "lineNumber": 767,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1020,
    "kind": "method",
    "name": "getOverlayAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getOverlayAreas",
    "access": "public",
    "description": null,
    "lineNumber": 771,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1021,
    "kind": "method",
    "name": "getCameraAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getCameraAreas",
    "access": "public",
    "description": null,
    "lineNumber": 775,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1022,
    "kind": "method",
    "name": "getGrids",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getGrids",
    "access": "public",
    "description": null,
    "lineNumber": 779,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1023,
    "kind": "method",
    "name": "getPopulation",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getPopulation",
    "access": "public",
    "description": null,
    "lineNumber": 783,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1024,
    "kind": "method",
    "name": "onPlayerConnection",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#onPlayerConnection",
    "access": "public",
    "description": null,
    "lineNumber": 787,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1025,
    "kind": "member",
    "name": "playerConnectCallback",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#playerConnectCallback",
    "access": "public",
    "description": null,
    "lineNumber": 788,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1026,
    "kind": "method",
    "name": "onPopulationChange",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#onPopulationChange",
    "access": "public",
    "description": null,
    "lineNumber": 791,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1027,
    "kind": "member",
    "name": "populationCallback",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#populationCallback",
    "access": "public",
    "description": null,
    "lineNumber": 792,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1028,
    "kind": "file",
    "name": "Kaetram-Open/server/js/main.js",
    "content": "let World = require('./game/world'),\n    WebSocket = require('./network/websocket'),\n    config = require('../config'),\n    Log = require('log'),\n    Parser = require('./util/parser'),\n    Database = require('./database/database'),\n    _ = require('underscore'),\n    worlds = [],\n    allowConnections = false,\n    worldsCreated = 0;\n\nlog = new Log(\n    config.worlds > 1 ? 'notice' : config.debugLevel,\n    config.localDebug ? fs.createWriteStream('runtime.log') : null\n);\n\nfunction main() {\n    log.info('Initializing ' + config.name + ' game engine...');\n\n    let webSocket = new WebSocket(config.host, config.port, config.gver),\n        database = new Database(config.database),\n        stdin = process.openStdin();\n\n    webSocket.onConnect(function(connection) {\n        if (allowConnections) {\n            let world;\n\n            for (let i = 0; i < worlds.length; i++) {\n                if (worlds[i].playerCount < worlds[i].maxPlayers) {\n                    world = worlds[i];\n                    break;\n                }\n            }\n\n            if (world) world.playerConnectCallback(connection);\n            else {\n                log.info('Worlds are all currently full. Closing connection.');\n\n                connection.sendUTF8('full');\n                connection.close();\n            }\n        } else {\n            connection.sendUTF8('disallowed');\n            connection.close();\n        }\n    });\n\n    webSocket.onWebSocketReady(function() {\n        /**\n         * Initialize the worlds after the webSocket finishes.\n         */\n\n        loadParser();\n\n        for (let i = 0; i < config.worlds; i++)\n            worlds.push(new World(i + 1, webSocket, database.getDatabase()));\n\n        initializeWorlds();\n    });\n\n    stdin.addListener('data', data => {\n        let message = data.toString().replace(/(\\r\\n|\\n|\\r)/gm, ''),\n            type = message.charAt(0);\n\n        if (type !== '/') return;\n\n        let blocks = message.substring(1).split(' '),\n            command = blocks.shift();\n\n        if (!command) return;\n\n        switch (command) {\n            case 'players':\n                let total = 0;\n\n                _.each(worlds, world => {\n                    total += world.playerCount;\n                });\n\n                log.info(\n                    `There are ${total} player(s) in ${worlds.length} world(s).`\n                );\n\n                break;\n\n            case 'registered':\n                worlds[0].database.registeredCount(count => {\n                    log.info(`There are ${count} users registered.`);\n                });\n\n                break;\n        }\n    });\n}\n\nfunction onWorldLoad() {\n    worldsCreated++;\n    if (worldsCreated === worlds.length) allWorldsCreated();\n}\n\nfunction allWorldsCreated() {\n    log.notice(\n        'Finished creating ' +\n            worlds.length +\n            ' world' +\n            (worlds.length > 1 ? 's' : '') +\n            '!'\n    );\n    allowConnections = true;\n\n    let host = config.host === '0.0.0.0' ? 'localhost' : config.host;\n    log.notice('Connect locally via http://' + host + ':' + config.port);\n}\n\nfunction loadParser() {\n    new Parser();\n}\n\nfunction initializeWorlds() {\n    for (let worldId in worlds)\n        if (worlds.hasOwnProperty(worldId)) worlds[worldId].load(onWorldLoad);\n}\n\nfunction getPopulations() {\n    let counts = [];\n\n    for (let index in worlds) {\n        if (worlds.hasOwnProperty(index))\n            counts.push(worlds[index].getPopulation());\n    }\n\n    return counts;\n}\n\nfunction saveAll() {\n    _.each(worlds, function(world) {\n        world.saveAll();\n    });\n\n    let plural = worlds.length > 1;\n\n    log.notice(\n        'Saved players for ' +\n            worlds.length +\n            ' world' +\n            (plural ? 's' : '') +\n            '.'\n    );\n}\n\nif (typeof String.prototype.startsWith !== 'function') {\n    String.prototype.startsWith = function(str) {\n        return str.length > 0 && this.substring(0, str.length) === str;\n    };\n}\n\nif (typeof String.prototype.endsWith !== 'function') {\n    String.prototype.endsWith = function(str) {\n        return (\n            str.length > 0 &&\n            this.substring(this.length - str.length, this.length) === str\n        );\n    };\n}\n\nmain();\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1029,
    "kind": "variable",
    "name": "World",
    "memberof": "Kaetram-Open/server/js/main.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~World",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1030,
    "kind": "function",
    "name": "main",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~main",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1031,
    "kind": "function",
    "name": "onWorldLoad",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~onWorldLoad",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1032,
    "kind": "function",
    "name": "allWorldsCreated",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~allWorldsCreated",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1033,
    "kind": "function",
    "name": "loadParser",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~loadParser",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1034,
    "kind": "function",
    "name": "initializeWorlds",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~initializeWorlds",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1035,
    "kind": "function",
    "name": "getPopulations",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~getPopulations",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1036,
    "kind": "function",
    "name": "saveAll",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~saveAll",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1037,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/area.js",
    "content": "/* global module */\n\nclass Area {\n    constructor(id, x, y, width, height) {\n        let self = this;\n\n        self.id = id;\n\n        self.x = x;\n        self.y = y;\n\n        self.width = width;\n        self.height = height;\n\n        self.entities = [];\n        self.items = [];\n\n        self.hasRespawned = true;\n        self.chest = null;\n\n        self.maxEntities = 0;\n    }\n\n    contains(x, y) {\n        return (\n            x >= this.x &&\n            y >= this.y &&\n            x < this.x + this.width &&\n            y < this.y + this.height\n        );\n    }\n\n    addEntity(entity) {\n        let self = this;\n\n        if (self.entities.indexOf(entity) > 0) return;\n\n        self.entities.push(entity);\n        entity.area = self;\n\n        if (self.spawnCallback) self.spawnCallback();\n    }\n\n    removeEntity(entity) {\n        let self = this,\n            index = self.entities.indexOf(entity);\n\n        if (index > -1) self.entities.splice(index, 1);\n\n        if (self.entities.length === 0 && self.emptyCallback)\n            self.emptyCallback();\n    }\n\n    setMaxEntities(maxEntities) {\n        this.maxEntities = maxEntities;\n    }\n\n    onEmpty(callback) {\n        this.emptyCallback = callback;\n    }\n\n    onSpawn(callback) {\n        this.spawnCallback = callback;\n    }\n}\n\nmodule.exports = Area;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/map/area.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1038,
    "kind": "class",
    "name": "Area",
    "memberof": "Kaetram-Open/server/js/map/area.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/area.js~Area",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/area.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1039,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 1040,
    "kind": "method",
    "name": "contains",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#contains",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1041,
    "kind": "method",
    "name": "addEntity",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#addEntity",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1042,
    "kind": "method",
    "name": "removeEntity",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#removeEntity",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1043,
    "kind": "method",
    "name": "setMaxEntities",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#setMaxEntities",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "maxEntities",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1044,
    "kind": "member",
    "name": "maxEntities",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#maxEntities",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1045,
    "kind": "method",
    "name": "onEmpty",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#onEmpty",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1046,
    "kind": "member",
    "name": "emptyCallback",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#emptyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1047,
    "kind": "method",
    "name": "onSpawn",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#onSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1048,
    "kind": "member",
    "name": "spawnCallback",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#spawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1049,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/cameraareas.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Area = require('../area'),\n    map = require('../../../data/map/world_server');\n\nclass CameraAreas {\n    constructor() {\n        let self = this;\n\n        self.cameraAreas = [];\n\n        self.load();\n    }\n\n    load() {\n        let self = this,\n            list = map.cameraAreas;\n\n        _.each(list, o => {\n            let cameraArea = new Area(o.id, o.x, o.y, o.width, o.height);\n\n            cameraArea.type = o.type;\n\n            self.cameraAreas.push(cameraArea);\n        });\n\n        log.info('Loaded ' + self.cameraAreas.length + ' camera areas.');\n    }\n}\n\nmodule.exports = CameraAreas;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/map/areas/cameraareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1050,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/cameraareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/cameraareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/cameraareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1051,
    "kind": "class",
    "name": "CameraAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/cameraareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/cameraareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1052,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 1053,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1054,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/chestareas.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Area = require('../area'),\n    map = require('../../../data/map/world_server');\n\nclass ChestAreas {\n    constructor(world) {\n        let self = this;\n\n        self.world = world;\n\n        self.chestAreas = [];\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        _.each(map.chestAreas, m => {\n            let chestArea = new Area(m.id, m.x, m.y, m.width, m.height);\n\n            chestArea.maxEntities = m.entities;\n            chestArea.items = m.i;\n            chestArea.cX = m.tx;\n            chestArea.cY = m.ty;\n\n            self.chestAreas.push(chestArea);\n\n            chestArea.onEmpty(() => {\n                self.spawnChest(this);\n            });\n\n            chestArea.onSpawn(() => {\n                self.removeChest(this);\n            });\n        });\n\n        log.info('Loaded ' + self.chestAreas.length + ' chest areas.');\n    }\n\n    spawnChest(chestArea) {\n        chestArea.chest = this.world.spawnChest(\n            chestArea.items,\n            chestArea.cX,\n            chestArea.cY,\n            false\n        );\n    }\n\n    removeChest(chestArea) {\n        let self = this;\n\n        if (!chestArea.chest) return;\n\n        self.world.removeChest(chestArea.chest);\n\n        chestArea.chest = null;\n    }\n}\n\nmodule.exports = ChestAreas;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/map/areas/chestareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1055,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/chestareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1056,
    "kind": "class",
    "name": "ChestAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/chestareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1057,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 1058,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1059,
    "kind": "method",
    "name": "spawnChest",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas#spawnChest",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "chestArea",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1060,
    "kind": "method",
    "name": "removeChest",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas#removeChest",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "chestArea",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1061,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/musicareas.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Area = require('../area'),\n    map = require('../../../data/map/world_server');\n\nclass MusicAreas {\n    constructor() {\n        let self = this;\n\n        self.musicAreas = [];\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        _.each(map.musicAreas, m => {\n            let musicArea = new Area(m.id, m.x, m.y, m.width, m.height);\n\n            self.musicAreas.push(musicArea);\n        });\n\n        log.info('Loaded ' + self.musicAreas.length + ' music areas.');\n    }\n}\n\nmodule.exports = MusicAreas;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/map/areas/musicareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1062,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/musicareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/musicareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/musicareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1063,
    "kind": "class",
    "name": "MusicAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/musicareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/musicareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1064,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 1065,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1066,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/overlayareas.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Area = require('../area'),\n    map = require('../../../data/map/world_server');\n\nclass OverlayAreas {\n    constructor() {\n        let self = this;\n\n        self.overlayAreas = [];\n\n        self.load();\n    }\n\n    load() {\n        let self = this,\n            list = map.overlayAreas;\n\n        _.each(list, o => {\n            let overlayArea = new Area(o.id, o.x, o.y, o.width, o.height);\n\n            overlayArea.darkness = o.darkness;\n            overlayArea.type = o.type;\n\n            if (o.fog) overlayArea.fog = o.fog;\n\n            self.overlayAreas.push(overlayArea);\n        });\n\n        log.info('Loaded ' + self.overlayAreas.length + ' overlay areas.');\n    }\n}\n\nmodule.exports = OverlayAreas;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/map/areas/overlayareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1067,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/overlayareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/overlayareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/overlayareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1068,
    "kind": "class",
    "name": "OverlayAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/overlayareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/overlayareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1069,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 1070,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1071,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/pvpareas.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Area = require('../area'),\n    map = require('../../../data/map/world_server');\n\nclass PVPAreas {\n    constructor() {\n        let self = this;\n\n        self.pvpAreas = [];\n\n        self.load();\n    }\n\n    load() {\n        let self = this,\n            list = map.pvpAreas;\n\n        _.each(list, p => {\n            let pvpArea = new Area(p.id, p.x, p.y, p.width, p.height);\n\n            self.pvpAreas.push(pvpArea);\n        });\n\n        log.info('Loaded ' + self.pvpAreas.length + ' PVP areas.');\n    }\n}\n\nmodule.exports = PVPAreas;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/map/areas/pvpareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1072,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/pvpareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/pvpareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/pvpareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1073,
    "kind": "class",
    "name": "PVPAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/pvpareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/areas/pvpareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1074,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 1075,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1076,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/grids.js",
    "content": "/* global module */\n\nlet _ = require('underscore');\n\nclass Grids {\n    constructor(map) {\n        let self = this;\n\n        self.map = map;\n\n        self.entityGrid = [];\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        for (let i = 0; i < self.map.height; i++) {\n            self.entityGrid[i] = [];\n\n            for (let j = 0; j < self.map.width; j++) self.entityGrid[i][j] = {};\n        }\n    }\n\n    updateEntityPosition(entity) {\n        let self = this;\n\n        if (entity && entity.oldX === entity.x && entity.oldY === entity.y)\n            return;\n\n        self.removeFromEntityGrid(entity, entity.oldX, entity.oldY);\n        self.addToEntityGrid(entity, entity.x, entity.y);\n\n        entity.updatePosition();\n    }\n\n    addToEntityGrid(entity, x, y) {\n        let self = this;\n\n        if (\n            entity &&\n            x > 0 &&\n            y > 0 &&\n            x < self.map.width &&\n            x < self.map.height &&\n            self.entityGrid[y][x]\n        )\n            self.entityGrid[y][x][entity.instance] = entity;\n    }\n\n    removeFromEntityGrid(entity, x, y) {\n        let self = this;\n\n        if (\n            entity &&\n            x > 0 &&\n            y > 0 &&\n            x < self.map.width &&\n            y < self.map.height &&\n            self.entityGrid[y][x] &&\n            entity.instance in self.entityGrid[y][x]\n        )\n            delete self.entityGrid[y][x][entity.instance];\n    }\n\n    getSurroundingEntities(entity, radius, include) {\n        let self = this,\n            entities = [];\n\n        if (!self.checkBounds(entity.x, entity.y, radius)) return;\n\n        for (let i = -radius; i < radius + 1; i++) {\n            for (let j = -radius; j < radius + 1; j++) {\n                let pos = self.entityGrid[entity.y + i][entity.x + j];\n\n                if (_.size(pos) > 0) {\n                    _.each(pos, pEntity => {\n                        if (!include && pEntity.instance !== entity.instance)\n                            entities.push(pEntity);\n                    });\n                }\n            }\n        }\n\n        return entities;\n    }\n\n    checkBounds(x, y, radius) {\n        return (\n            x + radius < this.map.width &&\n            x - radius > 0 &&\n            y + radius < this.map.height &&\n            y - radius > 0\n        );\n    }\n}\n\nmodule.exports = Grids;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/map/grids.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1077,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/grids.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/grids.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/grids.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1078,
    "kind": "class",
    "name": "Grids",
    "memberof": "Kaetram-Open/server/js/map/grids.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/grids.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1079,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 1080,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1081,
    "kind": "method",
    "name": "updateEntityPosition",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#updateEntityPosition",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1082,
    "kind": "method",
    "name": "addToEntityGrid",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#addToEntityGrid",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1083,
    "kind": "method",
    "name": "removeFromEntityGrid",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#removeFromEntityGrid",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1084,
    "kind": "method",
    "name": "getSurroundingEntities",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#getSurroundingEntities",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "include",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1085,
    "kind": "method",
    "name": "checkBounds",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#checkBounds",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "radius",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1086,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/regions.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    map = require('../../data/map/world_server');\n\nclass Regions {\n    constructor(map) {\n        let self = this;\n\n        self.map = map;\n\n        self.width = self.map.width;\n        self.height = self.map.height;\n\n        self.zoneWidth = self.map.zoneWidth;\n        self.zoneHeight = self.map.zoneHeight;\n\n        self.regionWidth = self.map.regionWidth;\n        self.regionHeight = self.map.regionHeight;\n\n        self.linkedRegions = {};\n\n        self.loadDoors();\n    }\n\n    loadDoors() {\n        let self = this,\n            doors = map.doors;\n\n        _.each(doors, door => {\n            let regionId = self.regionIdFromPosition(door.x, door.y),\n                linkedRegionId = self.regionIdFromPosition(door.tx, door.ty),\n                linkedRegionPosition = self.regionIdToPosition(linkedRegionId);\n\n            if (regionId in self.linkedRegions)\n                self.linkedRegions[regionId].push(linkedRegionPosition);\n            else self.linkedRegions[regionId] = [linkedRegionPosition];\n        });\n    }\n\n    // y y x y y\n    // y y x y y\n    // y x x x y\n    // y y x y x\n    // y y x y y\n\n    getAdjacentRegions(id, offset = 1) {\n        let self = this,\n            position = self.regionIdToPosition(id),\n            x = position.x,\n            y = position.y;\n\n        let list = [];\n\n        for (\n            let i = -offset;\n            i <= offset;\n            i++ // y\n        ) {\n            for (\n                let j = -1;\n                j <= 1;\n                j++ // x\n            )\n                if (i > -2 || i < 2) list.push({ x: x + j, y: y + i });\n        }\n\n        _.each(self.linkedRegions[id], regionPosition => {\n            if (\n                !_.any(list, regionPosition => {\n                    return regionPosition.x === x && regionPosition.y === y;\n                })\n            )\n                list.push(regionPosition);\n        });\n\n        return _.reject(list, regionPosition => {\n            let gX = regionPosition.x,\n                gY = regionPosition.y;\n\n            return (\n                gX < 0 ||\n                gY < 0 ||\n                gX >= self.regionWidth ||\n                gY >= self.regionHeight\n            );\n        });\n    }\n\n    forEachRegion(callback) {\n        let self = this;\n\n        for (let x = 0; x < self.regionWidth; x++)\n            for (let y = 0; y < self.regionHeight; y++) callback(x + '-' + y);\n    }\n\n    forEachAdjacentRegion(regionId, callback, offset) {\n        let self = this;\n\n        if (!regionId) return;\n\n        _.each(self.getAdjacentRegions(regionId, offset), position => {\n            callback(position.x + '-' + position.y);\n        });\n    }\n\n    regionIdFromPosition(x, y) {\n        return (\n            Math.floor(x / this.zoneWidth) +\n            '-' +\n            Math.floor(y / this.zoneHeight)\n        );\n    }\n\n    regionIdToPosition(id) {\n        let position = id.split('-');\n\n        return {\n            x: parseInt(position[0], 10),\n            y: parseInt(position[1], 10)\n        };\n    }\n\n    regionIdToCoordinates(id) {\n        let self = this,\n            position = id.split('-');\n\n        return {\n            x: parseInt(position[0]) * self.zoneWidth,\n            y: parseInt(position[1]) * self.zoneHeight\n        };\n    }\n}\n\nmodule.exports = Regions;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/map/regions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1087,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/regions.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/regions.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/regions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1088,
    "kind": "class",
    "name": "Regions",
    "memberof": "Kaetram-Open/server/js/map/regions.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/map/regions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1089,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 1090,
    "kind": "method",
    "name": "loadDoors",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#loadDoors",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1091,
    "kind": "method",
    "name": "getAdjacentRegions",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#getAdjacentRegions",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1092,
    "kind": "method",
    "name": "forEachRegion",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#forEachRegion",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1093,
    "kind": "method",
    "name": "forEachAdjacentRegion",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#forEachAdjacentRegion",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1094,
    "kind": "method",
    "name": "regionIdFromPosition",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#regionIdFromPosition",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1095,
    "kind": "method",
    "name": "regionIdToPosition",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#regionIdToPosition",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 1096,
    "kind": "method",
    "name": "regionIdToCoordinates",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#regionIdToCoordinates",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 1097,
    "kind": "file",
    "name": "Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "content": "/* global module */\n\nlet Minigame = require('../minigame');\n\nclass DreamWorld extends Minigame {}\n\nmodule.exports = DreamWorld;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1098,
    "kind": "variable",
    "name": "Minigame",
    "memberof": "Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/minigames/impl/dreamworld.js~Minigame",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1099,
    "kind": "class",
    "name": "DreamWorld",
    "memberof": "Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/minigames/impl/dreamworld.js~DreamWorld",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Minigame"
    ],
    "ignore": true
  },
  {
    "__docId__": 1100,
    "kind": "file",
    "name": "Kaetram-Open/server/js/minigames/minigame.js",
    "content": "/* global module */\n\nclass Minigame {\n    constructor(id, name) {\n        let self = this;\n\n        self.id = id;\n        self.name = name;\n    }\n\n    getId() {\n        return this.id;\n    }\n\n    getName() {\n        return this.name;\n    }\n}\n\nmodule.exports = Minigame;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/minigames/minigame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1101,
    "kind": "class",
    "name": "Minigame",
    "memberof": "Kaetram-Open/server/js/minigames/minigame.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/minigames/minigame.js~Minigame",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/minigames/minigame.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1102,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/minigames/minigame.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/minigames/minigame.js~Minigame#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 1103,
    "kind": "method",
    "name": "getId",
    "memberof": "Kaetram-Open/server/js/minigames/minigame.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/minigames/minigame.js~Minigame#getId",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1104,
    "kind": "method",
    "name": "getName",
    "memberof": "Kaetram-Open/server/js/minigames/minigame.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/minigames/minigame.js~Minigame#getName",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1105,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/connection.js",
    "content": "/* global module */\n\nclass Connection {\n    constructor(id, connection, server) {\n        let self = this;\n\n        self.id = id;\n        self.socket = connection;\n        self._server = server;\n\n        self.socket.on('message', message => {\n            if (self.listenCallback) self.listenCallback(JSON.parse(message));\n        });\n\n        self.socket.on('disconnect', () => {\n            log.info('Closed socket: ' + self.socket.conn.remoteAddress);\n\n            if (self.closeCallback) self.closeCallback();\n\n            delete self._server.removeConnection(self.id);\n        });\n    }\n\n    listen(callback) {\n        this.listenCallback = callback;\n    }\n\n    onClose(callback) {\n        this.closeCallback = callback;\n    }\n\n    send(message) {\n        this.sendUTF8(JSON.stringify(message));\n    }\n\n    sendUTF8(data) {\n        this.socket.send(data);\n    }\n\n    close(reason) {\n        if (reason) log.info('[Connection] Closing - ' + reason);\n\n        this.socket.conn.close();\n    }\n}\n\nmodule.exports = Connection;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/network/connection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1106,
    "kind": "class",
    "name": "Connection",
    "memberof": "Kaetram-Open/server/js/network/connection.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/connection.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1107,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 1108,
    "kind": "method",
    "name": "listen",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#listen",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1109,
    "kind": "member",
    "name": "listenCallback",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#listenCallback",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1110,
    "kind": "method",
    "name": "onClose",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#onClose",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1111,
    "kind": "member",
    "name": "closeCallback",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#closeCallback",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1112,
    "kind": "method",
    "name": "send",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#send",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1113,
    "kind": "method",
    "name": "sendUTF8",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#sendUTF8",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1114,
    "kind": "method",
    "name": "close",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#close",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "reason",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1115,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/messages.js",
    "content": "/* global module */\n\nlet Packets = require('./packets'),\n    Messages = {};\n\nMessages.Handshake = class {\n    constructor(info) {\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Handshake, this.info];\n    }\n};\n\nMessages.Welcome = class {\n    constructor(data) {\n        this.info = data; // array of info\n    }\n\n    serialize() {\n        return [Packets.Welcome, this.info];\n    }\n};\n\nMessages.Spawn = class {\n    constructor(entity) {\n        this.entity = entity;\n    }\n\n    serialize() {\n        return [Packets.Spawn, this.entity.getState()];\n    }\n};\n\nMessages.List = class {\n    constructor(list) {\n        this.list = list;\n    }\n\n    serialize() {\n        return [Packets.List, this.list];\n    }\n};\n\nMessages.Sync = class {\n    constructor(data) {\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Sync, this.info];\n    }\n};\n\nMessages.Equipment = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Equipment, this.opcode, this.info];\n    }\n};\n\nMessages.Movement = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Movement, this.opcode, this.info];\n    }\n};\n\nMessages.Teleport = class {\n    constructor(info) {\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Teleport, this.info];\n    }\n};\n\nMessages.Despawn = class {\n    constructor(id) {\n        this.id = id;\n    }\n\n    serialize() {\n        return [Packets.Despawn, this.id];\n    }\n};\n\nMessages.Animation = class {\n    constructor(id, data) {\n        this.id = id;\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Animation, this.id, this.info];\n    }\n};\n\n// TODO - Revise this when going over combat.\nMessages.Combat = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Combat, this.opcode, this.info];\n    }\n};\n\nMessages.Projectile = class {\n    constructor(opcode, data) {\n        this.opcode = opcode;\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Projectile, this.opcode, this.info];\n    }\n};\n\nMessages.Population = class {\n    constructor(playerCount) {\n        this.playerCount = playerCount;\n    }\n\n    serialize() {\n        return [Packets.Population, this.playerCount];\n    }\n};\n\nMessages.Points = class {\n    constructor(data) {\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Points, this.info];\n    }\n};\n\nMessages.Network = class {\n    constructor(opcode) {\n        this.opcode = opcode;\n    }\n\n    serialize() {\n        return [Packets.Network, this.opcode];\n    }\n};\n\nMessages.Chat = class {\n    constructor(data) {\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Chat, this.info];\n    }\n};\n\nMessages.Command = class {\n    constructor(data) {\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Command, this.info];\n    }\n};\n\n/**\n * Should we just have a packet that represents containers\n * as a whole or just send it separately for each?\n */\n\nMessages.Inventory = class {\n    constructor(opcode, data) {\n        this.opcode = opcode;\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Inventory, this.opcode, this.info];\n    }\n};\n\nMessages.Bank = class {\n    constructor(opcode, data) {\n        this.opcode = opcode;\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Bank, this.opcode, this.info];\n    }\n};\n\nMessages.Ability = class {\n    constructor(opcode, data) {\n        this.opcode = opcode;\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Ability, this.opcode, this.info];\n    }\n};\n\nMessages.Quest = class {\n    constructor(opcode, data) {\n        this.opcode = opcode;\n        this.info = data;\n    }\n\n    serialize() {\n        return [Packets.Quest, this.opcode, this.info];\n    }\n};\n\nMessages.Notification = class {\n    constructor(opcode, message) {\n        this.opcode = opcode;\n        this.message = message;\n    }\n\n    serialize() {\n        return [Packets.Notification, this.opcode, this.message];\n    }\n};\n\nMessages.Blink = class {\n    constructor(instance) {\n        this.instance = instance;\n    }\n\n    serialize() {\n        return [Packets.Blink, this.instance];\n    }\n};\n\nMessages.Heal = class {\n    constructor(info) {\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Heal, this.info];\n    }\n};\n\nMessages.Experience = class {\n    constructor(info) {\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Experience, this.info];\n    }\n};\n\nMessages.Death = class {\n    constructor(id) {\n        this.id = id;\n    }\n\n    serialize() {\n        return [Packets.Death, this.id];\n    }\n};\n\nMessages.Audio = class {\n    constructor(song) {\n        this.song = song;\n    }\n\n    serialize() {\n        return [Packets.Audio, this.song];\n    }\n};\n\nMessages.NPC = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.NPC, this.opcode, this.info];\n    }\n};\n\nMessages.Respawn = class {\n    constructor(instance, x, y) {\n        this.instance = instance;\n        this.x = x;\n        this.y = y;\n    }\n\n    serialize() {\n        return [Packets.Respawn, this.instance, this.x, this.y];\n    }\n};\n\nMessages.Enchant = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Enchant, this.opcode, this.info];\n    }\n};\n\nMessages.Guild = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Guild, this.opcode, this.info];\n    }\n};\n\nMessages.Pointer = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Pointer, this.opcode, this.info];\n    }\n};\n\nMessages.PVP = class {\n    constructor(id, pvp) {\n        this.id = id;\n        this.pvp = pvp;\n    }\n\n    serialize() {\n        return [Packets.PVP, this.id, this.pvp];\n    }\n};\n\nMessages.Shop = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Shop, this.opcode, this.info];\n    }\n};\n\nMessages.Minigame = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Shop, this.opcode, this.info];\n    }\n};\n\nMessages.Region = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Region, this.opcode, this.info];\n    }\n};\n\nMessages.Overlay = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Overlay, this.opcode, this.info];\n    }\n};\n\nMessages.Camera = class {\n    constructor(opcode, info) {\n        this.opcode = opcode;\n        this.info = info;\n    }\n\n    serialize() {\n        return [Packets.Camera, this.opcode, this.info];\n    }\n};\n\nmodule.exports = Messages;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/network/messages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1116,
    "kind": "variable",
    "name": "Packets",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Packets",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1117,
    "kind": "class",
    "name": "Handshake",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Handshake",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Handshake",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Handshake#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 1119,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Handshake",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Handshake#info",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1120,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Handshake",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Handshake#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1121,
    "kind": "class",
    "name": "Welcome",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Welcome",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Welcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Welcome#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 1123,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Welcome",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Welcome#info",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1124,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Welcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Welcome#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1125,
    "kind": "class",
    "name": "Spawn",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Spawn",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Spawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Spawn#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 1127,
    "kind": "member",
    "name": "entity",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Spawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Spawn#entity",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1128,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Spawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Spawn#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1129,
    "kind": "class",
    "name": "List",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~List",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1130,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~List#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 1131,
    "kind": "member",
    "name": "list",
    "memberof": "Kaetram-Open/server/js/network/messages.js~List",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~List#list",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1132,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~List#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1133,
    "kind": "class",
    "name": "Sync",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Sync",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1134,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Sync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Sync#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true
  },
  {
    "__docId__": 1135,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Sync",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Sync#info",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1136,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Sync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Sync#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1137,
    "kind": "class",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 1139,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1140,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment#info",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1141,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1142,
    "kind": "class",
    "name": "Movement",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Movement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true
  },
  {
    "__docId__": 1144,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Movement",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1145,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Movement",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement#info",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1146,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Movement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1147,
    "kind": "class",
    "name": "Teleport",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Teleport",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1148,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Teleport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Teleport#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true
  },
  {
    "__docId__": 1149,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Teleport",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Teleport#info",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1150,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Teleport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Teleport#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1151,
    "kind": "class",
    "name": "Despawn",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Despawn",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1152,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Despawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Despawn#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true
  },
  {
    "__docId__": 1153,
    "kind": "member",
    "name": "id",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Despawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Despawn#id",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1154,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Despawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Despawn#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1155,
    "kind": "class",
    "name": "Animation",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true
  },
  {
    "__docId__": 1157,
    "kind": "member",
    "name": "id",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Animation",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation#id",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1158,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Animation",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation#info",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1159,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1160,
    "kind": "class",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1161,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true
  },
  {
    "__docId__": 1162,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Combat",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1163,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Combat",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat#info",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1164,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1165,
    "kind": "class",
    "name": "Projectile",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1166,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true
  },
  {
    "__docId__": 1167,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1168,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile#info",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1169,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1170,
    "kind": "class",
    "name": "Population",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Population",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1171,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Population",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Population#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true
  },
  {
    "__docId__": 1172,
    "kind": "member",
    "name": "playerCount",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Population",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Population#playerCount",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1173,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Population",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Population#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1174,
    "kind": "class",
    "name": "Points",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Points",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1175,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Points#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true
  },
  {
    "__docId__": 1176,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Points",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Points#info",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1177,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Points#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1178,
    "kind": "class",
    "name": "Network",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Network",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1179,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Network#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true
  },
  {
    "__docId__": 1180,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Network",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Network#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1181,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Network#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1182,
    "kind": "class",
    "name": "Chat",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Chat",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1183,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Chat#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true
  },
  {
    "__docId__": 1184,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Chat",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Chat#info",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1185,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Chat#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1186,
    "kind": "class",
    "name": "Command",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Command",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1187,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Command#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true
  },
  {
    "__docId__": 1188,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Command",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Command#info",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1189,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Command#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1190,
    "kind": "class",
    "name": "Inventory",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": "Should we just have a packet that represents containers\nas a whole or just send it separately for each?",
    "lineNumber": 187,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1191,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true
  },
  {
    "__docId__": 1192,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1193,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory#info",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1194,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1195,
    "kind": "class",
    "name": "Bank",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1196,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 199,
    "undocument": true
  },
  {
    "__docId__": 1197,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Bank",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1198,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Bank",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank#info",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1199,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1200,
    "kind": "class",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1201,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Ability",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true
  },
  {
    "__docId__": 1202,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Ability",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1203,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Ability",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability#info",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1204,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Ability",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1205,
    "kind": "class",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1206,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true
  },
  {
    "__docId__": 1207,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Quest",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1208,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Quest",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest#info",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1209,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1210,
    "kind": "class",
    "name": "Notification",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1211,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Notification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true
  },
  {
    "__docId__": 1212,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Notification",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1213,
    "kind": "member",
    "name": "message",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Notification",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification#message",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1214,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Notification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1215,
    "kind": "class",
    "name": "Blink",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Blink",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Blink",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Blink#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 243,
    "undocument": true
  },
  {
    "__docId__": 1217,
    "kind": "member",
    "name": "instance",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Blink",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Blink#instance",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1218,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Blink",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Blink#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1219,
    "kind": "class",
    "name": "Heal",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Heal",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Heal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Heal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 253,
    "undocument": true
  },
  {
    "__docId__": 1221,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Heal",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Heal#info",
    "access": "public",
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1222,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Heal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Heal#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1223,
    "kind": "class",
    "name": "Experience",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Experience",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1224,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Experience",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Experience#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 263,
    "undocument": true
  },
  {
    "__docId__": 1225,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Experience",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Experience#info",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1226,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Experience",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Experience#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1227,
    "kind": "class",
    "name": "Death",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Death",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1228,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Death",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Death#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true
  },
  {
    "__docId__": 1229,
    "kind": "member",
    "name": "id",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Death",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Death#id",
    "access": "public",
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1230,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Death",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Death#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1231,
    "kind": "class",
    "name": "Audio",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Audio",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Audio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Audio#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true
  },
  {
    "__docId__": 1233,
    "kind": "member",
    "name": "song",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Audio",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Audio#song",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1234,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Audio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Audio#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1235,
    "kind": "class",
    "name": "NPC",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~NPC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 293,
    "undocument": true
  },
  {
    "__docId__": 1237,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~NPC",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1238,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~NPC",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC#info",
    "access": "public",
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1239,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~NPC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1240,
    "kind": "class",
    "name": "Respawn",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1241,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 304,
    "undocument": true
  },
  {
    "__docId__": 1242,
    "kind": "member",
    "name": "instance",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#instance",
    "access": "public",
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1243,
    "kind": "member",
    "name": "x",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#x",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1244,
    "kind": "member",
    "name": "y",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#y",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1245,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1246,
    "kind": "class",
    "name": "Enchant",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 315,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 316,
    "undocument": true
  },
  {
    "__docId__": 1248,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1249,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant#info",
    "access": "public",
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1250,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1251,
    "kind": "class",
    "name": "Guild",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1252,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 327,
    "undocument": true
  },
  {
    "__docId__": 1253,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Guild",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1254,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Guild",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild#info",
    "access": "public",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1255,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1256,
    "kind": "class",
    "name": "Pointer",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1257,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true
  },
  {
    "__docId__": 1258,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1259,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer#info",
    "access": "public",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1260,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1261,
    "kind": "class",
    "name": "PVP",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1262,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~PVP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true
  },
  {
    "__docId__": 1263,
    "kind": "member",
    "name": "id",
    "memberof": "Kaetram-Open/server/js/network/messages.js~PVP",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP#id",
    "access": "public",
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1264,
    "kind": "member",
    "name": "pvp",
    "memberof": "Kaetram-Open/server/js/network/messages.js~PVP",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP#pvp",
    "access": "public",
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1265,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~PVP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1266,
    "kind": "class",
    "name": "Shop",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1267,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Shop",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 360,
    "undocument": true
  },
  {
    "__docId__": 1268,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Shop",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1269,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Shop",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop#info",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1270,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Shop",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1271,
    "kind": "class",
    "name": "Minigame",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 370,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1272,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 371,
    "undocument": true
  },
  {
    "__docId__": 1273,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1274,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame#info",
    "access": "public",
    "description": null,
    "lineNumber": 373,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1275,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1276,
    "kind": "class",
    "name": "Region",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1277,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 382,
    "undocument": true
  },
  {
    "__docId__": 1278,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 383,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1279,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region#info",
    "access": "public",
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1280,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1281,
    "kind": "class",
    "name": "Overlay",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 392,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1282,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 393,
    "undocument": true
  },
  {
    "__docId__": 1283,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1284,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay#info",
    "access": "public",
    "description": null,
    "lineNumber": 395,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1285,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 398,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1286,
    "kind": "class",
    "name": "Camera",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 403,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1287,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true
  },
  {
    "__docId__": 1288,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Camera",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 405,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1289,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Camera",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera#info",
    "access": "public",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1290,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1291,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/network.js",
    "content": "let World = require('../game/world'),\n    Messages = require('./messages'),\n    Packets = require('./packets'),\n    Player = require('../game/entity/character/player/player'),\n    Utils = require('../util/utils'),\n    config = require('../../config'),\n    _ = require('underscore');\n\nclass Network {\n    constructor(world) {\n        let self = this;\n\n        self.world = world;\n        self.database = world.database;\n        self.socket = world.socket;\n        self.region = world.region;\n        self.map = world.map;\n\n        self.packets = {};\n\n        self.differenceThreshold = 4000;\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        self.world.onPlayerConnection(connection => {\n            self.handlePlayerConnection(connection);\n        });\n\n        self.world.onPopulationChange(() => {\n            self.handlePopulationChange();\n        });\n    }\n\n    parsePackets() {\n        let self = this;\n\n        /**\n         * This parses through the packet pool and sends them\n         */\n\n        for (let id in self.packets) {\n            if (\n                self.packets[id].length > 0 &&\n                self.packets.hasOwnProperty(id)\n            ) {\n                let conn = self.socket.getConnection(id);\n\n                if (conn) {\n                    conn.send(self.packets[id]);\n                    self.packets[id] = [];\n                    self.packets[id].id = id;\n                } else delete self.socket.getConnection(id);\n            }\n        }\n    }\n\n    handlePlayerConnection(connection) {\n        let self = this,\n            clientId = Utils.generateClientId(),\n            player = new Player(\n                self.world,\n                self.database,\n                connection,\n                clientId\n            ),\n            timeDifference =\n                new Date().getTime() - self.getSocketTime(connection);\n\n        if (!config.debug && timeDifference - self.differenceThreshold < 5000) {\n            connection.sendUTF8('toofast');\n            connection.close('Logging in too fast.');\n\n            return;\n        }\n\n        self.socket.ips[\n            connection.socket.conn.remoteAddress\n        ] = new Date().getTime();\n\n        self.addToPackets(player);\n\n        self.pushToPlayer(\n            player,\n            new Messages.Handshake({\n                id: clientId,\n                development: config.devClient\n            })\n        );\n    }\n\n    handlePopulationChange() {\n        this.pushBroadcast(new Messages.Population(this.world.getPopulation()));\n    }\n\n    addToPackets(player) {\n        this.packets[player.instance] = [];\n    }\n\n    /** ***************************************\n     * Broadcasting and Socket Communication *\n     *****************************************/\n\n    /**\n     * Broadcast a message to everyone in the world.\n     */\n\n    pushBroadcast(message) {\n        let self = this;\n\n        _.each(self.packets, packet => {\n            packet.push(message.serialize());\n        });\n    }\n\n    /**\n     * Broadcast a message to everyone with exceptions.\n     */\n\n    pushSelectively(message, ignores) {\n        let self = this;\n\n        _.each(self.packets, packet => {\n            if (ignores.indexOf(packet.id) < 0)\n                packet.push(message.serialize());\n        });\n    }\n\n    /**\n     * Push a message to a single player.\n     */\n\n    pushToPlayer(player, message) {\n        if (player && player.instance in this.packets)\n            this.packets[player.instance].push(message.serialize());\n    }\n\n    /**\n     * Specify an array of player instances to send message to\n     */\n\n    pushToPlayers(players, message) {\n        let self = this;\n\n        _.each(players, playerInstance => {\n            self.pushToPlayer(\n                self.world.getPlayerByInstance(playerInstance),\n                message\n            );\n        });\n    }\n\n    /**\n     * Send a message to the region the player is currently in.\n     */\n\n    pushToRegion(regionId, message, ignoreId) {\n        let self = this,\n            region = self.region.regions[regionId];\n\n        if (!region) return;\n\n        _.each(region.players, playerInstance => {\n            if (playerInstance !== ignoreId) {\n                self.pushToPlayer(\n                    self.world.getEntityByInstance(playerInstance),\n                    message\n                );\n            }\n        });\n    }\n\n    /**\n     * Sends a message to all the surrounding regions of the player.\n     * G  G  G\n     * G  P  G\n     * G  G  G\n     */\n\n    pushToAdjacentRegions(regionId, message, ignoreId) {\n        let self = this;\n\n        self.map.regions.forEachAdjacentRegion(regionId, id => {\n            self.pushToRegion(id, message, ignoreId);\n        });\n    }\n\n    /**\n     * Sends a message to an array of player names\n     */\n\n    pushToNameArray(names, message) {\n        let self = this;\n\n        _.each(names, name => {\n            let player = self.world.getPlayerByName(name);\n\n            if (player) self.pushToPlayer(player, message);\n        });\n    }\n\n    /**\n     * Sends a message to the region the player just left from\n     */\n\n    pushToOldRegions(player, message) {\n        let self = this;\n\n        _.each(player.recentRegions, id => {\n            self.pushToRegion(id, message);\n        });\n\n        player.recentRegions = [];\n    }\n\n    getSocketTime(connection) {\n        return this.socket.ips[connection.socket.conn.remoteAddress];\n    }\n}\n\nmodule.exports = Network;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/network/network.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1292,
    "kind": "variable",
    "name": "World",
    "memberof": "Kaetram-Open/server/js/network/network.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/network.js~World",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/network.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1293,
    "kind": "class",
    "name": "Network",
    "memberof": "Kaetram-Open/server/js/network/network.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/network.js~Network",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/network.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1294,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 1295,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#load",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1296,
    "kind": "method",
    "name": "parsePackets",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#parsePackets",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1297,
    "kind": "method",
    "name": "handlePlayerConnection",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#handlePlayerConnection",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1298,
    "kind": "method",
    "name": "handlePopulationChange",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#handlePopulationChange",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1299,
    "kind": "method",
    "name": "addToPackets",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#addToPackets",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1300,
    "kind": "method",
    "name": "pushBroadcast",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushBroadcast",
    "access": "public",
    "description": "Broadcast a message to everyone in the world.",
    "lineNumber": 111,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1301,
    "kind": "method",
    "name": "pushSelectively",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushSelectively",
    "access": "public",
    "description": "Broadcast a message to everyone with exceptions.",
    "lineNumber": 123,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignores",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1302,
    "kind": "method",
    "name": "pushToPlayer",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToPlayer",
    "access": "public",
    "description": "Push a message to a single player.",
    "lineNumber": 136,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1303,
    "kind": "method",
    "name": "pushToPlayers",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToPlayers",
    "access": "public",
    "description": "Specify an array of player instances to send message to",
    "lineNumber": 145,
    "params": [
      {
        "name": "players",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1304,
    "kind": "method",
    "name": "pushToRegion",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToRegion",
    "access": "public",
    "description": "Send a message to the region the player is currently in.",
    "lineNumber": 160,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoreId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1305,
    "kind": "method",
    "name": "pushToAdjacentRegions",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToAdjacentRegions",
    "access": "public",
    "description": "Sends a message to all the surrounding regions of the player.\nG  G  G\nG  P  G\nG  G  G",
    "lineNumber": 183,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoreId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1306,
    "kind": "method",
    "name": "pushToNameArray",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToNameArray",
    "access": "public",
    "description": "Sends a message to an array of player names",
    "lineNumber": 195,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1307,
    "kind": "method",
    "name": "pushToOldRegions",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToOldRegions",
    "access": "public",
    "description": "Sends a message to the region the player just left from",
    "lineNumber": 209,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1308,
    "kind": "method",
    "name": "getSocketTime",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#getSocketTime",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1309,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/packets.js",
    "content": "/* global module */\n\nlet Packets = {\n    Handshake: 0,\n    Intro: 1,\n    Welcome: 2,\n    Spawn: 3,\n    List: 4,\n    Who: 5,\n    Equipment: 6,\n    Ready: 7,\n    Sync: 8,\n    Movement: 9,\n    Teleport: 10,\n    Request: 11,\n    Despawn: 12,\n    Target: 13,\n    Combat: 14,\n    Animation: 15,\n    Projectile: 16,\n    Population: 17,\n    Points: 18,\n    Network: 19,\n    Chat: 20,\n    Command: 21,\n    Inventory: 22,\n    Bank: 23,\n    Ability: 24,\n    Quest: 25,\n    Notification: 26,\n    Blink: 27,\n    Heal: 28,\n    Experience: 29,\n    Death: 30,\n    Audio: 31,\n    NPC: 32,\n    Respawn: 33,\n    Trade: 34,\n    Enchant: 35,\n    Guild: 36,\n    Pointer: 37,\n    PVP: 38,\n    Click: 39,\n    Warp: 40,\n    Shop: 41,\n    Minigame: 42,\n    Region: 43,\n    Overlay: 44,\n    Camera: 45\n};\n\nPackets.IntroOpcode = {\n    Login: 0,\n    Register: 1,\n    Guest: 2\n};\n\nPackets.EquipmentOpcode = {\n    Batch: 0,\n    Equip: 1,\n    Unequip: 2\n};\n\nPackets.MovementOpcode = {\n    Request: 0,\n    Started: 1,\n    Step: 2,\n    Stop: 3,\n    Move: 4,\n    Orientate: 5,\n    Follow: 6,\n    Entity: 7,\n    Freeze: 8,\n    Stunned: 9\n};\n\nPackets.TargetOpcode = {\n    Talk: 0,\n    Attack: 1,\n    None: 2\n};\n\nPackets.CombatOpcode = {\n    Initiate: 0,\n    Hit: 1,\n    Finish: 2,\n    Sync: 3\n};\n\nPackets.ProjectileOpcode = {\n    Static: 0,\n    Dynamic: 1,\n    Create: 2,\n    Update: 3,\n    Impact: 4\n};\n\nPackets.NetworkOpcode = {\n    Ping: 0,\n    Pong: 1\n};\n\nPackets.InventoryOpcode = {\n    Batch: 0,\n    Add: 1,\n    Remove: 2,\n    Select: 3\n};\n\nPackets.BankOpcode = {\n    Batch: 0,\n    Add: 1,\n    Remove: 2,\n    Select: 3\n};\n\nPackets.QuestOpcode = {\n    QuestBatch: 0,\n    AchievementBatch: 1,\n    Progress: 2,\n    Finish: 3\n};\n\nPackets.NotificationOpcode = {\n    Ok: 0,\n    YesNo: 1,\n    Text: 2\n};\n\nPackets.NPCOpcode = {\n    Talk: 0,\n    Store: 1,\n    Bank: 2,\n    Enchant: 3,\n    Countdown: 4\n};\n\nPackets.TradeOpcode = {\n    Request: 1,\n    Accept: 2,\n    Decline: 3\n};\n\nPackets.EnchantOpcode = {\n    Select: 0,\n    Remove: 1,\n    Enchant: 2,\n    Update: 3\n};\n\nPackets.GuildOpcode = {\n    Create: 0,\n    Join: 1,\n    Leave: 2,\n    Rank: 3,\n    Loot: 4,\n    Update: 5\n};\n\nPackets.PointerOpcode = {\n    Location: 0,\n    NPC: 1,\n    Relative: 2,\n    Remove: 3,\n    Button: 4\n};\n\nPackets.ShopOpcode = {\n    Open: 0,\n    Buy: 1,\n    Sell: 2,\n    Refresh: 3\n};\n\nPackets.MinigameOpcode = {\n    TeamWar: 1,\n\n    TeamWarOpcode: {\n        Enter: 0,\n        Team: 1,\n        Red: 2,\n        Blue: 3,\n        Leave: 4\n    }\n};\n\nPackets.RegionOpcode = {\n    Render: 0,\n    Modify: 1,\n    Collision: 2,\n    Update: 3,\n    Reset: 4\n};\n\nPackets.OverlayOpcode = {\n    Set: 0,\n    Remove: 1,\n    Lamp: 2,\n    RemoveLamps: 3,\n    Darkness: 4\n};\n\nPackets.CameraOpcode = {\n    LockX: 0,\n    LockY: 1,\n    FreeFlow: 2,\n    Player: 3\n};\n\nPackets.PushOpcode = {\n    Broadcast: 0,\n    Selectively: 1,\n    Player: 2,\n    Players: 3,\n    Region: 4,\n    Regions: 5,\n    NameArray: 6,\n    OldRegions: 7\n};\n\nmodule.exports = Packets;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/network/packets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1310,
    "kind": "variable",
    "name": "Packets",
    "memberof": "Kaetram-Open/server/js/network/packets.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/packets.js~Packets",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/packets.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"Handshake\": *, \"Intro\": number, \"Welcome\": number, \"Spawn\": number, \"List\": number, \"Who\": number, \"Equipment\": number, \"Ready\": number, \"Sync\": number, \"Movement\": number, \"Teleport\": number, \"Request\": number, \"Despawn\": number, \"Target\": number, \"Combat\": number, \"Animation\": number, \"Projectile\": number, \"Population\": number, \"Points\": number, \"Network\": number, \"Chat\": number, \"Command\": number, \"Inventory\": number, \"Bank\": number, \"Ability\": number, \"Quest\": number, \"Notification\": number, \"Blink\": number, \"Heal\": number, \"Experience\": number, \"Death\": number, \"Audio\": number, \"NPC\": number, \"Respawn\": number, \"Trade\": number, \"Enchant\": number, \"Guild\": number, \"Pointer\": number, \"PVP\": number, \"Click\": number, \"Warp\": number, \"Shop\": number, \"Minigame\": number, \"Region\": number, \"Overlay\": number, \"Camera\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1311,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/socket.js",
    "content": "/* global module */\n\nclass Socket {\n    constructor(port) {\n        let self = this;\n\n        self.port = port;\n\n        self._connections = {};\n        self._counter = 0;\n    }\n\n    addConnection(connection) {\n        this._connections[connection.id] = connection;\n    }\n\n    removeConnection(id) {\n        delete this._connections[id];\n    }\n\n    getConnection(id) {\n        return this._connections[id];\n    }\n}\n\nmodule.exports = Socket;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/network/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1312,
    "kind": "class",
    "name": "Socket",
    "memberof": "Kaetram-Open/server/js/network/socket.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1313,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 1314,
    "kind": "method",
    "name": "addConnection",
    "memberof": "Kaetram-Open/server/js/network/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket#addConnection",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1315,
    "kind": "method",
    "name": "removeConnection",
    "memberof": "Kaetram-Open/server/js/network/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket#removeConnection",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1316,
    "kind": "method",
    "name": "getConnection",
    "memberof": "Kaetram-Open/server/js/network/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket#getConnection",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1317,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/websocket.js",
    "content": "/* global module */\n\nlet Socket = require('./socket'),\n    Connection = require('./connection'),\n    connect = require('connect'),\n    serve = require('serve-static'),\n    request = require('request'),\n    SocketIO = require('socket.io'),\n    http = require('http'),\n    https = require('https'),\n    Utils = require('../util/utils'),\n    config = require('../../config');\n\nclass WebSocket extends Socket {\n    constructor(host, port, version) {\n        super(port);\n\n        let self = this;\n\n        self.host = host;\n        self.version = version;\n\n        self.ips = {};\n\n        let app = connect();\n        app.use(serve('client', { index: ['index.html'] }), null);\n\n        let readyWebSocket = function(port) {\n            log.info('Server is now listening on: ' + port);\n\n            if (self.webSocketReadyCallback) self.webSocketReadyCallback();\n        };\n\n        if (config.ssl) {\n            self.httpServer = https.createServer(app).listen(port, host, () => {\n                readyWebSocket(port);\n            });\n        } else {\n            self.httpServer = http.createServer(app).listen(port, host, () => {\n                readyWebSocket(port);\n            });\n        }\n\n        self.io = new SocketIO(self.httpServer);\n        self.io.on('connection', socket => {\n            if (socket.handshake.headers['cf-connecting-ip']) {\n                socket.conn.remoteAddress =\n                    socket.handshake.headers['cf-connecting-ip'];\n            }\n\n            log.info('Received connection from: ' + socket.conn.remoteAddress);\n\n            let client = new Connection(self.createId(), socket, self);\n\n            socket.on('client', data => {\n                if (data.gVer !== self.version) {\n                    client.sendUTF8('updated');\n                    client.close(\n                        'Wrong client version - expected ' +\n                            self.version +\n                            ' received ' +\n                            data.gVer\n                    );\n                }\n\n                if (self.connectionCallback) self.connectionCallback(client);\n\n                self.addConnection(client);\n            });\n        });\n    }\n\n    createId() {\n        return '1' + Utils.random(9999) + '' + this._counter++;\n    }\n\n    onConnect(callback) {\n        this.connectionCallback = callback;\n    }\n\n    onWebSocketReady(callback) {\n        this.webSocketReadyCallback = callback;\n    }\n}\n\nmodule.exports = WebSocket;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/network/websocket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1318,
    "kind": "variable",
    "name": "Socket",
    "memberof": "Kaetram-Open/server/js/network/websocket.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/websocket.js~Socket",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/websocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1319,
    "kind": "class",
    "name": "WebSocket",
    "memberof": "Kaetram-Open/server/js/network/websocket.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/network/websocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "Socket"
    ],
    "ignore": true
  },
  {
    "__docId__": 1320,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 1321,
    "kind": "method",
    "name": "createId",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#createId",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1322,
    "kind": "method",
    "name": "onConnect",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#onConnect",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1323,
    "kind": "member",
    "name": "connectionCallback",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#connectionCallback",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1324,
    "kind": "method",
    "name": "onWebSocketReady",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#onWebSocketReady",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1325,
    "kind": "member",
    "name": "webSocketReadyCallback",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#webSocketReadyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1326,
    "kind": "file",
    "name": "Kaetram-Open/server/js/region/region.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    Messages = require('../network/messages'),\n    Packets = require('../network/packets'),\n    Player = require('../game/entity/character/player/player'),\n    fs = require('fs'),\n    ClientMap = require('../../data/map/world_client.json'),\n    config = require('../../config'),\n    map = 'server/data/map/world_client.json';\n\nclass Region {\n    /**\n     * Region Generation.\n     * This is used in order to send the client data about the new region\n     * it is about to enter. This has to be greatly expanded to generated\n     * instanced areas where other entities will not be pushed to surrounding\n     * players, even if they share the same coordinates.\n     */\n\n    constructor(world) {\n        let self = this;\n\n        self.map = world.map;\n        self.mapRegions = world.map.regions;\n\n        self.world = world;\n\n        self.regions = {};\n        self.loaded = false;\n\n        self.onAdd((entity, regionId) => {\n            if (!entity || !entity.username) return;\n\n            if (config.debug) {\n                log.info(\n                    'Entity - ' +\n                        entity.username +\n                        ' has entered region - ' +\n                        regionId\n                );\n            }\n\n            if (entity instanceof Player) self.sendRegion(entity, regionId);\n        });\n\n        self.onRemove((entity, oldRegions) => {\n            if (\n                !oldRegions ||\n                oldRegions.length < 1 ||\n                !entity ||\n                !entity.username\n            )\n                return;\n        });\n\n        self.onIncoming((entity, regionId) => {\n            if (!entity || !entity.username) return;\n\n            if (config.debug) {\n                log.info(\n                    'Entity - ' +\n                        entity.username +\n                        ' is incoming into region - ' +\n                        regionId\n                );\n            }\n        });\n\n        fs.watchFile(map, () => {\n            log.info('Received Map Update -> Sending to Players...');\n\n            fs.readFile(map, 'utf8', (error, data) => {\n                if (error) throw error;\n\n                ClientMap = JSON.parse(data);\n\n                self.updateRegions();\n            });\n        });\n\n        self.load();\n    }\n\n    load() {\n        let self = this;\n\n        self.clientWidth = ClientMap.width;\n        self.clientHeight = ClientMap.height;\n\n        self.mapRegions.forEachRegion(regionId => {\n            self.regions[regionId] = {\n                entities: {},\n                players: [],\n                incoming: []\n            };\n        });\n\n        self.loaded = true;\n\n        log.info('Finished loading regions!');\n    }\n\n    addEntityToInstance(entity, player) {\n        let self = this;\n\n        if (!entity) return;\n\n        self.add(entity, player.region);\n\n        player.updateRegion();\n    }\n\n    createInstance(player, regionId) {\n        let self = this;\n\n        /**\n         * We create an instance at the player's current surrounding\n         * region IDs. These will have to be disposed of whenever we're done.\n         */\n\n        player.instanced = true;\n\n        self.mapRegions.forEachAdjacentRegion(regionId, region => {\n            self.regions[Region.regionIdToInstance(player, region)] = {\n                entities: {},\n                players: [],\n                incoming: []\n            };\n        });\n\n        self.handle(player, true);\n        self.push(player);\n\n        self.world.push(Packets.PushOpcode.OldRegions, {\n            player: player,\n            message: new Messages.Region(Packets.RegionOpcode.Update, {\n                id: player.instance,\n                type: 'remove'\n            })\n        });\n    }\n\n    deleteInstance(player) {\n        let self = this;\n\n        player.instanced = false;\n\n        self.handle(player);\n        self.push(player);\n\n        self.mapRegions.forEachAdjacentRegion(player.region, regionId => {\n            let instancedRegion = Region.regionIdToInstance(player, regionId);\n\n            if (instancedRegion in self.regions)\n                delete self.regions[instancedRegion];\n        });\n    }\n\n    parseRegions() {\n        let self = this;\n\n        if (!self.loaded) return;\n\n        self.mapRegions.forEachRegion(regionId => {\n            if (self.regions[regionId].incoming.length < 1) return;\n\n            self.sendSpawns(regionId);\n\n            self.regions[regionId].incoming = [];\n        });\n    }\n\n    updateRegions() {\n        let self = this;\n\n        self.world.forEachPlayer(player => {\n            player.regionsLoaded = [];\n\n            self.sendRegion(player, player.region, true);\n        });\n    }\n\n    sendRegion(player, region, force) {\n        let self = this,\n            tileData = self.getRegionData(region, player, force),\n            dynamicTiles = player.doors.getAllTiles();\n\n        // Send dynamic tiles alongside the region\n        for (let i = 0; i < tileData.length; i++) {\n            let primaryTile = tileData[i],\n                index = dynamicTiles.indexes.indexOf(primaryTile.index);\n\n            if (index > -1) {\n                tileData[i].data = dynamicTiles.data[index];\n                tileData[i].isCollision = dynamicTiles.collisions[index];\n            }\n        }\n\n        // Send dynamic tiles independently\n        if (tileData.length < 1) {\n            for (let i = 0; i < dynamicTiles.indexes.length; i++) {\n                tileData[i] = {};\n\n                tileData[i].index = dynamicTiles.indexes[i];\n                tileData[i].data = dynamicTiles.data[i];\n                tileData[i].isCollision = dynamicTiles.collisions[i];\n            }\n        }\n\n        // No need to send empty data...\n        if (tileData.length > 0) {\n            player.send(\n                new Messages.Region(\n                    Packets.RegionOpcode.Render,\n                    tileData,\n                    force\n                )\n            );\n        }\n    }\n\n    sendSpawns(regionId) {\n        let self = this;\n\n        if (!regionId) return;\n\n        _.each(self.regions[regionId].incoming, entity => {\n            if (!entity || !entity.instance || entity.instanced) return;\n\n            self.world.push(Packets.PushOpcode.Regions, {\n                regionId: regionId,\n                message: new Messages.Spawn(entity),\n                ignoreId: entity.isPlayer() ? entity.instance : null\n            });\n        });\n    }\n\n    add(entity, regionId) {\n        let self = this,\n            newRegions = [];\n\n        if (entity && regionId && regionId in self.regions) {\n            self.mapRegions.forEachAdjacentRegion(regionId, id => {\n                if (entity.instanced)\n                    id = Region.regionIdToInstance(entity, id);\n\n                let region = self.regions[id];\n\n                if (region && region.entities) {\n                    region.entities[entity.instance] = entity;\n                    newRegions.push(id);\n                }\n            });\n\n            entity.region = regionId;\n\n            if (entity instanceof Player)\n                self.regions[regionId].players.push(entity.instance);\n        }\n\n        if (self.addCallback) self.addCallback(entity, regionId);\n\n        return newRegions;\n    }\n\n    remove(entity) {\n        let self = this,\n            oldRegions = [];\n\n        if (entity && entity.region) {\n            let region = self.regions[entity.region];\n\n            if (entity instanceof Player) {\n                region.players = _.reject(region.players, id => {\n                    return id === entity.instance;\n                });\n            }\n\n            self.mapRegions.forEachAdjacentRegion(entity.region, id => {\n                if (\n                    self.regions[id] &&\n                    entity.instance in self.regions[id].entities\n                ) {\n                    delete self.regions[id].entities[entity.instance];\n                    oldRegions.push(id);\n                }\n            });\n\n            entity.region = null;\n        }\n\n        if (self.removeCallback) self.removeCallback(entity, oldRegions);\n\n        return oldRegions;\n    }\n\n    incoming(entity, regionId) {\n        let self = this;\n\n        if (!entity || !regionId) return;\n\n        let region = self.regions[regionId];\n\n        if (region && !_.include(region.entities, entity.instance))\n            region.incoming.push(entity);\n\n        if (self.incomingCallback) self.incomingCallback(entity, regionId);\n    }\n\n    handle(entity, region) {\n        let self = this,\n            regionsChanged = false;\n\n        if (!entity) return regionsChanged;\n\n        let regionId =\n            region || self.mapRegions.regionIdFromPosition(entity.x, entity.y);\n\n        if (entity.instanced)\n            regionId = Region.regionIdToInstance(entity, regionId);\n\n        if (!entity.region || (entity.region && entity.region !== regionId)) {\n            regionsChanged = true;\n\n            self.incoming(entity, regionId);\n\n            let oldRegions = self.remove(entity),\n                newRegions = self.add(entity, regionId);\n\n            if (_.size(oldRegions) > 0)\n                entity.recentRegions = _.difference(oldRegions, newRegions);\n        }\n\n        return regionsChanged;\n    }\n\n    push(player) {\n        let self = this,\n            entities;\n\n        if (!player || !(player.region in self.regions)) return;\n\n        entities = _.keys(self.regions[player.region].entities);\n\n        entities = _.reject(entities, instance => {\n            return instance === player.instance; // TODO //|| player.isInvisible(instance);\n        });\n\n        entities = _.map(entities, instance => {\n            return parseInt(instance);\n        });\n\n        player.send(new Messages.List(entities));\n    }\n\n    changeTileAt(player, newTile, x, y) {\n        let self = this,\n            index = self.gridPositionToIndex(x, y);\n\n        player.send(Region.getModify(index, newTile));\n    }\n\n    changeGlobalTile(newTile, x, y) {\n        let self = this,\n            index = self.gridPositionToIndex(x, y);\n\n        ClientMap.data[index] = newTile;\n\n        self.world.push(Packets.PushOpcode.Broadcast, {\n            message: Region.getModify(index, newTile)\n        });\n    }\n\n    getRegionData(region, player, force) {\n        let self = this,\n            data = [];\n\n        if (!player) return data;\n\n        self.mapRegions.forEachAdjacentRegion(\n            region,\n            regionId => {\n                if (!player.hasLoadedRegion(regionId) || force) {\n                    player.loadRegion(regionId);\n\n                    let bounds = self.getRegionBounds(regionId);\n\n                    for (\n                        let i = 0, y = bounds.startY;\n                        y <= bounds.endY;\n                        y++, i++\n                    ) {\n                        for (let x = bounds.startX; x < bounds.endX; x++) {\n                            let index = self.gridPositionToIndex(x - 1, y),\n                                tileData = ClientMap.data[index],\n                                isCollision =\n                                    ClientMap.collisions.indexOf(index) > -1 ||\n                                    !tileData;\n\n                            data.push({\n                                index: index,\n                                data: tileData,\n                                isCollision: isCollision\n                            });\n                        }\n                    }\n                }\n            },\n            2\n        );\n\n        return data;\n    }\n\n    getRegionBounds(regionId) {\n        let self = this,\n            regionCoordinates = self.mapRegions.regionIdToCoordinates(regionId);\n\n        return {\n            startX: regionCoordinates.x,\n            startY: regionCoordinates.y,\n            endX: regionCoordinates.x + self.mapRegions.zoneWidth,\n            endY: regionCoordinates.y + self.mapRegions.zoneHeight\n        };\n    }\n\n    static getModify(index, newTile) {\n        return new Messages.Region(Packets.RegionOpcode.Modify, {\n            index: index,\n            newTile: newTile\n        });\n    }\n\n    static instanceToRegionId(instancedRegionId) {\n        let region = instancedRegionId.split('-');\n\n        return region[0] + '-' + region[1];\n    }\n\n    static regionIdToInstance(player, regionId) {\n        return regionId + '-' + player.instance;\n    }\n\n    gridPositionToIndex(x, y) {\n        return y * this.clientWidth + x + 1;\n    }\n\n    onAdd(callback) {\n        this.addCallback = callback;\n    }\n\n    onRemove(callback) {\n        this.removeCallback = callback;\n    }\n\n    onIncoming(callback) {\n        this.incomingCallback = callback;\n    }\n}\n\nmodule.exports = Region;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/region/region.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1327,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/region/region.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/region/region.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1328,
    "kind": "class",
    "name": "Region",
    "memberof": "Kaetram-Open/server/js/region/region.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~Region",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/region/region.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1329,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#constructor",
    "access": "public",
    "description": "Region Generation.\nThis is used in order to send the client data about the new region\nit is about to enter. This has to be greatly expanded to generated\ninstanced areas where other entities will not be pushed to surrounding\nplayers, even if they share the same coordinates.",
    "lineNumber": 21
  },
  {
    "__docId__": 1330,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#load",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1331,
    "kind": "method",
    "name": "addEntityToInstance",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#addEntityToInstance",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1332,
    "kind": "method",
    "name": "createInstance",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#createInstance",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1333,
    "kind": "method",
    "name": "deleteInstance",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#deleteInstance",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1334,
    "kind": "method",
    "name": "parseRegions",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#parseRegions",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1335,
    "kind": "method",
    "name": "updateRegions",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#updateRegions",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1336,
    "kind": "method",
    "name": "sendRegion",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#sendRegion",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1337,
    "kind": "method",
    "name": "sendSpawns",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#sendSpawns",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1338,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#add",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1339,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#remove",
    "access": "public",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1340,
    "kind": "method",
    "name": "incoming",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#incoming",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1341,
    "kind": "method",
    "name": "handle",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#handle",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1342,
    "kind": "method",
    "name": "push",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#push",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1343,
    "kind": "method",
    "name": "changeTileAt",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#changeTileAt",
    "access": "public",
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "newTile",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1344,
    "kind": "method",
    "name": "changeGlobalTile",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#changeGlobalTile",
    "access": "public",
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "params": [
      {
        "name": "newTile",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1345,
    "kind": "method",
    "name": "getRegionData",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#getRegionData",
    "access": "public",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "params": [
      {
        "name": "region",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1346,
    "kind": "method",
    "name": "getRegionBounds",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#getRegionBounds",
    "access": "public",
    "description": null,
    "lineNumber": 416,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"startX\": *, \"startY\": *, \"endX\": *, \"endY\": *}"
      ]
    }
  },
  {
    "__docId__": 1347,
    "kind": "method",
    "name": "getModify",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~Region.getModify",
    "access": "public",
    "description": null,
    "lineNumber": 428,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "newTile",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1348,
    "kind": "method",
    "name": "instanceToRegionId",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~Region.instanceToRegionId",
    "access": "public",
    "description": null,
    "lineNumber": 435,
    "undocument": true,
    "params": [
      {
        "name": "instancedRegionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1349,
    "kind": "method",
    "name": "regionIdToInstance",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~Region.regionIdToInstance",
    "access": "public",
    "description": null,
    "lineNumber": 441,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1350,
    "kind": "method",
    "name": "gridPositionToIndex",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#gridPositionToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 445,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1351,
    "kind": "method",
    "name": "onAdd",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#onAdd",
    "access": "public",
    "description": null,
    "lineNumber": 449,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1352,
    "kind": "member",
    "name": "addCallback",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#addCallback",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1353,
    "kind": "method",
    "name": "onRemove",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#onRemove",
    "access": "public",
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1354,
    "kind": "member",
    "name": "removeCallback",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#removeCallback",
    "access": "public",
    "description": null,
    "lineNumber": 454,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1355,
    "kind": "method",
    "name": "onIncoming",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#onIncoming",
    "access": "public",
    "description": null,
    "lineNumber": 457,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1356,
    "kind": "member",
    "name": "incomingCallback",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#incomingCallback",
    "access": "public",
    "description": null,
    "lineNumber": 458,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1357,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/abilities.js",
    "content": "/* global module */\n\nlet Abilities = {};\n\nAbilities.Data = {};\nAbilities.Ids = {};\n\nmodule.exports = Abilities;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/abilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1358,
    "kind": "variable",
    "name": "Abilities",
    "memberof": "Kaetram-Open/server/js/util/abilities.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/abilities.js~Abilities",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/abilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1359,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/constants.js",
    "content": "/* global module */\n\nlet Constants = {\n    MAX_STACK: 2147483646,\n    MAX_LEVEL: 135\n};\n\nmodule.exports = Constants;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1360,
    "kind": "variable",
    "name": "Constants",
    "memberof": "Kaetram-Open/server/js/util/constants.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/constants.js~Constants",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/constants.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"MAX_STACK\": number, \"MAX_LEVEL\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1361,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/formulas.js",
    "content": "/* global module */\n\nlet Formulas = {},\n    Utils = require('./utils'),\n    Constants = require('./constants');\n\nFormulas.LevelExp = [];\n\nmodule.exports = Formulas;\n\nFormulas.getDamage = (attacker, target, special) => {\n    let maxDamage = Formulas.getMaxDamage(attacker, target, special),\n        accuracy = Utils.randomInt(0, attacker.level);\n\n    return Utils.randomInt(accuracy, maxDamage);\n};\n\nFormulas.getMaxDamage = (attacker, target, special) => {\n    if (!attacker || !target) return;\n\n    let damageDealt,\n        damageAbsorbed,\n        damageAmplifier = 1,\n        absorptionAmplifier = 1,\n        usingRange = attacker.weapon\n            ? attacker.weapon.isRanged()\n            : attacker.isRanged(),\n        weaponLevel = attacker.weapon\n            ? attacker.weapon.getLevel()\n            : attacker.weaponLevel,\n        armourLevel = attacker.armour\n            ? attacker.armour.getDefense()\n            : attacker.armourLevel,\n        pendant = attacker.pendant ? attacker.pendant : null,\n        ring = attacker.ring ? attacker.ring : null,\n        boots = attacker.boots ? attacker.boots : null,\n        targetArmour = target.armour\n            ? target.armour.getDefense()\n            : target.armourLevel,\n        targetPendant = target.pendant ? target.pendant : null,\n        targetRing = target.ring ? target.ring : null,\n        targetBoots = target.boots ? target.boots : null,\n        isPlayer = attacker.type === 'player';\n\n    damageDealt =\n        (isPlayer ? 10 : 0) +\n        attacker.level +\n        (attacker.level * weaponLevel) / 4 +\n        (attacker.level + weaponLevel * armourLevel) / 8;\n\n    /**\n     * Apply ranged damage deficit\n     */\n\n    if (usingRange) damageDealt /= 1.275;\n\n    if (special) damageDealt *= 1.0575;\n\n    /**\n     * Apply special amulets\n     */\n\n    if (pendant && pendant.pendantLevel > 0)\n        damageAmplifier *= pendant.getBaseAmplifier();\n\n    if (ring && ring.ringLevel > 0) damageAmplifier *= ring.getBaseAmplifier();\n\n    if (boots && boots.bootsLevel > 0)\n        damageAmplifier *= boots.getBaseAmplifier();\n\n    /**\n     * Just so amplifiers don't get out of hand.\n     */\n\n    if (damageAmplifier > 1.6) damageAmplifier = 1.6;\n\n    damageDealt *= damageAmplifier;\n\n    damageAbsorbed = target.level + targetArmour / 2;\n\n    if (targetPendant) absorptionAmplifier *= targetPendant.getBaseAmplifier();\n\n    if (targetRing) absorptionAmplifier *= targetRing.getBaseAmplifier();\n\n    if (targetBoots) absorptionAmplifier *= targetBoots.getBaseAmplifier();\n\n    damageAbsorbed *= absorptionAmplifier;\n\n    let damage = damageDealt - damageAbsorbed;\n\n    damage = Math.ceil(damage);\n\n    if (isNaN(damage) || !damage || damage < 0) damage = 0;\n\n    return damage;\n};\n\nFormulas.getCritical = (attacker, target) => {\n    if (!attacker || !target) return;\n\n    /**\n     * The critical is the player's max hit plus *= critical multiplier of the weapon\n     */\n\n    let damage = Formulas.getDamage(attacker, target),\n        multiplier = attacker.weapon.abilityLevel / 10;\n\n    return (damage *= multiplier);\n};\n\nFormulas.getWeaponBreak = (attacker, target) => {\n    if (!attacker || !target) return;\n\n    let targetArmour = target.getArmourLevel();\n\n    /**\n     * The chance a weapon will break ....\n     */\n\n    let breakChance = Utils.randomRange(1, 100);\n\n    return breakChance > 75;\n};\n\nFormulas.getAoEDamage = (attacker, target) => {\n    /**\n     * Preliminary setup until this function is expanded\n     * and fits in the necessary algorithms.\n     */\n\n    return Formulas.getDamage(attacker, target);\n};\n\nFormulas.nextExp = experience => {\n    if (experience < 0) return -1;\n\n    for (let i = 1; i < Formulas.LevelExp.length; i++)\n        if (experience < Formulas.LevelExp[i]) return Formulas.LevelExp[i];\n};\n\nFormulas.prevExp = experience => {\n    if (experience < 0) return -1;\n\n    for (let i = Constants.MAX_LEVEL; i > 0; i--)\n        if (experience > Formulas.LevelExp[i]) return Formulas.LevelExp[i];\n};\n\nFormulas.expToLevel = experience => {\n    if (experience < 0) return -1;\n\n    for (let i = 1; i < Formulas.LevelExp.length; i++)\n        if (experience < Formulas.LevelExp[i]) return i;\n};\n\nFormulas.getRewardExperience = player => {\n    if (!player) return;\n\n    return (5 + player.level) * player.level;\n};\n\nFormulas.getMaxHitPoints = level => {\n    return 100 + level * 30;\n};\n\nFormulas.getMaxMana = level => {\n    return 10 + level * 8;\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/formulas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1362,
    "kind": "variable",
    "name": "Formulas",
    "memberof": "Kaetram-Open/server/js/util/formulas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/formulas.js~Formulas",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/formulas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1363,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/items.js",
    "content": "/* global module */\n\nlet Items = {};\n\nItems.Data = {};\nItems.Ids = {};\nItems.onCreate = {};\n\nItems.Plugins = {};\n\nItems.getData = name => {\n    if (name in Items.Data) return Items.Data[name];\n\n    return 'null';\n};\n\nItems.hasPlugin = string => {\n    if (Number.isInteger(string)) string = Items.idToString(string);\n\n    if (string in Items.Plugins) return true;\n\n    return false;\n};\n\nItems.getPlugin = id => {\n    let string = Items.idToString(id);\n\n    if (Items.hasPlugin(string)) return Items.Plugins[string];\n\n    return null;\n};\n\nItems.idToString = id => {\n    if (id in Items.Ids) return Items.Ids[id].key;\n\n    return 'null';\n};\n\nItems.idToName = id => {\n    if (id in Items.Ids) return Items.Ids[id].name;\n\n    return 'null';\n};\n\nItems.stringToId = name => {\n    if (name in Items.Data) return Items.Data[name].id;\n    else log.error('Item: ' + name + ' not found in the database.');\n\n    return 'null';\n};\n\nItems.getLevelRequirement = name => {\n    let level = 1,\n        item = Items.Data[name];\n\n    if (item && item.requirement) return item.requirement;\n\n    if (Items.isWeapon(name)) level = Items.Data[name].attack;\n    else if (Items.isArmour(name)) level = Items.Data[name].defense;\n    else if (Items.isPendant(name)) level = Items.Data[name].pendantLevel;\n    else if (Items.isRing(name)) level = Items.Data[name].ringLevel;\n    else if (Items.isBoots(name)) level = Items.Data[name].bootsLevel;\n\n    return level * 2;\n};\n\nItems.getWeaponLevel = weaponName => {\n    if (Items.isWeapon(weaponName)) return Items.Data[weaponName].attack;\n\n    return -1;\n};\n\nItems.getArmourLevel = armourName => {\n    if (Items.isArmour(armourName)) return Items.Data[armourName].defense;\n\n    return -1;\n};\n\nItems.getPendantLevel = pendantName => {\n    if (Items.isPendant(pendantName))\n        return Items.Data[pendantName].pendantLevel;\n\n    return -1;\n};\n\nItems.getRingLevel = ringName => {\n    if (Items.isRing(ringName)) return Items.Data[ringName].ringLevel;\n\n    return -1;\n};\n\nItems.getBootsLevel = bootsName => {\n    if (Items.isBoots(bootsName)) return Items.Data[bootsName].bootsLevel;\n\n    return -1;\n};\n\nItems.isArcherWeapon = string => {\n    if (string in Items.Data) return Items.Data[string].type === 'weaponarcher';\n\n    return false;\n};\n\nItems.isWeapon = string => {\n    if (string in Items.Data) {\n        return (\n            Items.Data[string].type === 'weapon' ||\n            Items.Data[string].type === 'weaponarcher'\n        );\n    }\n\n    return false;\n};\n\nItems.isArmour = string => {\n    if (string in Items.Data) {\n        return (\n            Items.Data[string].type === 'armor' ||\n            Items.Data[string].type === 'armorarcher'\n        );\n    }\n\n    return false;\n};\n\nItems.isPendant = string => {\n    if (string in Items.Data) return Items.Data[string].type === 'pendant';\n\n    return false;\n};\n\nItems.isRing = string => {\n    if (string in Items.Data) return Items.Data[string].type === 'ring';\n\n    return false;\n};\n\nItems.isBoots = string => {\n    if (string in Items.Data) return Items.Data[string].type === 'boots';\n\n    return false;\n};\n\nItems.getType = id => {\n    if (id in Items.Ids) return Items.Ids[id].type;\n\n    return null;\n};\n\nItems.isStackable = id => {\n    if (id in Items.Ids) return Items.Ids[id].stackable;\n\n    return false;\n};\n\nItems.isEdible = id => {\n    if (id in Items.Ids) return Items.Ids[id].edible;\n\n    return false;\n};\n\nItems.getCustomData = id => {\n    if (id in Items.Ids) return Items.Ids[id].customData;\n\n    return null;\n};\n\nItems.maxStackSize = id => {\n    if (id in Items.Ids) return Items.Ids[id].maxStackSize;\n\n    return false;\n};\n\nItems.isShard = id => {\n    return id === 253 || id === 254 || id === 255 || id === 256 || id === 257;\n};\n\nItems.isEnchantable = id => {\n    return Items.getType(id) !== 'object' && Items.getType(id) !== 'craft';\n};\n\nItems.getShardTier = id => {\n    if (id === 253) return 1;\n    else if (id === 254) return 2;\n    else if (id === 255) return 3;\n    else if (id === 256) return 4;\n    else if (id === 257) return 5;\n};\n\nItems.isEquippable = string => {\n    return (\n        Items.isArmour(string) ||\n        Items.isWeapon(string) ||\n        Items.isPendant(string) ||\n        Items.isRing(string) ||\n        Items.isBoots(string)\n    );\n};\n\nItems.healsHealth = id => {\n    if (id in Items.Ids) return Items.Ids[id].healsHealth > 0;\n\n    return false;\n};\n\nItems.healsMana = id => {\n    if (id in Items.Ids) return Items.Ids[id].healsMana > 0;\n};\n\nItems.getHealingFactor = id => {\n    if (id in Items.Ids) return Items.Ids[id].healsHealth;\n\n    return 0;\n};\n\nItems.getManaFactor = id => {\n    if (id in Items.Ids) return Items.Ids[id].healsMana;\n    return 0;\n};\n\nmodule.exports = Items;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/items.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1364,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/js/util/items.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/items.js~Items",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/items.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1365,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/mobs.js",
    "content": "/* global module */\n\nlet Mobs = {};\n\nMobs.Properties = {};\nMobs.Ids = {};\nMobs.Plugins = {};\n\nMobs.idToString = id => {\n    if (id in Mobs.Ids) return Mobs.Ids[id].key;\n\n    return null;\n};\n\nMobs.idToName = id => {\n    if (id in Mobs.Ids) return Mobs.Ids[id].name;\n\n    return null;\n};\n\nMobs.getXp = id => {\n    if (id in Mobs.Ids) return Mobs.Ids[id].xp;\n\n    return -1;\n};\n\nMobs.exists = id => {\n    return id in Mobs.Ids;\n};\n\nMobs.hasCombatPlugin = id => {\n    return id in Mobs.Ids && Mobs.Ids[id].combatPlugin in Mobs.Plugins;\n};\n\nMobs.isNewCombatPlugin = id => {\n    if (id in Mobs.Ids && Mobs.Ids[id].combatPlugin in Mobs.Plugins)\n        return Mobs.Plugins[Mobs.Ids[id].combatPlugin];\n};\n\nmodule.exports = Mobs;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/mobs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1366,
    "kind": "variable",
    "name": "Mobs",
    "memberof": "Kaetram-Open/server/js/util/mobs.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/mobs.js~Mobs",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/mobs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1367,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/modules.js",
    "content": "/* global module */\n\nlet Modules = {\n    Orientation: {\n        Up: 0,\n        Down: 1,\n        Left: 2,\n        Right: 3\n    },\n\n    Equipment: {\n        Armour: 0,\n        Weapon: 1,\n        Pendant: 2,\n        Ring: 3,\n        Boots: 4\n    },\n\n    Hits: {\n        Damage: 0,\n        Poison: 1,\n        Heal: 2,\n        Mana: 3,\n        Experience: 4,\n        LevelUp: 5,\n        Critical: 6,\n        Stun: 7,\n        Explosive: 8\n    },\n\n    Projectiles: {\n        Arrow: 0,\n        Boulder: 1,\n        FireBall: 2,\n        IceBall: 3,\n        Terror: 4,\n        Tornado: 5\n    },\n\n    Abilities: {\n        Freeze: 0,\n        Curse: 1,\n        Smash: 2,\n        Tornado: 3,\n        Run: 4,\n        Call: 5\n    },\n\n    Enchantment: {\n        Bloodsucking: 0,\n        Critical: 1,\n        Evasion: 2,\n        Spike: 3,\n        Explosive: 4,\n        Stun: 5,\n        AntiStun: 6,\n        Splash: 7\n    },\n\n    Trade: {\n        Request: 0,\n        Started: 1,\n        Accepted: 2,\n        Finished: 3\n    },\n\n    Achievements: {\n        Type: {\n            Killing: 0,\n            Scavenge: 1\n        },\n\n        Rewards: {\n            Item: 0,\n            Experience: 1,\n            Skill: 2\n        }\n    },\n\n    Quests: {\n        Introduction: 0,\n        BulkySituation: 1\n    },\n\n    Languages: {\n        English: 0,\n        Romanian: 1,\n        French: 2,\n        Spanish: 3,\n        German: 4,\n        Japanese: 5,\n        Chinese: 6\n    },\n\n    Guild: {\n        Ranks: {\n            Guest: 0,\n            Soldier: 1,\n            Corporal: 2,\n            General: 3\n        }\n    },\n\n    Warps: {\n        0: ['Mudwich', 25, 95, true, 1], // Starting Village\n        1: ['Northton', 49, 207, true, 25], // Ice World\n        2: ['Lakesworld', 530, 121, false, 60], // Citadels\n        3: ['Aynor', 178, 140, true, 50],\n        4: ['Crullfeld', 397, 227, true, 20], // Desert\n        5: ['Patsow', 262, 131, true, 25] // Lava\n    }\n};\n\nmodule.exports = Modules;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/modules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1368,
    "kind": "variable",
    "name": "Modules",
    "memberof": "Kaetram-Open/server/js/util/modules.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/modules.js~Modules",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/modules.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"Orientation\": *, \"Equipment\": *, \"Hits\": *, \"Projectiles\": *, \"Abilities\": *, \"Enchantment\": *, \"Trade\": *, \"Achievements\": *, \"Quests\": *, \"Languages\": *, \"Guild\": *, \"Warps\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1369,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/npcs.js",
    "content": "/* global module */\n\nlet NPCs = {};\n\nNPCs.Properties = {};\nNPCs.Ids = {};\n\nNPCs.idToString = id => {\n    if (id in NPCs.Ids) return NPCs.Ids[id].key;\n\n    return null;\n};\n\nNPCs.idToName = id => {\n    if (id in NPCs.Ids) return NPCs.Ids[id].name;\n\n    return null;\n};\n\nNPCs.getText = id => {\n    if (id in NPCs.Ids) return NPCs.Ids[id].text;\n\n    return null;\n};\n\nNPCs.getType = id => {\n    if (id in NPCs.Ids) return NPCs.Ids[id].type;\n\n    return null;\n};\n\nmodule.exports = NPCs;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/npcs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1370,
    "kind": "variable",
    "name": "NPCs",
    "memberof": "Kaetram-Open/server/js/util/npcs.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/npcs.js~NPCs",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/npcs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1371,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/parser.js",
    "content": "/* global module */\n\nlet _ = require('underscore'),\n    NPCData = require('../../data/npcs'),\n    ItemData = require('../../data/items'),\n    MobData = require('../../data/mobs'),\n    AbilityData = require('../../data/abilities'),\n    ShopsData = require('../../data/shops'),\n    Mobs = require('./mobs'),\n    NPCs = require('./npcs'),\n    Items = require('./items'),\n    Abilities = require('./abilities'),\n    Shops = require('./shops'),\n    Formulas = require('./formulas'),\n    Constants = require('./constants');\n\nclass Parser {\n    constructor() {\n        let self = this;\n\n        self.loadMobData();\n        self.loadNPCData();\n        self.loadItemData();\n        self.loadAbilityData();\n        self.loadShops();\n        self.loadLevels();\n    }\n\n    loadMobData() {\n        let mobCounter = 0;\n\n        _.each(MobData, (value, key) => {\n            key = key.toLowerCase();\n\n            Mobs.Properties[key] = {\n                key: key,\n                id: value.id,\n                name: value.name ? value.name : key,\n                drops: value.drops ? value.drops : null,\n                hitPoints: value.hitPoints ? value.hitPoints : 10,\n                armour: value.armour ? value.armour : 0,\n                weapon: value.weapon ? value.weapon : 0,\n                xp: value.xp ? value.xp : 0,\n                level: value.level ? value.level : 0,\n                aggroRange: value.aggroRange ? value.aggroRange : 2,\n                attackRange: value.attackRange ? value.attackRange : 1,\n                aggressive: value.aggressive ? value.aggressive : false,\n                isPoisonous: value.isPoisonous ? value.isPoisonous : false,\n                attackRate: value.attackRate ? value.attackRate : 1000,\n                movementSpeed: value.movementSpeed ? value.movementSpeed : 200,\n                projectileName: value.projectileName\n                    ? value.projectileName\n                    : null,\n                spawnDelay: value.spawnDelay ? value.spawnDelay : 60000,\n                combatPlugin: value.combatPlugin ? value.combatPlugin : null,\n                hiddenName: value.hiddenName ? value.hiddenName : false\n            };\n\n            Mobs.Ids[value.id] = Mobs.Properties[key];\n\n            mobCounter++;\n        });\n\n        Mobs.Plugins = require('../util/plugins')(\n            __dirname + '/../../data/combat/'\n        );\n\n        log.info('Finished loading ' + mobCounter + ' mobs.');\n        log.info(\n            'Loaded ' + Object.keys(Mobs.Plugins).length + ' combat plugins.'\n        );\n    }\n\n    loadNPCData() {\n        let npcCounter = 0;\n\n        _.each(NPCData, (value, key) => {\n            key = key.toLowerCase();\n\n            NPCs.Properties[key] = {\n                key: key,\n                id: value.id,\n                name: value.name ? value.name : key,\n                text: value.text ? value.text : null,\n                type: value.type ? value.type : null\n            };\n\n            NPCs.Ids[value.id] = NPCs.Properties[key];\n\n            npcCounter++;\n        });\n\n        log.info('Finished loading ' + npcCounter + ' NPCs.');\n    }\n\n    loadItemData() {\n        let itemCounter = 0;\n\n        _.each(ItemData, (value, key) => {\n            key = key.toLowerCase();\n\n            Items.Data[key] = {\n                key: key,\n                id: value.id ? value.id : -1,\n                type: value.type ? value.type : 'object',\n                attack: value.attack ? value.attack : 0,\n                defense: value.defense ? value.defense : 0,\n                pendantLevel: value.pendantLevel ? value.pendantLevel : null,\n                ringLevel: value.ringLevel ? value.ringLevel : null,\n                bootsLevel: value.bootsLevel ? value.bootsLevel : null,\n                name: value.name ? value.name : key,\n                price: value.price ? value.price : 1,\n                storeCount: value.storeCount ? value.storeCount : 1,\n                stackable: value.stackable ? value.stackable : 0,\n                edible: value.edible ? value.edible : 0,\n                healsHealth: value.healsHealth ? value.healsHealth : 0,\n                healsMana: value.healsMana ? value.healsMana : 0,\n                maxStackSize: value.maxStackSize ? value.maxStackSize : -1,\n                plugin: value.plugin ? value.plugin : null,\n                customData: value.customData ? value.customData : null,\n                requirement: value.requirement ? value.requirement : null\n            };\n\n            Items.Ids[value.id] = Items.Data[key];\n\n            itemCounter++;\n        });\n\n        Items.Plugins = require('../util/plugins')(\n            __dirname + '/../../data/items/'\n        );\n\n        log.info('Finished loading ' + itemCounter + ' items.');\n        log.info(\n            'Loaded ' + Object.keys(Items.Plugins).length + ' item plugins.'\n        );\n    }\n\n    loadAbilityData() {\n        let skillCounter = 0;\n\n        _.each(AbilityData, (value, key) => {\n            key = key.toLowerCase();\n\n            Abilities.Data[key] = {\n                key: key,\n                id: value.id,\n                type: value.type,\n                mana: value.mana ? value.mana : 0,\n                cooldown: value.cooldown ? value.cooldown : null\n            };\n\n            Abilities.Ids[value.id] = Abilities.Data[key];\n\n            skillCounter++;\n        });\n\n        log.info('Finished loading ' + skillCounter + ' skills.');\n    }\n\n    loadShops() {\n        let shopCounter = 0;\n\n        _.each(ShopsData, (value, key) => {\n            key = key.toLowerCase();\n\n            Shops.Data[key] = {\n                key: key,\n                npcId: value.npcId,\n                items: value.items,\n                count: value.count,\n                originalCount: value.count,\n                prices: value.prices,\n                currency: value.currency,\n                stockDuration: value.stockDuration\n            };\n\n            Shops.Ids[value.npcId] = Shops.Data[key];\n\n            shopCounter++;\n        });\n\n        log.info('Finished loading ' + shopCounter + ' shops.');\n    }\n\n    loadLevels() {\n        Formulas.LevelExp[0] = 0;\n\n        for (let i = 1; i < Constants.MAX_LEVEL; i++) {\n            let points = Math.floor(\n                0.25 * Math.floor(i + 300 * Math.pow(2, i / 7))\n            );\n            Formulas.LevelExp[i] = points + Formulas.LevelExp[i - 1];\n        }\n    }\n}\n\nmodule.exports = Parser;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1372,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/util/parser.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/parser.js~_",
    "access": "private",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1373,
    "kind": "class",
    "name": "Parser",
    "memberof": "Kaetram-Open/server/js/util/parser.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1374,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 1375,
    "kind": "method",
    "name": "loadMobData",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadMobData",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1376,
    "kind": "method",
    "name": "loadNPCData",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadNPCData",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1377,
    "kind": "method",
    "name": "loadItemData",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadItemData",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1378,
    "kind": "method",
    "name": "loadAbilityData",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadAbilityData",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1379,
    "kind": "method",
    "name": "loadShops",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadShops",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1380,
    "kind": "method",
    "name": "loadLevels",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadLevels",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1381,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/plugins.js",
    "content": "/* global module */\n\nlet fs = require('fs'),\n    Filter = /^([^\\\\.].*)\\.js$/;\n\nfunction identity(val) {\n    return val;\n}\n\nmodule.exports = function requireItems(directory) {\n    let files = fs.readdirSync(directory),\n        modules = {},\n        resolve = identity;\n\n    files.forEach(file => {\n        let match = file.match(Filter);\n\n        if (match) modules[match[1]] = resolve(require(directory + file));\n    });\n\n    return modules;\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/plugins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1382,
    "kind": "variable",
    "name": "fs",
    "memberof": "Kaetram-Open/server/js/util/plugins.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/plugins.js~fs",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/plugins.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1383,
    "kind": "function",
    "name": "identity",
    "memberof": "Kaetram-Open/server/js/util/plugins.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/util/plugins.js~identity",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/plugins.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1384,
    "kind": "function",
    "name": "exports",
    "memberof": "Kaetram-Open/server/js/util/plugins.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/util/plugins.js~exports",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/plugins.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "directory",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1385,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/shops.js",
    "content": "/* global module */\n\nlet Shops = {},\n    _ = require('underscore');\n\nShops.Data = {};\nShops.Ids = {};\n\nShops.isShopNPC = npcId => {\n    return npcId in Shops.Ids;\n};\n\nShops.getItems = npcId => {\n    return Shops.Ids[npcId].items;\n};\n\nShops.shopIdToNPC = shopId => {\n    return Shops.Data[shopId].npcId;\n};\n\nShops.getItemCount = id => {\n    return Shops.getItems(id).length;\n};\n\nShops.increment = (shopId, itemId, count) => {\n    let shop = Shops.Ids[shopId],\n        index = shop.items.indexOf(itemId);\n\n    if (index < 0) return;\n\n    let shopData = Shops.Data[shop.key];\n\n    shopData.count[index] += count;\n};\n\nShops.decrement = (npcId, buyId, count) => {\n    let shop = Shops.Ids[npcId];\n\n    if (!buyId || buyId < 0) return;\n\n    shop.count[buyId] -= count;\n\n    if (shop.count[buyId] < 0) shop.count[buyId] = 0;\n};\n\nShops.getCost = (npcId, buyId, count) => {\n    /**\n     * Reason for the shopId variable is because some shops\n     * may have different prices for the same item. A way to\n     * spice up the game.\n     */\n\n    let shop = Shops.Ids[npcId];\n\n    if (!shop || !buyId || buyId < 0) return;\n\n    return shop.prices[buyId] * count;\n};\n\nShops.getStock = (npcId, buyId) => {\n    let shop = Shops.Ids[npcId];\n\n    if (!shop || !buyId || buyId < 0) return null;\n\n    return shop.count[buyId];\n};\n\nShops.getOriginalStock = (shopId, buyId) => {\n    let shop = Shops.Ids[shopId];\n\n    if (!buyId || buyId < 0) return;\n\n    return shop.originalCount[buyId];\n};\n\nShops.getCount = npcId => {\n    let count = Shops.Ids[npcId].count,\n        counts = [];\n\n    if (_.isArray(count)) return count;\n\n    for (let i = 0; i < Shops.getItemCount(npcId); i++) counts.push(count);\n\n    return counts;\n};\n\nShops.getItem = (npcId, buyId) => {\n    if (!buyId || buyId < 0) return;\n\n    return Shops.Ids[npcId].items[buyId];\n};\n\nmodule.exports = Shops;\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/shops.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1386,
    "kind": "variable",
    "name": "Shops",
    "memberof": "Kaetram-Open/server/js/util/shops.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/shops.js~Shops",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/shops.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1387,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/utils.js",
    "content": "/* global module */\n\nlet Utils = {},\n    Packets = require('../network/packets');\n\nmodule.exports = Utils;\n\nUtils.random = range => {\n    return Math.floor(Math.random() * range);\n};\n\nUtils.randomRange = (min, max) => {\n    return min + Math.random() * (max - min);\n};\n\nUtils.randomInt = (min, max) => {\n    return min + Math.floor(Math.random() * (max - min + 1));\n};\n\nUtils.getDistance = (startX, startY, toX, toY) => {\n    let x = Math.abs(startX - toX),\n        y = Math.abs(startY - toY);\n\n    return x > y ? x : y;\n};\n\nUtils.getJSLogic = () => {\n    return [[][[]] + []][+[]][++[+[]][+[]]];\n};\n\nUtils.positionOffset = radius => {\n    return {\n        x: Utils.randomInt(0, radius),\n        y: Utils.randomInt(0, radius)\n    };\n};\n\n/**\n * There is seriously no way two clients can end up with the same ID\n */\n\nUtils.generateClientId = () => {\n    return (\n        Utils.randomInt(0, 1000000) +\n        Utils.randomInt(0, 40000) +\n        Utils.randomInt(0, 9000)\n    );\n};\n\nUtils.generateInstance = (randomizer, id, modulo, posY) => {\n    return (\n        '' +\n        randomizer +\n        Utils.randomInt(0, id) +\n        randomizer +\n        Utils.randomInt(0, modulo) +\n        (posY || 0)\n    );\n};\n\nUtils.generateRandomId = () => {\n    return '' + 1 + Utils.random(0, 200) + Utils.random(0, 20) + 2;\n};\n\nUtils.validPacket = packet => {\n    let keys = Object.keys(Packets),\n        filtered = [];\n\n    for (let i = 0; i < keys.length; i++)\n        if (!keys[i].endsWith('Opcode')) filtered.push(keys[i]);\n\n    return packet > -1 && packet < Packets[filtered[filtered.length - 1]] + 1;\n};\n\nUtils.getCurrentEpoch = () => {\n    return new Date().getTime();\n};\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/server/js/util/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1388,
    "kind": "variable",
    "name": "Utils",
    "memberof": "Kaetram-Open/server/js/util/utils.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/utils.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/server/js/util/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1389,
    "kind": "file",
    "name": "Kaetram-Open/tools/api/registrar.js",
    "content": "var cls = require('../../server/js/lib/class'),\n    redis = require('redis'),\n    request = require('request');\n\nfunction load() {\n    var registrar = new Registrar();\n\n    registrar.onReady(function() {});\n}\n\nmodule.exports = Registrar = cls.Class.extend({\n    init: function() {\n        var self = this;\n\n        self.client = redis.createClient('127.0.0.1', 6379, {\n            socket_nodelay: true\n        });\n\n        self.readyCallback();\n    },\n\n    onReady: function(callback) {\n        this.readyCallback = callback;\n    }\n});\n\nload();\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/tools/api/registrar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1390,
    "kind": "variable",
    "name": "cls",
    "memberof": "Kaetram-Open/tools/api/registrar.js",
    "static": true,
    "longname": "Kaetram-Open/tools/api/registrar.js~cls",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/tools/api/registrar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1391,
    "kind": "function",
    "name": "load",
    "memberof": "Kaetram-Open/tools/api/registrar.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/tools/api/registrar.js~load",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/tools/api/registrar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1392,
    "kind": "file",
    "name": "Kaetram-Open/tools/bot/bot.js",
    "content": "var cls = require('../../server/js/lib/class'),\n    Player = require('../../server/js/game/entity/character/player/player'),\n    Creator = require('../../server/js/database/creator'),\n    Utils = require('../../server/js/util/utils'),\n    _ = require('underscore');\n\nmodule.exports = Bot = cls.Class.extend({\n    init: function(world, count) {\n        var self = this;\n\n        self.world = world;\n        self.count = count;\n\n        self.creator = new Creator(null);\n\n        self.players = [];\n\n        self.load();\n    },\n\n    load: function() {\n        var self = this;\n\n        for (var i = 0; i < self.count; i++) {\n            var connection = {\n                    id: i,\n                    listen: function() {},\n                    onClose: function() {}\n                },\n                player = new Player(\n                    self.world,\n                    self.world.database,\n                    connection,\n                    -1\n                );\n\n            self.world.addPlayer(player);\n\n            player.username = 'Bot' + i;\n\n            player.load(self.creator.getPlayerData(player));\n\n            player.intro();\n\n            player.walkRandomly();\n\n            self.players.push(player);\n        }\n    }\n});\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/tools/bot/bot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1393,
    "kind": "variable",
    "name": "cls",
    "memberof": "Kaetram-Open/tools/bot/bot.js",
    "static": true,
    "longname": "Kaetram-Open/tools/bot/bot.js~cls",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/tools/bot/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1394,
    "kind": "file",
    "name": "Kaetram-Open/tools/file.js",
    "content": "var exists, existsSync;\n(function() {\n    var semver = require('semver');\n    var module = semver.satisfies(process.version, '>=0.7.1')\n        ? require('fs')\n        : require('path');\n\n    exists = module.exists;\n    existsSync = module.existsSync;\n})();\n\nif (!(typeof exports === 'undefined')) {\n    module.exports.exists = exists;\n    module.exports.existsSync = existsSync;\n}\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/tools/file.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1395,
    "kind": "file",
    "name": "Kaetram-Open/tools/map/helper.js",
    "content": "#!/usr/bin/env node\n\nlet Log = require('log'),\n    log = new Log(Log.DEBUG),\n    worldClient = require('../../server/data/map/world_client'),\n    worldServer = require('../../server/data/map/world_server');\n\nclass Helper {\n    constructor() {\n        let self = this;\n\n        self.width = worldServer.width;\n        self.height = worldServer.height;\n\n        self.getTileData(9, 92);\n\n        self.getTileData(8, 93);\n        self.getTileData(9, 93);\n        self.getTileData(10, 93);\n\n        self.getTileData(8, 94);\n        self.getTileData(9, 94);\n        self.getTileData(10, 94);\n\n        //for (let i = 1; i < 5; i++)\n        //    for (let j = 1; j < 5; j++)\n        //        self.getTileData(9 + i, 91 + j);\n    }\n\n    getTileData(x, y) {\n        let self = this,\n            index = self.gridPositionToIndex(x, y);\n\n        console.log(\n            `\"${index}\": { \"data\": [${worldClient.data[index]}], \"isColliding\": true },`\n        );\n        //log.info(index + ' -- ' + worldClient.data[index]);\n    }\n\n    gridPositionToIndex(x, y) {\n        return y * this.width + x;\n    }\n\n    indexToGridPosition(tileIndex) {\n        let self = this;\n\n        tileIndex -= 1;\n\n        let x = self.getX(tileIndex + 1, self.width),\n            y = Math.floor(tileIndex / self.width);\n\n        return {\n            x: x,\n            y: y\n        };\n    }\n}\n\nmodule.exports = Helper;\n\nfunction main() {\n    new Helper();\n}\n\nmain();\n",
    "static": true,
    "longname": "/home/lemuel/Codes/Kaetram-Open/tools/map/helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1396,
    "kind": "variable",
    "name": "Log",
    "memberof": "Kaetram-Open/tools/map/helper.js",
    "static": true,
    "longname": "Kaetram-Open/tools/map/helper.js~Log",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/tools/map/helper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1397,
    "kind": "class",
    "name": "Helper",
    "memberof": "Kaetram-Open/tools/map/helper.js",
    "static": true,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/tools/map/helper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1398,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/tools/map/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 1399,
    "kind": "method",
    "name": "getTileData",
    "memberof": "Kaetram-Open/tools/map/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper#getTileData",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1400,
    "kind": "method",
    "name": "gridPositionToIndex",
    "memberof": "Kaetram-Open/tools/map/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper#gridPositionToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1401,
    "kind": "method",
    "name": "indexToGridPosition",
    "memberof": "Kaetram-Open/tools/map/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper#indexToGridPosition",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "tileIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 1402,
    "kind": "function",
    "name": "main",
    "memberof": "Kaetram-Open/tools/map/helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/tools/map/helper.js~main",
    "access": "public",
    "export": false,
    "importPath": "kaetram/Kaetram-Open/tools/map/helper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# Kaetram\n\nKaetram is an open-source game-engine created to aid those interested in entering the game development realm. The codebase is simple, clean, and intuitive, and is intended to be used as a learning tool. The original idea is based off Little Workshop's demo game - BrowserQuest. The assets have remained the same, but the code itself has been completely wiped and redone from the ground up.\n\nLive Version - <https://kaetram.com>\n\nDiscord - <https://discord.gg/MmbGAaw>\n\n![Demo](https://i.imgur.com/M7N8RRp.png)\n\n## Features\n\nFeatures include what you'd expect from an MMORPG.\n\n- Multiplayer\n- Enhanced rendering engine (includes dynamic lighting, overlays, animated tiles)\n- Region system (client receives only necessary data and saves it)\n- Questing and achievements system.\n- Plugin-based combat system (for bosses/special enemies)\n- And much more\n\n### Region Manager\n\nThe region system sends data to the client according to the map data of the server. The collisions are checked both server-side and client-side in order to avoid cheating. The region-system has also been updated such that users can create instanced versions of the same area. These areas can be used to draw 'alternate' versions of the map, and be used for special events such as minigames. Multiple players can also be added to these regions.\n\n### Tilesheet Parsing\n\nThe rendering engine has been updated such that it is able to handle multiple tilesheets the same way Tiled editor can. Simply drop in your tilesheet in the `client/img/tilesets`.\n\n## Installing and Running\n\nYou must install MongoDB and create a user and a database.\n\n```sh\nnpm install\nnpm start\n```\n\nPrior to starting Kaetram, make sure you rename the `config.json-dist` to `config.json` and modify them accordingly. There are two configurations in `server/` and `client/data`.\n\n## Map Parsing\n\nOnce you finish modifying your map in `tools/maps/data` you can parse the map data by executing `exportmap.js` in `tools/maps` directory. Example command:\n\n```sh\n./exportmap.js ./data/map.json\n```\n\n## TODO\n\n- Write documentation outlining the entirety of the source code.\n- Come up with a storyline.\n\n- Add (continue) to NPC talking -- spacebar when talking\n",
    "longname": "/home/lemuel/Codes/Kaetram-Open/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"kaetram\",\n    \"version\": \"1.1.2\",\n    \"private\": false,\n    \"author\": \"Veradictus\",\n    \"main\": \"./server/js/main.js\",\n    \"description\": \"Kaetram is an open-source game-engine created to aid those interested in entering the game development realm. The codebase is simple, clean, and intuitive, and is intended to be used as a learning tool. The original idea is based off Little Workshop's demo game - BrowserQuest. The assets have remained the same, but the code itself has been completely wiped and redone from the ground up.\",\n    \"homepage\": \"https://kaetram.com/\",\n    \"scripts\": {\n        \"start\": \"node ./server/js/main.js\",\n        \"format\": \"prettier --write \\\"**/*.js\\\"\",\n        \"lint:client\": \"eslint -c ./.eslintrc-client.js \\\"./client/**/*.js\\\"\",\n        \"lint:server\": \"eslint -c ./.eslintrc-server.js \\\"./server/**/*.js\\\"\",\n        \"docs\": \"esdoc\",\n        \"build\": \"webpack\"\n    },\n    \"dependencies\": {\n        \"bcrypt\": \"^3.0.6\",\n        \"commander\": \"^2.20.3\",\n        \"connect\": \"^3.7.0\",\n        \"http\": \"0.0.0\",\n        \"log\": \"^1.4.0\",\n        \"memcache\": \"^0.3.0\",\n        \"mongodb\": \"^3.3.4\",\n        \"mysql\": \"^2.17.1\",\n        \"request\": \"^2.88.0\",\n        \"sanitizer\": \"^0.1.3\",\n        \"serve-static\": \"^1.14.1\",\n        \"shutdown-hook\": \"^1.1.5\",\n        \"socket.io\": \"^2.3.0\",\n        \"underscore\": \"^1.9.1\",\n        \"url\": \"^0.11.0\",\n        \"workbox-webpack-plugin\": \"^4.3.1\"\n    },\n    \"devDependencies\": {\n        \"esdoc\": \"^1.1.0\",\n        \"esdoc-standard-plugin\": \"^1.0.0\",\n        \"eslint\": \"^6.6.0\",\n        \"eslint-config-google\": \"^0.14.0\",\n        \"eslint-config-standard\": \"^14.1.0\",\n        \"eslint-plugin-import\": \"^2.18.2\",\n        \"eslint-plugin-node\": \"^10.0.0\",\n        \"eslint-plugin-promise\": \"^4.2.1\",\n        \"eslint-plugin-standard\": \"^4.0.1\",\n        \"grunt\": \"^1.0.4\",\n        \"morgan\": \"^1.9.1\",\n        \"uglifyjs-webpack-plugin\": \"^2.2.0\",\n        \"webpack\": \"^4.41.2\",\n        \"webpack-cli\": \"^3.3.10\"\n    },\n    \"esdoc\": {\n        \"source\": \"./\",\n        \"destination\": \"./docs\",\n        \"excludes\": [\n            \"node_modules\",\n            \"cordova\",\n            \"map.js\",\n            \"lib/*\",\n            \"mapworker.js\"\n        ],\n        \"plugins\": [\n            {\n                \"name\": \"esdoc-standard-plugin\"\n            }\n        ]\n    },\n    \"eslintConfig\": {},\n    \"prettier\": {\n        \"tabWidth\": 4,\n        \"useTabs\": false,\n        \"singleQuote\": true\n    },\n    \"directories\": {\n        \"doc\": \"docs\"\n    },\n    \"repository\": \"git+https://github.com/Veradictus/Kaetram-Open.git\",\n    \"bugs\": {\n        \"url\": \"https://github.com/Veradictus/Kaetram-Open/issues\"\n    },\n    \"keywords\": [\n        \"html5\",\n        \"2d\",\n        \"mmo\",\n        \"browserquest\",\n        \"taptapadventure\",\n        \"game-engine\",\n        \"open-source\",\n        \"2d-game\",\n        \"multiplayer\",\n        \"game-server\",\n        \"html5-canvas\",\n        \"html5-game\",\n        \"gamedev\",\n        \"game-development\",\n        \"game\",\n        \"game-2d\",\n        \"demo\",\n        \"tilesheet\",\n        \"rendering-engine\",\n        \"region\"\n    ],\n    \"license\": \"MPL-2.0\"\n}\n",
    "longname": "/home/lemuel/Codes/Kaetram-Open/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]