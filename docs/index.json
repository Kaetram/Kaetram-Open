[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "Kaetram-Open/.external-ecmascript.js",
    "static": true,
    "longname": "Kaetram-Open/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "Kaetram-Open/client/js/app.js",
    "content": "/* global log, Class, Detect, Modules */\r\n\r\ndefine(['jquery'], function($) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function() {\r\n            var self = this;\r\n\r\n            self.config = null;\r\n\r\n            self.body = $('body');\r\n            self.parchment = $('#parchment');\r\n            self.container = $('#container');\r\n            self.window = $(window);\r\n            self.canvas = $('#canvas');\r\n            self.border = $('#border');\r\n\r\n            self.intro = $('#intro');\r\n\r\n            self.loginButton = $('#login');\r\n            self.createButton = $('#play');\r\n            self.registerButton = $('#newCharacter');\r\n            self.helpButton = $('#helpButton');\r\n            self.cancelButton = $('#cancelButton');\r\n            self.yes = $('#yes');\r\n            self.no = $('#no');\r\n            self.loading = $('.loader');\r\n\r\n            self.respawn = $('#respawn');\r\n\r\n            self.rememberMe = $('#rememberMe');\r\n            self.guest = $('#guest');\r\n\r\n            self.about = $('#toggle-about');\r\n            self.credits = $('#toggle-credits');\r\n            self.discord = $('#toggle-discord');\r\n            self.git = $('#toggle-git');\r\n\r\n            self.footer = $('footer');\r\n\r\n            self.loginFields = [];\r\n            self.registerFields = [];\r\n\r\n            self.game = null;\r\n            self.parchmentAnimating = false;\r\n            self.loggingIn = false;\r\n\r\n            self.sendStatus('Initializing the main app');\r\n\r\n            self.updateOrientation();\r\n            self.load();\r\n\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.loginButton.click(function() {\r\n                self.login();\r\n            });\r\n\r\n            self.createButton.click(function() {\r\n                self.login();\r\n            });\r\n\r\n            self.registerButton.click(function() {\r\n                self.openScroll('loadCharacter', 'createCharacter');\r\n            });\r\n\r\n            self.cancelButton.click(function() {\r\n                self.openScroll('createCharacter', 'loadCharacter');\r\n            });\r\n\r\n            self.parchment.click(function() {\r\n                if (self.parchment.hasClass('about') || self.parchment.hasClass('credits') || self.parchment.hasClass('git')) {\r\n\r\n                    self.parchment.removeClass('about credits git');\r\n                    self.displayScroll('loadCharacter');\r\n\r\n                }\r\n            });\r\n\r\n            self.about.click(function() {\r\n                self.displayScroll('about');\r\n            });\r\n\r\n            self.credits.click(function() {\r\n                self.displayScroll('credits');\r\n            });\r\n\r\n            self.discord.click(function() {\r\n                window.open('https://discord.gg/MmbGAaw');\r\n            });\r\n\r\n            self.git.click(function() {\r\n                self.displayScroll('git');\r\n            });\r\n\r\n            self.rememberMe.click(function() {\r\n                if (!self.game || !self.game.storage)\r\n                    return;\r\n\r\n                var active = self.rememberMe.hasClass('active');\r\n\r\n                self.rememberMe.toggleClass('active');\r\n\r\n                self.game.storage.toggleRemember(!active);\r\n            });\r\n\r\n            self.guest.click(function() {\r\n                if (!self.game)\r\n                    return;\r\n\r\n                self.guest.toggleClass('active');\r\n            });\r\n\r\n            self.respawn.click(function() {\r\n                if (!self.game || !self.game.player || !self.game.player.dead)\r\n                    return;\r\n\r\n                self.game.respawn();\r\n            });\r\n\r\n            window.scrollTo(0, 1);\r\n\r\n            self.window.resize(function() {\r\n                if (self.game)\r\n                    self.game.resize();\r\n            });\r\n\r\n            $.getJSON('data/config.json', function(json) {\r\n                self.config = json;\r\n\r\n                if (self.readyCallback)\r\n                    self.readyCallback();\r\n            });\r\n\r\n            $(document).bind('keydown', function(e) {\r\n                if (e.which === Modules.Keys.Enter)\r\n                    return false;\r\n            });\r\n\r\n            $(document).keydown(function(e) {\r\n                var key = e.which;\r\n\r\n                if (!self.game)\r\n                    return;\r\n\r\n                self.body.focus();\r\n\r\n                if (key === Modules.Keys.Enter && !self.game.started) {\r\n                    self.login();\r\n                    return;\r\n                }\r\n\r\n                if (self.game.started)\r\n                    self.game.handleInput(Modules.InputType.Key, key);\r\n\r\n            });\r\n\r\n            $(document).keyup(function(e) {\r\n                var key = e.which;\r\n\r\n                if (!self.game || !self.game.started)\r\n                    return;\r\n\r\n                self.game.input.keyUp(key);\r\n            });\r\n\r\n            $(document).mousemove(function(event) {\r\n                if (!self.game || !self.game.input || !self.game.started || event.target.id !== 'textCanvas')\r\n                    return;\r\n\r\n                self.game.input.setCoords(event);\r\n                self.game.input.moveCursor();\r\n            });\r\n\r\n            self.canvas.click(function(event) {\r\n                if (!self.game || !self.game.started || event.button !== 0)\r\n                    return;\r\n\r\n                window.scrollTo(0, 1);\r\n\r\n                self.game.input.handle(Modules.InputType.LeftClick, event);\r\n\r\n            });\r\n\r\n            $('input[type=\"range\"]').on('input', function() {\r\n                self.updateRange($(this));\r\n            });\r\n\r\n        },\r\n\r\n        login: function() {\r\n            var self = this;\r\n\r\n            if (self.loggingIn || !self.game || !self.game.loaded || self.statusMessage || !self.verifyForm())\r\n                return;\r\n\r\n            self.toggleLogin(true);\r\n            self.game.connect();\r\n        },\r\n\r\n        fadeMenu: function() {\r\n            var self = this;\r\n\r\n            self.updateLoader(null);\r\n\r\n            setTimeout(function() {\r\n                self.body.addClass('game');\r\n                self.body.addClass('started');\r\n\r\n                self.body.removeClass('intro');\r\n\r\n                self.footer.hide();\r\n\r\n            }, 500);\r\n        },\r\n\r\n        showMenu: function() {\r\n            var self = this;\r\n\r\n            self.body.removeClass('game');\r\n            self.body.removeClass('started');\r\n            self.body.addClass('intro');\r\n\r\n            self.footer.show();\r\n        },\r\n\r\n        showDeath: function() {\r\n\r\n        },\r\n\r\n        openScroll: function(origin, destination) {\r\n            var self = this;\r\n\r\n            if (!destination || self.loggingIn)\r\n                return;\r\n\r\n            self.cleanErrors();\r\n\r\n            if (!Detect.isMobile()) {\r\n                if (self.parchmentAnimating)\r\n                    return;\r\n\r\n                self.parchmentAnimating = true;\r\n\r\n                self.parchment.toggleClass('animate').removeClass(origin);\r\n\r\n                setTimeout(function() {\r\n\r\n                    self.parchment.toggleClass('animate').addClass(destination);\r\n                    self.parchmentAnimating = false;\r\n\r\n                }, Detect.isTablet() ? 0 : 1000);\r\n\r\n            } else\r\n                self.parchment.removeClass(origin).addClass(destination);\r\n        },\r\n\r\n        displayScroll: function(content) {\r\n            var self = this,\r\n                state = self.parchment.attr('class');\r\n\r\n            if (self.game.started) {\r\n\r\n                self.parchment.removeClass().addClass(content);\r\n\r\n                self.body.removeClass('credits legal about').toggleClass(content);\r\n\r\n                if (self.game.player)\r\n                    self.body.toggleClass('death');\r\n\r\n                if (content !== 'about')\r\n                    self.helpButton.removeClass('active');\r\n\r\n            } else if (state !== 'animate')\r\n                self.openScroll(state, state === content ? 'loadCharacter' : content);\r\n\r\n        },\r\n\r\n        verifyForm: function() {\r\n            var self = this,\r\n                activeForm = self.getActiveForm();\r\n\r\n            if (activeForm === 'null')\r\n                return;\r\n\r\n            switch (activeForm) {\r\n\r\n                case 'loadCharacter':\r\n\r\n                    var nameInput = $('#loginNameInput'),\r\n                        passwordInput = $('#loginPasswordInput');\r\n\r\n                    if (self.loginFields.length === 0)\r\n                        self.loginFields = [nameInput, passwordInput];\r\n\r\n                    if (!nameInput.val() && !self.isGuest()) {\r\n                        self.sendError(nameInput, 'Please enter a username.');\r\n                        return false;\r\n                    }\r\n\r\n                    if (!passwordInput.val() && !self.isGuest()) {\r\n                        self.sendError(passwordInput, 'Please enter a password.');\r\n                        return false;\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 'createCharacter':\r\n\r\n                    var characterName = $('#registerNameInput'),\r\n                        registerPassword = $('#registerPasswordInput'),\r\n                        registerPasswordConfirmation = $('#registerPasswordConfirmationInput'),\r\n                        email = $('#registerEmailInput');\r\n\r\n                    if (self.registerFields.length === 0)\r\n                        self.registerFields = [characterName, registerPassword, registerPasswordConfirmation, email];\r\n\r\n                    if (!characterName.val()) {\r\n                        self.sendError(characterName, 'A username is necessary you silly.');\r\n                        return false;\r\n                    }\r\n\r\n                    if (!registerPassword.val()) {\r\n                        self.sendError(registerPassword, 'You must enter a password.');\r\n                        return false;\r\n                    }\r\n\r\n                    if (registerPasswordConfirmation.val() !== registerPassword.val()) {\r\n                        self.sendError(registerPasswordConfirmation, 'The passwords do not match!');\r\n                        return false;\r\n                    }\r\n\r\n                    if (!email.val() || !self.verifyEmail(email.val())) {\r\n                        self.sendError(email, 'An email is required!');\r\n                        return false;\r\n                    }\r\n\r\n                    break;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        verifyEmail: function(email) {\r\n            return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\r\n        },\r\n\r\n        sendStatus: function(message) {\r\n            var self = this;\r\n\r\n            self.cleanErrors();\r\n\r\n            self.statusMessage = message;\r\n\r\n            if (!message)\r\n                return;\r\n\r\n            $('<span></span>', {\r\n                'class': 'status blink',\r\n                text: message\r\n            }).appendTo('.validation-summary');\r\n\r\n            $('.status').append('<span class=\"loader__dot\">.</span><span class=\"loader__dot\">.</span><span class=\"loader__dot\">.</span>');\r\n        },\r\n\r\n        sendError: function(field, error) {\r\n            this.cleanErrors();\r\n\r\n            $('<span></span>', {\r\n                'class': 'validation-error blink',\r\n                text: error\r\n            }).appendTo('.validation-summary');\r\n\r\n            if (!field)\r\n                return;\r\n\r\n            field.addClass('field-error').select();\r\n            field.bind('keypress', function(event) {\r\n                field.removeClass('field-error');\r\n\r\n                $('.validation-error').remove();\r\n\r\n                $(this).unbind(event);\r\n            });\r\n        },\r\n\r\n        cleanErrors: function() {\r\n            var self = this,\r\n                activeForm = self.getActiveForm(),\r\n                fields = activeForm === 'loadCharacter' ? self.loginFields : self.registerFields;\r\n\r\n            for (var i = 0; i < fields.length; i++)\r\n                fields[i].removeClass('field-error');\r\n\r\n            $('.validation-error').remove();\r\n            $('.status').remove();\r\n        },\r\n\r\n        getActiveForm: function() {\r\n            return this.parchment[0].className;\r\n        },\r\n\r\n        isRegistering: function() {\r\n            return this.getActiveForm() === 'createCharacter';\r\n        },\r\n\r\n        isGuest: function() {\r\n            return this.guest.hasClass('active');\r\n        },\r\n\r\n        setGame: function(game) {\r\n            this.game = game;\r\n        },\r\n\r\n        hasWorker: function() {\r\n            return !!window.Worker;\r\n        },\r\n\r\n        getScaleFactor: function() {\r\n            return 3;\r\n        },\r\n\r\n        getUIScale: function() {\r\n            var width = window.innerWidth,\r\n                height = window.innerHeight;\r\n\r\n            return width <= 1000 ? 1 : ((width <= 1500 || height <= 870) ? 2 : 3);\r\n        },\r\n\r\n        revertLoader: function() {\r\n            this.updateLoader('Connecting');\r\n        },\r\n\r\n        updateLoader: function(message) {\r\n            var self = this;\r\n\r\n            if (!message) {\r\n                self.loading.html('');\r\n                return;\r\n            }\r\n\r\n            var dots = '<span class=\"loader__dot\">.</span><span class=\"loader__dot\">.</span><span class=\"loader__dot\">.</span>';\r\n            self.loading.html(message + dots);\r\n        },\r\n\r\n        toggleLogin: function(toggle) {\r\n            var self = this;\r\n\r\n            self.revertLoader();\r\n\r\n            self.toggleTyping(toggle);\r\n\r\n            self.loggingIn = toggle;\r\n\r\n            if (toggle) {\r\n                self.loading.removeAttr('hidden');\r\n\r\n                self.loginButton.addClass('disabled');\r\n                self.registerButton.addClass('disabled');\r\n\r\n            } else {\r\n                self.loading.attr('hidden', true);\r\n\r\n                self.loginButton.removeClass('disabled');\r\n                self.registerButton.removeClass('disabled');\r\n            }\r\n        },\r\n\r\n        toggleTyping: function(state) {\r\n            var self = this;\r\n\r\n            if (self.loginFields)\r\n                _.each(self.loginFields, function(field) { field.prop('readonly', state); });\r\n\r\n            if (self.registerFields)\r\n                _.each(self.registerFields, function(field) { field.prop('readOnly', state); })\r\n        },\r\n\r\n        updateRange: function(obj) {\r\n            var self = this,\r\n                val = (obj.val() - obj.attr('min')) / (obj.attr('max') - obj.attr('min'));\r\n\r\n            obj.css('background-image',\r\n                '-webkit-gradient(linear, left top, right top, '\r\n                + 'color-stop(' + val + ', #4d4d4d), '\r\n                + 'color-stop(' + val + ', #C5C5C5)'\r\n                + ')'\r\n            );\r\n        },\r\n\r\n        updateOrientation: function() {\r\n            this.orientation = this.getOrientation();\r\n        },\r\n\r\n        getOrientation: function() {\r\n            return window.innerHeight > window.innerWidth ? 'portrait' : 'landscape';\r\n        },\r\n\r\n        onReady: function(callback) {\r\n            this.readyCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "Kaetram-Open/client/js/build.js",
    "content": "({\r\n\r\n    appDir: \"../\",\r\n    baseUrl: \"js\",\r\n    dir: \"../../client-build\",\r\n    optimize: \"uglify\",\r\n    optimizeCss: \"standard.keepLines\",\r\n\r\n    paths: {\r\n        jquery: 'lib/jquery'\r\n    },\r\n\r\n    modules: [\r\n        {\r\n            name: 'main'\r\n        }\r\n    ]\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/build.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/audio.js",
    "content": "/* global log, _, Detect, Modules */\r\n\r\ndefine(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.audibles = {};\r\n            self.format = 'mp3';\r\n\r\n            self.song = null;\r\n            self.songName = null;\r\n\r\n            self.enabled = true;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.music = {\r\n                'codingroom': false,\r\n                'smalltown': false,\r\n                'village': false,\r\n                'beach': false,\r\n                'spookyship': false,\r\n                'meadowofthepast': false\r\n            };\r\n\r\n            self.sounds = {\r\n                'loot': false,\r\n                'hit1': false,\r\n                'hit2': false,\r\n                'hurt': false,\r\n                'heal': false,\r\n                'chat': false,\r\n                'revive': false,\r\n                'death': false,\r\n                'firefox': false,\r\n                'achievement': false,\r\n                'kill1': false,\r\n                'kill2': false,\r\n                'noloot': false,\r\n                'teleport': false,\r\n                'chest': false,\r\n                'npc': false,\r\n                'npc-end': false\r\n            };\r\n\r\n        },\r\n\r\n        parse: function(path, name, channels, callback) {\r\n            var self = this,\r\n                fullPath = path + name + '.' + self.format,\r\n                sound = document.createElement('audio');\r\n\r\n            sound.addEventListener('canplaythrough', function(e) {\r\n                this.removeEventListener('canplaythrough', arguments.callee, false);\r\n\r\n                if (callback)\r\n                    callback();\r\n\r\n            }, false);\r\n\r\n            sound.addEventListener('error', function() {\r\n                log.error('The audible: ' + name + ' could not be loaded - unsupported extension?');\r\n\r\n                self.audibles[name] = null;\r\n            }, false);\r\n\r\n            sound.preload = 'auto';\r\n            sound.autobuffer = true;\r\n            sound.src = fullPath;\r\n\r\n            sound.load();\r\n\r\n            self.audibles[name] = [sound];\r\n\r\n            _.times(channels - 1, function() {\r\n                self.audibles[name].push(sound.cloneNode(true));\r\n            });\r\n\r\n            if (name in self.music)\r\n                self.music[name] = true;\r\n            else if (name in self.sounds)\r\n                self.sounds[name] = true;\r\n        },\r\n\r\n        play: function(type, name) {\r\n            var self = this;\r\n\r\n            if (!self.isEnabled() || !self.fileExists(name))\r\n                return;\r\n\r\n            switch(type) {\r\n                case Modules.AudioTypes.Music:\r\n\r\n                    self.fadeOut(self.song, function() {\r\n                        self.reset(self.song);\r\n                    });\r\n\r\n                    var song = self.get(name);\r\n\r\n                    if (!song)\r\n                        return;\r\n\r\n                    song.volume = 0;\r\n\r\n                    song.play();\r\n\r\n                    self.fadeIn(song);\r\n\r\n                    self.song = song;\r\n\r\n                    break;\r\n\r\n                case Modules.AudioTypes.SFX:\r\n\r\n                    if (!self.sounds[name])\r\n                        self.parse('audio/sounds/', name, 4);\r\n\r\n                    var sound = self.get(name);\r\n\r\n                    if (!sound)\r\n                        return;\r\n\r\n                    sound.volume = self.getSFXVolume();\r\n\r\n                    sound.play();\r\n\r\n                    break;\r\n            }\r\n        },\r\n\r\n        update: function() {\r\n            var self = this;\r\n\r\n            if (!self.isEnabled())\r\n                return;\r\n\r\n            var song = self.getMusic(self.songName);\r\n\r\n            if (song && !(self.song && self.song.name === song.name)) {\r\n                if (self.game.renderer.mobile)\r\n                    self.reset(self.song);\r\n                else\r\n                    self.fadeSongOut();\r\n\r\n                if (song.name in self.music && !self.music[song.name]) {\r\n                    self.parse('audio/music/', song.name, 1);\r\n\r\n                    var music = self.audibles[song.name][0];\r\n\r\n                    music.loop = true;\r\n                    music.addEventListener('ended', function() {\r\n                        music.play();\r\n                    }, false);\r\n                }\r\n\r\n                self.play(Modules.AudioTypes.Music, song.name);\r\n\r\n            } else {\r\n\r\n                if (self.game.renderer.mobile)\r\n                    self.reset(self.song);\r\n                else\r\n                    self.fadeSongOut();\r\n            }\r\n\r\n        },\r\n\r\n        fadeIn: function(song) {\r\n            var self = this;\r\n\r\n            if (!song || song.fadingIn)\r\n                return;\r\n\r\n            self.clearFadeOut(song);\r\n\r\n            song.fadingIn = setInterval(function() {\r\n                song.volume += 0.02;\r\n\r\n                if (song.volume >= self.getMusicVolume() - 0.02) {\r\n                    song.volume = self.getMusicVolume();\r\n                    self.clearFadeIn(song);\r\n                }\r\n\r\n            }, 100);\r\n        },\r\n\r\n        fadeOut: function(song, callback) {\r\n            var self = this;\r\n\r\n            if (!song || song.fadingOut)\r\n                return;\r\n\r\n            self.clearFadeIn(song);\r\n\r\n            song.fadingOut = setInterval(function() {\r\n\r\n                song.volume -= 0.08;\r\n\r\n                if (song.volume <= 0.08) {\r\n                    song.volume = 0;\r\n\r\n                    if (callback)\r\n                        callback(song);\r\n\r\n                    clearInterval(song.fadingOut);\r\n                }\r\n\r\n            }, 100);\r\n        },\r\n\r\n        fadeSongOut: function() {\r\n            var self = this;\r\n\r\n            if (!self.song)\r\n                return;\r\n\r\n            self.fadeOut(self.song, function(song) { self.reset(song); });\r\n\r\n            self.song = null;\r\n        },\r\n\r\n        clearFadeIn: function(song) {\r\n            if (song.fadingIn) {\r\n                clearInterval(song.fadingIn);\r\n                song.fadingIn = null;\r\n            }\r\n        },\r\n\r\n        clearFadeOut: function(song) {\r\n            if (song.fadingOut) {\r\n                clearInterval(song.fadingOut);\r\n                song.fadingOut = null;\r\n            }\r\n        },\r\n\r\n        reset: function(song) {\r\n            if (!song || !song.readyState > 0)\r\n                return;\r\n\r\n            song.pause();\r\n            song.currentTime = 0;\r\n        },\r\n\r\n        stop: function() {\r\n            var self = this;\r\n\r\n            if (!self.song)\r\n                return;\r\n\r\n            self.fadeOut(self.song, function() {\r\n                self.reset(self.song);\r\n                self.song = null;\r\n            });\r\n        },\r\n\r\n        fileExists: function(name) {\r\n            return (name in this.music) || (name in this.sounds);\r\n        },\r\n\r\n        get: function(name) {\r\n            var self = this;\r\n\r\n            if (!self.audibles[name])\r\n                return null;\r\n\r\n            var audible = _.detect(self.audibles[name], function(audible) {\r\n                return audible.ended || audible.paused;\r\n            });\r\n\r\n            if (audible && audible.ended)\r\n                audible.currentTime = 0;\r\n            else\r\n                audible = self.audibles[name][0];\r\n\r\n            return audible;\r\n        },\r\n\r\n        getMusic: function(name) {\r\n            return {\r\n                sound: this.get(name),\r\n                name: name\r\n            }\r\n        },\r\n\r\n        setSongVolume: function(volume) {\r\n            this.song.volume = volume;\r\n        },\r\n\r\n        getSFXVolume: function() {\r\n            return this.game.storage.data.settings.sfx / 100;\r\n        },\r\n\r\n        getMusicVolume: function() {\r\n            return this.game.storage.data.settings.music / 100;\r\n        },\r\n\r\n        isEnabled: function() {\r\n            return this.game.storage.data.settings.soundEnabled && this.enabled;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/audio.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/bubble.js",
    "content": "/* global _ */\r\n\r\ndefine(['jquery', '../renderer/bubbles/blob'], function($, Blob) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.bubbles = {};\r\n\r\n            self.container = $('#bubbles');\r\n        },\r\n\r\n        create: function(id, message, duration) {\r\n            var self = this;\r\n\r\n            if (self.bubbles[id]) {\r\n                self.bubbles[id].reset(self.game.time);\r\n                $('#' + id + ' p').html(message);\r\n            } else {\r\n                var element = $('<div id=\\''+id+'\\' class=\\'bubble\\'><p>'+message+'</p><div class=\\'bubbleTip\\'></div></div>');\r\n\r\n                $(element).appendTo(self.container);\r\n\r\n                self.bubbles[id] = new Blob(id, element, duration);\r\n\r\n                return self.bubbles[id];\r\n            }\r\n        },\r\n\r\n        setTo: function(entity) {\r\n            var self = this;\r\n\r\n            var bubble = self.get(entity.id);\r\n\r\n            if (!bubble || !entity)\r\n                return;\r\n\r\n            var scale = self.game.renderer.getScale(),\r\n                tileSize = 16 * scale,\r\n                x = (entity.x - self.game.getCamera().x) * scale,\r\n                width = parseInt(bubble.element.css('width')) + 24,\r\n                offset = (width / 2) - (tileSize / 2),\r\n                offsetY = -20, y;\r\n\r\n            y = ((entity.y - self.game.getCamera().y) * scale) - (tileSize * 2) - offsetY;\r\n\r\n            bubble.element.css('left', x - offset + (2 + self.game.renderer.scale) + 'px');\r\n            bubble.element.css('top', y + 'px');\r\n        },\r\n\r\n        update: function(time) {\r\n            var self = this;\r\n\r\n            _.each(self.bubbles, function(bubble) {\r\n                var entity = self.game.entities.get(bubble.id);\r\n\r\n                if (entity)\r\n                    self.setTo(entity);\r\n\r\n                if (bubble.isOver(time)) {\r\n                    bubble.destroy();\r\n                    delete self.bubbles[bubble.id];\r\n                }\r\n            });\r\n        },\r\n\r\n        get: function(id) {\r\n            var self = this;\r\n\r\n            if (id in self.bubbles)\r\n                return self.bubbles[id];\r\n\r\n            return null;\r\n        },\r\n\r\n        clean: function() {\r\n            var self = this;\r\n\r\n            _.each(self.bubbles, function(bubble) {\r\n                bubble.destroy();\r\n            });\r\n\r\n            self.bubbles = {};\r\n        },\r\n\r\n        destroy: function(id) {\r\n            var self = this,\r\n                bubble = self.get(id);\r\n\r\n            if (!bubble)\r\n                return;\r\n\r\n            bubble.destroy();\r\n            delete self.bubbles[id];\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/bubble.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/chat.js",
    "content": "/* global Packets, Modules, log */\r\n\r\ndefine(['jquery'], function($) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.chat = $('#chat');\r\n            self.log = $('#chatLog');\r\n            self.input = $('#chatInput');\r\n            self.button = $('#chatButton');\r\n\r\n            self.visible = false;\r\n\r\n            self.fadingDuration = 5000;\r\n            self.fadingTimeout = null;\r\n\r\n            self.button.click(function() {\r\n\r\n                self.button.blur();\r\n\r\n                if (self.input.is(':visible'))\r\n                    self.hideInput();\r\n                else\r\n                    self.toggle();\r\n\r\n            });\r\n        },\r\n\r\n        add: function(source, text, colour) {\r\n            var self = this,\r\n                element = $('<p>' + source + ': ' + text + '</p>');\r\n\r\n            self.showChat();\r\n\r\n            if (!self.isActive())\r\n                self.hideInput();\r\n\r\n            self.hideChat();\r\n\r\n            element.css('color', colour ? colour : 'white');\r\n\r\n            self.log.append(element);\r\n            self.log.scrollTop(99999);\r\n        },\r\n\r\n        key: function(data) {\r\n            var self = this;\r\n\r\n            switch(data) {\r\n                case Modules.Keys.Enter:\r\n\r\n                    if (self.input.val() === '')\r\n                        self.toggle();\r\n                    else\r\n                        self.send();\r\n\r\n                    break;\r\n            }\r\n        },\r\n\r\n        send: function() {\r\n            var self = this;\r\n\r\n            self.game.socket.send(Packets.Chat, [self.input.val()]);\r\n            self.toggle();\r\n        },\r\n\r\n        toggle: function() {\r\n            var self = this;\r\n\r\n            self.clean();\r\n\r\n            if (self.visible && !self.isActive())\r\n                self.showInput();\r\n            else if (self.visible) {\r\n                self.hideInput();\r\n                self.hideChat();\r\n            } else {\r\n                self.showChat();\r\n                self.showInput();\r\n            }\r\n\r\n        },\r\n\r\n        showChat: function() {\r\n            var self = this;\r\n\r\n            self.chat.fadeIn('fast');\r\n\r\n            self.visible = true;\r\n        },\r\n\r\n        showInput: function() {\r\n            var self = this;\r\n\r\n            self.button.addClass('active');\r\n\r\n            self.input.fadeIn('fast');\r\n            self.input.val('');\r\n            self.input.focus();\r\n\r\n            self.clean();\r\n        },\r\n\r\n        hideChat: function() {\r\n            var self = this;\r\n\r\n            if (self.fadingTimeout) {\r\n                clearTimeout(self.fadingTimeout);\r\n                self.fadingTimeout = null;\r\n            }\r\n\r\n            self.fadingTimeout = setTimeout(function() {\r\n\r\n                if (!self.isActive()) {\r\n                    self.chat.fadeOut('slow');\r\n\r\n                    self.visible = false;\r\n                }\r\n\r\n            }, self.fadingDuration);\r\n        },\r\n\r\n        hideInput: function() {\r\n            var self = this;\r\n\r\n            self.button.removeClass('active');\r\n\r\n            self.input.val('');\r\n            self.input.fadeOut('fast');\r\n            self.input.blur();\r\n\r\n            self.hideChat();\r\n        },\r\n\r\n        clean: function() {\r\n            var self = this;\r\n\r\n            clearTimeout(self.fadingTimeout);\r\n            self.fadingTimeout = null;\r\n        },\r\n\r\n        isActive: function() {\r\n            return this.input.is(':focus');\r\n        }\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/chat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/entities.js",
    "content": "/* global log, _, Modules, Packets */\r\n\r\ndefine(['../renderer/grids', '../entity/objects/chest',\r\n        '../entity/character/character', '../entity/character/player/player',\r\n        '../entity/objects/item', './sprites', '../entity/character/mob/mob',\r\n        '../entity/character/npc/npc', '../entity/objects/projectile'],\r\n    function(Grids, Chest, Character, Player, Item, Sprites, Mob, NPC, Projectile) {\r\n\r\n        return Class.extend({\r\n\r\n            init: function(game) {\r\n                var self = this;\r\n\r\n                self.game = game;\r\n                self.renderer = game.renderer;\r\n\r\n                self.grids = null;\r\n                self.sprites = null;\r\n\r\n                self.entities = {};\r\n                self.decrepit = {};\r\n            },\r\n\r\n            load: function() {\r\n                var self = this;\r\n\r\n                self.game.app.sendStatus('Loading sprites');\r\n\r\n                if (!self.sprites) {\r\n                    self.sprites = new Sprites(self.game.renderer);\r\n\r\n                    self.sprites.onLoadedSprites(function() {\r\n                        self.game.input.loadCursors();\r\n                    });\r\n                }\r\n\r\n                self.game.app.sendStatus('Loading grids');\r\n\r\n                if (!self.grids)\r\n                    self.grids = new Grids(self.game.map);\r\n            },\r\n\r\n            update: function() {\r\n                var self = this;\r\n\r\n                if (self.sprites)\r\n                    self.sprites.updateSprites();\r\n            },\r\n\r\n            create: function(info) {\r\n                var self = this,\r\n                    entity;\r\n\r\n                if (self.isPlayer(info.id))\r\n                    return;\r\n\r\n                switch (info.type) {\r\n\r\n                    case 'chest':\r\n\r\n                        /**\r\n                         * Here we will parse the different types of chests..\r\n                         * We can go Dark Souls style and implement mimics\r\n                         * the proper way -ahem- Kaetram V1.0\r\n                         */\r\n\r\n                        var chest = new Chest(info.id, info.string);\r\n\r\n                        entity = chest;\r\n\r\n                        break;\r\n\r\n                    case 'npc':\r\n\r\n                        var npc = new NPC(info.id, info.string);\r\n\r\n                        entity = npc;\r\n\r\n                        break;\r\n\r\n                    case 'item':\r\n\r\n                        var item = new Item(info.id, info.string, info.count, info.ability, info.abilityLevel);\r\n\r\n                        entity = item;\r\n\r\n                        break;\r\n\r\n                    case 'mob':\r\n\r\n                        var mob = new Mob(info.id, info.string);\r\n\r\n                        mob.setHitPoints(info.hitPoints);\r\n                        mob.setMaxHitPoints(info.maxHitPoints);\r\n\r\n                        mob.attackRange = info.attackRange;\r\n                        mob.level = info.level;\r\n                        mob.hiddenName = info.hiddenName;\r\n\r\n                        entity = mob;\r\n\r\n                        break;\r\n\r\n                    case 'projectile':\r\n                        var attacker = self.get(info.characterId),\r\n                            target = self.get(info.targetId);\r\n\r\n                        if (!attacker || !target)\r\n                            return;\r\n\r\n                        attacker.lookAt(target);\r\n\r\n                        var projectile = new Projectile(info.id, info.projectileType, attacker);\r\n\r\n                        projectile.name = info.name;\r\n\r\n                        projectile.setStart(attacker.x, attacker.y);\r\n                        projectile.setTarget(target);\r\n\r\n                        projectile.setSprite(self.getSprite(projectile.name));\r\n                        projectile.setAnimation('travel', projectile.getSpeed());\r\n\r\n                        projectile.angled = true;\r\n                        projectile.type = info.type;\r\n\r\n                        /**\r\n                         * Move this into the external overall function\r\n                         */\r\n\r\n                        projectile.onImpact(function() {\r\n                            /**\r\n                             * The data in the projectile is only for rendering purposes\r\n                             * there is nothing you can change for the actual damage output here.\r\n                             */\r\n\r\n                            if (self.isPlayer(projectile.owner.id) || self.isPlayer(target.id))\r\n                                self.game.socket.send(Packets.Projectile, [Packets.ProjectileOpcode.Impact, info.id, target.id]);\r\n\r\n                            if (info.hitType === Modules.Hits.Explosive)\r\n                                target.explosion = true;\r\n\r\n                            self.game.info.create(Modules.Hits.Damage, [info.damage, self.isPlayer(target.id)], target.x, target.y);\r\n\r\n                            target.triggerHealthBar();\r\n\r\n                            self.unregisterPosition(projectile);\r\n                            delete self.entities[projectile.getId()];\r\n\r\n                        });\r\n\r\n                        self.addEntity(projectile);\r\n\r\n                        attacker.performAction(attacker.orientation, Modules.Actions.Attack);\r\n                        attacker.triggerHealthBar();\r\n\r\n                        return;\r\n\r\n                    case 'player':\r\n\r\n                        var player = new Player();\r\n\r\n                        player.setId(info.id);\r\n                        player.setName(info.name);\r\n                        player.setGridPosition(info.x, info.y);\r\n\r\n                        player.rights = info.rights;\r\n                        player.level = info.level;\r\n                        player.pvp = info.pvp;\r\n                        player.pvpKills = info.pvpKills;\r\n                        player.pvpDeaths = info.pvpDeaths;\r\n                        player.orientation = info.orientation ? info.orientation : 0;\r\n                        player.type = info.type;\r\n\r\n                        var hitPointsData = info.hitPoints,\r\n                            manaData = info.mana,\r\n                            equipments = [info.armour, info.weapon, info.pendant, info.ring, info.boots];\r\n\r\n                        player.setHitPoints(hitPointsData[0]);\r\n                        player.setMaxHitPoints(hitPointsData[1]);\r\n\r\n                        player.setMana(manaData[0]);\r\n                        player.setMaxMana(manaData[1]);\r\n\r\n                        player.setSprite(self.getSprite(info.armour.string));\r\n                        player.idle();\r\n\r\n                        _.each(equipments, function(equipment) {\r\n                            player.setEquipment(equipment.type, equipment.name,\r\n                                equipment.string, equipment.count, equipment.ability,\r\n                                equipment.abilityLevel);\r\n                        });\r\n\r\n                        player.loadHandler(self.game);\r\n\r\n                        self.addEntity(player);\r\n\r\n                        return;\r\n                }\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                var sprite = self.getSprite(info.type === 'item' ? 'item-' + info.string : info.string);\r\n\r\n                entity.setGridPosition(info.x, info.y);\r\n                entity.setName(info.name);\r\n\r\n                entity.setSprite(sprite);\r\n\r\n                entity.setIdleSpeed(sprite.idleSpeed);\r\n\r\n                entity.idle();\r\n                entity.type = info.type;\r\n\r\n                self.addEntity(entity);\r\n\r\n                if (info.type !== 'item' && entity.handler) {\r\n                    entity.handler.setGame(self.game);\r\n                    entity.handler.load();\r\n                }\r\n\r\n                /**\r\n                 * Get ready for errors!\r\n                 */\r\n\r\n            },\r\n\r\n            isPlayer: function(id) {\r\n                return this.game.player.id === id;\r\n            },\r\n\r\n            get: function(id) {\r\n                var self = this;\r\n\r\n                if (id in self.entities)\r\n                    return self.entities[id];\r\n\r\n                return null;\r\n            },\r\n\r\n            exists: function(id) {\r\n                return id in this.entities;\r\n            },\r\n\r\n            removeEntity: function(entity) {\r\n                var self = this;\r\n\r\n                self.grids.removeFromPathingGrid(entity.gridX, entity.gridY);\r\n                self.grids.removeFromRenderingGrid(entity, entity.gridX, entity.gridY);\r\n\r\n                delete self.entities[entity.id];\r\n            },\r\n\r\n            clean: function(ids) {\r\n                var self = this;\r\n\r\n                ids = ids[0];\r\n\r\n                _.each(self.entities, function(entity) {\r\n                    if (ids) {\r\n                        if (ids.indexOf(parseInt(entity.id)) < 0 && entity.id !== self.game.player.id)\r\n                            self.removeEntity(entity);\r\n                    } else\r\n                        if (entity.id !== self.game.player.id)\r\n                            self.removeEntity(entity);\r\n                });\r\n\r\n                self.grids.resetPathingGrid();\r\n            },\r\n\r\n            clearPlayers: function(exception) {\r\n                var self = this;\r\n\r\n                _.each(self.entities, function(entity) {\r\n                    if (entity.id !== exception.id && entity.type === 'player')\r\n                        self.removeEntity(entity);\r\n                });\r\n\r\n                self.grids.resetPathingGrid();\r\n            },\r\n\r\n            addEntity: function(entity) {\r\n                var self = this;\r\n\r\n                if (self.entities[entity.id])\r\n                    return;\r\n\r\n                self.entities[entity.id] = entity;\r\n                self.registerPosition(entity);\r\n\r\n                if (!(entity instanceof Item && entity.dropped) && !self.renderer.isPortableDevice())\r\n                    entity.fadeIn(self.game.time);\r\n\r\n            },\r\n\r\n            removeItem: function(item) {\r\n                var self = this;\r\n\r\n                if (!item)\r\n                    return;\r\n\r\n                self.grids.removeFromItemGrid(item, item.gridX, item.gridY);\r\n                self.grids.removeFromRenderingGrid(item, item.gridX, item.gridY);\r\n\r\n                delete self.entities[item.id];\r\n            },\r\n\r\n            registerPosition: function(entity) {\r\n                var self = this;\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                if (entity.type === 'player' || entity.type === 'mob' || entity.type === 'npc' || entity.type === 'chest') {\r\n\r\n                    self.grids.addToEntityGrid(entity, entity.gridX, entity.gridY);\r\n\r\n                    /*if (entity.type !== 'player' || entity.nonPathable)\r\n                          self.grids.addToPathingGrid(entity.gridX, entity.gridY);*/\r\n                }\r\n\r\n                if (entity.type === 'item')\r\n                    self.grids.addToItemGrid(entity, entity.gridX, entity.gridY);\r\n\r\n                self.grids.addToRenderingGrid(entity, entity.gridX, entity.gridY);\r\n            },\r\n\r\n            registerDuality: function(entity) {\r\n                var self = this;\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                self.grids.entityGrid[entity.gridY][entity.gridX][entity.id] = entity;\r\n\r\n                self.grids.addToRenderingGrid(entity, entity.gridX, entity.gridY);\r\n\r\n                if (entity.nextGridX > -1 && entity.nextGridY > -1) {\r\n                    self.grids.entityGrid[entity.nextGridY][entity.nextGridX][entity.id] = entity;\r\n\r\n                    /*if (!(entity instanceof Player))\r\n                        self.grids.pathingGrid[entity.nextGridY][entity.nextGridX] = 1;*/\r\n                }\r\n            },\r\n\r\n            unregisterPosition: function(entity) {\r\n                var self = this;\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                self.grids.removeEntity(entity);\r\n            },\r\n\r\n            getSprite: function(name) {\r\n                return this.sprites.sprites[name];\r\n            },\r\n\r\n            getAll: function() {\r\n                return this.entities;\r\n            },\r\n\r\n            forEachEntity: function(callback) {\r\n                _.each(this.entities, function(entity) { callback(entity) }) ;\r\n            },\r\n\r\n            forEachEntityAround: function(x, y, radius, callback) {\r\n                var self = this;\r\n\r\n                for (var i = x - radius, max_i = x + radius; i <= max_i; i++) {\r\n                    for (var j = y - radius, max_j = y + radius; j <= max_j; j++) {\r\n                        if (self.map.isOutOfBounds(i, j))\r\n                            continue;\r\n\r\n                        _.each(self.grids.renderingGrid[j][i], function(entity) {\r\n                            callback(entity);\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n    });\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/entities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/info.js",
    "content": "/* global _, Modules */\r\n\r\ndefine(['../utils/queue', '../renderer/infos/splat'], function(Queue, Splat) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.infos = {};\r\n            self.destroyQueue = new Queue();\r\n        },\r\n\r\n        create: function(type, data, x, y) {\r\n            var self = this;\r\n\r\n            switch (type) {\r\n                case Modules.Hits.Damage:\r\n                case Modules.Hits.Stun:\r\n                case Modules.Hits.Critical:\r\n                    var damage = data.shift(),\r\n                        isTarget = data.shift(),\r\n                        dId = self.generateId(self.game.time, damage, x, y);\r\n\r\n                    if (damage < 1 || !isInt(damage))\r\n                        damage = 'MISS';\r\n\r\n                    var hitSplat = new Splat(dId, type, damage, x, y, false),\r\n                        dColour = isTarget ? Modules.DamageColours.received : Modules.DamageColours.inflicted;\r\n\r\n                    hitSplat.setColours(dColour.fill, dColour.stroke);\r\n\r\n                    self.addInfo(hitSplat);\r\n\r\n                    break;\r\n\r\n                case Modules.Hits.Heal:\r\n                case Modules.Hits.Mana:\r\n                case Modules.Hits.Experience:\r\n                        var amount = data.shift(),\r\n                            id = self.generateId(self.game.time, amount, x, y),\r\n                            text = '+', colour;\r\n\r\n                        if (amount < 1 || !isInt(amount))\r\n                            return;\r\n\r\n                        if (type !== Modules.Hits.Experience)\r\n                            text = '++';\r\n\r\n                        var splat = new Splat(id, type, text + amount, x, y, false);\r\n\r\n                        if (type === Modules.Hits.Heal)\r\n                            colour = Modules.DamageColours.healed;\r\n                        else if (type === Modules.Hits.Mana)\r\n                            colour = Modules.DamageColours.mana;\r\n                        else if (type === Modules.Hits.Experience)\r\n                            colour = Modules.DamageColours.exp;\r\n\r\n                        splat.setColours(colour.fill, colour.stroke);\r\n\r\n                        self.addInfo(splat);\r\n\r\n                    break;\r\n\r\n                case Modules.Hits.LevelUp:\r\n                    var lId = self.generateId(self.game.time, '-1', x, y),\r\n                        levelSplat = new Splat(lId, type, 'Level Up!', x, y, false),\r\n                        lColour = Modules.DamageColours.exp;\r\n\r\n                    levelSplat.setColours(lColour.fill, lColour.stroke);\r\n\r\n                    self.addInfo(levelSplat);\r\n\r\n                    break;\r\n\r\n            }\r\n        },\r\n\r\n        getCount: function() {\r\n            return Object.keys(this.infos).length;\r\n        },\r\n\r\n        addInfo: function(info) {\r\n            var self = this;\r\n\r\n            self.infos[info.id] = info;\r\n\r\n            info.onDestroy(function(id) {\r\n                self.destroyQueue.add(id);\r\n            });\r\n        },\r\n\r\n        update: function(time) {\r\n            var self = this;\r\n\r\n            self.forEachInfo(function(info) {\r\n                info.update(time);\r\n            });\r\n\r\n            self.destroyQueue.forEachQueue(function(id) {\r\n                delete self.infos[id];\r\n            });\r\n\r\n            self.destroyQueue.reset();\r\n        },\r\n\r\n        forEachInfo: function(callback) {\r\n            _.each(this.infos, function(info) {\r\n                callback(info);\r\n            });\r\n        },\r\n\r\n        generateId: function(time, info, x, y) {\r\n            return time + '' + Math.abs(info) + '' + x + '' + y;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/input.js",
    "content": "/* global Modules, log, _, Detect, Packets */\r\n\r\ndefine(['jquery', '../entity/animation', './chat', './overlay'], function($, Animation, Chat, Overlay) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.app = game.app;\r\n            self.renderer = game.renderer;\r\n\r\n            self.selectedCellVisible = false;\r\n            self.previousClick = {};\r\n            self.cursorVisible = true;\r\n            self.targetVisible = true;\r\n            self.selectedX = -1;\r\n            self.selectedY = -1;\r\n\r\n            self.cursor = null;\r\n            self.newCursor = null;\r\n\r\n            self.targetData = null;\r\n            self.targetColour = null;\r\n            self.newTargetColour = null;\r\n            self.mobileTargetColour = 'rgba(51, 255, 0)';\r\n\r\n            self.keyMovement = true;\r\n            self.cursorMoved = false;\r\n\r\n            self.previousKey = {};\r\n\r\n            self.cursors = {};\r\n\r\n            self.lastMousePosition = { x: 0, y: 0 };\r\n\r\n            self.hovering = null;\r\n            self.hoveringInstance = null; // for debugging\r\n\r\n            self.mouse = {\r\n                x: 0,\r\n                y: 0\r\n            };\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            /**\r\n             * This is the animation for the target\r\n             * cell spinner sprite (only on desktop)\r\n             */\r\n\r\n            self.targetAnimation = new Animation('move', 4, 0, 16, 16);\r\n            self.targetAnimation.setSpeed(50);\r\n\r\n            self.chatHandler = new Chat(self.game);\r\n            self.overlay = new Overlay(self);\r\n        },\r\n\r\n        loadCursors: function() {\r\n            var self = this;\r\n\r\n            self.cursors['hand'] = self.game.getSprite('hand');\r\n            self.cursors['sword'] = self.game.getSprite('sword');\r\n            self.cursors['loot'] = self.game.getSprite('loot');\r\n            self.cursors['target'] = self.game.getSprite('target');\r\n            self.cursors['arrow'] = self.game.getSprite('arrow');\r\n            self.cursors['talk'] = self.game.getSprite('talk');\r\n            self.cursors['spell'] = self.game.getSprite('spell');\r\n            self.cursors['bow'] = self.game.getSprite('bow');\r\n\r\n            self.newCursor = self.cursors['hand'];\r\n            self.newTargetColour = 'rgba(255, 255, 255, 0.5)';\r\n\r\n            if (self.game.isDebug())\r\n                log.info('Loaded Cursors!');\r\n        },\r\n\r\n        handle: function(inputType, data) {\r\n            var self = this,\r\n                player = self.getPlayer();\r\n\r\n            switch(inputType) {\r\n                case Modules.InputType.Key:\r\n\r\n                    if (self.chatHandler.isActive()) {\r\n                        self.chatHandler.key(data);\r\n                        return;\r\n                    }\r\n\r\n                    switch(data) {\r\n\r\n                        case Modules.Keys.W:\r\n                        case Modules.Keys.Up:\r\n\r\n                            self.getPlayer().moveUp = true;\r\n\r\n                            break;\r\n\r\n                        case Modules.Keys.A:\r\n                        case Modules.Keys.Left:\r\n\r\n                            self.getPlayer().moveLeft = true;\r\n\r\n                            break;\r\n\r\n                        case Modules.Keys.S:\r\n                        case Modules.Keys.Down:\r\n\r\n                            self.getPlayer().moveDown = true;\r\n\r\n                            break;\r\n\r\n                        case Modules.Keys.D:\r\n                        case Modules.Keys.Right:\r\n\r\n                            self.getPlayer().moveRight = true;\r\n\r\n                            break;\r\n\r\n                        case Modules.Keys.Enter:\r\n\r\n                            self.chatHandler.toggle();\r\n\r\n                            break;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                    case Modules.InputType.LeftClick:\r\n\r\n                        player.disableAction = false;\r\n                        self.keyMovement = false;\r\n\r\n                        self.setCoords(data);\r\n                        self.click(self.getCoords());\r\n\r\n                        break;\r\n            }\r\n        },\r\n\r\n        keyUp: function(key) {\r\n            var self = this,\r\n                player = self.getPlayer();\r\n\r\n            switch(key) {\r\n                case Modules.Keys.W:\r\n                case Modules.Keys.Up:\r\n                    player.moveUp = false;\r\n                    break;\r\n\r\n                case Modules.Keys.A:\r\n                case Modules.Keys.Left:\r\n                    player.moveLeft = false;\r\n                    break;\r\n\r\n                case Modules.Keys.S:\r\n                case Modules.Keys.Down:\r\n                    player.moveDown = false;\r\n                    break;\r\n\r\n                case Modules.Keys.D:\r\n                case Modules.Keys.Right:\r\n                    player.moveRight = false;\r\n                    break;\r\n            }\r\n\r\n            player.disableAction = false;\r\n        },\r\n\r\n        keyMove: function(position) {\r\n            var self = this,\r\n                player = self.getPlayer();\r\n\r\n            if (!player.hasPath()) {\r\n                self.keyMovement = true;\r\n                self.cursorMoved = false;\r\n\r\n                if (self.game.isDebug()) {\r\n                    log.info('--- keyMove ---');\r\n                    log.info(position);\r\n                    log.info('---------------');\r\n                }\r\n\r\n                self.click(position);\r\n            }\r\n        },\r\n\r\n        click: function(position) {\r\n            var self = this,\r\n                player = self.getPlayer();\r\n\r\n            if (player.stunned)\r\n                return;\r\n\r\n            self.setPassiveTarget();\r\n\r\n            /**\r\n             * It can be really annoying having the chat open\r\n             * on mobile, and it is far harder to control.\r\n             */\r\n\r\n            if (self.renderer.mobile && self.chatHandler.input.is(':visible') && self.chatHandler.input.val() === '')\r\n                self.chatHandler.hideInput();\r\n\r\n            if ((self.game.zoning && self.game.zoning.direction) || player.disableAction)\r\n                return;\r\n\r\n            var entity = self.game.getEntityAt(position.x, position.y, (position.x === player.gridX && position.y === player.gridY));\r\n\r\n            if (entity) {\r\n                player.disableAction = true;\r\n\r\n                self.setAttackTarget();\r\n\r\n                if (self.isTargetable(entity))\r\n                    player.setTarget(entity);\r\n\r\n                if (player.getDistance(entity) < 7 && player.isRanged() && self.isAttackable(entity)) {\r\n                    self.game.socket.send(Packets.Target, [Packets.TargetOpcode.Attack, entity.id]);\r\n                    player.lookAt(entity);\r\n                    return;\r\n                }\r\n\r\n                if (entity.gridX === player.gridX && entity.gridY === player.gridY)\r\n                    self.game.socket.send(Packets.Target, [Packets.TargetOpcode.Attack, entity.id]);\r\n\r\n                /*if (entity.type === 'player') {\r\n                    self.getActions().showPlayerActions(entity, self.mouse.x, self.mouse.y);\r\n                    return;\r\n                }*/\r\n\r\n                if (self.isTargetable(entity)) {\r\n                    player.follow(entity);\r\n                    return;\r\n                }\r\n            } else\r\n                player.removeTarget();\r\n\r\n\r\n            self.getActions().hidePlayerActions();\r\n\r\n            player.go(position.x, position.y);\r\n\r\n            if (self.game.interface)\r\n                self.game.interface.hideAll();\r\n\r\n            if (!self.game.audio.song && Detect.isSafari())\r\n                self.game.audio.update();\r\n        },\r\n\r\n        updateCursor: function() {\r\n            var self = this;\r\n\r\n            if (!self.cursorVisible)\r\n                return;\r\n\r\n            if (self.newCursor !== self.cursor)\r\n                self.cursor = self.newCursor;\r\n\r\n            if (self.newTargetColour !== self.targetColour)\r\n                self.targetColour = self.newTargetColour;\r\n        },\r\n\r\n        moveCursor: function() {\r\n            var self = this;\r\n\r\n            if (!self.renderer || self.renderer.mobile || !self.renderer.camera)\r\n                return;\r\n\r\n            var position = self.getCoords(),\r\n                player = self.getPlayer(),\r\n                entity = self.game.getEntityAt(position.x, position.y, player.gridX === position.x && player.gridY === position.y);\r\n\r\n            self.overlay.update(entity);\r\n\r\n            if (!entity || (entity.id === player.id) || entity.type === 'player') {\r\n                self.setCursor(self.cursors['hand']);\r\n                self.hovering = null;\r\n            } else {\r\n                if (self.renderer.debugging)\r\n                    self.hoveringInstance = entity.id;\r\n\r\n                switch (entity.type) {\r\n                    case 'item':\r\n                    case 'chest':\r\n                        self.setCursor(self.cursors['loot']);\r\n                        self.hovering = Modules.Hovering.Item;\r\n                        break;\r\n\r\n                    case 'mob':\r\n                        self.setCursor(self.getAttackCursor());\r\n                        self.hovering = Modules.Hovering.Mob;\r\n                        break;\r\n\r\n                    case 'npc':\r\n                        self.setCursor(self.cursors['talk']);\r\n                        self.hovering = Modules.Hovering.NPC;\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n\r\n        setPosition: function(x, y) {\r\n            var self = this;\r\n\r\n            self.selectedX = x;\r\n            self.selectedY = y;\r\n        },\r\n\r\n        setCoords: function(event) {\r\n            var self = this,\r\n                offset = self.app.canvas.offset(),\r\n                width = self.renderer.background.width,\r\n                height = self.renderer.background.height,\r\n                proportionality = self.renderer.scale === 3 ? (2 / 3) : 1;\r\n\r\n            self.cursorMoved = false;\r\n\r\n            self.mouse.x = Math.round((event.pageX - offset.left)) * proportionality;\r\n            self.mouse.y = Math.round((event.pageY - offset.top)) * proportionality;\r\n\r\n            if (self.mouse.x >= width)\r\n                self.mouse.x = width - 1;\r\n            else if (self.mouse.x <= 0)\r\n                self.mouse.x = 0;\r\n\r\n            if (self.mouse.y >= height)\r\n                self.mouse.y = height - 1;\r\n            else if (self.mouse.y <= 0)\r\n                self.mouse.y = 0;\r\n        },\r\n\r\n        setCursor: function(cursor) {\r\n            var self = this;\r\n\r\n            if (cursor)\r\n                self.newCursor = cursor;\r\n            else\r\n                log.error('Cursor: ' + cursor + ' could not be found.');\r\n        },\r\n\r\n        setAttackTarget: function() {\r\n            var self = this;\r\n\r\n            self.targetAnimation.setRow(1);\r\n            self.mobileTargetColour = 'rgb(255, 51, 0)';\r\n        },\r\n\r\n        setPassiveTarget: function() {\r\n            var self = this;\r\n\r\n            self.targetAnimation.setRow(0);\r\n            self.mobileTargetColour = 'rgb(51, 255, 0)';\r\n        },\r\n\r\n        getAttackCursor: function() {\r\n            return this.cursors[this.getPlayer().isRanged() ? 'bow' : 'sword']\r\n        },\r\n\r\n        getCoords: function() {\r\n            var self = this;\r\n\r\n            if (!self.renderer || !self.renderer.camera)\r\n                return;\r\n\r\n            var tileScale = self.renderer.tileSize * self.renderer.getSuperScaling(),\r\n                offsetX = self.mouse.x % tileScale,\r\n                offsetY = self.mouse.y % tileScale,\r\n                x = ((self.mouse.x - offsetX) / tileScale) + self.game.getCamera().gridX,\r\n                y = ((self.mouse.y - offsetY) / tileScale) + self.game.getCamera().gridY;\r\n\r\n            return {\r\n                x: x,\r\n                y: y\r\n            }\r\n        },\r\n\r\n        getTargetData: function() {\r\n            var self = this,\r\n                frame = self.targetAnimation.currentFrame,\r\n                superScale = self.renderer.getSuperScaling(),\r\n                sprite = self.game.getSprite('target');\r\n\r\n            if (!sprite.loaded)\r\n                sprite.load();\r\n\r\n            return self.targetData = {\r\n                sprite: sprite,\r\n                x: frame.x * superScale,\r\n                y: frame.y * superScale,\r\n                width: sprite.width * superScale,\r\n                height: sprite.height * superScale,\r\n                dx: self.selectedX * 16 * superScale,\r\n                dy: self.selectedY * 16 * superScale,\r\n                dw: sprite.width * superScale,\r\n                dh: sprite.height * superScale\r\n            }\r\n        },\r\n\r\n        isTargetable: function(entity) {\r\n            return this.isAttackable(entity) || entity.type === 'npc' || entity.type === 'chest';\r\n        },\r\n\r\n        isAttackable: function(entity) {\r\n            return entity.type === 'mob' || (entity.type === 'player' && entity.pvp && this.game.pvp);\r\n        },\r\n\r\n        getPlayer: function() {\r\n            return this.game.player;\r\n        },\r\n\r\n        getActions: function() {\r\n            return this.game.interface.actions;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/input.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/interface.js",
    "content": "/* global log */\r\n\r\ndefine(['jquery', '../interface/inventory',\r\n        '../interface/profile/profile', '../interface/actions',\r\n        '../interface/bank', '../interface/enchant', '../interface/warp',\r\n        '../interface/shop', '../interface/header'],\r\n    function($, Inventory, Profile, Actions, Bank, Enchant, Warp, Shop, Header) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.notify = $('#notify');\r\n            self.confirm = $('#confirm');\r\n            self.message = $('#message');\r\n            self.fade = $('#notifyFade');\r\n            self.done = $('#notifyDone');\r\n\r\n            self.inventory = null;\r\n            self.profile = null;\r\n            self.actions = null;\r\n            self.enchant = null;\r\n            self.shop = null;\r\n            self.header = null;\r\n\r\n            self.loadNotifications();\r\n            self.loadActions();\r\n            self.loadWarp();\r\n            self.loadShop();\r\n\r\n            self.done.click(function() {\r\n                self.hideNotify();\r\n            });\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this;\r\n\r\n            if (self.inventory)\r\n                self.inventory.resize();\r\n\r\n            if (self.profile)\r\n                self.profile.resize();\r\n\r\n            if (self.bank)\r\n                self.bank.resize();\r\n\r\n            if (self.enchant)\r\n                self.enchant.resize();\r\n\r\n            if (self.shop && self.shop.isVisible())\r\n                self.shop.resize();\r\n\r\n            if (self.header)\r\n                self.header.resize();\r\n\r\n        },\r\n\r\n        loadInventory: function(size, data) {\r\n            var self = this;\r\n\r\n            /**\r\n             * This can be called multiple times and can be used\r\n             * to completely refresh the inventory.\r\n             */\r\n\r\n            self.inventory = new Inventory(self.game, size);\r\n\r\n            self.inventory.load(data);\r\n        },\r\n\r\n        loadBank: function(size, data) {\r\n            var self = this;\r\n\r\n            /**\r\n             * Similar structure as the inventory, just that it\r\n             * has two containers. The bank and the inventory.\r\n             */\r\n\r\n            if (!self.inventory) {\r\n                log.error('Inventory not initialized.');\r\n                return;\r\n            }\r\n\r\n            self.bank = new Bank(self.game, self.inventory.container, size);\r\n\r\n            self.bank.load(data);\r\n\r\n            self.loadEnchant();\r\n        },\r\n\r\n        loadProfile: function() {\r\n            var self = this;\r\n\r\n            if (!self.profile)\r\n                self.profile = new Profile(self.game);\r\n        },\r\n\r\n        loadActions: function() {\r\n            var self = this;\r\n\r\n            if (!self.actions)\r\n                self.actions = new Actions(self);\r\n        },\r\n\r\n        loadEnchant: function() {\r\n            var self = this;\r\n\r\n            if (!self.enchant)\r\n                self.enchant = new Enchant(self.game, self);\r\n        },\r\n\r\n        loadWarp: function() {\r\n            var self = this;\r\n\r\n            if (!self.warp)\r\n                self.warp = new Warp(self.game, self);\r\n        },\r\n\r\n        loadShop: function() {\r\n            var self = this;\r\n\r\n            if (!self.shop)\r\n                self.shop = new Shop(self.game, self);\r\n        },\r\n\r\n        loadHeader: function() {\r\n            var self = this;\r\n\r\n            if (!self.header)\r\n                self.header = new Header(self.game, self);\r\n        },\r\n\r\n        loadNotifications: function() {\r\n            var self = this,\r\n                ok = $('#ok'),\r\n                cancel = $('#cancel'),\r\n                done = $('#done');\r\n\r\n            /**\r\n             * Simple warning dialogue\r\n             */\r\n\r\n            ok.click(function() {\r\n\r\n                self.hideNotify();\r\n            });\r\n\r\n            /**\r\n             * Callbacks responsible for\r\n             * Confirmation dialogues\r\n             */\r\n\r\n            cancel.click(function() {\r\n\r\n                self.hideConfirm();\r\n            });\r\n\r\n            done.click(function() {\r\n                log.info(self.confirm.className);\r\n\r\n                self.hideConfirm();\r\n            });\r\n        },\r\n\r\n        hideAll: function() {\r\n            var self = this;\r\n\r\n            if (self.inventory && self.inventory.isVisible())\r\n                self.inventory.hide();\r\n\r\n            if (self.actions && self.actions.isVisible())\r\n                self.actions.hide();\r\n\r\n            if (self.profile && (self.profile.isVisible() || self.profile.settings.isVisible()))\r\n                self.profile.hide();\r\n\r\n            if (self.game.input && self.game.input.chatHandler && self.game.input.chatHandler.input.is(':visible'))\r\n                self.game.input.chatHandler.hideInput();\r\n\r\n            if (self.bank && self.bank.isVisible())\r\n                self.bank.hide();\r\n\r\n            if (self.enchant && self.enchant.isVisible())\r\n                self.enchant.hide();\r\n\r\n            if (self.warp && self.warp.isVisible())\r\n                self.warp.hide();\r\n\r\n            if (self.shop && self.shop.isVisible())\r\n                self.shop.hide();\r\n        },\r\n\r\n        addInventory: function(info) {\r\n            var self = this;\r\n\r\n            self.bank.addInventory(info);\r\n        },\r\n\r\n        removeInventory: function(info) {\r\n            var self = this;\r\n\r\n            self.bank.removeInventory(info);\r\n        },\r\n\r\n        displayNotify: function(message) {\r\n            var self = this;\r\n\r\n            if (self.isNotifyVisible())\r\n                return;\r\n\r\n            self.notify.css('display', 'block');\r\n            self.fade.css('display', 'block');\r\n            self.message.css('display', 'block');\r\n\r\n            self.message.text(message);\r\n        },\r\n\r\n        displayConfirm: function(message) {\r\n            var self = this;\r\n\r\n            if (self.isConfirmVisible())\r\n                return;\r\n\r\n            self.confirm.css('display', 'block');\r\n            self.confirm.text(message);\r\n        },\r\n\r\n        hideNotify: function() {\r\n            var self = this;\r\n\r\n            self.fade.css('display', 'none');\r\n            self.notify.css('display', 'none');\r\n            self.message.css('display', 'none');\r\n        },\r\n\r\n        hideConfirm: function() {\r\n            this.confirm.css('display', 'none');\r\n        },\r\n\r\n        getQuestPage: function() {\r\n            return this.profile.quests;\r\n        },\r\n\r\n        isNotifyVisible: function() {\r\n            return this.notify.css('display') === 'block';\r\n        },\r\n\r\n        isConfirmVisible: function() {\r\n            return this.confirm.css('display') === 'block';\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/interface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/overlay.js",
    "content": "define(['jquery'], function($) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(input) {\r\n            var self = this;\r\n\r\n            self.input = input;\r\n            self.hovering = null;\r\n\r\n            self.attackInfo = $('#attackInfo');\r\n\r\n            self.image = self.attackInfo.find('.image div');\r\n            self.name = self.attackInfo.find('.name');\r\n            self.details = self.attackInfo.find('.details');\r\n            self.health = self.attackInfo.find('.health');\r\n        },\r\n\r\n        update: function(entity) {\r\n            var self = this;\r\n\r\n            if (!self.validEntity(entity)) {\r\n                self.hovering = null;\r\n\r\n                if (self.isVisible())\r\n                    self.hide();\r\n\r\n                return;\r\n            }\r\n\r\n            if (!self.isVisible())\r\n                self.display();\r\n\r\n            self.hovering = entity;\r\n\r\n            self.name.html(entity.type === 'player' ? entity.username : entity.name);\r\n\r\n            if (self.hasHealth()) {\r\n\r\n                self.health.css({\r\n                    'display': 'block',\r\n                    'width': Math.ceil(entity.hitPoints / entity.maxHitPoints * 100) - 10 + '%'\r\n                });\r\n\r\n                self.details.html(entity.hitPoints + ' / ' + entity.maxHitPoints);\r\n\r\n            } else {\r\n\r\n                self.health.css('display', 'none');\r\n                self.details.html('');\r\n\r\n            }\r\n\r\n            self.onUpdate(function(entityId, hitPoints) {\r\n\r\n\r\n                if (self.hovering && self.hovering.id === entityId && self.hovering.type !== 'npc' && self.hovering.type !== 'item') {\r\n                    if (hitPoints < 1)\r\n                        self.hide();\r\n                    else {\r\n                        self.health.css('width', Math.ceil(hitPoints / self.hovering.maxHitPoints * 100) - 10 + '%');\r\n                        self.details.html(hitPoints + ' / ' + self.hovering.maxHitPoints);\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n        },\r\n\r\n        validEntity: function(entity) {\r\n            return entity && entity.id !== this.input.getPlayer().id && entity.type !== 'projectile';\r\n        },\r\n\r\n        clean: function() {\r\n            var self = this;\r\n\r\n            self.details.html('');\r\n            self.hovering = null;\r\n        },\r\n\r\n        hasHealth: function() {\r\n            return this.hovering.type === 'mob' || this.hovering.type === 'player';\r\n        },\r\n\r\n        display: function() {\r\n            this.attackInfo.fadeIn('fast');\r\n        },\r\n\r\n        hide: function(){\r\n            this.attackInfo.fadeOut('fast');\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.attackInfo.css('display') === 'block';\r\n        },\r\n\r\n        getGame: function() {\r\n            return this.input.game;\r\n        },\r\n\r\n        onUpdate: function(callback) {\r\n            this.updateCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/overlay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/pointer.js",
    "content": "define(['jquery', '../renderer/pointers/pointer'], function($, Pointer) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.pointers = {};\r\n\r\n            self.scale = self.getScale();\r\n\r\n            self.container = $('#bubbles');\r\n        },\r\n\r\n        create: function(id, type, name) {\r\n            var self = this;\r\n\r\n            if (id in self.pointers)\r\n                return;\r\n\r\n            switch (type) {\r\n\r\n                case Modules.Pointers.Button:\r\n\r\n                    self.pointers[id] = new Pointer(id, $('#' + name), type);\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    var element = $('<div id=\"' + id +'\" class=\"pointer\"></div>');\r\n\r\n                    self.setSize(element);\r\n\r\n                    self.container.append(element);\r\n\r\n                    self.pointers[id] = new Pointer(id, element, type);\r\n\r\n                    break;\r\n            }\r\n\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this;\r\n\r\n            _.each(self.pointers, function(pointer) {\r\n\r\n                switch (pointer.type) {\r\n\r\n                    case Modules.Pointers.Relative:\r\n\r\n                        var scale = self.getScale(),\r\n                            x = pointer.x,\r\n                            y = pointer.y,\r\n                            offsetX = 0,\r\n                            offsetY = 0;\r\n\r\n                        pointer.element.css('left', (x * scale) - offsetX + 'px');\r\n                        pointer.element.css('top', (y * scale) - offsetY + 'px');\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        setSize: function(element) {\r\n            var self = this;\r\n\r\n            element.css({\r\n                'width': (16 + 16 * self.scale) + 'px',\r\n                'height': (16 + 16 * self.scale) + 'px',\r\n                'margin': 'inherit',\r\n                'margin-top': '-' + (6 * self.scale) + 'px',\r\n                'top': (10 * self.scale) + 'px',\r\n                'background': 'url(\"img/' + self.scale + '/pointer.png\")'\r\n            });\r\n        },\r\n\r\n        clean: function() {\r\n            var self = this;\r\n\r\n            _.each(self.pointers, function(pointer) { pointer.destroy(); });\r\n\r\n            self.pointers = {};\r\n        },\r\n\r\n        destroy: function(pointer) {\r\n            var self = this;\r\n\r\n            delete self.pointers[pointer.id];\r\n            pointer.destroy();\r\n        },\r\n\r\n        set: function(pointer, posX, posY) {\r\n            var self = this;\r\n\r\n            self.updateCamera();\r\n\r\n            var tileSize = 48, //16 * self.scale\r\n                x = ((posX - self.camera.x) * self.scale),\r\n                width = parseInt(pointer.element.css('width') + 24),\r\n                offset = (width / 2) - (tileSize / 2), y, outX, outY;\r\n\r\n            y = ((posY - self.camera.y) * self.scale) - tileSize;\r\n\r\n            outX = x / self.game.renderer.canvasWidth;\r\n            outY = y / self.game.renderer.canvasHeight;\r\n\r\n            if (outX >= 1.5) { // right\r\n                pointer.element.css('left', '');\r\n                pointer.element.css('right', '0');\r\n                pointer.element.css('top', '50%');\r\n                pointer.element.css('bottom', '');\r\n\r\n                pointer.element.css('transform', 'rotate(-90deg)');\r\n            } else if (outY >= 1.5) { // bottom\r\n\r\n                pointer.element.css('left', '50%');\r\n                pointer.element.css('right', '');\r\n                pointer.element.css('top', '');\r\n                pointer.element.css('bottom', '0');\r\n\r\n                pointer.element.css('transform', '');\r\n\r\n            } else if (outX <= 0) { // left\r\n\r\n                pointer.element.css('left', '0');\r\n                pointer.element.css('right', '');\r\n                pointer.element.css('top', '50%');\r\n                pointer.element.css('bottom', '');\r\n\r\n                pointer.element.css('transform', 'rotate(90deg)');\r\n\r\n            } else if (outY <= 0) { // top\r\n\r\n                pointer.element.css('left', '');\r\n                pointer.element.css('right', '50%');\r\n                pointer.element.css('top', '0');\r\n                pointer.element.css('bottom', '');\r\n\r\n                pointer.element.css('transform', 'rotate(180deg)');\r\n\r\n            } else {\r\n                pointer.element.css('left', (x - offset) + 'px');\r\n                pointer.element.css('right', '');\r\n                pointer.element.css('top' , y + 'px');\r\n                pointer.element.css('bottom', '');\r\n\r\n                pointer.element.css('transform', '');\r\n            }\r\n\r\n        },\r\n\r\n        setToEntity: function(entity) {\r\n            var self = this,\r\n                pointer = self.get(entity.id);\r\n\r\n            if (!pointer)\r\n                return;\r\n\r\n            self.set(pointer, entity.x, entity.y);\r\n        },\r\n\r\n        setToPosition: function(id, x, y) {\r\n            var self = this,\r\n                pointer = self.get(id);\r\n\r\n            if (!pointer)\r\n                return;\r\n\r\n            pointer.setPosition(x, y);\r\n\r\n            self.set(pointer, x, y);\r\n        },\r\n\r\n        setRelative: function(id, x, y) {\r\n            var self = this,\r\n                pointer = self.get(id);\r\n\r\n            if (!pointer)\r\n                return;\r\n\r\n            var scale = self.getScale(),\r\n                offsetX = 0,\r\n                offsetY = 0;\r\n\r\n            pointer.setPosition(x, y);\r\n\r\n            pointer.element.css('left', (x * scale) - offsetX + 'px');\r\n            pointer.element.css('top', (y * scale) - offsetY + 'px');\r\n        },\r\n\r\n        update: function() {\r\n            var self = this;\r\n\r\n            _.each(self.pointers, function(pointer) {\r\n\r\n                switch (pointer.type) {\r\n                    case Modules.Pointers.Entity:\r\n\r\n                        var entity = self.game.entities.get(pointer.id);\r\n\r\n                        if (entity)\r\n                            self.setToEntity(entity);\r\n                        else\r\n                            self.destroy(pointer);\r\n\r\n                        break;\r\n\r\n                    case Modules.Pointers.Position:\r\n\r\n                        if (pointer.x !== -1 && pointer.y !== -1)\r\n                            self.set(pointer, pointer.x, pointer.y);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        get: function(id) {\r\n            var self = this;\r\n\r\n            if (id in self.pointers)\r\n                return self.pointers[id];\r\n\r\n            return null;\r\n        },\r\n\r\n        updateCamera: function() {\r\n            this.camera = this.game.renderer.camera;\r\n        },\r\n\r\n        getScale: function() {\r\n            return this.game.getScaleFactor(); //always 3\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/pointer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/sprites.js",
    "content": "/* global log, _ */\r\n\r\ndefine(['../entity/sprite', '../entity/animation'], function(Sprite, Animation) {\r\n    /**\r\n     * Class responsible for loading all the necessary sprites from the JSON.\r\n     */\r\n\r\n    return Class.extend({\r\n\r\n        init: function(renderer) {\r\n            var self = this;\r\n\r\n            self.renderer = renderer;\r\n\r\n            self.sprites = {};\r\n\r\n            self.sparksAnimation = null;\r\n\r\n            $.getJSON('data/sprites.json', function(json) {\r\n                self.load(json);\r\n            });\r\n\r\n            self.loadAnimations();\r\n        },\r\n\r\n        load: function(spriteData) {\r\n            var self = this;\r\n\r\n            _.each(spriteData, function(sprite) {\r\n                self.sprites[sprite.id] = new Sprite(sprite, self.renderer.scale);\r\n            });\r\n\r\n            if (self.renderer.game.isDebug())\r\n                log.info('Finished loading sprite data...');\r\n\r\n            if (self.loadedSpritesCallback)\r\n                self.loadedSpritesCallback();\r\n        },\r\n\r\n        loadAnimations: function() {\r\n            var self = this;\r\n\r\n            self.sparksAnimation = new Animation('idle_down', 6, 0, 16, 16);\r\n            self.sparksAnimation.setSpeed(120);\r\n        },\r\n\r\n        updateSprites: function() {\r\n            var self = this;\r\n\r\n            _.each(self.sprites, function(sprite) {\r\n                sprite.update(self.renderer.getScale());\r\n            });\r\n\r\n            if (self.renderer.game.isDebug())\r\n                log.info('Updated sprites to scale: ' + self.renderer.getScale());\r\n        },\r\n\r\n        onLoadedSprites: function(callback) {\r\n            this.loadedSpritesCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/sprites.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "Kaetram-Open/client/js/controllers/zoning.js",
    "content": "/* global Modules */\r\n\r\ndefine(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.renderer = game.renderer;\r\n            self.camera = game.camera;\r\n            self.input = game.input;\r\n\r\n            self.direction = null;\r\n        },\r\n\r\n        reset: function() {\r\n            this.direction = null;\r\n        },\r\n\r\n        setUp: function() {\r\n            this.direction = Modules.Orientation.Up;\r\n        },\r\n\r\n        setDown: function() {\r\n            this.direction = Modules.Orientation.Down;\r\n        },\r\n\r\n        setRight: function() {\r\n            this.direction = Modules.Orientation.Right;\r\n        },\r\n\r\n        setLeft: function() {\r\n            this.direction = Modules.Orientation.Left;\r\n        },\r\n\r\n        getDirection: function() {\r\n            return this.direction;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/controllers/zoning.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/animation.js",
    "content": "define(function() {\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Ripped from BrowserQuest's client\r\n         */\r\n\r\n        init: function(name, length, row, width, height) {\r\n            var self = this;\r\n\r\n            self.name = name;\r\n            self.length = length;\r\n            self.row = row;\r\n            self.width = width;\r\n            self.height = height;\r\n\r\n            self.reset();\r\n        },\r\n\r\n        tick: function() {\r\n            var self = this,\r\n                i = self.currentFrame.index;\r\n\r\n            i = (i < self.length - 1) ? i + 1 : 0;\r\n\r\n            if (self.count > 0 && i === 0) {\r\n                self.count -= 1;\r\n\r\n                if (self.count === 0) {\r\n                    self.currentFrame.index = 0;\r\n                    self.endCountCallback();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            self.currentFrame.x = self.width * i;\r\n            self.currentFrame.y = self.height * self.row;\r\n\r\n            self.currentFrame.index = i;\r\n        },\r\n\r\n        update: function(time) {\r\n            var self = this;\r\n\r\n            if (self.lastTime === 0 && self.name.substr(0, 3) === 'atk')\r\n                self.lastTime = time;\r\n\r\n            if (self.readyToAnimate(time)) {\r\n                self.lastTime = time;\r\n                self.tick();\r\n\r\n                return true;\r\n            } else\r\n                return false;\r\n        },\r\n\r\n        setCount: function(count, onEndCount) {\r\n            var self = this;\r\n\r\n            self.count = count;\r\n            self.endCountCallback = onEndCount;\r\n        },\r\n\r\n        setSpeed: function(speed) {\r\n            this.speed = speed;\r\n        },\r\n\r\n        setRow: function(row) {\r\n            this.row = row;\r\n        },\r\n\r\n        readyToAnimate: function(time) {\r\n            return (time - this.lastTime) > this.speed;\r\n        },\r\n\r\n        reset: function() {\r\n            var self = this;\r\n\r\n            self.lastTime = 0;\r\n            self.currentFrame = {\r\n                index: 0,\r\n                x: 0,\r\n                y: self.row * self.height\r\n            };\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/animation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/character.js",
    "content": "/* global _, Modules, log */\r\n\r\ndefine(['../entity', '../../utils/transition', '../animation'], function(Entity, Transition, Animation) {\r\n\r\n    return Entity.extend({\r\n\r\n        init: function(id, kind) {\r\n            var self = this;\r\n\r\n            self._super(id, kind);\r\n\r\n            self.nextGridX = -1;\r\n            self.nextGridY = -1;\r\n            self.prevGridX = -1;\r\n            self.prevGridY = -1;\r\n\r\n            self.orientation = Modules.Orientation.Down;\r\n\r\n            self.hitPoints = -1;\r\n            self.maxHitPoints = -1;\r\n            self.mana = -1;\r\n            self.maxMana = -1;\r\n\r\n            self.healthBarVisible = false;\r\n            self.healthBarTimeout = false;\r\n\r\n            self.dead = false;\r\n            self.following = false;\r\n            self.attacking = false;\r\n            self.interrupted = false;\r\n\r\n            self.critical = false;\r\n            self.frozen = false;\r\n            self.stunned = false;\r\n            self.explosion = false;\r\n\r\n            self.path = null;\r\n            self.target = null;\r\n\r\n            self.attackers = {};\r\n\r\n            self.movement = new Transition();\r\n\r\n            self.attackAnimationSpeed = 50;\r\n            self.walkAnimationSpeed = 100;\r\n            self.movementSpeed = 250;\r\n\r\n            self.attackRange = 1;\r\n\r\n            self.loadGlobals();\r\n        },\r\n\r\n        loadGlobals: function() {\r\n            var self = this;\r\n\r\n            self.criticalAnimation = new Animation('atk_down', 10, 0, 48, 48);\r\n            self.criticalAnimation.setSpeed(30);\r\n\r\n            self.criticalAnimation.setCount(1, function() {\r\n                self.critical = false;\r\n\r\n                self.criticalAnimation.reset();\r\n                self.criticalAnimation.count = 1;\r\n            });\r\n\r\n            self.terrorAnimation = new Animation('explosion', 8, 0, 64, 64);\r\n            self.terrorAnimation.setSpeed(50);\r\n\r\n            self.terrorAnimation.setCount(1, function() {\r\n                self.terror = false;\r\n\r\n                self.terrorAnimation.reset();\r\n                self.terrorAnimation.count = 1;\r\n            });\r\n\r\n            self.stunAnimation = new Animation('atk_down', 6, 0, 48, 48);\r\n            self.stunAnimation.setSpeed(30);\r\n\r\n            self.explosionAnimation = new Animation('explosion', 8, 0, 64, 64);\r\n            self.explosionAnimation.setSpeed(50);\r\n\r\n            self.explosionAnimation.setCount(1, function() {\r\n                self.explosion = false;\r\n\r\n                self.explosionAnimation.reset();\r\n                self.explosionAnimation.count = 1;\r\n            });\r\n\r\n        },\r\n\r\n        animate: function(animation, speed, count, onEndCount) {\r\n            var self = this,\r\n                o = ['atk', 'walk', 'idle'],\r\n                orientation = self.orientation;\r\n\r\n            if (self.currentAnimation && self.currentAnimation.name === 'death')\r\n                return;\r\n\r\n            self.spriteFlipX = false;\r\n            self.spriteFlipY = false;\r\n\r\n            if (o.indexOf(animation) > -1) {\r\n                animation += '_' + (orientation === Modules.Orientation.Left ? 'right' : self.orientationToString(orientation));\r\n                self.spriteFlipX = self.orientation === Modules.Orientation.Left;\r\n            }\r\n\r\n            self.setAnimation(animation, speed, count, onEndCount);\r\n        },\r\n\r\n        lookAt: function(character) {\r\n            var self = this;\r\n\r\n            if (character.gridX > self.gridX)\r\n                self.setOrientation(Modules.Orientation.Right);\r\n            else if (character.gridX < self.gridX)\r\n                self.setOrientation(Modules.Orientation.Left);\r\n            else if (character.gridY > self.gridY)\r\n                self.setOrientation(Modules.Orientation.Down);\r\n            else if (character.gridY < self.gridY)\r\n                self.setOrientation(Modules.Orientation.Up);\r\n\r\n            self.idle();\r\n        },\r\n\r\n        follow: function(character) {\r\n            var self = this;\r\n\r\n            self.following = true;\r\n\r\n            self.setTarget(character);\r\n            self.move(character.gridX, character.gridY);\r\n        },\r\n\r\n        attack: function(attacker, character) {\r\n            var self = this;\r\n\r\n            self.attacking = true;\r\n\r\n            self.follow(character);\r\n        },\r\n\r\n        backOff: function() {\r\n            var self = this;\r\n\r\n            self.attacking = false;\r\n            self.following = false;\r\n\r\n            self.removeTarget();\r\n        },\r\n\r\n        addAttacker: function(character) {\r\n            var self = this;\r\n\r\n            if (self.hasAttacker(character))\r\n                return;\r\n\r\n            self.attackers[character.instance] = character;\r\n        },\r\n\r\n        removeAttacker: function(character) {\r\n            var self = this;\r\n\r\n            if (self.hasAttacker(character))\r\n                delete self.attackers[character.id];\r\n        },\r\n\r\n        hasAttacker: function(character) {\r\n            var self = this;\r\n\r\n            if (self.attackers.size === 0)\r\n                return false;\r\n\r\n            return character.instance in self.attackers;\r\n        },\r\n\r\n        performAction: function(orientation, action) {\r\n            var self = this;\r\n\r\n            self.setOrientation(orientation);\r\n\r\n            switch(action) {\r\n                case Modules.Actions.Idle:\r\n                    self.animate('idle', self.idleSpeed);\r\n                    break;\r\n\r\n                case Modules.Actions.Orientate:\r\n                    self.animate('idle', self.idleSpeed);\r\n                    break;\r\n\r\n                case Modules.Actions.Attack:\r\n                    self.animate('atk', self.attackAnimationSpeed, 1);\r\n                    break;\r\n\r\n                case Modules.Actions.Walk:\r\n                    self.animate('walk', self.walkAnimationSpeed);\r\n                    break;\r\n            }\r\n        },\r\n\r\n        idle: function(o) {\r\n            var self = this,\r\n                orientation = o ? o : self.orientation;\r\n\r\n            self.performAction(orientation, Modules.Actions.Idle);\r\n        },\r\n\r\n        orientationToString: function(o) {\r\n            var oM = Modules.Orientation;\r\n\r\n            switch(o) {\r\n                case oM.Left:\r\n                    return 'left';\r\n\r\n                case oM.Right:\r\n                    return 'right';\r\n\r\n                case oM.Up:\r\n                    return 'up';\r\n\r\n                case oM.Down:\r\n                    return 'down';\r\n            }\r\n        },\r\n\r\n        go: function(x, y, forced) {\r\n            var self = this;\r\n\r\n            if (self.frozen)\r\n                return;\r\n\r\n            if (self.following) {\r\n                self.following = false;\r\n                self.target = null;\r\n            }\r\n\r\n            self.move(x, y, forced);\r\n        },\r\n\r\n        proceed: function(x, y) {\r\n            this.newDestination = {\r\n                x: x,\r\n                y: y\r\n            }\r\n        },\r\n\r\n        /**\r\n         * We can have the movement remain client sided because\r\n         * the server side will be responsible for determining\r\n         * whether or not the player should have reached the\r\n         * location and ban all hackers. That and the fact\r\n         * the movement speed is constantly updated to avoid\r\n         * hacks previously present in BQ.\r\n         */\r\n\r\n        nextStep: function() {\r\n            var self = this,\r\n                stop = false,\r\n                x, y, path;\r\n\r\n            if (self.step % 2 === 0 && self.secondStepCallback)\r\n                self.secondStepCallback();\r\n\r\n            self.prevGridX = self.gridX;\r\n            self.prevGridY = self.gridY;\r\n\r\n            if (!self.hasPath())\r\n                return;\r\n\r\n            if (self.beforeStepCallback)\r\n                self.beforeStepCallback();\r\n\r\n            self.updateGridPosition();\r\n\r\n            if (!self.interrupted) {\r\n                if (self.hasNextStep()) {\r\n                    self.nextGridX = self.path[self.step + 1][0];\r\n                    self.nextGridY = self.path[self.step + 1][1];\r\n                }\r\n\r\n                if (self.stepCallback)\r\n                    self.stepCallback();\r\n\r\n                if (self.changedPath()) {\r\n                    x = self.newDestination.x;\r\n                    y = self.newDestination.y;\r\n\r\n                    path = self.requestPathfinding(x, y);\r\n\r\n                    if (!path)\r\n                        return;\r\n\r\n                    self.newDestination = null;\r\n\r\n                    if (path.length < 2)\r\n                        stop = true;\r\n                    else\r\n                        self.followPath(path);\r\n\r\n                } else if (self.hasNextStep()) {\r\n                    self.step++;\r\n                    self.updateMovement();\r\n                } else\r\n                    stop = true;\r\n\r\n            } else {\r\n                stop = true;\r\n                self.interrupted = false;\r\n            }\r\n\r\n            if (stop) {\r\n                self.path = null;\r\n                self.idle();\r\n\r\n                if (self.stopPathingCallback)\r\n                    self.stopPathingCallback(self.gridX, self.gridY, self.forced);\r\n\r\n                if (self.forced)\r\n                    self.forced = false;\r\n            }\r\n        },\r\n\r\n        updateMovement: function() {\r\n            var self = this,\r\n                step = self.step;\r\n\r\n            if (self.path[step][0] < self.path[step - 1][0])\r\n                self.performAction(Modules.Orientation.Left, Modules.Actions.Walk);\r\n\r\n            if (self.path[step][0] > self.path[step - 1][0])\r\n                self.performAction(Modules.Orientation.Right, Modules.Actions.Walk);\r\n\r\n            if (self.path[step][1] < self.path[step - 1][1])\r\n                self.performAction(Modules.Orientation.Up, Modules.Actions.Walk);\r\n\r\n            if (self.path[step][1] > self.path[step - 1][1])\r\n                self.performAction(Modules.Orientation.Down, Modules.Actions.Walk);\r\n        },\r\n\r\n        followPath: function(path) {\r\n            var self = this;\r\n\r\n            /**\r\n             * This is to ensure the player does not click on\r\n             * himself or somehow into another dimension\r\n             */\r\n\r\n            if (!path || path.length < 2)\r\n                return;\r\n\r\n            self.path = path;\r\n            self.step = 0;\r\n\r\n            if (self.following)\r\n                path.pop();\r\n\r\n            if (self.startPathingCallback)\r\n                self.startPathingCallback(path);\r\n\r\n            self.nextStep();\r\n        },\r\n\r\n        move: function(x, y, forced) {\r\n            var self = this;\r\n\r\n            self.destination = {\r\n                gridX: x,\r\n                gridY: y\r\n            };\r\n\r\n            self.adjacentTiles = {};\r\n\r\n            if (self.hasPath() && !forced)\r\n                self.proceed(x, y);\r\n            else\r\n                self.followPath(self.requestPathfinding(x, y));\r\n        },\r\n\r\n        stop: function(force) {\r\n            var self = this;\r\n\r\n            if (!force)\r\n                self.interrupted = true;\r\n            else if (self.hasPath()) {\r\n\r\n                self.path = null;\r\n                self.newDestination = null;\r\n                self.movement = new Transition();\r\n                self.performAction(self.orientation, Modules.Actions.Idle);\r\n                self.nextGridX = self.gridX;\r\n                self.nextGridY = self.gridY;\r\n\r\n            }\r\n        },\r\n\r\n        getEffectAnimation: function() {\r\n            var self = this;\r\n\r\n            if (self.critical)\r\n                return self.criticalAnimation;\r\n\r\n            if (self.stunned)\r\n                return self.stunAnimation;\r\n\r\n            if (self.terror)\r\n                return self.terrorAnimation;\r\n\r\n            if (self.explosion)\r\n                return self.explosionAnimation;\r\n        },\r\n\r\n        getActiveEffect: function() {\r\n            var self = this;\r\n\r\n            if (self.critical)\r\n                return 'criticaleffect';\r\n\r\n            if (self.stunned)\r\n                return 'stuneffect';\r\n\r\n            if (self.terror)\r\n                return 'explosion-terror';\r\n\r\n            if (self.explosion)\r\n                return 'explosion-fireball';\r\n        },\r\n\r\n        /**\r\n         * TRIGGERED!!!!\r\n         */\r\n\r\n        triggerHealthBar: function() {\r\n            var self = this;\r\n\r\n            self.healthBarVisible = true;\r\n\r\n            if (self.healthBarTimeout)\r\n                clearTimeout(self.healthBarTimeout);\r\n\r\n            self.healthBarTimeout = setTimeout(function() {\r\n                self.healthBarVisible = false;\r\n            }, 7000);\r\n        },\r\n\r\n        clearHealthBar: function() {\r\n            var self = this;\r\n\r\n            self.healthBarVisible = false;\r\n            clearTimeout(self.healthBarTimeout);\r\n            self.healthBarTimeout = null;\r\n        },\r\n\r\n        requestPathfinding: function(x, y) {\r\n            var self = this;\r\n\r\n            if (self.requestPathCallback)\r\n                return self.requestPathCallback(x, y);\r\n        },\r\n\r\n        updateGridPosition: function() {\r\n            var self = this;\r\n\r\n            self.setGridPosition(self.path[self.step][0], self.path[self.step][1]);\r\n        },\r\n\r\n        isMoving: function() {\r\n            return this.currentAnimation.name === 'walk' && (this.x % 2 !== 0 || this.y % 2 !== 0);\r\n        },\r\n\r\n        forEachAttacker: function(callback) {\r\n            var self = this;\r\n\r\n            _.each(self.attackers, function(attacker) {\r\n                callback(attacker);\r\n            });\r\n        },\r\n\r\n        isAttacked: function() {\r\n            return Object.keys(this.attackers).length > 0;\r\n        },\r\n\r\n        hasWeapon: function() {\r\n            return false;\r\n        },\r\n\r\n        hasShadow: function() {\r\n            return true;\r\n        },\r\n\r\n        hasTarget: function() {\r\n            return !(this.target === null);\r\n        },\r\n\r\n        hasPath: function() {\r\n            return this.path !== null;\r\n        },\r\n\r\n        hasNextStep: function() {\r\n            return (this.path.length - 1 > this.step);\r\n        },\r\n\r\n        changedPath: function() {\r\n            return !!this.newDestination;\r\n        },\r\n\r\n        removeTarget: function() {\r\n            var self = this;\r\n\r\n            if (!self.target)\r\n                return;\r\n\r\n            self.target = null;\r\n        },\r\n\r\n        forget: function() {\r\n            this.attackers = {};\r\n        },\r\n\r\n        moved: function() {\r\n            var self = this;\r\n\r\n            self.loadDirty();\r\n\r\n            if (self.moveCallback)\r\n                self.moveCallback();\r\n        },\r\n\r\n        getDistance: function(entity) {\r\n            return this._super(entity);\r\n        },\r\n\r\n        setName: function(name) {\r\n            this._super(name);\r\n        },\r\n\r\n        setSprite: function(sprite) {\r\n            this._super(sprite);\r\n        },\r\n\r\n        setTarget: function(target) {\r\n            var self = this;\r\n\r\n            if (target === null) {\r\n                self.removeTarget();\r\n                return;\r\n            }\r\n\r\n            if (self.target && self.target.id === target.id)\r\n                return;\r\n\r\n            if (self.hasTarget())\r\n                self.removeTarget();\r\n\r\n            self.target = target;\r\n        },\r\n\r\n        setHitPoints: function(hitPoints) {\r\n            var self = this;\r\n\r\n            self.hitPoints = hitPoints;\r\n\r\n            if (self.hitPointsCallback)\r\n                self.hitPointsCallback(self.hitPoints);\r\n        },\r\n\r\n        setIdleSpeed: function(idleSpeed) {\r\n            this._super(idleSpeed);\r\n        },\r\n\r\n        setMaxHitPoints: function (maxHitPoints) {\r\n            var self = this;\r\n\r\n            self.maxHitPoints = maxHitPoints;\r\n\r\n            if (self.maxHitPointsCallback)\r\n                self.maxHitPointsCallback(self.maxHitPoints);\r\n        },\r\n\r\n        setOrientation: function(orientation) {\r\n            this.orientation = orientation;\r\n        },\r\n\r\n        setGridPosition: function(x, y) {\r\n            this._super(x, y);\r\n        },\r\n\r\n        onRequestPath: function(callback) {\r\n            this.requestPathCallback = callback;\r\n        },\r\n\r\n        onStartPathing: function(callback) {\r\n            this.startPathingCallback = callback;\r\n        },\r\n\r\n        onStopPathing: function(callback) {\r\n            this.stopPathingCallback = callback;\r\n        },\r\n\r\n        onBeforeStep: function(callback) {\r\n            this.beforeStepCallback = callback;\r\n        },\r\n\r\n        onStep: function(callback) {\r\n            this.stepCallback = callback;\r\n        },\r\n\r\n        onSecondStep: function(callback) {\r\n            this.secondStepCallback = callback;\r\n        },\r\n\r\n        onMove: function(callback) {\r\n            this.moveCallback = callback;\r\n        },\r\n\r\n        onHitPoints: function(callback) {\r\n            this.hitPointsCallback = callback;\r\n        },\r\n\r\n        onMaxHitPoints: function(callback) {\r\n            this.maxHitPointsCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/character.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/mob/mob.js",
    "content": "define(['../character'], function(Character) {\r\n\r\n    return Character.extend({\r\n\r\n        init: function(id, kind) {\r\n            var self = this;\r\n\r\n            self._super(id, kind);\r\n\r\n            self.name = name;\r\n\r\n            self.hitPoints = -1;\r\n            self.maxHitPoints = -1;\r\n\r\n            self.hiddenName = false;\r\n\r\n            self.type = 'mob';\r\n        },\r\n\r\n        setHitPoints: function(hitPoints) {\r\n            this._super(hitPoints);\r\n        },\r\n\r\n        setMaxHitPoints: function(maxHitPoints) {\r\n            this._super(maxHitPoints);\r\n        },\r\n\r\n        idle: function() {\r\n            this._super();\r\n        },\r\n\r\n        performAction: function(orientation, action) {\r\n            this._super(orientation, action);\r\n        },\r\n\r\n        setSprite: function(sprite) {\r\n            this._super(sprite);\r\n        },\r\n\r\n        setName: function(name) {\r\n            this.name = name;\r\n        },\r\n\r\n        setGridPosition: function(x, y) {\r\n            this._super(x, y);\r\n        },\r\n\r\n        hasShadow: function() {\r\n            return !this.hiddenName;\r\n        },\r\n\r\n        drawNames: function() {\r\n            return !this.hiddenName;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/mob/mob.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/npc/npc.js",
    "content": "define(['../character'], function(Character) {\r\n\r\n    return Character.extend({\r\n\r\n        init: function(id, kind) {\r\n            var self = this;\r\n\r\n            self._super(id, kind);\r\n\r\n            self.type = 'npc';\r\n        },\r\n\r\n        idle: function() {\r\n            this._super();\r\n        },\r\n\r\n        setSprite: function(sprite) {\r\n            this._super(sprite);\r\n        },\r\n\r\n        setName: function(name) {\r\n            this._super(name);\r\n        },\r\n\r\n        setGridPosition: function(x, y) {\r\n            this._super(x, y);\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/npc/npc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/armour.js",
    "content": "define(['./equipment'], function(Equipment) {\r\n\r\n    return Equipment.extend({\r\n\r\n        init: function(name, string, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            self._super(name, string, count, ability, abilityLevel);\r\n\r\n            self.defence = -1;\r\n        },\r\n\r\n        setDefence: function(defence) {\r\n            this.defence = defence;\r\n        },\r\n\r\n        getDefence: function() {\r\n            return this.defence;\r\n        },\r\n\r\n        update: function(name, string, count, ability, abilityLevel) {\r\n            this._super(name, string, count, ability, abilityLevel);\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/player/equipment/armour.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/boots.js",
    "content": "define(['./equipment'], function(Equipment) {\r\n\r\n    return Equipment.extend({\r\n\r\n        init: function(name, string, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            self._super(name, string, count, ability, abilityLevel);\r\n        },\r\n\r\n        update: function(name, string, count, ability, abilityLevel) {\r\n            this._super(name, string, count, ability, abilityLevel);\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/player/equipment/boots.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/equipment.js",
    "content": "define(function() {\r\n\r\n    /**\r\n     * The children of these classes are responsible for\r\n     * clear and concise ways of organizing stats of weapons\r\n     * in the client side. This does not dictate the damage,\r\n     * defense or bonus stats, it's just for looks.\r\n     */\r\n\r\n    return Class.extend({\r\n\r\n        init: function(name, string, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            self.name = name;\r\n            self.string = string;\r\n            self.count = count;\r\n            self.ability = ability;\r\n            self.abilityLevel = abilityLevel;\r\n        },\r\n\r\n        exists: function() {\r\n            return this.name !== null && this.name !== 'null';\r\n        },\r\n\r\n        getName: function() {\r\n            return this.name;\r\n        },\r\n\r\n        getString: function() {\r\n            return this.string;\r\n        },\r\n\r\n        getCount: function() {\r\n            return this.count;\r\n        },\r\n\r\n        getAbility: function() {\r\n            return this.ability;\r\n        },\r\n\r\n        getAbilityLevel: function() {\r\n            return this.abilityLevel;\r\n        },\r\n\r\n        update: function(name, string, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            self.name = name;\r\n            self.string = string;\r\n            self.count = count;\r\n            self.ability = ability;\r\n            self.abilityLevel = abilityLevel;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/player/equipment/equipment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/pendant.js",
    "content": "define(['./equipment'], function(Equipment) {\r\n\r\n    return Equipment.extend({\r\n\r\n        init: function(name, string, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            self._super(name, string, count, ability, abilityLevel);\r\n        },\r\n\r\n        update: function(name, string, count, ability, abilityLevel) {\r\n            this._super(name, string, count, ability, abilityLevel);\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/player/equipment/pendant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/ring.js",
    "content": "define(['./equipment'], function(Equipment) {\r\n\r\n    return Equipment.extend({\r\n\r\n        init: function(name, string, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            self._super(name, string, count, ability, abilityLevel);\r\n        },\r\n\r\n        update: function(name, string, count, ability, abilityLevel) {\r\n            this._super(name, string, count, ability, abilityLevel);\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/player/equipment/ring.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/equipment/weapon.js",
    "content": "define(['./equipment'], function(Equipment) {\r\n\r\n    return Equipment.extend({\r\n\r\n        init: function(name, string, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            self._super(name, string, count, ability, abilityLevel);\r\n\r\n            self.level = -1;\r\n            self.damage = -1;\r\n            self.ranged = string && string.includes('bow');\r\n        },\r\n\r\n        exists: function() {\r\n            return this._super();\r\n        },\r\n\r\n        setDamage: function(damage) {\r\n            this.damage = damage;\r\n        },\r\n\r\n        setLevel: function(level) {\r\n            this.level = level;\r\n        },\r\n\r\n        getDamage: function() {\r\n            return this.damage;\r\n        },\r\n\r\n        getLevel: function() {\r\n            return this.level;\r\n        },\r\n\r\n        getString: function() {\r\n            return this._super();\r\n        },\r\n\r\n        update: function(name, string, count, ability, abilityLevel) {\r\n            this._super(name, string, count, ability, abilityLevel);\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/player/equipment/weapon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/player.js",
    "content": "/* global Modules, log, _ */\r\n\r\ndefine(['../character', './equipment/armour', './equipment/weapon',\r\n        './equipment/pendant', './equipment/boots', './equipment/ring'],\r\n        function(Character, Armour, Weapon, Pendant, Boots, Ring) {\r\n\r\n    return Character.extend({\r\n\r\n        init: function() {\r\n            var self = this;\r\n\r\n            self._super(-1, Modules.Types.Player);\r\n\r\n            self.username = '';\r\n            self.password = '';\r\n            self.email = '';\r\n\r\n            self.avatar = null;\r\n\r\n            self.rights = 0;\r\n            self.wanted = false;\r\n            self.experience = -1;\r\n            self.nextExperience = -1;\r\n            self.prevExperience = -1;\r\n            self.level = -1;\r\n            self.pvpKills = -1;\r\n            self.pvpDeaths = -1;\r\n\r\n            self.hitPoints = -1;\r\n            self.maxHitPoints = -1;\r\n            self.mana = -1;\r\n            self.maxMana = -1;\r\n\r\n            self.prevX = 0;\r\n            self.prevY = 0;\r\n\r\n            self.direction = null;\r\n            self.pvp = false;\r\n\r\n            self.moveLeft = false;\r\n            self.moveRight = false;\r\n            self.moveUp = false;\r\n            self.moveDown = false;\r\n            self.disableAction = false;\r\n\r\n            self.loadEquipment();\r\n\r\n        },\r\n\r\n        load: function(data) {\r\n            var self = this;\r\n\r\n            self.setId(data.instance);\r\n            self.setGridPosition(data.x, data.y);\r\n            self.setPointsData(data.hitPoints, data.mana);\r\n            self.setExperience(data.experience, data.nextExperience, data.prevExperience);\r\n\r\n            self.username = data.username;\r\n            self.level = data.level;\r\n\r\n            self.lastLogin = data.lastLogin;\r\n            self.pvpKills = data.pvpKills;\r\n            self.pvpDeaths = data.pvpDeaths;\r\n\r\n            self.orientation = data.orienation;\r\n\r\n            self.type = 'player';\r\n        },\r\n\r\n        loadHandler: function(game) {\r\n            var self = this;\r\n\r\n            /**\r\n             * This is for other player characters\r\n             */\r\n\r\n            self.handler.setGame(game);\r\n            self.handler.load();\r\n        },\r\n\r\n        hasKeyboardMovement: function() {\r\n            return this.moveLeft || this.moveRight || this.moveUp || this.moveDown;\r\n        },\r\n\r\n        stop: function(force) {\r\n            this._super(force);\r\n        },\r\n\r\n        setId: function(id) {\r\n            this.id = id;\r\n        },\r\n\r\n        idle: function() {\r\n            this._super();\r\n        },\r\n\r\n        loadEquipment: function() {\r\n            var self = this;\r\n\r\n            self.armour = null;\r\n            self.weapon = null;\r\n            self.pendant = null;\r\n            self.ring = null;\r\n            self.boots = null;\r\n        },\r\n\r\n        isRanged: function() {\r\n            return this.weapon && this.weapon.ranged;\r\n        },\r\n\r\n        follow: function(character) {\r\n            this._super(character);\r\n        },\r\n\r\n        go: function(x, y, forced) {\r\n            this._super(x, y, forced);\r\n        },\r\n\r\n        hasWeapon: function() {\r\n            return this.weapon ? this.weapon.exists() : false;\r\n        },\r\n\r\n        performAction: function(orientation, action) {\r\n            this._super(orientation, action);\r\n        },\r\n\r\n        setName: function(name) {\r\n            var self = this;\r\n\r\n            self.username = name;\r\n            self.name = name;\r\n        },\r\n\r\n        setSprite: function(sprite) {\r\n            this._super(sprite);\r\n        },\r\n\r\n        getSpriteName: function() {\r\n            return this.armour ? this.armour.string : 'clotharmor';\r\n        },\r\n\r\n        setGridPosition: function(x, y) {\r\n            this._super(x, y);\r\n        },\r\n\r\n        setHitPoints: function(hitPoints) {\r\n            this._super(hitPoints);\r\n        },\r\n\r\n        setMaxHitPoints: function(maxHitPoints) {\r\n            this._super(maxHitPoints);\r\n        },\r\n\r\n        setMana: function(mana) {\r\n            this.mana = mana;\r\n        },\r\n\r\n        setMaxMana: function(maxMana) {\r\n            this.maxMana = maxMana;\r\n        },\r\n\r\n        clearHealthBar: function() {\r\n            this._super();\r\n        },\r\n\r\n        getX: function() {\r\n            return this.gridX;\r\n        },\r\n\r\n        getY: function() {\r\n            return this.gridY;\r\n        },\r\n\r\n        setExperience: function(experience, nextExperience, prevExperience) {\r\n            var self = this;\r\n\r\n            self.experience = experience;\r\n            self.nextExperience = nextExperience;\r\n            self.prevExperience = prevExperience;\r\n\r\n            if (self.experienceCallback)\r\n                self.experienceCallback();\r\n        },\r\n\r\n        setPointsData: function(hitPointsData, manaData) {\r\n            var self = this,\r\n                hitPoints = hitPointsData.shift(),\r\n                maxHitPoints = hitPointsData.shift(),\r\n                mana = manaData.shift(),\r\n                maxMana = manaData.shift();\r\n\r\n            self.setMaxHitPoints(maxHitPoints);\r\n            self.setMaxMana(maxMana);\r\n\r\n            self.setHitPoints(hitPoints);\r\n            self.setMana(mana);\r\n        },\r\n\r\n        setEquipment: function(type, name, string, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            switch (type) {\r\n                case Modules.Equipment.Armour:\r\n\r\n                    if (!self.armour)\r\n                        self.armour = new Armour(name, string, count, ability, abilityLevel);\r\n                    else\r\n                        self.armour.update(name, string, count, ability, abilityLevel);\r\n\r\n                    if (self.updateArmourCallback)\r\n                        self.updateArmourCallback(string);\r\n\r\n                    break;\r\n\r\n                case Modules.Equipment.Weapon:\r\n\r\n                    if (!self.weapon)\r\n                        self.weapon = new Weapon(name, string, count, ability, abilityLevel);\r\n                    else\r\n                        self.weapon.update(name, string, count, ability, abilityLevel);\r\n\r\n                    self.weapon.ranged = string.includes('bow');\r\n\r\n                    break;\r\n\r\n                case Modules.Equipment.Pendant:\r\n\r\n                    if (!self.pendant)\r\n                        self.pendant = new Pendant(name, string, count, ability, abilityLevel);\r\n                    else\r\n                        self.pendant.update(name, string, count, ability, abilityLevel);\r\n\r\n                    break;\r\n\r\n                case Modules.Equipment.Ring:\r\n\r\n                    if (!self.ring)\r\n                        self.ring = new Ring(name, string, count, ability, abilityLevel);\r\n                    else\r\n                        self.ring.update(name, string, count, ability, abilityLevel);\r\n\r\n                    break;\r\n\r\n                case Modules.Equipment.Boots:\r\n\r\n                    if (!self.boots)\r\n                        self.boots = new Boots(name, string, count, ability, abilityLevel);\r\n                    else\r\n                        self.boots.update(name, string, count, ability, abilityLevel);\r\n\r\n                    break;\r\n\r\n            }\r\n        },\r\n\r\n        unequip: function(type) {\r\n            var self = this;\r\n\r\n            switch (type) {\r\n                case 'armour':\r\n                    self.armour.update('Cloth Armour', 'clotharmor', 1, -1, -1);\r\n                    break;\r\n\r\n                case 'weapon':\r\n                    self.weapon.update(null, null, -1, -1, -1);\r\n                    break;\r\n\r\n                case 'pendant':\r\n                    self.pendant.update(null, null, -1, -1, -1);\r\n                    break;\r\n\r\n                case 'ring':\r\n                    self.ring.update(null, null, -1, -1, -1);\r\n                    break;\r\n\r\n                case 'boots':\r\n                    self.boots.update(null, null, -1, -1, -1);\r\n                    break;\r\n            }\r\n        },\r\n\r\n        tempBlink: function() {\r\n            var self = this;\r\n\r\n            self.blink(90);\r\n\r\n            if (!self.tempBlinkTimeout)\r\n                self.tempBlinkTimeout = setTimeout(function() { self.stopBlinking(); }, 500);\r\n        },\r\n\r\n        getDistance: function(entity) {\r\n            return this._super(entity);\r\n        },\r\n\r\n        onUpdateArmour: function(callback) {\r\n            this.updateArmourCallback = callback;\r\n        },\r\n\r\n        onExperience: function(callback) {\r\n            this.experienceCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/player/player.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/character/player/playerhandler.js",
    "content": "/* global log, Packets, Modules */\r\n\r\ndefine(function() {\r\n\r\n    /**\r\n     * This is a player handler, responsible for all the callbacks\r\n     * without having to clutter up the entire game file.\r\n     */\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game, player) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.camera = game.getCamera();\r\n            self.input = game.input;\r\n            self.player = player;\r\n            self.entities = game.entities;\r\n            self.socket = game.socket;\r\n            self.renderer = game.renderer;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.player.onRequestPath(function(x, y) {\r\n                if (self.player.dead)\r\n                    return null;\r\n\r\n                var ignores = [self.player];\r\n\r\n                if (self.player.hasTarget())\r\n                    ignores.push(self.player.target);\r\n\r\n                if (!self.game.map.isColliding(x, y))\r\n                    self.socket.send(Packets.Movement, [Packets.MovementOpcode.Request, x, y, self.player.gridX, self.player.gridY]);\r\n\r\n                return self.game.findPath(self.player, x, y, ignores);\r\n            });\r\n\r\n            self.player.onStartPathing(function(path) {\r\n                var i = path.length - 1;\r\n\r\n                self.input.selectedX = path[i][0];\r\n                self.input.selectedY = path[i][1];\r\n                self.input.selectedCellVisible = true;\r\n\r\n                if (!self.game.getEntityAt(self.input.selectedX, self.input.selectedY))\r\n                    self.socket.send(Packets.Target, [Packets.TargetOpcode.None]);\r\n\r\n                self.socket.send(Packets.Movement, [Packets.MovementOpcode.Started, self.input.selectedX, self.input.selectedY, self.player.gridX, self.player.gridY]);\r\n            });\r\n\r\n            self.player.onStopPathing(function(x, y) {\r\n                self.entities.unregisterPosition(self.player);\r\n                self.entities.registerPosition(self.player);\r\n\r\n                self.input.selectedCellVisible = false;\r\n\r\n                self.camera.clip();\r\n\r\n                var id = null,\r\n                    entity = self.game.getEntityAt(x, y, true);\r\n\r\n                if (entity)\r\n                    id = entity.id;\r\n\r\n                var hasTarget = self.player.hasTarget();\r\n\r\n                self.socket.send(Packets.Movement, [Packets.MovementOpcode.Stop, x, y, id, hasTarget, self.player.orientation]);\r\n\r\n                if (hasTarget) {\r\n                    self.socket.send(Packets.Target, [self.isAttackable() ? Packets.TargetOpcode.Attack : Packets.TargetOpcode.Talk, self.player.target.id]);\r\n\r\n                    self.player.lookAt(self.player.target);\r\n                }\r\n\r\n                self.input.setPassiveTarget();\r\n\r\n                self.game.storage.setOrientation(self.player.orientation);\r\n\r\n            });\r\n\r\n            self.player.onBeforeStep(function() {\r\n                self.entities.unregisterPosition(self.player);\r\n\r\n                if (!self.isAttackable())\r\n                    return;\r\n\r\n                if (self.player.isRanged()) {\r\n                    if (self.player.getDistance(self.player.target) < 7)\r\n                        self.player.stop();\r\n                } else {\r\n                    self.input.selectedX = self.player.target.gridX;\r\n                    self.input.selectedY = self.player.target.gridY;\r\n                }\r\n            });\r\n\r\n            self.player.onStep(function() {\r\n                if (self.player.hasNextStep())\r\n                    self.entities.registerDuality(self.player);\r\n\r\n                if (!self.camera.centered || self.camera.lockX || self.camera.lockY)\r\n                    self.checkBounds();\r\n\r\n                self.player.forEachAttacker(function(attacker) {\r\n\r\n                    if (!attacker.stunned)\r\n                        attacker.follow(self.player);\r\n                });\r\n\r\n                self.socket.send(Packets.Movement, [Packets.MovementOpcode.Step, self.player.gridX, self.player.gridY]);\r\n            });\r\n\r\n            self.player.onSecondStep(function() {\r\n                self.renderer.updateAnimatedTiles();\r\n            });\r\n\r\n            self.player.onMove(function() {\r\n                /**\r\n                 * This is a callback representing the absolute exact position of the player.\r\n                 */\r\n\r\n                if (self.camera.centered)\r\n                    self.camera.centreOn(self.player);\r\n\r\n                if (self.player.hasTarget())\r\n                    self.player.follow(self.player.target);\r\n\r\n            });\r\n\r\n            self.player.onUpdateArmour(function(armourName) {\r\n                self.player.setSprite(self.game.getSprite(armourName));\r\n            });\r\n\r\n        },\r\n\r\n        isAttackable: function() {\r\n            var self = this,\r\n                target = self.player.target;\r\n\r\n            if (!target)\r\n                return;\r\n\r\n            return target.type === 'mob' || (target.type === 'player' && target.pvp);\r\n        },\r\n\r\n        checkBounds: function() {\r\n            var self = this,\r\n                x = self.player.gridX - self.camera.gridX,\r\n                y = self.player.gridY - self.camera.gridY,\r\n                isBorder = false;\r\n\r\n            if (x === 0)\r\n                self.game.zoning.setLeft();\r\n            else if (y === 0)\r\n                self.game.zoning.setUp();\r\n            else if (x === self.camera.gridWidth - 1)\r\n                self.game.zoning.setRight();\r\n            else if (y === self.camera.gridHeight - 1)\r\n                self.game.zoning.setDown();\r\n\r\n            if (self.game.zoning.direction !== null) {\r\n                self.camera.zone(self.game.zoning.getDirection());\r\n                self.game.zoning.reset();\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/character/player/playerhandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/entity.js",
    "content": "/* global Modules, log, _ */\r\n\r\ndefine(['./entityhandler'], function(EntityHandler) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(id, kind) {\r\n            var self = this;\r\n\r\n            self.id = id;\r\n            self.kind = kind;\r\n\r\n            self.x = 0;\r\n            self.y = 0;\r\n            self.gridX = 0;\r\n            self.gridY = 0;\r\n\r\n            self.name = '';\r\n\r\n            self.sprite = null;\r\n            self.spriteFlipX = false;\r\n            self.spriteFlipY = false;\r\n\r\n            self.animations = null;\r\n            self.currentAnimation = null;\r\n            self.idleSpeed = 450;\r\n\r\n            self.shadowOffsetY = 0;\r\n            self.hidden = false;\r\n\r\n            self.spriteLoaded = false;\r\n            self.visible = true;\r\n            self.fading = false;\r\n            self.handler = new EntityHandler(self);\r\n\r\n            self.angled = false;\r\n            self.angle = 0;\r\n\r\n            self.critical = false;\r\n            self.stunned = false;\r\n            self.terror = false;\r\n\r\n            self.nonPathable = false;\r\n            self.hasCounter = false;\r\n\r\n            self.countdownTime = 0;\r\n            self.counter = 0;\r\n\r\n            self.renderingData = {\r\n                scale: -1,\r\n                angle: 0\r\n            };\r\n\r\n            self.loadDirty();\r\n        },\r\n\r\n        /**\r\n         * This is important for when the client is\r\n         * on a mobile screen. So the sprite has to be\r\n         * handled differently.\r\n         */\r\n\r\n        loadDirty: function() {\r\n            var self = this;\r\n\r\n            self.dirty = true;\r\n\r\n            if (self.dirtyCallback)\r\n                self.dirtyCallback();\r\n        },\r\n\r\n        fadeIn: function(time) {\r\n            var self = this;\r\n\r\n            self.fading = true;\r\n            self.fadingTime = time;\r\n        },\r\n\r\n        blink: function(speed) {\r\n            var self = this;\r\n\r\n            self.blinking = setInterval(function() {\r\n                self.toggleVisibility();\r\n            }, speed);\r\n        },\r\n\r\n        stopBlinking: function() {\r\n            var self = this;\r\n\r\n            if (self.blinking)\r\n                clearInterval(self.blinking);\r\n\r\n            self.setVisible(true);\r\n        },\r\n\r\n        setName: function(name) {\r\n            this.name = name;\r\n        },\r\n\r\n        setSprite: function(sprite) {\r\n            var self = this;\r\n\r\n            if (!sprite || (self.sprite && self.sprite.name === sprite.name))\r\n                return;\r\n\r\n            if (self.type === 'player')\r\n                sprite.loadHurt = true;\r\n\r\n            if (!sprite.loaded)\r\n                sprite.load();\r\n\r\n            sprite.name = sprite.id;\r\n\r\n            self.sprite = sprite;\r\n\r\n            self.normalSprite = self.sprite;\r\n            self.animations = sprite.createAnimations();\r\n\r\n            sprite.onLoad(function() {\r\n\r\n                if (sprite.loadHurt)\r\n                    self.hurtSprite = sprite.hurtSprite;\r\n\r\n            });\r\n\r\n            self.spriteLoaded = true;\r\n\r\n            if (self.readyCallback)\r\n                self.readyCallback();\r\n        },\r\n\r\n        setPosition: function(x, y) {\r\n            var self = this;\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n        },\r\n\r\n        setGridPosition: function(x, y) {\r\n            var self = this;\r\n\r\n            self.gridX = x;\r\n            self.gridY = y;\r\n\r\n            self.setPosition(x * 16, y * 16);\r\n        },\r\n\r\n        setAnimation: function(name, speed, count, onEndCount) {\r\n            var self = this;\r\n\r\n            if (!self.spriteLoaded || (self.currentAnimation && self.currentAnimation.name === name))\r\n                return;\r\n\r\n            var anim = self.getAnimationByName(name);\r\n\r\n            if (!anim)\r\n                return;\r\n\r\n            self.currentAnimation = anim;\r\n\r\n            if (name.substr(0, 3) === 'atk')\r\n                self.currentAnimation.reset();\r\n\r\n            self.currentAnimation.setSpeed(speed);\r\n\r\n            self.currentAnimation.setCount(count ? count : 0, onEndCount || function() {\r\n                self.idle();\r\n            });\r\n        },\r\n\r\n        setCountdown: function(count) {\r\n            var self = this;\r\n\r\n            self.counter = count;\r\n\r\n            self.countdownTime = new Date().getTime();\r\n\r\n            self.hasCounter = true;\r\n\r\n        },\r\n\r\n        setVisible: function(visible) {\r\n            this.visible = visible\r\n        },\r\n\r\n        setIdleSpeed: function(idleSpeed) {\r\n            this.idleSpeed = idleSpeed;\r\n        },\r\n\r\n        hasWeapon: function() {\r\n            return false;\r\n        },\r\n\r\n        getDistance: function(entity) {\r\n            var self = this,\r\n                x = Math.abs(self.gridX - entity.gridX),\r\n                y = Math.abs(self.gridY - entity.gridY);\r\n\r\n            return x > y ? x : y;\r\n        },\r\n\r\n        getCoordDistance: function(toX, toY) {\r\n            var self = this,\r\n                x = Math.abs(self.gridX - toX),\r\n                y = Math.abs(self.gridY - toY);\r\n\r\n            return x > y ? x : y;\r\n        },\r\n\r\n        inAttackRadius: function(entity) {\r\n            return entity && this.getDistance(entity) < 2 && !(this.gridX !== entity.gridX && this.gridY !== entity.gridY);\r\n        },\r\n\r\n        inExtraAttackRadius: function(entity) {\r\n            return entity && this.getDistance(entity) < 3 && !(this.gridX !== entity.gridX && this.gridY !== entity.gridY);\r\n        },\r\n\r\n        getAnimationByName: function(name) {\r\n            if (name in this.animations)\r\n                return this.animations[name];\r\n\r\n            return null;\r\n        },\r\n\r\n        getSprite: function() {\r\n            return this.sprite.name;\r\n        },\r\n\r\n        toggleVisibility: function() {\r\n            this.setVisible(!this.visible);\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.visible;\r\n        },\r\n\r\n        drawNames: function() {\r\n            return true;\r\n        },\r\n\r\n        hasShadow: function() {\r\n            return false;\r\n        },\r\n\r\n        hasPath: function() {\r\n            return false;\r\n        },\r\n\r\n        onReady: function(callback) {\r\n            this.readyCallback = callback;\r\n        },\r\n\r\n        onDirty: function(callback) {\r\n            this.dirtyCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/entityhandler.js",
    "content": "/* global log, Packets */\r\n\r\ndefine(['./character/character'], function(Character) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(entity) {\r\n            var self = this;\r\n\r\n            self.entity = entity;\r\n            self.game = null;\r\n            self.entities = null;\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            if (!self.entity || !self.game)\r\n                return;\r\n\r\n            if (self.isCharacter()) {\r\n\r\n                self.entity.onRequestPath(function(x, y) {\r\n                    var ignored = [self.entity];\r\n\r\n                    return self.game.findPath(self.entity, x, y, ignored)\r\n                });\r\n\r\n                self.entity.onBeforeStep(function() {\r\n                    self.entities.unregisterPosition(self.entity);\r\n                });\r\n\r\n                self.entity.onStep(function() {\r\n                    self.entities.registerDuality(self.entity);\r\n\r\n                    self.entity.forEachAttacker(function(attacker) {\r\n                        if (attacker.hasTarget() && attacker.target.id === self.entity.id && !attacker.stunned)\r\n                            attacker.follow(self.entity);\r\n                    });\r\n\r\n                    if (self.entity.type === 'mob')\r\n                        self.game.socket.send(Packets.Movement, [Packets.MovementOpcode.Entity, self.entity.id, self.entity.gridX, self.entity.gridY]);\r\n\r\n                    if (self.entity.attackRange > 1 && self.entity.hasTarget() && self.entity.getDistance(self.entity.target) <= self.entity.attackRange)\r\n                        self.entity.stop(false);\r\n\r\n                });\r\n\r\n                self.entity.onStopPathing(function() {\r\n                    self.entities.grids.addToRenderingGrid(self.entity, self.entity.gridX, self.entity.gridY);\r\n\r\n                    self.entities.unregisterPosition(self.entity);\r\n                    self.entities.registerPosition(self.entity);\r\n\r\n                });\r\n            }\r\n        },\r\n\r\n        isCharacter: function() {\r\n            return this.entity.type && (this.entity.type === 'player' || this.entity.type === 'mob' || this.entity.type === 'npc');\r\n        },\r\n\r\n        setGame: function(game) {\r\n            var self = this;\r\n\r\n            if (!self.game)\r\n                self.game = game;\r\n\r\n            self.setEntities(self.game.entities);\r\n        },\r\n\r\n        setEntities: function(entities) {\r\n            var self = this;\r\n\r\n            if (!self.entities)\r\n                self.entities = entities;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/entityhandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/objects/chest.js",
    "content": "define(['../entity'], function(Entity) {\r\n\r\n    return Entity.extend({\r\n\r\n        init: function(id, kind) {\r\n            var self = this;\r\n\r\n            self._super(id, kind);\r\n\r\n            self.type = 'chest';\r\n        },\r\n\r\n        idle: function() {\r\n            this.setAnimation('idle_down', 150);\r\n        },\r\n\r\n        setName: function(name) {\r\n            this._super(name);\r\n        },\r\n\r\n        setAnimation: function(name, speed, count, onEndCount) {\r\n            this._super(name, speed, count, onEndCount);\r\n        },\r\n\r\n        setGridPosition: function(x, y) {\r\n            this._super(x, y);\r\n        },\r\n\r\n        setSprite: function(sprite) {\r\n            this._super(sprite);\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/objects/chest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/objects/item.js",
    "content": "define(['../entity'], function(Entity) {\r\n\r\n    return Entity.extend({\r\n\r\n        init: function(id, kind, count, ability, abilityLevel) {\r\n            var self = this;\r\n\r\n            self._super(id, kind);\r\n\r\n            self.count = count;\r\n            self.ability = ability;\r\n            self.abilityLevel = abilityLevel;\r\n\r\n            self.dropped = false;\r\n            self.stackable = false;\r\n\r\n            self.type = 'item';\r\n        },\r\n\r\n        idle: function() {\r\n            this.setAnimation('idle', 150);\r\n        },\r\n\r\n        setName: function(name) {\r\n            this._super(name);\r\n        },\r\n\r\n        setAnimation: function(name, speed, count) {\r\n            this._super(name, speed, count);\r\n        },\r\n\r\n        setGridPosition: function(x, y) {\r\n            this._super(x, y);\r\n        },\r\n\r\n        setSprite: function(sprite) {\r\n            this._super(sprite);\r\n        },\r\n\r\n        hasShadow: function() {\r\n            return true;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/objects/item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/objects/projectile.js",
    "content": "define(['../entity'], function(Entity) {\r\n\r\n    return Entity.extend({\r\n\r\n        init: function(id, kind, owner) {\r\n            var self = this;\r\n\r\n            self._super(id, kind);\r\n\r\n            self.owner = owner;\r\n\r\n            self.name = '';\r\n\r\n            self.startX = -1;\r\n            self.startY = -1;\r\n\r\n            self.destX = -1;\r\n            self.destY = -1;\r\n\r\n            self.special = -1;\r\n\r\n            self.static = false;\r\n            self.dynamic = false;\r\n\r\n            self.speed = 200;\r\n\r\n            self.angle = 0;\r\n\r\n            self.lighting = null;\r\n        },\r\n\r\n        getId: function() {\r\n            return this.id;\r\n        },\r\n\r\n        impact: function() {\r\n            if (this.impactCallback)\r\n                this.impactCallback();\r\n        },\r\n\r\n        setSprite: function(sprite) {\r\n            this._super(sprite);\r\n        },\r\n\r\n        setAnimation: function(name, speed, count, onEndCount) {\r\n            this._super(name, speed, count, onEndCount);\r\n        },\r\n\r\n        setStart: function(x, y) {\r\n            var self = this;\r\n\r\n            self.setGridPosition(Math.floor(x / 16), Math.floor(y / 16));\r\n\r\n            self.startX = x;\r\n            self.startY = y;\r\n        },\r\n\r\n        setDestination: function(x, y) {\r\n            var self = this;\r\n\r\n            self.static = true;\r\n\r\n            self.destX = x;\r\n            self.destY = y;\r\n\r\n            self.updateAngle();\r\n        },\r\n\r\n        setTarget: function(target) {\r\n            var self = this;\r\n\r\n            if (!target)\r\n                return;\r\n\r\n            self.dynamic = true;\r\n\r\n            self.destX = target.x;\r\n            self.destY = target.y;\r\n\r\n            self.updateAngle();\r\n\r\n            if (target.type !== 'mob')\r\n                return;\r\n\r\n            target.onMove(function() {\r\n                self.destX = target.x;\r\n                self.destY = target.y;\r\n\r\n                self.updateAngle();\r\n            });\r\n        },\r\n\r\n        getSpeed: function() {\r\n            var self = this;\r\n\r\n            return 1;\r\n        },\r\n\r\n        updateTarget: function(x, y) {\r\n            var self = this;\r\n\r\n            self.destX = x;\r\n            self.destY = y;\r\n        },\r\n\r\n        hasPath: function() {\r\n            return false;\r\n        },\r\n\r\n        updateAngle: function() {\r\n            this.angle = Math.atan2(this.destY - this.y, this.destX - this.x) * (180 / Math.PI) - 90;\r\n        },\r\n\r\n        onImpact: function(callback) {\r\n            this.impactCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/objects/projectile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "Kaetram-Open/client/js/entity/sprite.js",
    "content": "/* global log, _ */\r\n\r\ndefine(['./animation'], function(Animation) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(sprite, scale) {\r\n            var self = this;\r\n\r\n            self.sprite = sprite;\r\n            self.scale = scale;\r\n\r\n            self.id = sprite.id;\r\n\r\n            self.loaded = false;\r\n            self.loadHurt = false;\r\n            self.loadSilhouette = true;\r\n\r\n            self.offsetX = 0;\r\n            self.offsetY = 0;\r\n            self.offsetAngle = 0;\r\n\r\n            self.hurtSprite = {\r\n                loaded: false\r\n            };\r\n\r\n            self.loadSprite();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.image = new Image();\r\n            self.image.crossOrigin = 'Anonymous';\r\n            self.image.src = self.filepath;\r\n\r\n            self.image.onload = function() {\r\n                self.loaded = true;\r\n\r\n                if (self.loadHurt)\r\n                    self.createHurtSprite();\r\n\r\n                if (self.loadCallback)\r\n                    self.loadCallback();\r\n            };\r\n        },\r\n\r\n        loadSprite: function() {\r\n            var self = this,\r\n                sprite = self.sprite;\r\n\r\n            self.filepath = 'img/sprites/' + self.id + '.png';\r\n            self.animationData = sprite.animations;\r\n\r\n            self.width = sprite.width;\r\n            self.height = sprite.height;\r\n\r\n            self.offsetX = sprite.offsetX !== undefined ? sprite.offsetX : -16;\r\n            self.offsetY = sprite.offsetY !== undefined ? sprite.offsetY : -16;\r\n            self.offfsetAngle = sprite.offsetAngle !== undefined ? sprite.offsetAngle : 0;\r\n\r\n            self.idleSpeed = sprite.idleSpeed !== undefined ? sprite.idleSpeed : 450;\r\n        },\r\n\r\n        update: function(newScale) {\r\n            var self = this;\r\n\r\n            self.scale = newScale;\r\n\r\n            self.loadSprite();\r\n            self.load();\r\n        },\r\n\r\n        createAnimations: function() {\r\n            var self = this,\r\n                animations = {};\r\n\r\n            for (var name in self.animationData) {\r\n                if (self.animationData.hasOwnProperty(name)) {\r\n                    var a = self.animationData[name];\r\n\r\n                    animations[name] = new Animation(name, a.length, a.row, self.width, self.height);\r\n                }\r\n            }\r\n\r\n            return animations;\r\n        },\r\n\r\n        /**\r\n         * This is when an entity gets hit, they turn red then white.\r\n         */\r\n\r\n        createHurtSprite: function() {\r\n            var self = this;\r\n\r\n            if (!self.loaded)\r\n                self.load();\r\n\r\n            if (self.hurtSprite.loaded)\r\n                return;\r\n\r\n            var canvas = document.createElement('canvas'),\r\n                context = canvas.getContext('2d'),\r\n                spriteData, data;\r\n\r\n            canvas.width = self.image.width;\r\n            canvas.height = self.image.height;\r\n\r\n            try {\r\n                context.drawImage(self.image, 0, 0, self.image.width, self.image.height);\r\n\r\n                spriteData = context.getImageData(0, 0, self.image.width, self.image.height);\r\n                data = spriteData.data;\r\n\r\n                for (var i = 0; i < data.length; i += 4) {\r\n                    data[i] = 255;\r\n                    data[i + 1] = data[i + 2] = 75;\r\n                }\r\n\r\n                spriteData.data = data;\r\n\r\n                context.putImageData(spriteData, 0, 0);\r\n\r\n                self.hurtSprite = {\r\n                    image: canvas,\r\n                    loaded: true,\r\n                    offsetX: self.offsetX,\r\n                    offsetY: self.offsetY,\r\n                    width: self.width,\r\n                    height: self.height,\r\n                    type: 'hurt'\r\n                }\r\n\r\n            } catch (e) {\r\n                log.error('Could not load hurt sprite.');\r\n                log.error(e);\r\n            }\r\n        },\r\n\r\n        onLoad: function(callback) {\r\n            this.loadCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/entity/sprite.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "Kaetram-Open/client/js/game.js",
    "content": "/* global Class, log, Packets, Modules, Detect, _ */\r\n\r\ndefine(['./renderer/renderer', './utils/storage',\r\n        './map/map', './network/socket', './entity/character/player/player',\r\n        './renderer/updater', './controllers/entities', './controllers/input',\r\n        './entity/character/player/playerhandler', './utils/pathfinder',\r\n        './controllers/zoning', './controllers/info', './controllers/bubble',\r\n        './controllers/interface', './controllers/audio', './controllers/pointer',\r\n        './renderer/overlay', './network/connection', './utils/modules', './network/packets'],\r\n        function(Renderer, LocalStorage, Map, Socket, Player, Updater,\r\n                 Entities, Input, PlayerHandler, Pathfinder, Zoning, Info,\r\n                 Bubble, Interface, Audio, Pointer, Overlay, Connection) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(app) {\r\n            var self = this;\r\n\r\n            self.app = app;\r\n\r\n            self.id = -1;\r\n\r\n            self.socket = null;\r\n            self.messages = null;\r\n            self.renderer = null;\r\n            self.updater = null;\r\n            self.storage = null;\r\n            self.entities = null;\r\n            self.input = null;\r\n            self.map = null;\r\n            self.playerHandler = null;\r\n            self.pathfinder = null;\r\n            self.zoning = null;\r\n            self.info = null;\r\n            self.interface = null;\r\n            self.audio = null;\r\n\r\n            self.player = null;\r\n\r\n            self.stopped = false;\r\n            self.started = false;\r\n            self.ready = false;\r\n            self.loaded = false;\r\n\r\n            self.time = new Date();\r\n\r\n            self.pvp = false;\r\n            self.population = -1;\r\n\r\n            self.lastTime = new Date().getTime();\r\n\r\n            self.loadRenderer();\r\n            self.loadControllers();\r\n        },\r\n\r\n        start: function() {\r\n            var self = this;\r\n\r\n            if (self.started)\r\n                return;\r\n\r\n            self.app.fadeMenu();\r\n            self.tick();\r\n\r\n            self.started = true;\r\n        },\r\n\r\n        stop: function() {\r\n            var self = this;\r\n\r\n            self.stopped = false;\r\n            self.started = false;\r\n            self.ready = false;\r\n        },\r\n\r\n        tick: function() {\r\n            var self = this;\r\n\r\n            if (self.ready) {\r\n\r\n                self.time = new Date().getTime();\r\n\r\n                self.renderer.render();\r\n                self.updater.update();\r\n\r\n                if (!self.stopped)\r\n                    requestAnimationFrame(self.tick.bind(self));\r\n            }\r\n        },\r\n\r\n        unload: function() {\r\n            var self = this;\r\n\r\n            self.socket = null;\r\n            self.messages = null;\r\n            self.renderer = null;\r\n            self.updater = null;\r\n            self.storage = null;\r\n            self.entities = null;\r\n            self.input = null;\r\n            self.map = null;\r\n            self.playerHandler = null;\r\n            self.player = null;\r\n            self.pathfinder = null;\r\n            self.zoning = null;\r\n            self.info = null;\r\n            self.interface = null;\r\n\r\n            self.audio.stop();\r\n            self.audio = null;\r\n        },\r\n\r\n        loadRenderer: function() {\r\n            var self = this,\r\n                background = document.getElementById('background'),\r\n                foreground = document.getElementById('foreground'),\r\n                overlay = document.getElementById('overlay'),\r\n                textCanvas = document.getElementById('textCanvas'),\r\n                entities = document.getElementById('entities'),\r\n                cursor = document.getElementById('cursor');\r\n\r\n            self.app.sendStatus('Initializing render engine');\r\n\r\n            self.setRenderer(new Renderer(background, entities, foreground, overlay, textCanvas, cursor, self));\r\n        },\r\n\r\n        loadControllers: function() {\r\n            var self = this,\r\n                hasWorker = self.app.hasWorker();\r\n\r\n            self.app.sendStatus('Loading local storage');\r\n\r\n            self.setStorage(new LocalStorage(self.app));\r\n\r\n            self.app.sendStatus(hasWorker ? 'Loading maps - asynchronous' : null);\r\n\r\n            if (hasWorker)\r\n                self.loadMap();\r\n\r\n            self.app.sendStatus('Initializing network socket');\r\n\r\n            self.setSocket(new Socket(self));\r\n            self.setMessages(self.socket.messages);\r\n            self.setInput(new Input(self));\r\n\r\n            self.app.sendStatus('Loading controllers');\r\n\r\n            self.setEntityController(new Entities(self));\r\n\r\n            self.setInfo(new Info(self));\r\n\r\n            self.setBubble(new Bubble(self));\r\n\r\n            self.setPointer(new Pointer(self));\r\n\r\n            self.setAudio(new Audio(self));\r\n\r\n            self.setInterface(new Interface(self));\r\n\r\n            self.loadStorage();\r\n\r\n            if (!hasWorker) {\r\n                self.app.sendStatus(null);\r\n                self.loaded = true;\r\n            }\r\n        },\r\n\r\n        loadMap: function() {\r\n            var self = this;\r\n\r\n            self.map = new Map(self);\r\n            self.overlays = new Overlay(self);\r\n\r\n            self.map.onReady(function() {\r\n                if (!self.isDebug())\r\n                    self.map.loadRegionData();\r\n\r\n                self.app.sendStatus('Loading the pathfinder');\r\n\r\n                self.setPathfinder(new Pathfinder(self.map.width, self.map.height));\r\n\r\n                self.renderer.setMap(self.map);\r\n                self.renderer.loadCamera();\r\n\r\n                self.app.sendStatus('Loading updater');\r\n\r\n                self.setUpdater(new Updater(self));\r\n\r\n                self.entities.load();\r\n\r\n                self.renderer.setEntities(self.entities);\r\n\r\n                self.app.sendStatus(null);\r\n\r\n                self.loaded = true;\r\n            });\r\n        },\r\n\r\n        connect: function() {\r\n            var self = this;\r\n\r\n            self.app.cleanErrors();\r\n\r\n            setTimeout(function() {\r\n                self.socket.connect();\r\n            }, 1000);\r\n\r\n            self.connectionHandler = new Connection(self);\r\n\r\n        },\r\n\r\n        postLoad: function() {\r\n            var self = this;\r\n\r\n            /**\r\n             * Call this after the player has been welcomed\r\n             * by the server and the client received the connection.\r\n             */\r\n\r\n            self.renderer.loadStaticSprites();\r\n\r\n            self.getCamera().setPlayer(self.player);\r\n\r\n            self.entities.addEntity(self.player);\r\n\r\n            var defaultSprite = self.getSprite(self.player.getSpriteName());\r\n\r\n            self.player.setSprite(defaultSprite);\r\n            self.player.setOrientation(self.storage.data.player.orientation);\r\n            self.player.idle();\r\n\r\n            self.socket.send(Packets.Ready, [true, self.map.preloadedData, Detect.getUserAgent()]);\r\n\r\n            self.playerHandler = new PlayerHandler(self, self.player);\r\n\r\n            self.renderer.updateAnimatedTiles();\r\n\r\n            self.zoning = new Zoning(self);\r\n\r\n            self.updater.setSprites(self.entities.sprites);\r\n\r\n            self.renderer.verifyCentration();\r\n\r\n            if (self.storage.data.new) {\r\n                self.storage.data.new = false;\r\n                self.storage.save();\r\n            }\r\n\r\n        },\r\n\r\n        loadStorage: function() {\r\n            var self = this,\r\n                loginName = $('#loginNameInput'),\r\n                loginPassword = $('#loginPasswordInput');\r\n\r\n            loginName.prop('readonly', false);\r\n            loginPassword.prop('readonly', false);\r\n\r\n            if (!self.hasRemember())\r\n                return;\r\n\r\n            if (self.getStorageUsername() !== '')\r\n                loginName.val(self.getStorageUsername());\r\n\r\n            if (self.getStoragePassword() !== '')\r\n                loginPassword.val(self.getStoragePassword());\r\n\r\n            $('#rememberMe').addClass('active');\r\n        },\r\n\r\n        findPath: function(character, x, y, ignores) {\r\n            var self = this,\r\n                grid = self.entities.grids.pathingGrid,\r\n                path = [];\r\n\r\n            if (self.map.isColliding(x, y) || !self.pathfinder || !character)\r\n                return path;\r\n\r\n            if (ignores)\r\n                _.each(ignores, function(entity) { self.pathfinder.ignoreEntity(entity); });\r\n\r\n            path = self.pathfinder.find(grid, character, x, y, false);\r\n\r\n            if (ignores)\r\n                self.pathfinder.clearIgnores();\r\n\r\n            return path;\r\n        },\r\n\r\n        handleInput: function(inputType, data) {\r\n            this.input.handle(inputType, data);\r\n        },\r\n\r\n        handleDisconnection: function(noError) {\r\n            var self = this;\r\n\r\n            /**\r\n             * This function is responsible for handling sudden\r\n             * disconnects of a player whilst in the game, not\r\n             * menu-based errors.\r\n             */\r\n\r\n            if (!self.started)\r\n                return;\r\n\r\n            self.stop();\r\n            self.renderer.stop();\r\n\r\n            self.unload();\r\n\r\n            self.app.showMenu();\r\n\r\n            if (noError) {\r\n                self.app.sendError(null, 'You have been disconnected from the server');\r\n                self.app.statusMessage = null;\r\n            }\r\n\r\n            self.loadRenderer();\r\n            self.loadControllers();\r\n\r\n            self.app.toggleLogin(false);\r\n            self.app.updateLoader('');\r\n        },\r\n\r\n        respawn: function() {\r\n            var self = this;\r\n\r\n            self.audio.play(Modules.AudioTypes.SFX, 'revive');\r\n            self.app.body.removeClass('death');\r\n\r\n            self.socket.send(Packets.Respawn, [self.player.id]);\r\n        },\r\n\r\n        tradeWith: function(player) {\r\n            var self = this;\r\n\r\n            if (!player || player.id === self.player.id)\r\n                return;\r\n\r\n            self.socket.send(Packets.Trade, [Packets.TradeOpcode.Request, player.id]);\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this;\r\n\r\n            self.renderer.resize();\r\n\r\n            if (self.pointer)\r\n                self.pointer.resize();\r\n        },\r\n\r\n        createPlayer: function() {\r\n            this.player = new Player();\r\n        },\r\n\r\n        isDebug: function() {\r\n            return this.app.config.debug;\r\n        },\r\n\r\n        getScaleFactor: function() {\r\n            return this.app.getScaleFactor();\r\n        },\r\n\r\n        getStorage: function() {\r\n            return this.storage;\r\n        },\r\n\r\n        getCamera: function() {\r\n            return this.renderer.camera;\r\n        },\r\n\r\n        getSprite: function(spriteName) {\r\n            return this.entities.getSprite(spriteName);\r\n        },\r\n\r\n        getEntityAt: function(x, y, ignoreSelf) {\r\n            var self = this,\r\n                entities = self.entities.grids.renderingGrid[y][x];\r\n\r\n            if (_.size(entities) > 0)\r\n                return entities[_.keys(entities)[ignoreSelf ? 1 : 0]];\r\n\r\n            var items = self.entities.grids.itemGrid[y][x];\r\n\r\n            if (_.size(items) > 0) {\r\n                _.each(items, function(item) {\r\n                    if (item.stackable)\r\n                        return item;\r\n                });\r\n\r\n                return items[_.keys(items)[0]];\r\n            }\r\n        },\r\n\r\n        getStorageUsername: function() {\r\n            return this.storage.data.player.username;\r\n        },\r\n\r\n        getStoragePassword: function() {\r\n            return this.storage.data.player.password;\r\n        },\r\n\r\n        hasRemember: function() {\r\n            return this.storage.data.player.rememberMe;\r\n        },\r\n\r\n        setRenderer: function(renderer) {\r\n            if (!this.renderer)\r\n                this.renderer = renderer;\r\n        },\r\n\r\n        setStorage: function(storage) {\r\n            if (!this.storage)\r\n                this.storage = storage;\r\n        },\r\n\r\n        setSocket: function(socket) {\r\n            if (!this.socket)\r\n                this.socket = socket;\r\n        },\r\n\r\n        setMessages: function(messages) {\r\n            if (!this.messages)\r\n                this.messages = messages;\r\n        },\r\n\r\n        setUpdater: function(updater) {\r\n            if (!this.updater)\r\n                this.updater = updater;\r\n        },\r\n\r\n        setEntityController: function(entities) {\r\n            if (!this.entities)\r\n                this.entities = entities;\r\n        },\r\n\r\n        setInput: function(input) {\r\n            var self = this;\r\n\r\n            if (!self.input) {\r\n                self.input = input;\r\n                self.renderer.setInput(self.input);\r\n            }\r\n        },\r\n\r\n        setPathfinder: function(pathfinder) {\r\n            if (!this.pathfinder)\r\n                this.pathfinder = pathfinder;\r\n        },\r\n\r\n        setInfo: function(info) {\r\n            if (!this.info)\r\n                this.info = info;\r\n        },\r\n\r\n        setBubble: function(bubble) {\r\n            if (!this.bubble)\r\n                this.bubble = bubble;\r\n        },\r\n\r\n        setPointer: function(pointer) {\r\n            if (!this.pointer)\r\n                this.pointer = pointer;\r\n        },\r\n\r\n        setInterface: function(intrface) {\r\n            if (!this.interface)\r\n                this.interface = intrface;\r\n        },\r\n\r\n        setAudio: function(audio) {\r\n            if (!this.audio)\r\n                this.audio = audio;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/game.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/abilities.js",
    "content": "define(['jquery'], function($) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.shortcuts = $('#abilityShortcut');\r\n        },\r\n\r\n        getList: function() {\r\n            return this.shortcuts.find('ul');\r\n        }\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/abilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/bank.js",
    "content": "define(['jquery', './container/container'], function($, Container) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game, inventoryContainer, size) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.inventoryContainer = inventoryContainer;\r\n\r\n            self.player = game.player;\r\n\r\n            self.body = $('#bank');\r\n            self.bankSlots = $('#bankSlots');\r\n            self.bankInventorySlots = $('#bankInventorySlots');\r\n\r\n            self.container = new Container(size);\r\n            self.close = $('#closeBank');\r\n\r\n            self.close.css('left', '97%');\r\n            self.close.click(function() {\r\n                self.hide();\r\n            });\r\n        },\r\n\r\n        load: function(data) {\r\n            var self = this,\r\n                bankList = self.bankSlots.find('ul'),\r\n                inventoryList = self.bankInventorySlots.find('ul');\r\n\r\n            for (var i = 0; i < data.length; i++) {\r\n                var item = data[i],\r\n                    slot = $('<div id=\"bankSlot' + i + '\" class=\"bankSlot\"></div>');\r\n\r\n                self.container.setSlot(i, item);\r\n\r\n                slot.css({\r\n                    'margin-right': (2 * self.getScale()) + 'px',\r\n                    'margin-bottom': (4 * self.getScale()) + 'px'\r\n                });\r\n\r\n                var image = $('<div id=\"bankImage' + i + '\" class=\"bankImage\"></div>');\r\n\r\n                if (item.string)\r\n                    image.css('background-image', self.container.getImageFormat(self.getScale(), item.string));\r\n\r\n                slot.click(function(event) {\r\n                    self.click('bank', event);\r\n                });\r\n\r\n                if (Detect.isMobile())\r\n                    image.css('background-size', '600%');\r\n\r\n                var count = item.count;\r\n\r\n                if (count > 999999)\r\n                    count = count.toString().substring(0, count.toString().length - 6) + 'M';\r\n                else if (count > 9999)\r\n                    count = count.toString().substring(0, 2) + 'K';\r\n                else if (count === 1)\r\n                    count = '';\r\n\r\n                slot.append(image);\r\n                slot.append('<div id=\"bankItemCount' + i + '\" class=\"itemCount\">' + count + '</div>');\r\n\r\n                slot.find('#bankItemCount' + i).css({\r\n                    'font-size': (4 * self.getScale()) + 'px',\r\n                    'margin-top': '0',\r\n                    'margin-left': '0'\r\n                });\r\n\r\n                var bankListItem = $('<li></li>');\r\n\r\n                bankListItem.append(slot);\r\n\r\n                bankList.append(bankListItem);\r\n            }\r\n\r\n            for (var j = 0; j < self.inventoryContainer.size; j++) {\r\n                var iItem = self.inventoryContainer.slots[j],\r\n                    iSlot = $('<div id=\"bankInventorySlot' + j + '\" class=\"bankSlot\"></div>');\r\n\r\n                iSlot.css({\r\n                    'margin-right': (3 * self.getScale()) + 'px',\r\n                    'margin-bottom': (6 * self.getScale()) + 'px'\r\n                });\r\n\r\n                var slotImage = $('<div id=\"inventoryImage' + j + '\" class=\"bankImage\"></div>');\r\n\r\n                if (iItem.string)\r\n                    slotImage.css('background-image', self.container.getImageFormat(self.getScale(), iItem.string));\r\n\r\n                iSlot.click(function(event) {\r\n                    self.click('inventory', event);\r\n                });\r\n\r\n                if (Detect.isMobile())\r\n                    slotImage.css('background-size', '600%');\r\n\r\n                var count = iItem.count;\r\n\r\n                if (count > 999999)\r\n                    count = count.toString().substring(0, count.toString().length - 6) + 'M';\r\n                else if (count > 9999)\r\n                    count = count.toString().substring(0, 2) + 'K';\r\n                else if (count === 1)\r\n                    count = '';\r\n\r\n                iSlot.append(slotImage);\r\n                iSlot.append('<div id=\"inventoryItemCount' + j + '\" class=\"itemCount\">' + count + '</div>');\r\n\r\n                iSlot.find('#inventoryItemCount' + j).css({\r\n                    'margin-top': '0',\r\n                    'margin-left': '0'\r\n                });\r\n\r\n                var inventoryListItem = $('<li></li>');\r\n\r\n                inventoryListItem.append(iSlot);\r\n\r\n                inventoryList.append(inventoryListItem);\r\n            }\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this,\r\n                bankList = self.getBankList(),\r\n                inventoryList = self.getInventoryList();\r\n\r\n            for (var i = 0; i < bankList.length; i++) {\r\n                var bankSlot = $(bankList[i]).find('#bankSlot' + i),\r\n                    image = bankSlot.find('#bankImage' + i),\r\n                    slot = self.container.slots[i];\r\n\r\n                bankSlot.css({\r\n                    'margin-right': (2 * self.getScale()) + 'px',\r\n                    'margin-bottom': (4 * self.getScale()) + 'px'\r\n                });\r\n\r\n                bankSlot.find('#bankItemCount' + i).css({\r\n                    'font-size': (4 * self.getScale()) + 'px',\r\n                    'margin-top': '0',\r\n                    'margin-left': '0'\r\n                });\r\n\r\n                if (Detect.isMobile())\r\n                    image.css('background-size', '600%');\r\n                else\r\n                    image.css('background-image', self.container.getImageFormat(self.getScale(), slot.string));\r\n            }\r\n\r\n            for (var j = 0; j < inventoryList.length; j++) {\r\n                var inventorySlot = $(inventoryList[j]).find('#bankInventorySlot' + j),\r\n                    iImage = inventorySlot.find('#inventoryImage' + j),\r\n                    iSlot = self.inventoryContainer.slots[j];\r\n\r\n                inventorySlot.css({\r\n                    'margin-right': (3 * self.getScale()) + 'px',\r\n                    'margin-bottom': (6 * self.getScale()) + 'px'\r\n                });\r\n\r\n                if (Detect.isMobile())\r\n                    iImage.css('background-size', '600%');\r\n                else\r\n                    iImage.css('background-image', self.container.getImageFormat(self.getScale(), iSlot.string));\r\n            }\r\n\r\n        },\r\n\r\n        click: function(type, event) {\r\n            var self = this,\r\n                isBank = type === 'bank',\r\n                index = event.currentTarget.id.substring(isBank ? 8 : 17);\r\n\r\n            self.game.socket.send(Packets.Bank, [Packets.BankOpcode.Select, type, index]);\r\n        },\r\n\r\n        add: function(info) {\r\n            var self = this,\r\n                item = $(self.getBankList()[info.index]),\r\n                slot = self.container.slots[info.index];\r\n\r\n            if (!item || !slot)\r\n                return;\r\n\r\n            if (slot.isEmpty())\r\n                slot.load(info.string, info.count, info.ability, info.abilityLevel);\r\n\r\n            slot.setCount(info.count);\r\n\r\n            var bankSlot = item.find('#bankSlot' + info.index),\r\n                cssSlot = bankSlot.find('#bankImage' + info.index),\r\n                count = bankSlot.find('#bankItemCount' + info.index);\r\n\r\n            cssSlot.css('background-image', self.container.getImageFormat(self.getScale(), info.string));\r\n\r\n            if (Detect.isMobile())\r\n                cssSlot.css('background-size', '600%');\r\n\r\n            if (slot.count > 1)\r\n                count.text(slot.count)\r\n        },\r\n\r\n        remove: function(info) {\r\n            var self = this,\r\n                item = $(self.getBankList()[info.index]),\r\n                slot = self.container.slots[info.index];\r\n\r\n            if (!item || !slot)\r\n                return;\r\n\r\n            slot.count -= info.count;\r\n\r\n            if (slot.count < 1) {\r\n                var divItem = item.find('#bankSlot' + info.index);\r\n\r\n                divItem.find('#bankImage' + info.index).css('background-image', '');\r\n                divItem.find('#bankItemCount' + info.index).text('');\r\n\r\n                slot.empty();\r\n            }\r\n        },\r\n\r\n        addInventory: function(info) {\r\n            var self = this,\r\n                item = $(self.getInventoryList()[info.index]);\r\n\r\n            if (!item)\r\n                return;\r\n\r\n            var slot = item.find('#bankInventorySlot' + info.index),\r\n                image = slot.find('#inventoryImage' + info.index);\r\n\r\n            image.css('background-image', self.container.getImageFormat(self.getScale(), info.string));\r\n\r\n            if (Detect.isMobile())\r\n                image.css('background-size', '600%');\r\n\r\n            if (info.count > 1)\r\n                slot.find('#inventoryItemCount' + info.index).text(info.count);\r\n\r\n        },\r\n\r\n        removeInventory: function(info) {\r\n            var self = this,\r\n                item = $(self.getInventoryList()[info.index]);\r\n\r\n            if (!item)\r\n                return;\r\n\r\n            var itemContainer = self.inventoryContainer.slots[info.index],\r\n                slot = item.find('#bankInventorySlot' + info.index),\r\n                diff = itemContainer.count - info.count;\r\n\r\n            if (diff > 1)\r\n                slot.find('#inventoryItemCount' + info.index).text(diff);\r\n            else if (diff === 1)\r\n                slot.find('#inventoryItemCount' + info.index).text('');\r\n            else {\r\n                slot.find('#inventoryImage' + info.index).css('background-image', '');\r\n                slot.find('#inventoryItemCount' + info.index).text('');\r\n            }\r\n        },\r\n\r\n        display: function() {\r\n            this.body.fadeIn('slow');\r\n        },\r\n\r\n        hide: function() {\r\n            this.body.fadeOut('fast');\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.body.css('display') === 'block';\r\n        },\r\n\r\n        getScale: function() {\r\n            return this.game.app.getUIScale();\r\n        },\r\n\r\n        getBankList: function() {\r\n            return this.bankSlots.find('ul').find('li');\r\n        },\r\n\r\n        getInventoryList: function() {\r\n            return this.bankInventorySlots.find('ul').find('li');\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/bank.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/container/container.js",
    "content": "define(['./slot'], function(Slot) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(size) {\r\n            var self = this;\r\n\r\n            self.size = size;\r\n\r\n            self.slots = [];\r\n\r\n            for (var i = 0; i < self.size; i++)\r\n                self.slots.push(new Slot(i));\r\n        },\r\n\r\n        setSlot: function(index, info) {\r\n            var self = this;\r\n\r\n            /**\r\n             * We receive information from the server here,\r\n             * so we mustn't do any calculations. Instead,\r\n             * we just modify the container directly.\r\n             */\r\n\r\n            self.slots[index].load(info.string, info.count, info.ability, info.abilityLevel, info.edible, info.equippable);\r\n        },\r\n\r\n        getEmptySlot: function() {\r\n            var self = this;\r\n\r\n            for (var i = 0; i < self.slots; i++)\r\n                if (!self.slots[i].string)\r\n                    return i;\r\n\r\n            return -1;\r\n        },\r\n\r\n        getImageFormat: function(scale, name) {\r\n            if (scale === 1)\r\n                scale = 2;\r\n\r\n            return 'url(\"img/' + scale + '/item-' + name + '.png\")';\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/container/container.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/container/slot.js",
    "content": "define(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(index) {\r\n            var self = this;\r\n\r\n            self.index = index;\r\n\r\n            self.string = null;\r\n            self.count = -1;\r\n            self.ability = -1;\r\n            self.abilityLevel = -1;\r\n\r\n            self.edible = false;\r\n            self.equippable = false;\r\n        },\r\n\r\n        load: function(string, count, ability, abilityLevel, edible, equippable) {\r\n            var self = this;\r\n\r\n            self.string = string;\r\n            self.count = count;\r\n            self.ability = ability;\r\n            self.abilityLevel = abilityLevel;\r\n\r\n            self.edible = edible;\r\n            self.equippable = equippable;\r\n        },\r\n\r\n        empty: function() {\r\n            var self = this;\r\n\r\n            self.string = null;\r\n            self.count = -1;\r\n            self.ability = -1;\r\n            self.abilityLevel = -1;\r\n\r\n            self.edible = false;\r\n            self.equippable = false;\r\n        },\r\n\r\n        isEmpty: function() {\r\n            return !this.string || this.count < 1;\r\n        },\r\n\r\n        setCount: function(count) {\r\n            this.count = count;\r\n        },\r\n\r\n        setString: function(string) {\r\n            this.string = string\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/container/slot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/enchant.js",
    "content": "define(['jquery'], function($) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game, intrface) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.interface = intrface;\r\n\r\n            self.body = $('#enchant');\r\n            self.container = $('#enchantContainer');\r\n            self.enchantSlots = $('#enchantInventorySlots');\r\n\r\n            self.selectedItem = $('#enchantSelectedItem');\r\n            self.selectedShards = $('#enchantShards');\r\n            self.confirm = $('#confirmEnchant');\r\n            self.shardsCount = $('#shardsCount');\r\n\r\n            self.confirm.css({\r\n                'left': '70%',\r\n                'top': '80%'\r\n            });\r\n\r\n            $('#closeEnchant').click(function() {\r\n                self.hide();\r\n            });\r\n\r\n            self.confirm.click(function() {\r\n                self.enchant();\r\n            });\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this,\r\n                list = self.getSlots(),\r\n                inventoryList = self.interface.bank.getInventoryList();\r\n\r\n            list.empty();\r\n\r\n            for (var i = 0; i < self.getInventorySize(); i++) {\r\n                var item = $(inventoryList[i]).clone(),\r\n                    slot = item.find('#bankInventorySlot' + i);\r\n\r\n                slot.click(function(event) {\r\n                    self.select(event);\r\n                });\r\n\r\n                list.append(item);\r\n            }\r\n\r\n            self.selectedItem.click(function() {\r\n                self.remove('item');\r\n            });\r\n\r\n            self.selectedShards.click(function() {\r\n                self.remove('shards');\r\n            });\r\n\r\n        },\r\n\r\n        add: function(type, index) {\r\n            var self = this,\r\n                image = self.getSlot(index).find('#inventoryImage' + index);\r\n\r\n            switch (type) {\r\n                case 'item':\r\n\r\n                    self.selectedItem.css('background-image', image.css('background-image'));\r\n\r\n                    if (Detect.isMobile())\r\n                        self.selectedItem.css('background-size', '600%');\r\n\r\n                    break;\r\n\r\n                case 'shards':\r\n\r\n                    self.selectedShards.css('background-image', image.css('background-image'));\r\n\r\n                    if (Detect.isMobile())\r\n                        self.selectedShards.css('background-size', '600%');\r\n\r\n                    var count = self.getItemSlot(index).count;\r\n\r\n                    if (count > 1)\r\n                        self.shardsCount.text(count);\r\n\r\n                    break;\r\n            }\r\n\r\n            image.css('background-image', '');\r\n\r\n            self.getSlot(index).find('#inventoryItemCount' + index).text('');\r\n        },\r\n\r\n        moveBack: function(type, index) {\r\n            var self = this,\r\n                image = self.getSlot(index).find('#inventoryImage'+ index),\r\n                itemCount = self.getSlot(index).find('#inventoryItemCount' + index),\r\n                count = self.getItemSlot(index).count;\r\n\r\n            switch (type) {\r\n                case 'item':\r\n\r\n                    image.css('background-image', self.selectedItem.css('background-image'));\r\n\r\n                    if (count > 1)\r\n                        itemCount.text(count);\r\n\r\n                    self.selectedItem.css('background-image', '');\r\n\r\n                    break;\r\n\r\n                case 'shards':\r\n\r\n                    image.css('background-image', self.selectedShards.css('background-image'));\r\n\r\n                    if (count > 1)\r\n                        itemCount.text(count);\r\n\r\n                    self.selectedShards.css('background-image', '');\r\n\r\n                    self.shardsCount.text('');\r\n\r\n                    break;\r\n            }\r\n        },\r\n\r\n        enchant: function() {\r\n            this.game.socket.send(Packets.Enchant, [Packets.EnchantOpcode.Enchant]);\r\n        },\r\n\r\n        select: function(event) {\r\n            this.game.socket.send(Packets.Enchant, [Packets.EnchantOpcode.Select, event.currentTarget.id.substring(17)]);\r\n        },\r\n\r\n        remove: function(type) {\r\n            this.game.socket.send(Packets.Enchant, [Packets.EnchantOpcode.Remove, type]);\r\n        },\r\n\r\n        getInventorySize: function() {\r\n            return this.interface.inventory.getSize();\r\n        },\r\n\r\n        getItemSlot: function(index) {\r\n            return this.interface.inventory.container.slots[index];\r\n        },\r\n\r\n        display: function() {\r\n            var self = this;\r\n\r\n            self.body.fadeIn('fast');\r\n            self.load();\r\n        },\r\n\r\n        hide: function() {\r\n            var self = this;\r\n\r\n            self.selectedItem.css('background-image', '');\r\n            self.selectedShards.css('background-image', '');\r\n\r\n            self.body.fadeOut('fast');\r\n        },\r\n\r\n        hasImage: function(image) {\r\n            return image.css('background-image') !== 'none';\r\n        },\r\n\r\n        getSlot: function(index) {\r\n            return $(this.getSlots().find('li')[index]);\r\n        },\r\n\r\n        getSlots: function() {\r\n            return this.enchantSlots.find('ul');\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.body.css('display') === 'block'\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/enchant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/header.js",
    "content": "define(['jquery', './container/container'], function($, Container) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game, intrface) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.player = game.player;\r\n\r\n            self.health = $('#health');\r\n            self.healthBar = $('#healthBar');\r\n            self.healthBarText = $('#healthBarText');\r\n\r\n            self.exp = $('#exp');\r\n            self.expBar = $('#expBar');\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.player.onHitPoints(function() {\r\n                self.calculateHealthBar();\r\n            });\r\n\r\n            self.player.onMaxHitPoints(function() {\r\n                self.calculateHealthBar();\r\n            });\r\n\r\n            self.player.onExperience(function() {\r\n                self.calculateExpBar();\r\n            });\r\n\r\n        },\r\n\r\n        calculateHealthBar: function() {\r\n            var self = this,\r\n                scale = self.getScale(),\r\n                width = self.healthBar.width();\r\n\r\n            if (scale < 2)\r\n                scale = 2;\r\n\r\n            //11 is due to the offset of the #health in the #healthBar\r\n            var diff = Math.floor(width * (self.player.hitPoints / self.player.maxHitPoints) - (11 * scale)),\r\n                prevWidth = self.health.width();\r\n\r\n            if (prevWidth > diff) {\r\n                self.health.addClass('white');\r\n\r\n                setTimeout(function() {\r\n                    self.health.removeClass('white');\r\n                }, 500);\r\n            } else if (diff - 1 > prevWidth) {\r\n                self.health.addClass('green');\r\n\r\n                setTimeout(function() {\r\n                    self.health.removeClass('green');\r\n                }, 500);\r\n            }\r\n\r\n            self.health.css('width', diff + 'px');\r\n            self.healthBarText.text(self.player.hitPoints + '/' + self.player.maxHitPoints);\r\n        },\r\n\r\n        calculateExpBar: function() {\r\n            var self = this,\r\n                scale = self.getScale(),\r\n                width = self.expBar.width();\r\n\r\n            if (scale < 2)\r\n                scale = 2;\r\n\r\n            var experience = self.player.experience - self.player.prevExperience,\r\n                nextExperience = self.player.nextExperience - self.player.prevExperience;\r\n\r\n            var diff = Math.floor(width * (experience / nextExperience));\r\n\r\n            self.exp.css('width', diff + 'px');\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this;\r\n\r\n            self.calculateHealthBar();\r\n            self.calculateExpBar();\r\n        },\r\n\r\n        getScale: function() {\r\n            return this.game.app.getUIScale();\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/inventory.js",
    "content": "/* global log, Detect, Packets */\r\n\r\ndefine(['jquery', './container/container'], function($, Container) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game, size) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.actions = game.interface.actions;\r\n\r\n            self.body = $('#inventory');\r\n            self.button = $('#inventoryButton');\r\n            self.action = $('#actionContainer');\r\n\r\n            self.container = new Container(size);\r\n\r\n            self.activeClass = 'inventory';\r\n\r\n            self.selectedSlot = null;\r\n            self.selectedItem = null;\r\n        },\r\n\r\n        load: function(data) {\r\n            var self = this,\r\n                list = $('#inventory').find('ul');\r\n\r\n            for (var i = 0; i < data.length; i++) {\r\n                var item = data[i];\r\n\r\n                self.container.setSlot(i, item);\r\n\r\n                var itemSlot = $('<div id=\"slot' + i + '\" class=\"itemSlot\"></div>');\r\n\r\n                if (item.string !== 'null')\r\n                    itemSlot.css('background-image', self.container.getImageFormat(self.getScale(), item.string));\r\n\r\n                itemSlot.css('background-size', '600%');\r\n\r\n                itemSlot.dblclick(function(event) {\r\n                    self.clickDouble(event);\r\n                });\r\n\r\n                itemSlot.click(function(event) {\r\n                    self.click(event);\r\n                });\r\n\r\n                var itemSlotList = $('<li></li>'),\r\n                    count = item.count;\r\n\r\n                if (count > 999999)\r\n                    count = count.toString().substring(0, count.toString().length - 6) + 'M';\r\n                else if (count > 9999)\r\n                    count = count.toString().substring(0, 2) + 'K';\r\n                else if (count === 1)\r\n                    count = '';\r\n\r\n                itemSlotList.append(itemSlot);\r\n                itemSlotList.append('<div id=\"itemCount' + i + '\" class=\"inventoryItemCount\">' + count + '</div>');\r\n\r\n                list.append(itemSlotList);\r\n            }\r\n\r\n            self.button.click(function(event) {\r\n                self.game.interface.hideAll();\r\n\r\n                if (self.isVisible())\r\n                    self.hide();\r\n                else\r\n                    self.display();\r\n\r\n                self.game.socket.send(Packets.Click, ['inventory', self.button.hasClass('active')]);\r\n            });\r\n        },\r\n\r\n        click: function(event) {\r\n            var self = this,\r\n                index = event.currentTarget.id.substring(4),\r\n                slot = self.container.slots[index],\r\n                item = $(self.getList()[index]);\r\n\r\n            self.clearSelection();\r\n\r\n            if (slot.string === null || slot.count === -1 || slot.string === 'null')\r\n                return;\r\n\r\n            self.actions.reset();\r\n            self.actions.loadDefaults('inventory');\r\n\r\n            if (slot.edible)\r\n                self.actions.add($('<div id=\"eat\" class=\"actionButton\">Eat</div>'));\r\n            else if (slot.equippable)\r\n                self.actions.add($('<div id=\"wield\" class=\"actionButton\">Wield</div>'));\r\n            else if (slot.count > 999999)\r\n                self.actions.add($('<div id=\"itemInfo\" class=\"actionButton\">Info</div>'));\r\n\r\n            if (!self.actions.isVisible())\r\n                self.actions.show();\r\n\r\n            var sSlot = item.find('#slot' + index);\r\n\r\n            sSlot.addClass('select');\r\n\r\n            self.selectedSlot = sSlot;\r\n            self.selectedItem = slot;\r\n\r\n            self.actions.hideDrop();\r\n        },\r\n\r\n        clickDouble: function(event) {\r\n            var self = this,\r\n                index = event.currentTarget.id.substring(4),\r\n                slot = self.container.slots[index];\r\n\r\n            if (!slot.edible && !slot.equippable)\r\n                return;\r\n\r\n            var item = $(self.getList()[index]),\r\n                sSlot = item.find('#slot' + index);\r\n\r\n            self.clearSelection();\r\n\r\n            self.selectedSlot = sSlot;\r\n            self.selectedItem = slot;\r\n\r\n            self.clickAction(slot.edible ? 'eat' : 'wield');\r\n\r\n            self.actions.hideDrop();\r\n        },\r\n\r\n        clickAction: function(event, dAction) {\r\n            var self = this,\r\n                action = event.currentTarget ? event.currentTarget.id : event;\r\n\r\n            log.info(action);\r\n\r\n            if (!self.selectedSlot || !self.selectedItem)\r\n                return;\r\n\r\n            switch(action) {\r\n                case 'eat':\r\n                case 'wield':\r\n\r\n                    self.game.socket.send(Packets.Inventory, [Packets.InventoryOpcode.Select, self.selectedItem.index]);\r\n                    self.clearSelection();\r\n\r\n                    break;\r\n\r\n                case 'drop':\r\n                    var item = self.selectedItem;\r\n\r\n                    if (item.count > 1) {\r\n                        if (Detect.isMobile())\r\n                            self.hide(true);\r\n\r\n                        self.actions.displayDrop('inventory');\r\n\r\n                    } else {\r\n                        self.game.socket.send(Packets.Inventory, [Packets.InventoryOpcode.Remove, item]);\r\n                        self.clearSelection();\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 'dropAccept':\r\n\r\n                    var count = $('#dropCount').val();\r\n\r\n                    if (isNaN(count) || count < 1)\r\n                        return;\r\n\r\n                    self.game.socket.send(Packets.Inventory, [Packets.InventoryOpcode.Remove, self.selectedItem, count]);\r\n                    self.actions.hideDrop();\r\n                    self.clearSelection();\r\n\r\n                    break;\r\n\r\n                case 'dropCancel':\r\n\r\n                    self.actions.hideDrop();\r\n                    self.clearSelection();\r\n\r\n                    break;\r\n\r\n                case 'itemInfo':\r\n\r\n                    self.game.input.chatHandler.add('WORLD', 'You have ' + self.selectedItem.count + ' coins.');\r\n\r\n                    break;\r\n            }\r\n\r\n            self.actions.hide();\r\n        },\r\n\r\n        add: function(info) {\r\n            var self = this,\r\n                item = $(self.getList()[info.index]),\r\n                slot = self.container.slots[info.index];\r\n\r\n            if (!item || !slot)\r\n                return;\r\n\r\n            // Have the server forcefully load data into the slot.\r\n            slot.load(info.string, info.count, info.ability, info.abilityLevel, info.edible, info.equippable);\r\n\r\n            var cssSlot = item.find('#slot' + info.index);\r\n\r\n            cssSlot.css('background-image', self.container.getImageFormat(self.getScale(), slot.string));\r\n\r\n            cssSlot.css('background-size', '600%');\r\n\r\n            var count = slot.count;\r\n\r\n            if (count > 999999)\r\n                count = count.toString().substring(0, count.toString().length - 6) + 'M';\r\n            else if (count > 9999)\r\n                count = count.toString().substring(0, 2) + 'K';\r\n            else if (count === 1)\r\n                count = '';\r\n\r\n            item.find('#itemCount' + info.index).text(count);\r\n        },\r\n\r\n        remove: function(info) {\r\n            var self = this,\r\n                item = $(self.getList()[info.index]),\r\n                slot = self.container.slots[info.index];\r\n\r\n            if (!item || !slot)\r\n                return;\r\n\r\n            slot.count -= info.count;\r\n\r\n            item.find('#itemCount' + info.index).text(slot.count);\r\n\r\n            if (slot.count < 1) {\r\n                item.find('#slot' + info.index).css('background-image', '');\r\n                item.find('#itemCount' + info.index).text('');\r\n                slot.empty();\r\n            }\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this,\r\n                list = self.getList();\r\n\r\n            for (var i = 0; i < list.length; i++) {\r\n                var item = $(list[i]).find('#slot' + i),\r\n                    slot = self.container.slots[i];\r\n\r\n                if (!slot)\r\n                    continue;\r\n\r\n                if (Detect.isMobile())\r\n                    item.css('background-size', '600%');\r\n                else\r\n                    item.css('background-image', self.container.getImageFormat(self.getScale(), slot.string));\r\n            }\r\n\r\n        },\r\n\r\n        clearSelection: function() {\r\n            var self = this;\r\n\r\n            if (!self.selectedSlot)\r\n                return;\r\n\r\n            self.selectedSlot.removeClass('select');\r\n            self.selectedSlot = null;\r\n            self.selectedItem = null;\r\n        },\r\n\r\n        display: function() {\r\n            var self = this;\r\n\r\n            self.body.fadeIn('fast');\r\n            self.button.addClass('active');\r\n        },\r\n\r\n        hide: function(keepSelection) {\r\n            var self = this;\r\n\r\n            self.button.removeClass('active');\r\n\r\n            self.body.fadeOut('slow');\r\n            self.button.removeClass('active');\r\n\r\n            if (!keepSelection)\r\n                self.clearSelection();\r\n        },\r\n\r\n        getScale: function() {\r\n            return this.game.renderer.getScale();\r\n        },\r\n\r\n        getSize: function() {\r\n            return this.container.size;\r\n        },\r\n\r\n        getList: function() {\r\n            return $('#inventory').find('ul').find('li');\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.body.css('display') === 'block';\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/inventory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/page.js",
    "content": "/* global log */\r\n\r\ndefine(['jquery'], function($) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(element) {\r\n            var self = this;\r\n\r\n            self.body = $(element);\r\n\r\n            self.loaded = false;\r\n        },\r\n\r\n        show: function() {\r\n            this.body.fadeIn('slow');\r\n        },\r\n\r\n        hide: function() {\r\n            this.body.fadeOut('slow');\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.body.css('display') === 'block';\r\n        },\r\n\r\n        load: function() {\r\n            //log.info('Uninitialized.');\r\n        },\r\n\r\n        resize: function() {\r\n            //log.info('Uninitialized.');\r\n        },\r\n\r\n        update: function() {\r\n            //log.info('Uninitialized.');\r\n        },\r\n\r\n        getImageFormat: function(scale, name) {\r\n            if (!name || name === 'null')\r\n                return '';\r\n\r\n            return 'url(\"img/' + scale + '/item-' + name + '.png\")';\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/profile/page.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/pages/ability.js",
    "content": "define(['jquery', '../page'], function($, Page) {\r\n\r\n    return Page.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self._super('#skillPage');\r\n\r\n            self.game = game;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/profile/pages/ability.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/pages/quest.js",
    "content": "define(['jquery', '../page'], function($, Page) {\r\n\r\n    return Page.extend({\r\n\r\n        init: function() {\r\n            var self = this;\r\n\r\n            self._super('#questPage');\r\n\r\n            self.achievements = $('#achievementList');\r\n            self.quests = $('#questList');\r\n\r\n            self.achievementsCount = $('#achievementCount');\r\n            self.questCount = $('#questCount');\r\n\r\n            self.achievementsList = self.achievements.find('ul');\r\n            self.questList = self.quests.find('ul');\r\n\r\n        },\r\n\r\n        loadAchievements: function(achievements) {\r\n            var self = this,\r\n                finishedAchievements = 0;\r\n\r\n            _.each(achievements, function(achievement) {\r\n                var item = self.getItem(false, achievement.id),\r\n                    name = self.getName(false, achievement.id);\r\n\r\n                name.text('????????');\r\n\r\n                name.css('background', 'rgba(255, 10, 10, 0.3)');\r\n\r\n                if (achievement.progress > 0 && achievement.progress < 9999) {\r\n                    name.css('background', 'rgba(255, 255, 10, 0.4)');\r\n\r\n                    name.text(achievement.name + (achievement.count > 2 ? ' ' + (achievement.progress - 1) + '/' + (achievement.count - 1) : ''));\r\n\r\n                } else if (achievement.progress > 9998) {\r\n                    name.text(achievement.name);\r\n                    name.css('background', 'rgba(10, 255, 10, 0.3)');\r\n                }\r\n\r\n                if (achievement.finished)\r\n                    finishedAchievements++;\r\n\r\n                item.append(name);\r\n\r\n                var listItem = $('<li></li>');\r\n\r\n                listItem.append(item);\r\n\r\n                self.achievementsList.append(listItem);\r\n            });\r\n\r\n            self.achievementsCount.html(finishedAchievements + '/' + achievements.length);\r\n        },\r\n\r\n        loadQuests(quests) {\r\n            var self = this,\r\n                finishedQuests = 0;\r\n\r\n            _.each(quests, function(quest) {\r\n                var item = self.getItem(true, quest.id),\r\n                    name = self.getName(true, quest.id);\r\n\r\n                name.text(quest.name);\r\n\r\n                name.css('background', 'rgba(255, 10, 10, 0.3)');\r\n\r\n                if (quest.stage > 0 && quest.stage < 9999)\r\n                    name.css('background', 'rgba(255, 255, 10, 0.4)');\r\n                else if (quest.stage > 9998)\r\n                    name.css('background', 'rgba(10, 255, 10, 0.3)');\r\n\r\n                if (quest.finished)\r\n                    finishedQuests++;\r\n\r\n                item.append(name);\r\n\r\n                var listItem = $('<li></li>');\r\n\r\n                listItem.append(item);\r\n\r\n                self.questList.append(listItem);\r\n            });\r\n\r\n            self.questCount.html(finishedQuests + '/' + quests.length);\r\n        },\r\n\r\n        progress: function(info) {\r\n            var self = this,\r\n                item = info.isQuest ? self.getQuest(info.id) : self.getAchievement(info.id);\r\n\r\n            if (!item)\r\n                return;\r\n\r\n            var name = item.find('' + (info.isQuest ? '#quest' : '#achievement') + info.id + 'name');\r\n\r\n            if (!name)\r\n                return;\r\n\r\n            if (!info.isQuest && info.count > 2)\r\n                name.text(info.name + ' ' + info.progress + '/' + (info.count - 1));\r\n            else\r\n                name.text(info.name);\r\n\r\n            name.css('background', 'rgba(255, 255, 10, 0.4)');\r\n        },\r\n\r\n        finish: function(info) {\r\n            var self = this,\r\n                item = info.isQuest ? self.getQuest(info.id) : self.getAchievement(info.id);\r\n\r\n            if (!item)\r\n                return;\r\n\r\n            var name = item.find('' + (info.isQuest ? '#quest' : '#achievement') + info.id + 'name');\r\n\r\n            if (!name)\r\n                return;\r\n\r\n            if (!info.isQuest)\r\n                name.text(info.name);\r\n\r\n            name.css('background', 'rgba(10, 255, 10, 0.3)');\r\n\r\n        },\r\n\r\n        getQuest: function(id) {\r\n            return $(this.questList.find('li')[id]).find('#quest' + id);\r\n        },\r\n\r\n        getAchievement: function(id) {\r\n            return $(this.achievementsList.find('li')[id]).find('#achievement' + id);\r\n        },\r\n\r\n\r\n        /**\r\n         * Might as well properly organize them based\r\n         * on their type of item and id (index).\r\n         */\r\n\r\n        getItem: function(isQuest, id) {\r\n            return $('<div id=\"' + (isQuest ? 'quest' : 'achievement') + id + '\" class=\"questItem\"></div>');\r\n        },\r\n\r\n        getName: function(isQuest, id) {\r\n            return $('<div id=\"' + (isQuest ? 'quest' : 'achievement') + id + 'name\" class=\"questName\"></div>')\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/profile/pages/quest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/pages/settings.js",
    "content": "/* global log, Detect */\r\n\r\ndefine(['jquery', '../page'], function($, Page) {\r\n\r\n    return Class.extend({\r\n\r\n        //TODO - Hide crpyto mining option on mobiles and completely disable it.\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.audio = game.audio;\r\n            self.storage = game.storage;\r\n            self.renderer = game.renderer;\r\n            self.camera = game.renderer.camera;\r\n\r\n            self.body = $('#settingsPage');\r\n            self.button = $('#settingsButton');\r\n\r\n            self.volume = $('#volume');\r\n            self.sfx = $('#sfx');\r\n            self.brightness = $('#brightness');\r\n\r\n            self.info = $('#info');\r\n\r\n            self.soundCheck = $('#soundCheck');\r\n            self.cameraCheck = $('#cameraCheck');\r\n            self.debugCheck = $('#debugCheck');\r\n            self.centreCheck = $('#centreCheck');\r\n            self.nameCheck = $('#nameCheck');\r\n            self.levelCheck = $('#levelCheck');\r\n\r\n            self.loaded = false;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            if (self.loaded)\r\n                return;\r\n\r\n            self.volume.val(self.getMusicLevel());\r\n            self.sfx.val(self.getSFXLevel());\r\n            self.brightness.val(self.getBrightness());\r\n\r\n            self.game.app.updateRange(self.volume);\r\n            self.game.app.updateRange(self.sfx);\r\n            self.game.app.updateRange(self.brightness);\r\n\r\n            self.renderer.adjustBrightness(self.getBrightness());\r\n\r\n            self.button.click(function() {\r\n                self.game.interface.hideAll();\r\n\r\n                self.button.toggleClass('active');\r\n\r\n                if (self.isVisible())\r\n                    self.hide();\r\n                else\r\n                    self.show();\r\n            });\r\n\r\n            self.volume.on('input', function() {\r\n                if (self.audio.song)\r\n                    self.audio.song.volume = this.value / 100;\r\n            });\r\n\r\n            self.brightness.on('input', function() {\r\n                self.renderer.adjustBrightness(this.value);\r\n            });\r\n\r\n            self.volume.change(function() {\r\n                self.setMusicLevel(this.value);\r\n            });\r\n\r\n            self.sfx.change(function() {\r\n                self.setSFXLevel(this.value);\r\n            });\r\n\r\n            self.brightness.change(function() {\r\n                self.setBrightness(this.value);\r\n            });\r\n\r\n            self.soundCheck.click(function() {\r\n                var isActive = self.soundCheck.hasClass('active');\r\n\r\n                self.setSound(!isActive);\r\n\r\n                if (isActive) {\r\n                    self.audio.reset(self.audio.song);\r\n                    self.audio.song = null;\r\n\r\n                    self.soundCheck.removeClass('active');\r\n                } else {\r\n                    self.audio.update();\r\n\r\n                    self.soundCheck.addClass('active');\r\n                }\r\n            });\r\n\r\n            self.cameraCheck.click(function() {\r\n                var active = self.cameraCheck.hasClass('active');\r\n\r\n                if (active)\r\n                    self.renderer.camera.decenter();\r\n                else\r\n                    self.renderer.camera.center();\r\n\r\n                self.cameraCheck.toggleClass('active');\r\n\r\n                self.setCamera(!active);\r\n            });\r\n\r\n            self.debugCheck.click(function() {\r\n                var active = self.debugCheck.hasClass('active');\r\n\r\n                self.debugCheck.toggleClass('active');\r\n\r\n                self.renderer.debugging = !active;\r\n\r\n                self.setDebug(!active);\r\n            });\r\n\r\n            self.centreCheck.click(function() {\r\n                var active = self.centreCheck.hasClass('active');\r\n\r\n                self.centreCheck.toggleClass('active');\r\n\r\n                self.renderer.autoCentre = !active;\r\n\r\n                self.setCentre(!active);\r\n            });\r\n\r\n            self.nameCheck.click(function() {\r\n                var active = self.nameCheck.hasClass('active');\r\n\r\n                self.nameCheck.toggleClass('active');\r\n\r\n                self.renderer.drawNames = !active;\r\n\r\n                self.setName(!active);\r\n            });\r\n\r\n            self.levelCheck.click(function() {\r\n                var active = self.levelCheck.hasClass('active');\r\n\r\n                self.levelCheck.toggleClass('active');\r\n\r\n                self.renderer.drawLevels = !active;\r\n\r\n                self.setName(!active);\r\n            });\r\n\r\n            if (self.getSound())\r\n                self.soundCheck.addClass('active');\r\n\r\n            if (self.getCamera())\r\n                self.cameraCheck.addClass('active');\r\n            else {\r\n                self.camera.centered = false;\r\n                self.renderer.verifyCentration();\r\n            }\r\n\r\n            if (self.getDebug()) {\r\n                self.debugCheck.addClass('active');\r\n                self.renderer.debugging = true;\r\n            }\r\n\r\n            if (self.getCentreCap())\r\n                self.centreCheck.addClass('active');\r\n\r\n            if (self.getName())\r\n                self.nameCheck.addClass('active');\r\n            else\r\n                self.renderer.drawNames = false;\r\n\r\n            if (self.getLevel())\r\n                self.levelCheck.addClass('active');\r\n            else\r\n                self.renderer.drawLevels = false;\r\n\r\n            self.loaded = true;\r\n        },\r\n\r\n        show: function() {\r\n            this.body.fadeIn('slow');\r\n        },\r\n\r\n        hide: function() {\r\n            this.body.fadeOut('fast');\r\n        },\r\n\r\n        setMusicLevel: function(musicLevel) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.music = musicLevel;\r\n            self.storage.save();\r\n        },\r\n\r\n        setSFXLevel: function(sfxLevel) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.sfx = sfxLevel;\r\n            self.storage.save();\r\n        },\r\n\r\n        setBrightness: function(brightness) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.brightness = brightness;\r\n            self.storage.save();\r\n        },\r\n\r\n        setSound: function(state) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.soundEnabled = state;\r\n            self.storage.save();\r\n        },\r\n\r\n        setCamera: function(state) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.centerCamera = state;\r\n            self.storage.save();\r\n        },\r\n\r\n        setDebug: function(state) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.debug = state;\r\n            self.storage.save();\r\n        },\r\n\r\n        setCentre: function(state) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.autoCentre = state;\r\n            self.storage.save();\r\n        },\r\n\r\n        setName: function(state) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.showNames = state;\r\n            self.storage.save();\r\n        },\r\n\r\n        setLevel: function(state) {\r\n            var self = this;\r\n\r\n            self.storage.data.settings.showLevels = state;\r\n            self.storage.save();\r\n        },\r\n\r\n        getMusicLevel: function() {\r\n            return this.storage.data.settings.music;\r\n        },\r\n\r\n        getSFXLevel: function() {\r\n            return this.storage.data.settings.sfx;\r\n        },\r\n\r\n        getBrightness: function() {\r\n            return this.storage.data.settings.brightness;\r\n        },\r\n\r\n        getSound: function() {\r\n            return this.storage.data.settings.soundEnabled;\r\n        },\r\n\r\n        getCamera: function() {\r\n            return this.storage.data.settings.centerCamera;\r\n        },\r\n\r\n        getDebug: function() {\r\n            return this.storage.data.settings.debug;\r\n        },\r\n\r\n        getCentreCap: function() {\r\n            return this.storage.data.settings.autoCentre;\r\n        },\r\n\r\n        getName: function() {\r\n            return this.storage.data.settings.showNames;\r\n        },\r\n\r\n        getLevel: function() {\r\n            return this.storage.data.settings.showLevels;\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.body.css('display') === 'block';\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/profile/pages/settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/pages/state.js",
    "content": "/* global log, _ */\r\n\r\ndefine(['jquery', '../page'], function($, Page) {\r\n\r\n    return Page.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self._super('#statePage');\r\n\r\n            self.game = game;\r\n            self.player = game.player;\r\n\r\n            self.name = $('#profileName');\r\n            self.level = $('#profileLevel');\r\n            self.experience = $('#profileExperience');\r\n\r\n            self.weaponSlot = $('#weaponSlot');\r\n            self.armourSlot = $('#armourSlot');\r\n            self.pendantSlot = $('#pendantSlot');\r\n            self.ringSlot = $('#ringSlot');\r\n            self.bootsSlot = $('#bootsSlot');\r\n\r\n            self.slots = [self.weaponSlot, self.armourSlot, self.pendantSlot, self.ringSlot, self.bootsSlot];\r\n\r\n            self.loaded = false;\r\n\r\n            self.load();\r\n        },\r\n\r\n        resize: function() {\r\n            this.loadSlots();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            if (!self.game.player.armour)\r\n                return;\r\n\r\n            self.name.text(self.player.username);\r\n            self.level.text(self.player.level);\r\n            self.experience.text(self.player.experience);\r\n\r\n            self.loadSlots();\r\n\r\n            self.loaded = true;\r\n\r\n            self.weaponSlot.click(function() {\r\n                self.game.socket.send(Packets.Equipment, [Packets.EquipmentOpcode.Unequip, 'weapon']);\r\n            });\r\n\r\n            self.armourSlot.click(function() {\r\n                self.game.socket.send(Packets.Equipment, [Packets.EquipmentOpcode.Unequip, 'armour']);\r\n            });\r\n\r\n            self.pendantSlot.click(function() {\r\n                self.game.socket.send(Packets.Equipment, [Packets.EquipmentOpcode.Unequip, 'pendant']);\r\n            });\r\n\r\n            self.ringSlot.click(function() {\r\n                self.game.socket.send(Packets.Equipment, [Packets.EquipmentOpcode.Unequip, 'ring']);\r\n            });\r\n\r\n            self.bootsSlot.click(function() {\r\n                self.game.socket.send(Packets.Equipment, [Packets.EquipmentOpcode.Unequip, 'boots']);\r\n            });\r\n\r\n        },\r\n\r\n        loadSlots: function() {\r\n            var self = this;\r\n\r\n            self.weaponSlot.css('background-image', self.getImageFormat(self.getScale(), self.player.weapon.string));\r\n            self.armourSlot.css('background-image', self.getImageFormat(self.getScale(), self.player.armour.string));\r\n            self.pendantSlot.css('background-image', self.getImageFormat(self.getScale(), self.player.pendant.string));\r\n            self.ringSlot.css('background-image', self.getImageFormat(self.getScale(), self.player.ring.string));\r\n            self.bootsSlot.css('background-image', self.getImageFormat(self.getScale(), self.player.boots.string));\r\n\r\n            self.forEachSlot(function(slot) { slot.css('background-size', '600%'); });\r\n        },\r\n\r\n        update: function() {\r\n            var self = this;\r\n\r\n            self.level.text(self.player.level);\r\n            self.experience.text(self.player.experience);\r\n\r\n            self.loadSlots();\r\n        },\r\n\r\n        forEachSlot: function(callback) {\r\n            _.each(this.slots, function(slot) {\r\n                callback(slot);\r\n            });\r\n        },\r\n\r\n        getScale: function() {\r\n            return this.game.renderer.getScale();\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/profile/pages/state.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/profile/profile.js",
    "content": "/* global log, _, Packets */\r\n\r\ndefine(['jquery', './pages/state', './pages/ability', './pages/settings', './pages/quest'], function($, State, Ability, Settings, Quest) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.body = $('#profileDialog');\r\n            self.button = $('#profileButton');\r\n\r\n            self.next = $('#next');\r\n            self.previous = $('#previous');\r\n\r\n            self.activePage = null;\r\n            self.activeIndex = 0;\r\n            self.pages = [];\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.button.click(function() {\r\n\r\n                self.game.interface.hideAll();\r\n                self.settings.hide();\r\n\r\n                if (self.isVisible()) {\r\n                    self.hide();\r\n                    self.button.removeClass('active');\r\n\r\n                } else {\r\n                    self.show();\r\n                    self.button.addClass('active');\r\n                }\r\n\r\n                if (!self.activePage.loaded)\r\n                    self.activePage.load();\r\n\r\n                self.game.socket.send(Packets.Click, ['profile', self.button.hasClass('active')]);\r\n\r\n            });\r\n\r\n            self.next.click(function() {\r\n                if (self.activeIndex + 1 < self.pages.length)\r\n                    self.setPage(self.activeIndex + 1);\r\n                else\r\n                    self.next.removeClass('enabled');\r\n            });\r\n\r\n            self.previous.click(function() {\r\n                if (self.activeIndex > 0)\r\n                    self.setPage(self.activeIndex - 1);\r\n                else\r\n                    self.previous.removeClass('enabled');\r\n            });\r\n\r\n            self.state = new State(self.game);\r\n            self.ability = new Ability(self.game);\r\n            self.settings = new Settings(self.game);\r\n            self.quests = new Quest(self.game);\r\n\r\n            self.pages.push(self.state, self.quests, self.ability);\r\n\r\n            self.activePage = self.state;\r\n\r\n            if (self.activeIndex === 0 && self.activeIndex !== self.pages.length)\r\n                self.next.addClass('enabled');\r\n        },\r\n\r\n        update: function() {\r\n            var self = this;\r\n\r\n            _.each(self.pages, function(page) { page.update(); });\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this;\r\n\r\n            _.each(self.pages, function(page) { page.resize(); });\r\n        },\r\n\r\n        setPage: function(index) {\r\n            var self = this,\r\n                page = self.pages[index];\r\n\r\n            self.clear();\r\n\r\n            if (page.isVisible())\r\n                return;\r\n\r\n            self.activePage = page;\r\n            self.activeIndex = index;\r\n\r\n            if (self.activeIndex + 1 === self.pages.length)\r\n                self.next.removeClass('enabled');\r\n            else if (self.activeIndex === 0)\r\n                self.previous.removeClass('enabled');\r\n            else {\r\n                self.previous.addClass('enabled');\r\n                self.next.addClass('enabled');\r\n            }\r\n\r\n            page.show();\r\n        },\r\n\r\n        show: function() {\r\n            var self = this;\r\n\r\n            self.body.fadeIn('slow');\r\n            self.button.addClass('active');\r\n        },\r\n\r\n        hide: function() {\r\n            var self = this;\r\n\r\n            self.body.fadeOut('fast');\r\n            self.button.removeClass('active');\r\n\r\n            if (self.settings)\r\n                self.settings.hide();\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.body.css('display') === 'block';\r\n        },\r\n\r\n        clear: function() {\r\n            var self = this;\r\n\r\n            if (self.activePage)\r\n                self.activePage.hide();\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/profile/profile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/shop.js",
    "content": "define(['jquery', './container/container'], function($, Container) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game, intrface) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.body = $('#shop');\r\n            self.shop = $('#shopContainer');\r\n            self.inventory = $('#shopInventorySlots');\r\n\r\n            self.player = game.player;\r\n            self.interface = intrface;\r\n\r\n            self.container = null;\r\n            self.data = null;\r\n\r\n            self.openShop = -1;\r\n\r\n            self.items = [];\r\n            self.counts = [];\r\n\r\n            self.close = $('#closeShop');\r\n\r\n            self.close.css('left', '97%');\r\n            self.close.click(function() {\r\n                self.hide();\r\n            });\r\n\r\n        },\r\n\r\n        buy: function(event) {\r\n            var self = this,\r\n                id = event.currentTarget.id.substring(11);\r\n\r\n            self.game.socket.send(Packets.Shop, [Packets.ShopOpcode.Buy, self.openShop, id, 1]);\r\n        },\r\n\r\n        sell: function() {\r\n            var self = this;\r\n\r\n\r\n        },\r\n\r\n        /**\r\n         * The shop file is already built to support full de-initialization of objects when\r\n         * we receive an update about the stocks. So we just use that whenever we want to resize.\r\n         * This is just a temporary fix, in reality, we do not want anyone to actually see the shop\r\n         * do a full refresh when they buy an item or someone else buys an item.\r\n         */\r\n\r\n        resize: function() {\r\n            var self = this;\r\n\r\n            self.getInventoryList().empty();\r\n            self.getShopList().empty();\r\n\r\n            self.update(self.data);\r\n        },\r\n\r\n        update: function(data) {\r\n            var self = this;\r\n\r\n            self.reset();\r\n\r\n            self.container = new Container(data.strings.length);\r\n\r\n            //Update the global data to current revision\r\n            self.data = data;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            for (var i = 0; i < self.container.size; i++) {\r\n                var shopItem = $('<div id=\"shopItem' + i + '\" class=\"shopItem\"></div>'),\r\n                    string = self.data.strings[i],\r\n                    name = self.data.names[i],\r\n                    count = self.data.counts[i],\r\n                    itemImage, itemCount, itemName, itemBuy;\r\n\r\n                if (!string || !name || !count)\r\n                    continue;\r\n\r\n                itemImage = $('<div id=\"shopItemImage' + i + '\" class=\"shopItemImage\"></div>');\r\n                itemCount = $('<div id=\"shopItemCount' + i + '\" class=\"shopItemCount\"></div>');\r\n                itemName = $('<div id=\"shopItemName' + i + '\" class=\"shopItemName\"></div>');\r\n                itemBuy = $('<div id=\"shopItemBuy' + i + '\" class=\"shopItemBuy\"></div>');\r\n\r\n                itemImage.css('background-image', self.container.getImageFormat(1, string));\r\n                itemCount.html(count);\r\n                itemName.html(name);\r\n                itemBuy.html('Purchase');\r\n\r\n                self.container.setSlot(i, {\r\n                    string: string,\r\n                    count: count\r\n                });\r\n\r\n                // Bind the itemBuy to the local buy function.\r\n                itemBuy.click(function(event) {\r\n                    self.buy(event);\r\n                });\r\n\r\n                var listItem = $('<li></li>');\r\n\r\n                shopItem.append(itemImage, itemCount, itemName, itemBuy);\r\n\r\n                listItem.append(shopItem);\r\n\r\n                self.getShopList().append(listItem);\r\n            }\r\n\r\n            var inventoryItems = self.interface.bank.getInventoryList(),\r\n                inventorySize = self.interface.inventory.getSize();\r\n\r\n            for (var j = 0; j < inventorySize; j++) {\r\n                var item = $(inventoryItems[j]).clone(),\r\n                    slot = item.find('#bankInventorySlot' + j);\r\n\r\n                self.getInventoryList().append(slot);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            var self = this;\r\n\r\n            self.items = [];\r\n            self.counts = [];\r\n\r\n            self.container = null;\r\n\r\n            self.getShopList().empty();\r\n            self.getInventoryList().empty();\r\n        },\r\n\r\n        open: function(id) {\r\n            var self = this;\r\n\r\n            if (!id)\r\n                return;\r\n\r\n            self.openShop = id;\r\n\r\n            self.body.fadeIn('slow');\r\n        },\r\n\r\n        hide: function() {\r\n            var self = this;\r\n\r\n            self.openShop = -1;\r\n\r\n            self.body.fadeOut('fast');\r\n        },\r\n\r\n        getScale: function() {\r\n            return this.game.renderer.getScale();\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.body.css('display') === 'block';\r\n        },\r\n\r\n        isShopOpen: function(shopId) {\r\n            return this.isVisible() && this.openShop === shopId;\r\n        },\r\n\r\n        getShopList: function() {\r\n            return this.shop.find('ul');\r\n        },\r\n\r\n        getInventoryList: function() {\r\n            return this.inventory.find('ul');\r\n        }\r\n\r\n    });\r\n\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/shop.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "Kaetram-Open/client/js/interface/warp.js",
    "content": "/* global _, Modules */\r\n\r\ndefine(['jquery'], function($) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.mapFrame = $('#mapFrame');\r\n            self.button = $('#warpButton');\r\n            self.close = $('#closeMapFrame');\r\n\r\n            self.warpCount = 0;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.button.click(function() {\r\n                self.game.interface.hideAll();\r\n\r\n                self.toggle();\r\n\r\n                self.game.socket.send(Packets.Click, ['warp', self.button.hasClass('active')]);\r\n            });\r\n\r\n            self.close.click(function() {\r\n                self.hide();\r\n            });\r\n\r\n            for (var i = 1; i < 7; i++) {\r\n                var warp = self.mapFrame.find('#warp' + i);\r\n\r\n                if (warp)\r\n                    warp.click(function(event) {\r\n\r\n                        self.hide();\r\n\r\n                        self.game.socket.send(Packets.Warp, [event.currentTarget.id.substring(4)]);\r\n\r\n                    })\r\n            }\r\n\r\n        },\r\n\r\n        toggle: function() {\r\n            var self = this;\r\n\r\n            /**\r\n             * Just so it fades out nicely.\r\n             */\r\n\r\n            if (self.isVisible())\r\n                self.hide();\r\n            else\r\n                self.display();\r\n        },\r\n\r\n        isVisible: function() {\r\n            return this.mapFrame.css('display') === 'block';\r\n        },\r\n\r\n        display: function() {\r\n            this.mapFrame.fadeIn('slow');\r\n            this.button.addClass('active');\r\n        },\r\n\r\n        hide: function() {\r\n            this.mapFrame.fadeOut('fast');\r\n            this.button.removeClass('active');\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/interface/warp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "Kaetram-Open/client/js/main.js",
    "content": "/* global log, Detect */\r\n\r\ndefine(['jquery', './app', './game'], function($, App, Game) {\r\n    var app, body, chatInput, game;\r\n\r\n    var install = function() {\r\n        if (deferredPrompt) {\r\n            deferredPrompt.prompt();\r\n            deferredPrompt.userChoice.then(function(choiceResult) {\r\n\r\n                if (choiceResult.outcome === 'accepted')\r\n                    log.info('Your PWA has been installed');\r\n                else\r\n                    log.info('User chose to not install your PWA');\r\n\r\n                deferredPrompt = null;\r\n            });\r\n        }\r\n    };\r\n    var load = function() {\r\n        $(document).ready(function() {\r\n            app = new App();\r\n            body = $('body');\r\n            chatInput = $('#chatInput');\r\n\r\n            addClasses();\r\n            initGame();\r\n        });\r\n\r\n        // This is the \"Offline page\" service worker\r\n\r\n        // Add this below content to your HTML page, or add the js file to your page at the very top to register service worker\r\n\r\n        // Check compatibility for the browser we're running this in\r\n        if ('serviceWorker' in navigator) {\r\n            if (navigator.serviceWorker.controller)\r\n                log.info('[PWA Builder] active service worker found, no need to register');\r\n            else {\r\n                // Register the service worker\r\n                navigator.serviceWorker.register('sw.js', {\r\n                        scope: '../'\r\n                    }).then(function(reg) {\r\n                        log.info('[PWA Builder] Service worker has been registered for scope: ' + reg.scope);\r\n                    });\r\n            }\r\n        }\r\n\r\n        window.addEventListener('beforeinstallprompt', function(e) {\r\n            // Prevent Chrome 67 and earlier from automatically showing the prompt\r\n            e.preventDefault();\r\n\r\n            // Stash the event so it can be triggered later.\r\n            deferredPrompt = e;\r\n\r\n            install();\r\n        });\r\n    };\r\n\r\n    var addClasses = function() {\r\n        var self = this;\r\n\r\n        if (Detect.isWindows()) body.addClass('windows');\r\n\r\n        if (Detect.isOpera()) body.addClass('opera');\r\n\r\n        if (Detect.isFirefoxAndroid()) chatInput.removeAttr('placeholder');\r\n    };\r\n\r\n    var initGame = function() {\r\n        app.onReady(function() {\r\n            app.sendStatus('Loading game');\r\n\r\n            if (app.config.debug) log.info('Loading the main application...');\r\n\r\n            game = new Game(app);\r\n            app.setGame(game);\r\n        });\r\n    };\r\n\r\n    load();\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "Kaetram-Open/client/js/network/connection.js",
    "content": "/* global log, _ */\r\n\r\ndefine(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            let self = this;\r\n\r\n            self.game = game;\r\n            self.app = game.app;\r\n            self.audio = game.audio;\r\n            self.messages = game.messages;\r\n            self.storage = game.storage;\r\n            self.socket = game.socket;\r\n            self.input = game.input;\r\n            self.interface = game.interface;\r\n            self.entities = game.entities;\r\n            self.map = game.map;\r\n            self.overlays = game.overlays;\r\n            self.renderer = game.renderer;\r\n            self.bubble = game.bubble;\r\n            self.info = game.info;\r\n            self.pointer = game.pointer;\r\n            self.inventory = game.inventory;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            let self = this;\r\n\r\n            self.messages.onHandshake(function(data) {\r\n\r\n                self.game.id = data.id;\r\n                self.game.development = data.development;\r\n\r\n                self.game.ready = true;\r\n\r\n                if (!self.game.player)\r\n                    self.game.createPlayer();\r\n\r\n                if (!self.map)\r\n                    self.game.loadMap();\r\n\r\n                self.app.updateLoader('Logging in');\r\n\r\n                if (self.app.isRegistering()) {\r\n                    var registerInfo = self.app.registerFields,\r\n                        username = registerInfo[0].val(),\r\n                        password = registerInfo[1].val(),\r\n                        email = registerInfo[3].val();\r\n\r\n                    self.socket.send(Packets.Intro, [Packets.IntroOpcode.Register, username, password, email]);\r\n                } else if (self.app.isGuest()) {\r\n                    self.socket.send(Packets.Intro, [Packets.IntroOpcode.Guest, 'n', 'n', 'n']);\r\n                } else {\r\n                    var loginInfo = self.app.loginFields,\r\n                        name = loginInfo[0].val(),\r\n                        pass = loginInfo[1].val();\r\n\r\n                    self.socket.send(Packets.Intro, [Packets.IntroOpcode.Login, name, pass]);\r\n\r\n                    if (self.game.hasRemember()) {\r\n                        self.storage.data.player.username = name;\r\n                        self.storage.data.player.password = pass;\r\n                    } else {\r\n                        self.storage.data.player.username = '';\r\n                        self.storage.data.player.password = '';\r\n                    }\r\n\r\n                    self.storage.save();\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onWelcome(function(data) {\r\n\r\n                self.interface.loadHeader();\r\n\r\n                self.game.player.load(data);\r\n\r\n                self.game.start();\r\n                self.game.postLoad();\r\n\r\n            });\r\n\r\n            self.messages.onEquipment(function(opcode, info) {\r\n\r\n\r\n                switch (opcode) {\r\n                    case Packets.EquipmentOpcode.Batch:\r\n\r\n                        _.each(info, function(data) {\r\n                            self.game.player.setEquipment(data.type, data.name, data.string, data.count, data.ability, data.abilityLevel);\r\n                        });\r\n\r\n                        self.interface.loadProfile();\r\n\r\n                        break;\r\n\r\n                    case Packets.EquipmentOpcode.Equip:\r\n\r\n                        self.game.player.setEquipment(info.type, info.name, info.string, info.count, info.ability, info.abilityLevel);\r\n\r\n                        self.interface.profile.update();\r\n\r\n                        break;\r\n\r\n                    case Packets.EquipmentOpcode.Unequip:\r\n\r\n                        var type = info.shift();\r\n\r\n                        self.game.player.unequip(type);\r\n\r\n                        if (type === 'armour')\r\n                            self.game.player.setSprite(self.game.getSprite(self.game.player.getSpriteName()));\r\n\r\n                        self.interface.profile.update();\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onSpawn(function(data) {\r\n                self.entities.create(data.shift());\r\n            });\r\n\r\n            self.messages.onEntityList(function(data) {\r\n                var ids = _.pluck(self.entities.getAll(), 'id'),\r\n                    known = _.intersection(ids, data),\r\n                    newIds = _.difference(data, known);\r\n\r\n                self.entities.decrepit = _.reject(self.entities.getAll(), function(entity) {\r\n                    return _.include(known, entity.id) || entity.id === self.game.player.id;\r\n                });\r\n\r\n                self.entities.clean(newIds);\r\n\r\n                self.socket.send(Packets.Who, newIds);\r\n            });\r\n\r\n            self.messages.onSync(function(data) {\r\n                var entity = self.entities.get(data.id);\r\n\r\n                if (!entity || entity.type !== 'player')\r\n                    return;\r\n\r\n                if (data.hitPoints) {\r\n                    entity.setHitPoints(data.hitPoints);\r\n                    entity.setMaxHitPoints(data.maxHitPoints);\r\n                }\r\n\r\n                if (data.mana) {\r\n                    entity.mana = data.mana;\r\n                    entity.maxMana = data.maxMana;\r\n                }\r\n\r\n                if (data.experience) {\r\n                    entity.experience = data.experience;\r\n                    entity.level = data.level;\r\n                }\r\n\r\n                if (data.armour)\r\n                    entity.setSprite(self.game.getSprite(data.armour));\r\n\r\n                if (data.weapon)\r\n                    entity.setEquipment(data.weapon.type, data.weapon.name,\r\n                        data.weapon.string, data.weapon.count, data.weapon.ability,\r\n                        data.weapon.abilityLevel);\r\n\r\n                self.interface.profile.update();\r\n            });\r\n\r\n            self.messages.onMovement(function(opcode, info) {\r\n\r\n                switch(opcode) {\r\n                    case Packets.MovementOpcode.Move:\r\n                        var entity = self.entities.get(info.id);\r\n\r\n                        if (!entity)\r\n                            return;\r\n\r\n                        if (info.forced)\r\n                            entity.stop(true);\r\n\r\n                        entity.go(info.x, info.y);\r\n\r\n                        break;\r\n\r\n                    case Packets.MovementOpcode.Follow:\r\n\r\n                        var follower = self.entities.get(info.attackerId),\r\n                            followee = self.entities.get(info.targetId);\r\n\r\n                        if (!followee || !follower)\r\n                            return;\r\n\r\n                        follower.follow(followee);\r\n\r\n                        break;\r\n\r\n                    case Packets.MovementOpcode.Stop:\r\n\r\n                        var sEntity = self.entities.get(info.id),\r\n                            force = info.force;\r\n\r\n                        if (!sEntity)\r\n                            return;\r\n\r\n                        sEntity.stop(force);\r\n\r\n                        break;\r\n\r\n                    case Packets.MovementOpcode.Freeze:\r\n                    case Packets.MovementOpcode.Stunned:\r\n\r\n                        var pEntity = self.entities.get(info.id);\r\n\r\n                        if (!pEntity)\r\n                            return;\r\n\r\n                        if (info.state)\r\n                            pEntity.stop(false);\r\n\r\n                        if (opcode === Packets.MovementOpcode.Stunned)\r\n                            pEntity.stunned = info.state;\r\n                        else if (opcode === Packets.MovementOpcode.Freeze)\r\n                            pEntity.frozen = info.state;\r\n\r\n                        break;\r\n\r\n\r\n                        case Packets.MovementOpcode.Orientate:\r\n                            var player = info.shift(),\r\n                                orientation = info.shift(),\r\n                                entity = self.entities.get(player);\r\n\r\n                            // entity.stop();\r\n                            entity.performAction(orientation, Modules.Actions.Orientate);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onTeleport(function(info) {\r\n                var entity = self.entities.get(info.id),\r\n                    isPlayer = info.id === self.game.player.id;\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                entity.stop(true);\r\n                entity.frozen = true;\r\n\r\n                self.bubble.clean();\r\n\r\n                /**\r\n                 * Teleporting an entity seems to cause a glitch with the\r\n                 * hitbox. Make sure you keep an eye out for this.\r\n                 */\r\n\r\n                var doTeleport = function() {\r\n\r\n                    self.entities.unregisterPosition(entity);\r\n                    entity.setGridPosition(info.x, info.y);\r\n\r\n                    if (isPlayer) {\r\n\r\n                        self.entities.clearPlayers(self.game.player);\r\n                        self.game.player.clearHealthBar();\r\n                        self.renderer.camera.centreOn(entity);\r\n                        self.renderer.updateAnimatedTiles();\r\n\r\n                    } else if (entity.type === 'player') {\r\n                        delete self.entities.entities[entity.id];\r\n                        return;\r\n                    }\r\n\r\n                    self.socket.send(Packets.Request, [self.game.player.id]);\r\n\r\n                    self.entities.registerPosition(entity);\r\n                    entity.frozen = false;\r\n\r\n                    /*self.renderer.transition(15, true, function() {\r\n\r\n                    });*/\r\n\r\n                };\r\n\r\n                if (info.withAnimation) {\r\n\r\n                    var originalSprite = entity.sprite;\r\n\r\n                    entity.teleporting = true;\r\n\r\n                    entity.setSprite(self.game.getSprite('death'));\r\n\r\n                    entity.animate('death', 240, 1, function() {\r\n                        doTeleport();\r\n\r\n                        entity.currentAnimation = null;\r\n\r\n                        entity.setSprite(originalSprite);\r\n                        entity.idle();\r\n\r\n                        entity.teleporting = false;\r\n\r\n                    });\r\n\r\n                } else\r\n                    doTeleport();\r\n                    /*self.renderer.transition(15, false, function() {\r\n                        if (self.queueColour) {\r\n                            self.renderer.updateDarkMask(self.queueColour);\r\n                            self.queueColour = null;\r\n                        }\r\n                    });*/\r\n\r\n            });\r\n\r\n            self.messages.onDespawn(function(id) {\r\n                var entity = self.entities.get(id);\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                entity.dead = true;\r\n\r\n                entity.stop();\r\n\r\n                switch (entity.type) {\r\n                    case 'item':\r\n\r\n                        self.entities.removeItem(entity);\r\n\r\n                        return;\r\n\r\n                    case 'chest':\r\n\r\n                        entity.setSprite(self.game.getSprite('death'));\r\n\r\n                        entity.setAnimation('death', 120, 1, function() {\r\n                            self.entities.unregisterPosition(entity);\r\n                            delete self.entities.entities[entity.id];\r\n                        });\r\n\r\n                        return;\r\n                }\r\n\r\n                if (self.game.player.hasTarget() && self.game.player.target.id === entity.id)\r\n                    self.game.player.removeTarget();\r\n\r\n                self.entities.grids.removeFromPathingGrid(entity.gridX, entity.gridY);\r\n\r\n                if (entity.id !== self.game.player.id && self.game.player.getDistance(entity) < 5)\r\n                    self.audio.play(Modules.AudioTypes.SFX, 'kill' + Math.floor(Math.random() * 2 + 1));\r\n\r\n                entity.hitPoints = 0;\r\n\r\n                entity.setSprite(self.game.getSprite('death'));\r\n\r\n                entity.animate('death', 120, 1, function() {\r\n                    self.entities.unregisterPosition(entity);\r\n                    delete self.entities.entities[entity.id];\r\n                });\r\n\r\n            });\r\n\r\n            self.messages.onCombat(function(opcode, info) {\r\n                var attacker = self.entities.get(info.attackerId),\r\n                    target = self.entities.get(info.targetId);\r\n\r\n                if (!target || !attacker)\r\n                    return;\r\n\r\n                switch (opcode) {\r\n                    case Packets.CombatOpcode.Initiate:\r\n                        attacker.setTarget(target);\r\n\r\n                        target.addAttacker(attacker);\r\n\r\n                        if (target.id === self.game.player.id || attacker.id === self.game.player.id)\r\n                            self.socket.send(Packets.Combat, [Packets.CombatOpcode.Initiate, attacker.id, target.id]);\r\n\r\n                        break;\r\n\r\n                    case Packets.CombatOpcode.Hit:\r\n\r\n                        var hit = info.hitInfo,\r\n                            isPlayer = target.id === self.game.player.id;\r\n\r\n                        if (!hit.isAoE) {\r\n                            attacker.lookAt(target);\r\n                            attacker.performAction(attacker.orientation, Modules.Actions.Attack);\r\n\r\n                        } else\r\n                            if (hit.hasTerror)\r\n                                target.terror = true;\r\n\r\n                        switch (hit.type) {\r\n\r\n                            case Modules.Hits.Critical:\r\n\r\n                                target.critical = true;\r\n\r\n                                break;\r\n\r\n                            default:\r\n\r\n                                if (attacker.id === self.game.player.id && hit.damage > 0)\r\n                                    self.audio.play(Modules.AudioTypes.SFX, 'hit' + Math.floor(Math.random() * 2 + 1));\r\n\r\n                                break;\r\n                        }\r\n\r\n                        self.info.create(hit.type, [hit.damage, isPlayer], target.x, target.y);\r\n\r\n                        if (target.hurtSprite) {\r\n                            target.sprite = target.hurtSprite;\r\n                            setTimeout(function() { target.sprite = target.normalSprite; }, 75);\r\n                        }\r\n\r\n                        attacker.triggerHealthBar();\r\n                        target.triggerHealthBar();\r\n\r\n                        if (isPlayer && hit.damage > 0)\r\n                            self.audio.play(Modules.AudioTypes.SFX, 'hurt');\r\n\r\n                        break;\r\n\r\n                    case Packets.CombatOpcode.Finish:\r\n\r\n                        if (target) {\r\n                            target.removeTarget();\r\n                            target.forget();\r\n                        }\r\n\r\n                        if (attacker)\r\n                            attacker.removeTarget();\r\n\r\n                        break;\r\n\r\n                    case Packets.CombatOpcode.Sync:\r\n\r\n                        if (target.x !== info.x || target.y !== info.y)\r\n                            target.go(info.x, info.y);\r\n\r\n                        break;\r\n                }\r\n            });\r\n\r\n            self.messages.onAnimation(function(id, info) {\r\n                var entity = self.entities.get(id),\r\n                    animation = info.shift(),\r\n                    speed = info.shift(),\r\n                    count = info.shift();\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                entity.animate(animation, speed, count);\r\n            });\r\n\r\n            self.messages.onProjectile(function(opcode, info) {\r\n\r\n                switch (opcode) {\r\n\r\n                    case Packets.ProjectileOpcode.Create:\r\n\r\n                        self.entities.create(info);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onPopulation(function(population) {\r\n                self.population = population;\r\n            });\r\n\r\n            self.messages.onPoints(function(data) {\r\n\r\n                var entity = self.entities.get(data.id);\r\n\r\n                //var id = data.shift(),\r\n                //    hitPoints = data.shift(),\r\n                //    mana = data.shift(),\r\n                //    entity = self.entities.get(id);\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                if (data.hitPoints) {\r\n                    entity.setHitPoints(data.hitPoints);\r\n\r\n                    if (self.game.player.hasTarget() && self.game.player.target.id === entity.id && self.input.overlay.updateCallback)\r\n                        self.input.overlay.updateCallback(entity.id, data.hitPoints);\r\n\r\n                }\r\n\r\n                if (data.mana)\r\n                    entity.setMana(data.mana);\r\n            });\r\n\r\n            self.messages.onNetwork(function() {\r\n                self.socket.send(Packets.Network, [Packets.NetworkOpcode.Pong]);\r\n            });\r\n\r\n            self.messages.onChat(function(info) {\r\n\r\n                if (self.game.isDebug())\r\n                    log.info(info);\r\n\r\n                if (info.withBubble) {\r\n                    var entity = self.entities.get(info.id);\r\n\r\n                    if (entity) {\r\n                        info.name = info.name.charAt(0).toUpperCase() + info.name.substr(1);\r\n\r\n                        self.bubble.create(info.id, info.text, info.duration);\r\n                        self.bubble.setTo(entity);\r\n\r\n                        self.audio.play(Modules.AudioTypes.SFX, 'npctalk');\r\n                    }\r\n                }\r\n\r\n                if (info.isGlobal)\r\n                    info.name = '[Global] ' + info.name;\r\n\r\n                self.input.chatHandler.add(info.name, info.text, info.colour);\r\n\r\n            });\r\n\r\n            self.messages.onCommand(function(info) {\r\n\r\n                /**\r\n                 * This is for random miscellaneous commands that require\r\n                 * a specific action done by the client as opposed to\r\n                 * packet-oriented ones.\r\n                 */\r\n\r\n                log.info(info);\r\n\r\n                switch (info.command) {\r\n\r\n                    case 'debug':\r\n                        self.renderer.debugging = !self.renderer.debugging;\r\n                        break;\r\n\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onInventory(function(opcode, info) {\r\n\r\n                switch (opcode) {\r\n                    case Packets.InventoryOpcode.Batch:\r\n\r\n                        var inventorySize = info.shift(),\r\n                            data = info.shift();\r\n\r\n                        self.interface.loadInventory(inventorySize, data);\r\n\r\n                        break;\r\n\r\n                    case Packets.InventoryOpcode.Add:\r\n\r\n                        if (!self.interface.inventory)\r\n                            return;\r\n\r\n                        self.interface.inventory.add(info);\r\n\r\n                        if (!self.interface.bank)\r\n                            return;\r\n\r\n                        self.interface.addInventory(info);\r\n\r\n                        break;\r\n\r\n                    case Packets.InventoryOpcode.Remove:\r\n\r\n                        if (!self.interface.inventory)\r\n                            return;\r\n\r\n                        self.interface.inventory.remove(info);\r\n\r\n                        if (!self.interface.bank)\r\n                            return;\r\n\r\n                        self.interface.removeInventory(info);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onBank(function(opcode, info) {\r\n                switch(opcode) {\r\n\r\n                    case Packets.BankOpcode.Batch:\r\n\r\n                        var bankSize = info.shift(),\r\n                            data = info.shift();\r\n\r\n                        self.interface.loadBank(bankSize, data);\r\n\r\n                        break;\r\n\r\n\r\n                    case Packets.BankOpcode.Add:\r\n\r\n                        if (!self.interface.bank)\r\n                            return;\r\n\r\n                        self.interface.bank.add(info);\r\n\r\n                        break;\r\n\r\n                    case Packets.BankOpcode.Remove:\r\n\r\n                        self.interface.bank.remove(info);\r\n\r\n                        break;\r\n                }\r\n            });\r\n\r\n            self.messages.onAbility(function(opcode, info) {\r\n\r\n            });\r\n\r\n            self.messages.onQuest(function(opcode, info) {\r\n\r\n                switch (opcode) {\r\n                    case Packets.QuestOpcode.AchievementBatch:\r\n\r\n                        self.interface.getQuestPage().loadAchievements(info.achievements);\r\n\r\n                        break;\r\n\r\n                    case Packets.QuestOpcode.QuestBatch:\r\n\r\n                        self.interface.getQuestPage().loadQuests(info.quests);\r\n\r\n                        break;\r\n\r\n                    case Packets.QuestOpcode.Progress:\r\n\r\n                        self.interface.getQuestPage().progress(info);\r\n\r\n                        break;\r\n\r\n                    case Packets.QuestOpcode.Finish:\r\n\r\n                        self.interface.getQuestPage().finish(info);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onNotification(function(opcode, message) {\r\n\r\n                switch (opcode) {\r\n                    case Packets.NotificationOpcode.Ok:\r\n\r\n                        self.interface.displayNotify(message);\r\n\r\n                        break;\r\n\r\n                    case Packets.NotificationOpcode.YesNo:\r\n\r\n                        self.interface.displayConfirm(message);\r\n\r\n                        break;\r\n\r\n                    case Packets.NotificationOpcode.Text:\r\n\r\n                        self.input.chatHandler.add('WORLD', message);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onBlink(function(instance) {\r\n                var item = self.entities.get(instance);\r\n\r\n                if (!item)\r\n                    return;\r\n\r\n                item.blink(150);\r\n            });\r\n\r\n            self.messages.onHeal(function(info) {\r\n                var entity = self.entities.get(info.id);\r\n\r\n                if (!entity)\r\n                    return;\r\n\r\n                switch (info.type) {\r\n                    case 'health':\r\n\r\n                        self.info.create(Modules.Hits.Heal, [info.amount], entity.x, entity.y);\r\n\r\n                        break;\r\n\r\n                    case 'mana':\r\n\r\n                        self.info.create(Modules.Hits.Mana, [info.amount], entity.x, entity.y);\r\n\r\n                        break;\r\n                }\r\n\r\n                if (entity.hitPoints + info.amount > entity.maxHitPoints)\r\n                    entity.setHitPoints(entity.maxHitPoints);\r\n                else\r\n                    entity.setHitPoints(entity.hitPoints + info.amount);\r\n\r\n                entity.triggerHealthBar();\r\n            });\r\n\r\n            self.messages.onExperience(function(info) {\r\n                var entity = self.entities.get(info.id);\r\n\r\n                if (!entity || entity.type !== 'player')\r\n                    return;\r\n\r\n                if (entity.level !== info.level) {\r\n\r\n                    entity.level = info.level;\r\n                    self.info.create(Modules.Hits.LevelUp, null, entity.x, entity.y);\r\n\r\n                } else if (entity.id === self.game.player.id) {\r\n\r\n                    if (info.id === self.game.player.id)\r\n                        self.game.player.setExperience(info.experience, info.nextExperience, info.prevExperience);\r\n\r\n                    self.info.create(Modules.Hits.Experience, [info.amount], entity.x, entity.y);\r\n                }\r\n\r\n                self.interface.profile.update();\r\n\r\n            });\r\n\r\n            self.messages.onDeath(function(id) {\r\n                var entity = self.entities.get(id);\r\n\r\n                if (!entity || id !== self.game.player.id)\r\n                    return;\r\n\r\n                self.audio.play(Modules.AudioTypes.SFX, 'death');\r\n\r\n                self.game.player.dead = true;\r\n                self.game.player.removeTarget();\r\n                self.game.player.orientation = Modules.Orientation.Down;\r\n\r\n                self.app.body.addClass('death');\r\n            });\r\n\r\n            self.messages.onAudio(function(song) {\r\n                self.audio.songName = song;\r\n\r\n                if (Detect.isSafari() && !self.audio.song)\r\n                    return;\r\n\r\n                self.audio.update();\r\n            });\r\n\r\n            self.messages.onNPC(function(opcode, info) {\r\n\r\n                switch(opcode) {\r\n\r\n                    case Packets.NPCOpcode.Talk:\r\n\r\n                        var entity = self.entities.get(info.id),\r\n                            message = info.text,\r\n                            isNPC = !info.nonNPC;\r\n\r\n                        if (!entity)\r\n                            return;\r\n\r\n                        if (isNPC) {\r\n\r\n                            if (!message) {\r\n                                sound = 'npc-end';\r\n                                self.bubble.destroy(info.id);\r\n\r\n                            } else {\r\n\r\n                                var bubble = self.bubble.create(info.id, message);\r\n\r\n                                self.bubble.setTo(entity);\r\n\r\n                                if (self.renderer.mobile && self.renderer.autoCentre)\r\n                                    self.renderer.camera.centreOn(self.game.player);\r\n                            }\r\n\r\n                        } else {\r\n                            self.bubble.create(info.id, message, self.time, 5000);\r\n                            self.bubble.setTo(entity);\r\n                        }\r\n\r\n                        var sound = 'npc';\r\n\r\n                        self.audio.play(Modules.AudioTypes.SFX, sound);\r\n\r\n                        self.game.player.disableAction = true;\r\n\r\n                        break;\r\n\r\n                    case Packets.NPCOpcode.Bank:\r\n                        self.interface.bank.display();\r\n                        break;\r\n\r\n                    case Packets.NPCOpcode.Enchant:\r\n                        self.interface.enchant.display();\r\n                        break;\r\n\r\n                    case Packets.NPCOpcode.Countdown:\r\n\r\n                        var cEntity = self.entities.get(info.id),\r\n                            countdown = info.countdown;\r\n\r\n                        if (cEntity)\r\n                            cEntity.setCountdown(countdown);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onRespawn(function(id, x, y) {\r\n                if (id !== self.game.player.id) {\r\n                    log.error('Player id mismatch.');\r\n                    return;\r\n                }\r\n\r\n                self.game.player.setGridPosition(x, y);\r\n                self.entities.addEntity(self.game.player);\r\n                self.renderer.camera.centreOn(self.game.player);\r\n\r\n                self.game.player.currentAnimation = null;\r\n                self.game.player.setSprite(self.game.getSprite(self.game.player.getSpriteName()));\r\n                self.game.player.idle();\r\n\r\n                self.game.player.dead = false;\r\n            });\r\n\r\n            self.messages.onEnchant(function(opcode, info) {\r\n                var type = info.type,\r\n                    index = info.index;\r\n\r\n                switch (opcode) {\r\n                    case Packets.EnchantOpcode.Select:\r\n\r\n                        self.interface.enchant.add(type, index);\r\n\r\n                        break;\r\n\r\n                    case Packets.EnchantOpcode.Remove:\r\n\r\n                        self.interface.enchant.moveBack(type, index);\r\n\r\n                        break;\r\n\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onGuild(function(opcode, info) {\r\n\r\n                switch (opcode) {\r\n\r\n                    case Packets.GuildOpcode.Create:\r\n\r\n                        break;\r\n\r\n                    case Packets.GuildOpcode.Join:\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onPointer(function(opcode, info) {\r\n\r\n                switch (opcode) {\r\n                    case Packets.PointerOpcode.NPC:\r\n                        var entity = self.entities.get(info.id);\r\n\r\n                        if (!entity)\r\n                            return;\r\n\r\n                        self.pointer.create(entity.id, Modules.Pointers.Entity);\r\n                        self.pointer.setToEntity(entity);\r\n\r\n                        break;\r\n\r\n                    case Packets.PointerOpcode.Location:\r\n\r\n                        self.pointer.create(info.id, Modules.Pointers.Position);\r\n                        self.pointer.setToPosition(info.id, info.x * 16, info.y * 16);\r\n\r\n                        break;\r\n\r\n                    case Packets.PointerOpcode.Relative:\r\n\r\n                        self.pointer.create(info.id, Modules.Pointers.Relative);\r\n                        self.pointer.setRelative(info.id, info.x, info.y);\r\n\r\n                        break;\r\n\r\n                    case Packets.PointerOpcode.Remove:\r\n\r\n                        self.pointer.clean();\r\n\r\n                        break;\r\n\r\n                    case Packets.PointerOpcode.Button:\r\n\r\n                        self.pointer.create(info.id, Modules.Pointers.Button, info.button);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onPVP(function(id, pvp) {\r\n\r\n                if (self.game.player.id === id)\r\n                    self.pvp = pvp;\r\n                else {\r\n                    var entity = self.entities.get(id);\r\n\r\n                    if (entity)\r\n                        entity.pvp = pvp;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onShop(function(opcode, info) {\r\n                var shopData = info.shopData;\r\n\r\n                switch (opcode) {\r\n                    case Packets.ShopOpcode.Open:\r\n\r\n                        self.interface.shop.open(shopData.id);\r\n                        self.interface.shop.update(shopData);\r\n\r\n                        break;\r\n\r\n                    case Packets.ShopOpcode.Buy:\r\n\r\n                        break;\r\n\r\n                    case Packets.ShopOpcode.Sell:\r\n\r\n                        break;\r\n\r\n                    case Packets.ShopOpcode.Refresh:\r\n\r\n                        if (self.interface.shop.isShopOpen(info.id))\r\n                            self.interface.shop.update(info);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onMinigame(function(opcode, info) {\r\n                log.info('Lorem Ipsum.');\r\n            });\r\n\r\n            self.messages.onRegion(function(opcode, info) {\r\n\r\n                switch(opcode) {\r\n                    case Packets.RegionOpcode.Render:\r\n\r\n                        self.map.synchronize(info);\r\n\r\n                        break;\r\n\r\n                    case Packets.RegionOpcode.Modify:\r\n\r\n                        self.map.data[info.index] = info.data;\r\n\r\n                        break;\r\n\r\n                    case Packets.RegionOpcode.Update:\r\n                        var entity = self.entities.get(info.id);\r\n\r\n                        if (!entity || entity.id === self.game.player.id)\r\n                            return;\r\n\r\n                        self.entities.removeEntity(entity);\r\n\r\n                        break;\r\n                }\r\n\r\n                self.map.updateCollisions();\r\n                self.entities.grids.resetPathingGrid();\r\n\r\n                self.renderer.forceRendering = true;\r\n                self.renderer.updateAnimatedTiles();\r\n\r\n            });\r\n\r\n            self.messages.onOverlay(function(opcode, info) {\r\n\r\n                switch(opcode) {\r\n                    case Packets.OverlayOpcode.Set:\r\n\r\n                        self.overlays.updateOverlay(info.image);\r\n\r\n                        if (!self.renderer.transitioning)\r\n                            self.renderer.updateDarkMask(info.colour);\r\n                        else\r\n                            self.queueColour = info.colour;\r\n\r\n                        break;\r\n\r\n                    case Packets.OverlayOpcode.Remove:\r\n\r\n                        self.renderer.removeAllLights();\r\n                        self.overlays.currentOverlay = null;\r\n\r\n                        break;\r\n\r\n                    case Packets.OverlayOpcode.Lamp:\r\n\r\n                        self.renderer.addLight(info.x, info.y, info.distance, info.diffuse, 'rgba(0,0,0,0.4)', true);\r\n\r\n                        break;\r\n\r\n                    case Packets.OverlayOpcode.RemoveLamps:\r\n\r\n                        self.renderer.removeAllLights();\r\n\r\n                        break;\r\n\r\n                    case Packets.OverlayOpcode.Darkness:\r\n\r\n                        self.renderer.updateDarkMask(info.colour);\r\n\r\n                        break;\r\n\r\n                }\r\n\r\n            });\r\n\r\n            self.messages.onCamera(function(opcode, info) {\r\n\r\n                if (self.game.player.x === 0 || self.game.player.y === 0) {\r\n                    self.socket.send(Packets.Camera);\r\n                    return;\r\n                }\r\n\r\n                if (!self.renderer.camera.centered)\r\n                    return;\r\n\r\n                self.renderer.camera.forceCentre(self.game.player);\r\n                self.renderer.forceRendering = true;\r\n\r\n                switch(opcode) {\r\n                    case Packets.CameraOpcode.LockX:\r\n                        self.renderer.camera.lockX = true;\r\n                        break;\r\n\r\n                    case Packets.CameraOpcode.LockY:\r\n                        self.renderer.camera.lockY = true;\r\n                        break;\r\n\r\n                    case Packets.CameraOpcode.FreeFlow:\r\n                        self.renderer.removeNonRelativeLights();\r\n\r\n                        self.renderer.camera.lockX = false;\r\n                        self.renderer.camera.lockY = false;\r\n                        break;\r\n\r\n                    case Packets.CameraOpcode.Player:\r\n                        var middle = self.renderer.getMiddle();\r\n\r\n                        self.renderer.removeAllLights();\r\n                        self.renderer.addLight(middle.x, middle.y, 160, 0.8, 'rgba(0,0,0,0.3)', false);\r\n\r\n                        break;\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/network/connection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "Kaetram-Open/client/js/network/messages.js",
    "content": "/* global log, _, Packets */\r\n\r\ndefine(function() {\r\n\r\n\r\n    return Class.extend({\r\n\r\n        /**\r\n         * Do not clutter up the Socket class with callbacks,\r\n         * have this class here until a better method arises in my head.\r\n         *\r\n         * This class should not have any complex functionality, its main\r\n         * role is to provide organization for packets and increase readability\r\n         *\r\n         * Please respect the order of the Packets Enum and arrange functions\r\n         * accordingly.\r\n         */\r\n\r\n        init: function(app) {\r\n            var self = this;\r\n\r\n            self.app = app;\r\n\r\n            self.messages = [];\r\n\r\n            self.messages[Packets.Handshake] = self.receiveHandshake;\r\n            self.messages[Packets.Welcome] = self.receiveWelcome;\r\n            self.messages[Packets.Spawn] = self.receiveSpawn;\r\n            self.messages[Packets.Equipment] = self.receiveEquipment;\r\n            self.messages[Packets.List] = self.receiveEntityList;\r\n            self.messages[Packets.Sync] = self.receiveSync;\r\n            self.messages[Packets.Movement] = self.receiveMovement;\r\n            self.messages[Packets.Teleport] = self.receiveTeleport;\r\n            self.messages[Packets.Despawn] = self.receiveDespawn;\r\n            self.messages[Packets.Combat] = self.receiveCombat;\r\n            self.messages[Packets.Animation] = self.receiveAnimation;\r\n            self.messages[Packets.Projectile] = self.receiveProjectile;\r\n            self.messages[Packets.Population] = self.receivePopulation;\r\n            self.messages[Packets.Points] = self.receivePoints;\r\n            self.messages[Packets.Network] = self.receiveNetwork;\r\n            self.messages[Packets.Chat] = self.receiveChat;\r\n            self.messages[Packets.Command] = self.receiveCommand;\r\n            self.messages[Packets.Inventory] = self.receiveInventory;\r\n            self.messages[Packets.Bank] = self.receiveBank;\r\n            self.messages[Packets.Ability] = self.receiveAbility;\r\n            self.messages[Packets.Quest] = self.receiveQuest;\r\n            self.messages[Packets.Notification] = self.receiveNotification;\r\n            self.messages[Packets.Blink] = self.receiveBlink;\r\n            self.messages[Packets.Heal] = self.receiveHeal;\r\n            self.messages[Packets.Experience] = self.receiveExperience;\r\n            self.messages[Packets.Death] = self.receiveDeath;\r\n            self.messages[Packets.Audio] = self.receiveAudio;\r\n            self.messages[Packets.NPC] = self.receiveNPC;\r\n            self.messages[Packets.Respawn] = self.receiveRespawn;\r\n            self.messages[Packets.Enchant] = self.receiveEnchant;\r\n            self.messages[Packets.Guild] = self.receiveGuild;\r\n            self.messages[Packets.Pointer] = self.receivePointer;\r\n            self.messages[Packets.PVP] = self.receivePVP;\r\n            self.messages[Packets.Shop] = self.receiveShop;\r\n            self.messages[Packets.Minigame] = self.receiveMinigame;\r\n            self.messages[Packets.Region] = self.receiveRegion;\r\n            self.messages[Packets.Overlay] = self.receiveOverlay;\r\n            self.messages[Packets.Camera] = self.receiveCamera;\r\n\r\n        },\r\n\r\n        handleData: function(data) {\r\n            var self = this,\r\n                packet = data.shift();\r\n\r\n            if (self.messages[packet] && _.isFunction(self.messages[packet]))\r\n                self.messages[packet].call(self, data);\r\n        },\r\n\r\n        handleBulkData: function(data) {\r\n            var self = this;\r\n\r\n            _.each(data, function(message) {\r\n                self.handleData(message);\r\n            });\r\n        },\r\n\r\n        handleUTF8: function(message) {\r\n            var self = this;\r\n\r\n            self.app.toggleLogin(false);\r\n\r\n            switch (message) {\r\n\r\n                case 'updated':\r\n                    self.app.sendError(null, 'The client has been updated!');\r\n                    break;\r\n\r\n                case 'full':\r\n                    self.app.sendError(null, 'The servers are currently full!');\r\n                    break;\r\n\r\n                case 'error':\r\n                    self.app.sendError(null, 'The server has responded with an error!');\r\n                    break;\r\n\r\n                case 'development':\r\n                    self.app.sendError(null, 'The game is currently in development mode.');\r\n                    break;\r\n\r\n                case 'disallowed':\r\n                    self.app.sendError(null, 'The server is currently not accepting connections!');\r\n                    break;\r\n\r\n                case 'maintenance':\r\n                    self.app.sendError(null, 'Kaetram is currently under maintenance.');\r\n                    break;\r\n\r\n                case 'userexists':\r\n                    self.app.sendError(null, 'The username you have chosen already exists.');\r\n                    break;\r\n\r\n                case 'emailexists':\r\n                    self.app.sendError(null, 'The email you have chosen is not available.');\r\n                    break;\r\n\r\n                case 'loggedin':\r\n                    self.app.sendError(null, 'The player is already logged in!');\r\n                    break;\r\n\r\n                case 'invalidlogin':\r\n                    self.app.sendError(null, 'You have entered the wrong username or password.');\r\n                    break;\r\n\r\n                case 'toofast':\r\n                    self.app.sendError(null, 'You are trying to log in too fast from the same connection.');\r\n                    break;\r\n\r\n                case 'malform':\r\n\r\n                    self.app.game.handleDisconnection(true);\r\n                    self.app.sendError(null, 'Client has experienced a malfunction.');\r\n\r\n                    break;\r\n\r\n                case 'timeout':\r\n\r\n                    self.app.sendError(null, 'You have been disconnected for being inactive for too long.');\r\n\r\n                    break;\r\n\r\n                default:\r\n                    self.app.sendError(null, 'An unknown error has occurred, please refer to the forums.');\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Data Receivers\r\n         */\r\n\r\n        receiveHandshake: function(data) {\r\n            var self = this,\r\n                info = data.shift();\r\n\r\n            if (self.handshakeCallback)\r\n                self.handshakeCallback(info);\r\n        },\r\n\r\n        receiveWelcome: function(data) {\r\n            var self = this,\r\n                playerData = data.shift();\r\n\r\n            if (self.welcomeCallback)\r\n                self.welcomeCallback(playerData);\r\n        },\r\n\r\n        receiveSpawn: function(data) {\r\n            var self = this;\r\n\r\n            if (self.spawnCallback)\r\n                self.spawnCallback(data);\r\n        },\r\n\r\n        receiveEquipment: function(data) {\r\n            var self = this,\r\n                equipType = data.shift(),\r\n                equipInfo = data.shift();\r\n\r\n            if (self.equipmentCallback)\r\n                self.equipmentCallback(equipType, equipInfo);\r\n        },\r\n\r\n        receiveEntityList: function(data) {\r\n            var self = this;\r\n\r\n            if (self.entityListCallback)\r\n                self.entityListCallback(data);\r\n        },\r\n\r\n        receiveSync: function(data) {\r\n            var self = this;\r\n\r\n            if (self.syncCallback)\r\n                self.syncCallback(data.shift());\r\n        },\r\n\r\n        receiveMovement: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.movementCallback)\r\n                self.movementCallback(opcode, info);\r\n        },\r\n\r\n        receiveTeleport: function(data) {\r\n            var self = this,\r\n                info = data.shift();\r\n\r\n            if (self.teleportCallback)\r\n                self.teleportCallback(info);\r\n        },\r\n\r\n        receiveDespawn: function(data) {\r\n            var self = this,\r\n                id = data.shift();\r\n\r\n            if (self.despawnCallback)\r\n                self.despawnCallback(id);\r\n        },\r\n\r\n        receiveCombat: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.combatCallback)\r\n                self.combatCallback(opcode, info);\r\n        },\r\n\r\n        receiveAnimation: function(data) {\r\n            var self = this,\r\n                id = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.animationCallback)\r\n                self.animationCallback(id, info);\r\n        },\r\n\r\n        receiveProjectile: function(data) {\r\n            var self = this,\r\n                type = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.projectileCallback)\r\n                self.projectileCallback(type, info);\r\n        },\r\n\r\n        receivePopulation: function(data) {\r\n            var self = this;\r\n\r\n            if (self.populationCallback)\r\n                self.populationCallback(data.shift());\r\n        },\r\n\r\n        receivePoints: function(data) {\r\n            var self = this,\r\n                pointsData = data.shift();\r\n\r\n            if (self.pointsCallback)\r\n                self.pointsCallback(pointsData);\r\n        },\r\n\r\n        receiveNetwork: function(data) {\r\n            var self = this,\r\n                opcode = data.shift();\r\n\r\n            if (self.networkCallback)\r\n                self.networkCallback(opcode);\r\n        },\r\n\r\n        receiveChat: function(data) {\r\n            var self = this,\r\n                info = data.shift();\r\n\r\n            if (self.chatCallback)\r\n                self.chatCallback(info);\r\n        },\r\n\r\n        receiveCommand: function(data) {\r\n            var self = this,\r\n                info = data.shift();\r\n\r\n            if (self.commandCallback)\r\n                self.commandCallback(info);\r\n        },\r\n\r\n        receiveInventory: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.inventoryCallback)\r\n                self.inventoryCallback(opcode, info);\r\n        },\r\n\r\n        receiveBank: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.bankCallback)\r\n                self.bankCallback(opcode, info);\r\n        },\r\n\r\n        receiveAbility: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.abilityCallback)\r\n                self.abilityCallback(opcode, info);\r\n        },\r\n\r\n        receiveQuest: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.questCallback)\r\n                self.questCallback(opcode, info);\r\n        },\r\n\r\n        receiveNotification: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                message = data.shift();\r\n\r\n            if (self.notificationCallback)\r\n                self.notificationCallback(opcode, message);\r\n        },\r\n\r\n        receiveBlink: function(data) {\r\n            var self = this,\r\n                instance = data.shift();\r\n\r\n            if (self.blinkCallback)\r\n                self.blinkCallback(instance);\r\n        },\r\n\r\n        receiveHeal: function(data) {\r\n            var self = this;\r\n\r\n            if (self.healCallback)\r\n                self.healCallback(data.shift());\r\n        },\r\n\r\n        receiveExperience: function(data) {\r\n            var self = this;\r\n\r\n            if (self.experienceCallback)\r\n                self.experienceCallback(data.shift());\r\n        },\r\n\r\n        receiveDeath: function(data) {\r\n            var self = this;\r\n\r\n            if (self.deathCallback)\r\n                self.deathCallback(data.shift());\r\n        },\r\n\r\n        receiveAudio: function(data) {\r\n            var self = this;\r\n\r\n            if (self.audioCallback)\r\n                self.audioCallback(data.shift());\r\n        },\r\n\r\n        receiveNPC: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.npcCallback)\r\n                self.npcCallback(opcode, info);\r\n        },\r\n\r\n        receiveRespawn: function(data) {\r\n            var self = this,\r\n                id = data.shift(),\r\n                x = data.shift(),\r\n                y = data.shift();\r\n\r\n            if (self.respawnCallback)\r\n                self.respawnCallback(id, x, y);\r\n        },\r\n\r\n        receiveEnchant: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.enchantCallback)\r\n                self.enchantCallback(opcode, info);\r\n        },\r\n\r\n        receiveGuild: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.guildCallback)\r\n                self.guildCallback(opcode, info);\r\n        },\r\n\r\n        receivePointer: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.pointerCallback)\r\n                self.pointerCallback(opcode, info);\r\n        },\r\n\r\n        receivePVP: function(data) {\r\n            var self = this,\r\n                id = data.shift(),\r\n                pvp = data.shift();\r\n\r\n            if (self.pvpCallback)\r\n                self.pvpCallback(id, pvp);\r\n        },\r\n\r\n        receiveShop: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.shopCallback)\r\n                self.shopCallback(opcode, info);\r\n        },\r\n\r\n        receiveMinigame: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.minigameCallback)\r\n                self.minigameCallback(opcode, info);\r\n        },\r\n\r\n        receiveRegion: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift(),\r\n                force = data.shift();\r\n\r\n            if (self.regionCallback)\r\n                self.regionCallback(opcode, info, force);\r\n        },\r\n\r\n        receiveOverlay: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.overlayCallback)\r\n                self.overlayCallback(opcode, info);\r\n        },\r\n\r\n        receiveCamera: function(data) {\r\n            var self = this,\r\n                opcode = data.shift(),\r\n                info = data.shift();\r\n\r\n            if (self.cameraCallback)\r\n                self.cameraCallback(opcode, info);\r\n        },\r\n\r\n        /**\r\n         * Universal Callbacks\r\n         */\r\n\r\n        onHandshake: function(callback) {\r\n            this.handshakeCallback = callback;\r\n        },\r\n\r\n        onWelcome: function(callback) {\r\n            this.welcomeCallback = callback;\r\n        },\r\n\r\n        onSpawn: function(callback) {\r\n            this.spawnCallback = callback;\r\n        },\r\n\r\n        onEquipment: function(callback) {\r\n            this.equipmentCallback = callback;\r\n        },\r\n\r\n        onEntityList: function(callback) {\r\n            this.entityListCallback = callback;\r\n        },\r\n\r\n        onSync: function(callback) {\r\n            this.syncCallback = callback;\r\n        },\r\n\r\n        onMovement: function(callback) {\r\n            this.movementCallback = callback;\r\n        },\r\n\r\n        onTeleport: function(callback) {\r\n            this.teleportCallback = callback;\r\n        },\r\n\r\n        onDespawn: function(callback) {\r\n            this.despawnCallback = callback;\r\n        },\r\n\r\n        onCombat: function(callback) {\r\n            this.combatCallback = callback;\r\n        },\r\n\r\n        onAnimation: function(callback) {\r\n            this.animationCallback = callback;\r\n        },\r\n\r\n        onProjectile: function(callback) {\r\n            this.projectileCallback = callback;\r\n        },\r\n\r\n        onPopulation: function(callback) {\r\n            this.populationCallback = callback;\r\n        },\r\n\r\n        onPoints: function(callback) {\r\n            this.pointsCallback = callback;\r\n        },\r\n\r\n        onNetwork: function(callback) {\r\n            this.networkCallback = callback;\r\n        },\r\n\r\n        onChat: function(callback) {\r\n            this.chatCallback = callback;\r\n        },\r\n\r\n        onCommand: function(callback) {\r\n            this.commandCallback = callback;\r\n        },\r\n\r\n        onInventory: function(callback) {\r\n            this.inventoryCallback = callback;\r\n        },\r\n\r\n        onBank: function(callback) {\r\n            this.bankCallback = callback;\r\n        },\r\n\r\n        onAbility: function(callback) {\r\n            this.abilityCallback = callback;\r\n        },\r\n\r\n        onQuest: function(callback) {\r\n            this.questCallback = callback;\r\n        },\r\n\r\n        onNotification: function(callback) {\r\n            this.notificationCallback = callback;\r\n        },\r\n\r\n        onBlink: function(callback) {\r\n            this.blinkCallback = callback;\r\n        },\r\n\r\n        onHeal: function(callback) {\r\n            this.healCallback = callback;\r\n        },\r\n\r\n        onExperience: function(callback) {\r\n            this.experienceCallback = callback;\r\n        },\r\n\r\n        onDeath: function(callback) {\r\n            this.deathCallback = callback;\r\n        },\r\n\r\n        onAudio: function(callback) {\r\n            this.audioCallback = callback;\r\n        },\r\n\r\n        onNPC: function(callback) {\r\n            this.npcCallback = callback;\r\n        },\r\n\r\n        onRespawn: function(callback) {\r\n            this.respawnCallback = callback;\r\n        },\r\n\r\n        onEnchant: function(callback) {\r\n            this.enchantCallback = callback;\r\n        },\r\n\r\n        onGuild: function(callback) {\r\n            this.guildCallback = callback;\r\n        },\r\n\r\n        onPointer: function(callback) {\r\n            this.pointerCallback = callback;\r\n        },\r\n\r\n        onPVP: function(callback) {\r\n            this.pvpCallback = callback;\r\n        },\r\n\r\n        onShop: function(callback) {\r\n            this.shopCallback = callback;\r\n        },\r\n\r\n        onMinigame: function(callback) {\r\n            this.minigameCallback = callback;\r\n        },\r\n\r\n        onRegion: function(callback) {\r\n            this.regionCallback = callback\r\n        },\r\n\r\n        onOverlay: function(callback) {\r\n            this.overlayCallback = callback;\r\n        },\r\n\r\n        onCamera: function(callback) {\r\n            this.cameraCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/network/messages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "Kaetram-Open/client/js/network/packets.js",
    "content": "Packets = {\r\n    Handshake: 0,\r\n    Intro: 1,\r\n    Welcome: 2,\r\n    Spawn: 3,\r\n    List: 4,\r\n    Who: 5,\r\n    Equipment: 6,\r\n    Ready: 7,\r\n    Sync: 8,\r\n    Movement: 9,\r\n    Teleport: 10,\r\n    Request: 11,\r\n    Despawn: 12,\r\n    Target: 13,\r\n    Combat: 14,\r\n    Animation: 15,\r\n    Projectile: 16,\r\n    Population: 17,\r\n    Points: 18,\r\n    Network: 19,\r\n    Chat: 20,\r\n    Command: 21,\r\n    Inventory: 22,\r\n    Bank: 23,\r\n    Ability: 24,\r\n    Quest: 25,\r\n    Notification: 26,\r\n    Blink: 27,\r\n    Heal: 28,\r\n    Experience: 29,\r\n    Death: 30,\r\n    Audio: 31,\r\n    NPC: 32,\r\n    Respawn: 33,\r\n    Trade: 34,\r\n    Enchant: 35,\r\n    Guild: 36,\r\n    Pointer: 37,\r\n    PVP: 38,\r\n    Click: 39,\r\n    Warp: 40,\r\n    Shop: 41,\r\n    Minigame: 42,\r\n    Region: 43,\r\n    Overlay: 44,\r\n    Camera: 45\r\n};\r\n\r\nPackets.IntroOpcode = {\r\n    Login: 0,\r\n    Register: 1,\r\n    Guest: 2\r\n};\r\n\r\nPackets.EquipmentOpcode = {\r\n    Batch: 0,\r\n    Equip: 1,\r\n    Unequip: 2\r\n};\r\n\r\nPackets.MovementOpcode = {\r\n    Request: 0,\r\n    Started: 1,\r\n    Step: 2,\r\n    Stop: 3,\r\n    Move: 4,\r\n    Orientate: 5,\r\n    Follow: 6,\r\n    Entity: 7,\r\n    Freeze: 8,\r\n    Stunned: 9\r\n};\r\n\r\nPackets.TargetOpcode = {\r\n    Talk: 0,\r\n    Attack: 1,\r\n    None: 2\r\n};\r\n\r\nPackets.CombatOpcode = {\r\n    Initiate: 0,\r\n    Hit: 1,\r\n    Finish: 2,\r\n    Sync: 3\r\n};\r\n\r\nPackets.ProjectileOpcode = {\r\n    Static: 0,\r\n    Dynamic: 1,\r\n    Create: 2,\r\n    Update: 3,\r\n    Impact: 4\r\n};\r\n\r\nPackets.NetworkOpcode = {\r\n    Ping: 0,\r\n    Pong: 1\r\n};\r\n\r\nPackets.InventoryOpcode = {\r\n    Batch: 0,\r\n    Add: 1,\r\n    Remove: 2,\r\n    Select: 3\r\n};\r\n\r\nPackets.BankOpcode = {\r\n    Batch: 0,\r\n    Add: 1,\r\n    Remove: 2,\r\n    Select: 3\r\n};\r\n\r\nPackets.QuestOpcode = {\r\n    QuestBatch: 0,\r\n    AchievementBatch: 1,\r\n    Progress: 2,\r\n    Finish: 3\r\n};\r\n\r\nPackets.NotificationOpcode = {\r\n    Ok: 0,\r\n    YesNo: 1,\r\n    Text: 2\r\n};\r\n\r\nPackets.NPCOpcode = {\r\n    Talk: 0,\r\n    Store: 1,\r\n    Bank: 2,\r\n    Enchant: 3,\r\n    Countdown: 4\r\n};\r\n\r\nPackets.TradeOpcode = {\r\n    Request: 1,\r\n    Accept: 2,\r\n    Decline: 3\r\n};\r\n\r\nPackets.EnchantOpcode = {\r\n    Select: 0,\r\n    Remove: 1,\r\n    Enchant: 2,\r\n    Update: 3\r\n};\r\n\r\nPackets.GuildOpcode = {\r\n    Create: 0,\r\n    Join: 1,\r\n    Leave: 2,\r\n    Rank: 3,\r\n    Loot: 4\r\n};\r\n\r\nPackets.PointerOpcode = {\r\n    Location: 0,\r\n    NPC: 1,\r\n    Relative: 2,\r\n    Remove: 3,\r\n    Button: 4\r\n};\r\n\r\nPackets.ShopOpcode = {\r\n    Open: 0,\r\n    Buy: 1,\r\n    Sell: 2,\r\n    Refresh: 3\r\n};\r\n\r\nPackets.MinigameOpcode = {\r\n    TeamWar: 1,\r\n\r\n    TeamWarOpcode: {\r\n        Enter: 0,\r\n        Team: 1,\r\n        Red: 2,\r\n        Blue: 3,\r\n        Leave: 4\r\n    }\r\n};\r\n\r\nPackets.RegionOpcode  = {\r\n    Render: 0,\r\n    Modify: 1,\r\n    Collision: 2,\r\n    Update: 3,\r\n    Reset: 4\r\n};\r\n\r\nPackets.OverlayOpcode = {\r\n    Set: 0,\r\n    Remove: 1,\r\n    Lamp: 2,\r\n    RemoveLamps: 3,\r\n    Darkness: 4\r\n};\r\n\r\nPackets.CameraOpcode = {\r\n    LockX: 0,\r\n    LockY: 1,\r\n    FreeFlow: 2,\r\n    Player: 3\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/network/packets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "Kaetram-Open/client/js/network/socket.js",
    "content": "/* global log */\r\n\r\ndefine(['./packets', './messages'], function(Packets, Messages) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.config = self.game.app.config;\r\n            self.connection = null;\r\n\r\n            self.listening = false;\r\n\r\n            self.disconnected = false;\r\n\r\n            self.messages = new Messages(self.game.app);\r\n        },\r\n\r\n        connect: function() {\r\n            var self = this, url;\r\n\r\n            if (self.config.ssl)\r\n                url = 'wss://' + self.config.ip;\r\n            else\r\n                url = 'ws://' + self.config.ip + ':' + self.config.port;\r\n\r\n            self.connection = null;\r\n\r\n            self.connection = io(url, {\r\n                forceNew: true,\r\n                reconnection: false\r\n            });\r\n\r\n            self.connection.on('connect_error', function() {\r\n                log.info('Failed to connect to: ' + self.config.ip);\r\n\r\n                self.listening = false;\r\n\r\n                self.game.app.toggleLogin(false);\r\n\r\n                if (self.game.isDebug())\r\n                    self.game.app.sendError(null, 'Couldn\\'t connect to ' + self.config.ip + ':' + self.config.port);\r\n                else\r\n                    self.game.app.sendError(null, 'Could not connect to the game server.');\r\n            });\r\n\r\n            self.connection.on('connect', function() {\r\n                self.listening = true;\r\n\r\n\t\t        log.info('Connection established...');\r\n\r\n                self.game.app.updateLoader('Preparing Handshake');\r\n\r\n                self.connection.emit('client', {\r\n                    gVer: self.config.version,\r\n                    cType: 'HTML5'\r\n                });\r\n            });\r\n\r\n            self.connection.on('message', function(message) {\r\n                var actualMessage = message.message ? message.message : message;\r\n\r\n                self.receive(actualMessage);\r\n            });\r\n\r\n            self.connection.on('disconnect', function() {\r\n                self.game.handleDisconnection();\r\n            });\r\n        },\r\n\r\n        receive: function(message) {\r\n            var self = this;\r\n\r\n            if (!self.listening)\r\n                return;\r\n\r\n            if (message.startsWith('[')) {\r\n                var data = JSON.parse(message);\r\n\r\n                if (data.length > 1)\r\n                    self.messages.handleBulkData(data);\r\n                else\r\n                    self.messages.handleData(JSON.parse(message).shift());\r\n\r\n            } else\r\n                self.messages.handleUTF8(message);\r\n\r\n        },\r\n\r\n        send: function(packet, data) {\r\n            var self = this,\r\n                json = JSON.stringify([packet, data]);\r\n\r\n            if (self.connection && self.connection.connected)\r\n                self.connection.send(json);\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/network/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/bubbles/blob.js",
    "content": "define(['../../utils/timer'], function(Timer) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(id, element, duration) {\r\n            var self = this;\r\n\r\n            self.id = id;\r\n            self.element = element;\r\n            self.duration = duration || 5000;\r\n\r\n            self.time = new Date().getTime();\r\n            self.timer = new Timer(self.time, self.duration);\r\n        },\r\n\r\n        isOver: function(time) {\r\n            return this.timer.isOver(time);\r\n        },\r\n\r\n        reset: function(time) {\r\n            this.timer.time = time;\r\n        },\r\n\r\n        destroy: function() {\r\n            $(this.element).remove();\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/bubbles/blob.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/camera.js",
    "content": "/* global Modules, log */\r\n\r\ndefine(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(renderer) {\r\n            var self = this;\r\n\r\n            self.renderer = renderer;\r\n            self.map = renderer.map;\r\n            self.app = renderer.game.app;\r\n\r\n            self.offset = 0.5;\r\n            self.x = 0;\r\n            self.y = 0;\r\n\r\n            self.dX = 0;\r\n            self.dY = 0;\r\n\r\n            self.gridX = 0;\r\n            self.gridY = 0;\r\n\r\n            self.prevGridX = 0;\r\n            self.prevGridY = 0;\r\n\r\n            self.tileSize = self.renderer.tileSize;\r\n\r\n            self.speed = 1;\r\n            self.panning = false;\r\n            self.centered = true;\r\n            self.player = null;\r\n\r\n            self.lockX = false;\r\n            self.lockY = false;\r\n\r\n            self.update();\r\n        },\r\n\r\n        update: function() {\r\n            var self = this,\r\n                scale = self.renderer.getScale(),\r\n                borderWidth = self.app.border.width(),\r\n                borderHeight = self.app.border.height(),\r\n                factorWidth = Math.ceil(borderWidth / self.tileSize / scale),\r\n                factorHeight = Math.ceil(borderHeight / self.tileSize / scale);\r\n\r\n            self.gridWidth = factorWidth;\r\n            self.gridHeight = factorHeight;\r\n\r\n            self.borderX = (self.map.width * self.tileSize) - self.gridWidth * self.tileSize;\r\n            self.borderY = (self.map.height * self.tileSize) - self.gridHeight * self.tileSize;\r\n        },\r\n\r\n        setPosition: function(x, y) {\r\n            var self = this;\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n\r\n            self.prevGridX = self.gridX;\r\n            self.prevGridY = self.gridY;\r\n\r\n            self.gridX = Math.floor(x / 16);\r\n            self.gridY = Math.floor(y / 16);\r\n        },\r\n\r\n        clip: function() {\r\n            this.setGridPosition(Math.round(this.x / 16), Math.round(this.y / 16));\r\n        },\r\n\r\n        center: function() {\r\n            var self = this;\r\n\r\n            if (self.centered)\r\n                return;\r\n\r\n            self.centered = true;\r\n            self.centreOn(self.player);\r\n\r\n            self.renderer.verifyCentration();\r\n        },\r\n\r\n        decenter: function() {\r\n            var self = this;\r\n\r\n            if (!self.centered)\r\n                return;\r\n\r\n            self.clip();\r\n            self.centered = false;\r\n\r\n            self.renderer.verifyCentration();\r\n        },\r\n\r\n        setGridPosition: function(x, y) {\r\n            var self = this;\r\n\r\n            self.prevGridX = self.gridX;\r\n            self.prevGridY = self.gridY;\r\n\r\n            self.gridX = x;\r\n            self.gridY = y;\r\n\r\n            self.x = self.gridX * 16;\r\n            self.y = self.gridY * 16;\r\n        },\r\n\r\n        setPlayer: function(player) {\r\n            var self = this;\r\n\r\n            self.player = player;\r\n\r\n\r\n            self.centreOn(self.player);\r\n        },\r\n\r\n        handlePanning: function(direction) {\r\n            var self = this;\r\n\r\n            if (!self.panning)\r\n                return;\r\n\r\n            switch (direction) {\r\n                case Modules.Keys.Up:\r\n                    self.setPosition(self.x, self.y - 1);\r\n                    break;\r\n\r\n                case Modules.Keys.Down:\r\n                    self.setPosition(self.x, self.y + 1);\r\n                    break;\r\n\r\n                case Modules.Keys.Left:\r\n                    self.setPosition(self.x - 1, self.y);\r\n                    break;\r\n\r\n                case Modules.Keys.Right:\r\n                    self.setPosition(self.x + 1, self.y);\r\n                    break;\r\n            }\r\n        },\r\n\r\n        centreOn: function(entity) {\r\n            var self = this;\r\n\r\n            if (!entity)\r\n                return;\r\n\r\n            var width = Math.floor(self.gridWidth / 2),\r\n                height = Math.floor(self.gridHeight / 2),\r\n                nextX = entity.x - (width * self.tileSize),\r\n                nextY = entity.y - (height * self.tileSize);\r\n\r\n            if (nextX >= 0 && nextX <= self.borderX && !self.lockX) {\r\n                self.x = nextX;\r\n                self.gridX = Math.round(entity.x / 16) - width;\r\n            } else\r\n                self.offsetX(nextX);\r\n\r\n            if (nextY >= 0 && nextY <= self.borderY && !self.lockY) {\r\n                self.y = nextY;\r\n                self.gridY = Math.round(entity.y / 16) - height;\r\n            } else\r\n                self.offsetY(nextY);\r\n\r\n        },\r\n\r\n        forceCentre: function(entity) {\r\n            var self = this;\r\n\r\n            if (!entity)\r\n                return;\r\n\r\n            var width = Math.floor(self.gridWidth / 2),\r\n                height = Math.floor(self.gridHeight / 2);\r\n\r\n            self.x = entity.x - (width * self.tileSize);\r\n            self.gridX = Math.round(entity.x / 16) - width;\r\n\r\n            self.y = entity.y - (height * self.tileSize);\r\n            self.gridY = Math.round(entity.y / 16) - height;\r\n        },\r\n\r\n        offsetX: function(nextX) {\r\n            var self = this;\r\n\r\n            if (nextX <= 16) {\r\n                self.x = 0;\r\n                self.gridX = 0;\r\n            } else if (nextX >= self.borderX) {\r\n                self.x = self.borderX;\r\n                self.gridX = Math.round(self.borderX / 16);\r\n            }\r\n        },\r\n\r\n        offsetY: function(nextY) {\r\n            var self = this;\r\n\r\n            if (nextY <= 16) {\r\n                self.y = 0;\r\n                self.gridY = 0;\r\n            } else if (nextY >= self.borderY) {\r\n                self.y = self.borderY;\r\n                self.gridY = Math.round(self.borderY / 16);\r\n            }\r\n        },\r\n\r\n        zone: function(direction) {\r\n            var self = this;\r\n\r\n            switch (direction) {\r\n                case Modules.Orientation.Up:\r\n\r\n                    self.setGridPosition(self.gridX, self.gridY - self.gridHeight + 2);\r\n\r\n                    break;\r\n\r\n                case Modules.Orientation.Down:\r\n\r\n                    self.setGridPosition(self.gridX, self.gridY + self.gridHeight - 2);\r\n\r\n                    break;\r\n\r\n                case Modules.Orientation.Right:\r\n\r\n                    self.setGridPosition(self.gridX + self.gridWidth - 2, self.gridY);\r\n\r\n                    break;\r\n\r\n                case Modules.Orientation.Left:\r\n\r\n                    self.setGridPosition(self.gridX - self.gridWidth + 2, self.gridY);\r\n\r\n                    break;\r\n            }\r\n        },\r\n\r\n        forEachVisiblePosition: function(callback, offset) {\r\n            var self = this;\r\n\r\n            if (!offset)\r\n                offset = 1;\r\n\r\n            for(var y = self.gridY - offset, maxY = y + self.gridHeight + (offset * 2); y < maxY; y++)\r\n                for(var x = self.gridX - offset, maxX = x + self.gridWidth + (offset * 2); x < maxX; x++)\r\n                    callback(x, y);\r\n        }\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/camera.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/grids.js",
    "content": "/* global log */\r\n\r\ndefine(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(map) {\r\n            var self = this;\r\n\r\n            self.map = map;\r\n\r\n            self.renderingGrid = [];\r\n            self.pathingGrid = [];\r\n            self.entityGrid = [];\r\n            self.itemGrid = [];\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            for (var i = 0; i < self.map.height; i++) {\r\n                self.renderingGrid[i] = [];\r\n                self.pathingGrid[i] = [];\r\n                self.entityGrid[i] = [];\r\n                self.itemGrid[i] = [];\r\n\r\n                for (var j = 0; j < self.map.width; j++) {\r\n                    self.renderingGrid[i][j] = {};\r\n                    self.pathingGrid[i][j] = self.map.grid[i][j];\r\n                    self.entityGrid[i][j] = {};\r\n                    self.itemGrid[i][j] = {};\r\n                }\r\n            }\r\n\r\n            if (self.map.game.isDebug())\r\n                log.info('Finished generating grids.');\r\n        },\r\n\r\n        checkPathingGrid: function(player, xRadius, yRadius) {\r\n            var self = this;\r\n\r\n            for (var y = player.gridY - yRadius; y < player.gridY + yRadius; y++)\r\n                for (var x = player.gridX - xRadius; x < player.gridX + xRadius; x++)\r\n                    if (!self.map.isColliding(x, y) && _.size(self.entityGrid[y][x] === 0))\r\n                        self.removeFromPathingGrid(x, y);\r\n        },\r\n\r\n        resetPathingGrid: function() {\r\n            var self = this;\r\n\r\n            self.pathingGrid = [];\r\n\r\n            for (var i = 0; i < self.map.height; i++) {\r\n                self.pathingGrid[i] = [];\r\n\r\n                for (var j = 0; j < self.map.width; j++)\r\n                    self.pathingGrid[i][j] = self.map.grid[i][j];\r\n\r\n            }\r\n        },\r\n\r\n        addToRenderingGrid: function(entity, x, y) {\r\n            var self = this;\r\n\r\n            if (!self.map.isOutOfBounds(x, y))\r\n                self.renderingGrid[y][x][entity.id] = entity;\r\n        },\r\n\r\n        addToPathingGrid: function(x, y) {\r\n            this.pathingGrid[y][x] = 1;\r\n        },\r\n\r\n        addToEntityGrid: function(entity, x, y) {\r\n            var self = this;\r\n\r\n            if (entity && self.entityGrid[y][x])\r\n                self.entityGrid[y][x][entity.id] = entity;\r\n        },\r\n\r\n        addToItemGrid: function(item, x, y) {\r\n            var self = this;\r\n\r\n            if (item && self.itemGrid[y][x])\r\n                self.itemGrid[y][x][item.id] = item;\r\n        },\r\n\r\n        removeFromRenderingGrid: function(entity, x, y) {\r\n            var self = this;\r\n\r\n            if (entity && self.renderingGrid[y][x] && entity.id in self.renderingGrid[y][x])\r\n                delete self.renderingGrid[y][x][entity.id];\r\n        },\r\n\r\n        removeFromPathingGrid: function(x, y) {\r\n            this.pathingGrid[y][x] = 0;\r\n        },\r\n\r\n        removeFromMapGrid: function(x, y) {\r\n            this.map.grid[y][x] = 0;\r\n        },\r\n\r\n        removeFromEntityGrid: function(entity, x, y) {\r\n            var self = this;\r\n\r\n            if (entity && self.entityGrid[y][x] && entity.id in self.entityGrid[y][x])\r\n                delete self.entityGrid[y][x][entity.id];\r\n        },\r\n\r\n        removeFromItemGrid: function(item, x, y) {\r\n            var self = this;\r\n\r\n            if (item && self.itemGrid[y][x][item.id])\r\n                delete self.itemGrid[y][x][item.id];\r\n        },\r\n\r\n        removeEntity: function(entity) {\r\n            var self = this;\r\n\r\n            if (entity) {\r\n                self.removeFromEntityGrid(entity, entity.gridX, entity.gridY);\r\n                self.removeFromPathingGrid(entity.gridX, entity.gridY);\r\n                self.removeFromRenderingGrid(entity, entity.gridX, entity.gridY);\r\n\r\n                if (entity.nextGridX > -1 && entity.nextGridY > -1) {\r\n                    self.removeFromEntityGrid(entity, entity.nextGridX, entity.nextGridY);\r\n                    self.removeFromPathingGrid(entity.nextGridX, entity.nextGridY);\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/grids.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/infos/splat.js",
    "content": "/* global Modules */\r\n\r\ndefine(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(id, type, text, x, y, statique) {\r\n            var self = this;\r\n\r\n            self.id = id;\r\n            self.type = type;\r\n            self.text = text;\r\n            self.x = x;\r\n            self.y = y;\r\n\r\n            self.statique = statique;\r\n\r\n            self.opacity = 1.0;\r\n            self.lastTime = 0;\r\n            self.speed = 100;\r\n\r\n            self.duration = 1000;\r\n        },\r\n\r\n        setColours: function(fill, stroke) {\r\n            this.fill = fill;\r\n            this.stroke = stroke;\r\n        },\r\n\r\n        setDuration: function(duration) {\r\n            this.duration = duration;\r\n        },\r\n\r\n        tick: function() {\r\n            var self = this;\r\n\r\n            if (!self.statique)\r\n                self.y -= 1;\r\n\r\n            self.opacity -= 70 / self.duration;\r\n\r\n            if (self.opacity < 0)\r\n                self.destroy();\r\n        },\r\n\r\n        update: function(time) {\r\n            var self = this;\r\n\r\n            if (time - self.lastTime > self.speed) {\r\n                self.lastTime = time;\r\n                self.tick();\r\n            }\r\n        },\r\n\r\n        destroy: function() {\r\n            var self = this;\r\n\r\n            if (self.destroyCallback)\r\n                self.destroyCallback(self.id);\r\n        },\r\n\r\n        onDestroy: function(callback) {\r\n            this.destroyCallback = callback;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/infos/splat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/overlay.js",
    "content": "/* global log */\r\n\r\ndefine(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n\r\n            self.overlays = {};\r\n            self.currentOverlay = null;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.overlays['fog.png'] = self.loadOverlay('fog.png');\r\n        },\r\n\r\n        loadOverlay: function(overlayName) {\r\n            var self = this,\r\n                overlay = new Image();\r\n\r\n            overlay.crossOrigin = 'Anonymous';\r\n            overlay.src = 'img/overlays/' + overlayName;\r\n\r\n            overlay.onload = function() {\r\n                if (self.game.isDebug())\r\n                    log.info('Loaded ' + overlayName);\r\n            };\r\n\r\n            return overlay;\r\n        },\r\n\r\n        updateOverlay(overlay) {\r\n            var self = this;\r\n\r\n            if (overlay in self.overlays)\r\n                self.currentOverlay = self.overlays[overlay];\r\n            else\r\n                self.currentOverlay = overlay;\r\n        },\r\n\r\n        getFog: function() {\r\n            return this.currentOverlay;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/overlay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/pointers/pointer.js",
    "content": "define(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(id, element, type) {\r\n            var self = this;\r\n\r\n            self.id = id;\r\n            self.element = element;\r\n            self.type = type;\r\n\r\n            self.blinkInterval = null;\r\n            self.visible = true;\r\n\r\n            self.x = -1;\r\n            self.y = -1;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.blinkInterval = setInterval(function() {\r\n                if (self.visible)\r\n                    self.hide();\r\n                else\r\n                    self.show();\r\n\r\n                self.visible = !self.visible;\r\n            }, 600);\r\n        },\r\n\r\n        destroy: function() {\r\n            var self = this;\r\n\r\n            clearInterval(self.blinkInterval);\r\n\r\n            if (self.type === Modules.Pointers.Button)\r\n                self.hide();\r\n            else\r\n                self.element.remove();\r\n        },\r\n\r\n        setPosition: function(x, y) {\r\n            var self = this;\r\n\r\n            self.x = x;\r\n            self.y = y;\r\n        },\r\n\r\n        show: function() {\r\n            if (this.type === Modules.Pointers.Button)\r\n                this.element.addClass('active');\r\n            else\r\n                this.element.css('display', 'block');\r\n        },\r\n\r\n        hide: function() {\r\n            if (this.type === Modules.Pointers.Button)\r\n                this.element.removeClass('active');\r\n            else\r\n                this.element.css('display', 'none');\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/pointers/pointer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/renderer.js",
    "content": "/* global _, m4, log, Detect */\r\n\r\nvar DarkMask = illuminated.DarkMask,\r\n    Lamp = illuminated.Lamp,\r\n    Lighting = illuminated.Lighting,\r\n    Vec2 = illuminated.Vec2;\r\n\r\ndefine(['jquery', './camera', './tile',\r\n    '../entity/character/player/player', '../entity/character/character',\r\n    '../entity/objects/item'], function($, Camera, Tile, Player, Character, Item) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(background, entities, foreground, overlay, textCanvas, cursor, game) {\r\n            var self = this;\r\n\r\n            self.canvas = document.getElementById('canvas');\r\n            self.background = background;\r\n            self.entities = entities;\r\n            self.foreground = foreground;\r\n            self.overlay = overlay;\r\n            self.textCanvas = textCanvas;\r\n            self.cursor = cursor;\r\n\r\n            self.context = self.entities.getContext('2d');\r\n            self.backContext = self.background.getContext('2d');\r\n            self.foreContext = self.foreground.getContext('2d');\r\n            self.overlayContext = self.overlay.getContext('2d');\r\n            self.textContext = self.textCanvas.getContext('2d');\r\n            self.cursorContext = self.cursor.getContext('2d');\r\n\r\n            self.contexts = [self.context, self.backContext, self.foreContext];\r\n            self.canvases = [self.background, self.entities, self.foreground, self.overlay, self.textCanvas, self.cursor];\r\n\r\n            self.allContexts = [self.context, self.backContext, self.foreContext, self.overlayContext,\r\n                self.textContext, self.cursorContext];\r\n\r\n            self.context.imageSmoothingEnabled = false;\r\n            self.backContext.imageSmoothingEnabled = false;\r\n            self.foreContext.imageSmoothingEnabled = false;\r\n            self.overlayContext.imageSmoothingEnabled = false;\r\n            self.textContext.imageSmoothingEnabled = false;\r\n            self.cursorContext.imageSmoothingEnabled = false;\r\n\r\n            self.lightings = [];\r\n            self.textures = {};\r\n\r\n            self.game = game;\r\n            self.camera = null;\r\n            self.entities = null;\r\n            self.input = null;\r\n\r\n            self.checkDevice();\r\n\r\n            self.tileSize = 16;\r\n            self.fontSize = 10;\r\n\r\n            self.screenWidth = 0;\r\n            self.screenHeight = 0;\r\n\r\n            self.time = new Date();\r\n\r\n            self.fps = 0;\r\n            self.frameCount = 0;\r\n            self.renderedFrame = [0, 0];\r\n            self.lastTarget = [0, 0];\r\n\r\n            self.animatedTiles = {};\r\n            self.drawnTiles = [];\r\n\r\n            self.resizeTimeout = null;\r\n            self.autoCentre = false;\r\n\r\n            self.drawTarget = false;\r\n            self.selectedCellVisible = false;\r\n\r\n            self.stopRendering = false;\r\n            self.animateTiles = true;\r\n            self.debugging = false;\r\n            self.brightness = 100;\r\n            self.drawNames = true;\r\n            self.drawLevels = true;\r\n            self.forceRendering = false;\r\n\r\n            self.load();\r\n        },\r\n\r\n        stop: function() {\r\n            var self = this;\r\n\r\n            self.camera = null;\r\n            self.input = null;\r\n            self.stopRendering = true;\r\n\r\n            self.forEachContext(function(context) {\r\n                context.fillStyle = '#12100D';\r\n                context.fillRect(0, 0, context.canvas.width, context.canvas.height);\r\n            })\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            self.scale = self.getScale();\r\n            self.superScaling = self.getSuperScaling();\r\n\r\n            self.loadLights();\r\n            self.handleScaling();\r\n        },\r\n\r\n        removeSmoothing: function() {\r\n            var self = this;\r\n\r\n            self.forAllContexts(function(context) {\r\n                context.imageSmoothingQuality = 'low';\r\n\r\n                context.imageSmoothingEnabled = false;\r\n                context.webkitImageSmoothingEnabled = false;\r\n                context.mozImageSmoothingEnabled = false;\r\n                context.msImageSmoothingEnabled = false;\r\n                context.oImageSmoothingEnabled = false;\r\n            });\r\n        },\r\n\r\n        loadSizes: function() {\r\n            var self = this;\r\n\r\n            if (!self.camera)\r\n                return;\r\n\r\n            self.lightTileSize = self.tileSize * self.superScaling;\r\n\r\n            self.screenWidth = self.camera.gridWidth * self.tileSize;\r\n            self.screenHeight = self.camera.gridHeight * self.tileSize;\r\n\r\n            self.canvasWidth = self.screenWidth * self.superScaling;\r\n            self.canvasHeight = self.screenHeight * self.superScaling;\r\n\r\n            self.forEachCanvas(function(canvas) {\r\n                canvas.width = self.canvasWidth;\r\n                canvas.height = self.canvasHeight;\r\n            });\r\n        },\r\n\r\n        loadCamera: function() {\r\n            var self = this,\r\n                storage = self.game.storage;\r\n\r\n            self.camera = new Camera(this);\r\n\r\n            self.loadSizes();\r\n\r\n            if (storage.data.new && (self.firefox || parseFloat(Detect.androidVersion()) < 6.0 || parseFloat(Detect.iOSVersion() < 9.0) || Detect.isIpad())) {\r\n                self.camera.centered = false;\r\n\r\n                storage.data.settings.centerCamera = false;\r\n                storage.save();\r\n            }\r\n        },\r\n\r\n        loadLights: function() {\r\n            var self = this;\r\n\r\n            self.darkMask = new DarkMask({\r\n                lights: [],\r\n                color: 'rgba(0, 0, 0, 0.84)'\r\n            });\r\n\r\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\r\n        },\r\n\r\n        resize: function() {\r\n            var self = this;\r\n\r\n            self.stopRendering = true;\r\n\r\n            self.clearAll();\r\n\r\n            self.checkDevice();\r\n\r\n            if (!self.resizeTimeout)\r\n                self.resizeTimeout = setTimeout(function() {\r\n\r\n                    self.scale = self.getScale();\r\n                    self.clearScreen(self.cursorContext);\r\n\r\n                    if (self.camera)\r\n                        self.camera.update();\r\n\r\n                    self.loadSizes();\r\n\r\n                    if (self.entities)\r\n                        self.entities.update();\r\n\r\n                    if (self.camera)\r\n                        self.camera.centreOn(self.game.player);\r\n\r\n                    if (self.game.interface)\r\n                        self.game.interface.resize();\r\n\r\n                    self.stopRendering = false;\r\n                    self.resizeTimeout = null;\r\n\r\n                    self.updateAnimatedTiles();\r\n\r\n                }, 500);\r\n        },\r\n\r\n        render: function() {\r\n            var self = this;\r\n\r\n            if (self.stopRendering)\r\n                return;\r\n\r\n            self.clear();\r\n\r\n            self.clearText();\r\n\r\n            self.saveAll();\r\n\r\n            self.removeSmoothing();\r\n\r\n            /**\r\n             * Rendering related draws\r\n             */\r\n\r\n            self.draw();\r\n\r\n            self.drawOverlays();\r\n\r\n            self.drawTargetCell();\r\n\r\n            self.drawSelectedCell();\r\n\r\n            self.drawEntities();\r\n\r\n            self.drawInfos();\r\n\r\n            self.drawDebugging();\r\n\r\n            self.drawCursor();\r\n\r\n            self.calculateFPS();\r\n\r\n            self.restoreAll();\r\n\r\n        },\r\n\r\n        /**\r\n         * Context Drawing\r\n         */\r\n\r\n        draw: function() {\r\n            var self = this;\r\n\r\n            self.updateDrawingView();\r\n\r\n            self.forEachVisibleTile(function(id, index) {\r\n                var isHighTile = self.map.isHighTile(id),\r\n                    isLightTile = self.map.isLightTile(id),\r\n                    context = isLightTile ? self.overlayContext :\r\n                        (isHighTile ? self.foreContext : self.backContext);\r\n\r\n                if (!self.map.isAnimatedTile(id) || !self.animateTiles)\r\n                    self.drawTile(context, id, self.map.width, index);\r\n            });\r\n\r\n            if (self.animateTiles)\r\n                self.forEachAnimatedTile(function(tile) {\r\n                    self.drawTile(self.backContext, tile.id, self.map.width, tile.index);\r\n                    tile.loaded = true;\r\n                });\r\n\r\n        },\r\n\r\n        drawOverlays: function() {\r\n            var self = this,\r\n                overlay = self.game.overlays.getFog();\r\n\r\n            if (overlay) {\r\n                self.overlayContext.save();\r\n\r\n                if (overlay !== 'empty') {\r\n\r\n                    self.overlayContext.fillStyle = self.overlayContext.createPattern(overlay, 'repeat');\r\n                    self.overlayContext.fillRect(0, 0, self.screenWidth * self.superScaling, self.screenHeight * self.superScaling);\r\n                    self.overlayContext.fill();\r\n                }\r\n\r\n                self.overlayContext.globalCompositeOperation = 'lighter';\r\n\r\n                self.forEachLighting(function(lighting) {\r\n                    if (self.inRadius(lighting))\r\n                        self.drawLighting(lighting);\r\n                });\r\n\r\n                self.overlayContext.globalCompositeOperation = 'source-over';\r\n                self.darkMask.render(self.overlayContext);\r\n\r\n                self.overlayContext.restore();\r\n            }\r\n        },\r\n\r\n        drawInfos: function() {\r\n            var self = this;\r\n\r\n            if (self.game.info.getCount() === 0)\r\n                return;\r\n\r\n            self.game.info.forEachInfo(function(info) {\r\n                self.textContext.save();\r\n                self.textContext.font = '20px AdvoCut';\r\n                self.setCameraView(self.textContext);\r\n                self.textContext.globalAlpha = info.opacity;\r\n                self.drawText('' + info.text, Math.floor((info.x + 8)), Math.floor(info.y), true, info.fill, info.stroke);\r\n                self.textContext.restore();\r\n            });\r\n        },\r\n\r\n        drawDebugging: function() {\r\n            var self = this;\r\n\r\n            if (!self.debugging)\r\n                return;\r\n\r\n            self.drawFPS();\r\n\r\n            if (!self.mobile) {\r\n                self.drawPosition();\r\n                self.drawCollisions();\r\n            }\r\n\r\n            self.drawPathing();\r\n        },\r\n\r\n        drawEntities: function() {\r\n            var self = this;\r\n\r\n            self.forEachVisibleEntity(function(entity) {\r\n                if (entity.spriteLoaded)\r\n                    self.drawEntity(entity);\r\n            });\r\n        },\r\n\r\n        drawEntity: function(entity) {\r\n            var self = this,\r\n                sprite = entity.sprite,\r\n                animation = entity.currentAnimation,\r\n                data = entity.renderingData;\r\n\r\n            if (!sprite || !animation || !entity.isVisible())\r\n                return;\r\n\r\n            var frame = animation.currentFrame,\r\n                x = frame.x * self.superScaling,\r\n                y = frame.y * self.superScaling,\r\n                dx = entity.x * self.superScaling,\r\n                dy = entity.y * self.superScaling,\r\n                flipX = dx + self.tileSize * self.superScaling,\r\n                flipY = dy + data.height;\r\n\r\n            self.context.save();\r\n            self.setCameraView(self.context);\r\n\r\n            if (entity.id !== self.game.player.id)\r\n                self.context.globalCompositeOperation = 'destination-over';\r\n\r\n            if (data.sprite !== sprite) {\r\n\r\n                data.sprite = sprite;\r\n\r\n                data.width = sprite.width * self.superScaling;\r\n                data.height = sprite.height * self.superScaling;\r\n                data.ox = sprite.offsetX * self.superScaling;\r\n                data.oy = sprite.offsetY * self.superScaling;\r\n\r\n                if (entity.angled)\r\n                    data.angle = entity.angle * Math.PI / 180;\r\n\r\n                if (entity.hasShadow()) {\r\n                    data.shadowWidth = self.shadowSprite.width * self.superScaling;\r\n                    data.shadowHeight = self.shadowSprite.height * self.superScaling;\r\n\r\n                    data.shadowOffsetY = entity.shadowOffsetY * self.superScaling;\r\n                }\r\n\r\n            }\r\n\r\n            if (entity.fading)\r\n                self.context.globalAlpha = entity.fadingAlpha;\r\n\r\n            if (entity.spriteFlipX) {\r\n                self.context.translate(flipX, dy);\r\n                self.context.scale(-1, 1);\r\n            } else if (entity.spriteFlipY) {\r\n                self.context.translate(dx, flipY);\r\n                self.context.scale(1, -1);\r\n            } else\r\n                self.context.translate(dx, dy);\r\n\r\n            if (entity.angled)\r\n                self.context.rotate(data.angle);\r\n\r\n            if (entity.hasShadow()) {\r\n                self.context.globalCompositeOperation = 'source-over';\r\n\r\n                self.context.drawImage(self.shadowSprite.image, 0, 0, data.shadowWidth, data.shadowHeight,\r\n                    0, data.shadowOffsetY, data.shadowWidth, data.shadowHeight);\r\n            }\r\n\r\n            self.drawEntityBack(entity);\r\n\r\n            self.context.drawImage(sprite.image, x, y, data.width, data.height, data.ox, data.oy, data.width, data.height);\r\n\r\n            self.drawEntityFore(entity);\r\n\r\n            self.context.restore();\r\n\r\n            self.drawHealth(entity);\r\n\r\n            if (!self.game.overlays.getFog())\r\n                self.drawName(entity);\r\n        },\r\n\r\n        drawEntityBack: function(entity) {\r\n            var self = this;\r\n\r\n            /**\r\n             * Function used to draw special effects prior\r\n             * to rendering the entity.\r\n             */\r\n\r\n        },\r\n\r\n        drawEntityFore: function(entity) {\r\n            var self = this;\r\n\r\n            /**\r\n             * Function used to draw special effects after\r\n             * having rendererd the entity\r\n             */\r\n\r\n             if (entity instanceof Character && !entity.dead && !entity.teleporting) {\r\n                 if (entity.hasWeapon()) {\r\n                     var weapon = self.entities.getSprite(entity.weapon.getString());\r\n\r\n                     if (weapon) {\r\n                         if (!weapon.loaded)\r\n                             weapon.load();\r\n\r\n                         var animation = entity.currentAnimation,\r\n                             weaponAnimationData = weapon.animationData[animation.name],\r\n                             frame = entity.currentAnimation.currentFrame,\r\n                             index = frame.index < weaponAnimationData.length ? frame.index : frame.index % weaponAnimationData.length,\r\n                             weaponX = weapon.width * index * self.superScaling,\r\n                             weaponY = weapon.height * animation.row * self.superScaling,\r\n                             weaponWidth = weapon.width * self.superScaling,\r\n                             weaponHeight = weapon.height * self.superScaling;\r\n\r\n                         self.context.drawImage(weapon.image, weaponX, weaponY, weaponWidth, weaponHeight,\r\n                             weapon.offsetX * self.superScaling, weapon.offsetY * self.superScaling,\r\n                             weaponWidth, weaponHeight);\r\n                     }\r\n                 }\r\n\r\n                 if (entity.terror || entity.stunned || entity.critical || entity.explosion) {\r\n                     var sprite = self.entities.getSprite(entity.getActiveEffect());\r\n\r\n                     if (!sprite.loaded)\r\n                         sprite.load();\r\n\r\n                     if (sprite) {\r\n                         var animation = entity.getEffectAnimation(),\r\n                             index = animation.currentFrame.index,\r\n                             x = sprite.width * index * self.superScaling,\r\n                             y = sprite.height * animation.row * self.superScaling,\r\n                             width = sprite.width * self.superScaling,\r\n                             height = sprite.height * self.superScaling,\r\n                             offsetX = sprite.offsetX * self.superScaling,\r\n                             offsetY = sprite.offsetY * self.superScaling;\r\n\r\n                         self.context.drawImage(sprite.image, x, y, width, height, offsetX, offsetY, width, height);\r\n                     }\r\n                 }\r\n\r\n             }\r\n\r\n            if (entity instanceof Item) {\r\n\r\n                var sparksAnimation = self.entities.sprites.sparksAnimation,\r\n                    sparksFrame = sparksAnimation.currentFrame,\r\n                    sparksX = self.sparksSprite.width * sparksFrame.index * self.superScaling,\r\n                    sparksY = self.sparksSprite.height * sparksAnimation.row * self.superScaling,\r\n                    sparksWidth = self.sparksSprite.width * self.superScaling,\r\n                    sparksHeight = self.sparksSprite.height * self.superScaling;\r\n\r\n                self.context.drawImage(self.sparksSprite.image, sparksX, sparksY, sparksWidth, sparksHeight,\r\n                    0, 0, sparksWidth, sparksHeight);\r\n            }\r\n\r\n\r\n        },\r\n\r\n        drawHealth: function(entity) {\r\n            var self = this;\r\n\r\n            if (!entity.hitPoints || entity.hitPoints < 0 || !entity.healthBarVisible)\r\n                return;\r\n\r\n            var barLength = 16,\r\n                healthX = entity.x * self.superScaling - barLength / 2 + 8,\r\n                healthY = (entity.y - 9) * self.superScaling,\r\n                healthWidth = Math.round(entity.hitPoints / entity.maxHitPoints * barLength * self.superScaling),\r\n                healthHeight = 2 * self.superScaling;\r\n\r\n            self.context.save();\r\n            self.setCameraView(self.context);\r\n            self.context.strokeStyle = '#00000';\r\n            self.context.lineWidth = 1;\r\n            self.context.strokeRect(healthX, healthY, barLength * self.superScaling, healthHeight);\r\n            self.context.fillStyle = '#FD0000';\r\n            self.context.fillRect(healthX, healthY, healthWidth, healthHeight);\r\n            self.context.restore();\r\n        },\r\n\r\n        drawName: function(entity) {\r\n            var self = this;\r\n\r\n            if (entity.hidden || (!self.drawNames && !self.drawLevels))\r\n                return;\r\n\r\n            var colour = entity.wanted ? 'red' : 'white';\r\n\r\n            if (entity.rights > 1)\r\n                colour = '#ba1414';\r\n            else if (entity.rights > 0)\r\n                colour = '#a59a9a';\r\n\r\n            if (entity.id === self.game.player.id)\r\n                colour = '#fcda5c';\r\n\r\n            self.textContext.save();\r\n            self.setCameraView(self.textContext);\r\n            self.textContext.font = '11px AdvoCut';\r\n\r\n            if (entity.drawNames()) {\r\n                if (!entity.hasCounter) {\r\n\r\n                    if (self.drawNames && (entity.type === 'mob' || entity.type === 'player'))\r\n                        self.drawText(entity.type === 'player' ? entity.username : entity.name, (entity.x + 8), (entity.y - (self.drawLevels ? 20 : 10)), true, colour, '#000');\r\n\r\n                    if (self.drawLevels && (entity.type === 'mob' || entity.type === 'player'))\r\n                        self.drawText('Level ' + entity.level, (entity.x + 8), (entity.y - (entity.type === 'player' ? 12 : 10)), true, colour, '#000');\r\n\r\n                    if (entity.type === 'item' && entity.count > 1)\r\n                        self.drawText(entity.count, (entity.x + 8), (entity.y - 10), true, colour);\r\n\r\n                } else {\r\n\r\n                    if (self.game.time - entity.countdownTime > 1000) {\r\n                        entity.countdownTime = self.game.time;\r\n                        entity.counter--;\r\n                    }\r\n\r\n                    if (entity.counter <= 0)\r\n                        entity.hasCounter = false;\r\n\r\n                    self.drawText(entity.counter, (entity.x + 8), (entity.y - 10), true, colour);\r\n                }\r\n            }\r\n\r\n            self.textContext.restore();\r\n        },\r\n\r\n        drawLighting: function(lighting) {\r\n            var self = this;\r\n\r\n            if (lighting.relative) {\r\n                var lightX = (lighting.light.origX - (self.camera.x / 16)) * self.lightTileSize,\r\n                    lightY = (lighting.light.origY - (self.camera.y / 16)) * self.lightTileSize;\r\n\r\n                lighting.light.position = new Vec2(lightX, lightY);\r\n                lighting.compute(self.overlay.width, self.overlay.height);\r\n                self.darkMask.compute(self.overlay.width, self.overlay.height);\r\n            } else if (!lighting.computed) {\r\n                lighting.compute(self.overlay.width, self.overlay.height);\r\n                lighting.computed = true;\r\n            }\r\n\r\n            lighting.render(self.overlayContext);\r\n        },\r\n\r\n        drawCursor: function() {\r\n            var self = this;\r\n\r\n            if (self.tablet || self.mobile || self.hasRenderedMouse() || self.input.cursorMoved)\r\n                return;\r\n\r\n            var cursor = self.input.cursor,\r\n                scaling = 14 * self.superScaling;\r\n\r\n            self.clearScreen(self.cursorContext);\r\n            self.cursorContext.save();\r\n\r\n            if (cursor && self.scale > 1) {\r\n                if (!cursor.loaded)\r\n                    cursor.load();\r\n\r\n                if (cursor.loaded)\r\n                    self.cursorContext.drawImage(cursor.image, 0, 0, scaling, scaling,\r\n                        self.input.mouse.x, self.input.mouse.y,\r\n                        scaling, scaling);\r\n            }\r\n\r\n            self.cursorContext.restore();\r\n\r\n            self.saveMouse();\r\n        },\r\n\r\n        calculateFPS: function() {\r\n            var self = this;\r\n\r\n            if (!self.debugging)\r\n                return;\r\n\r\n            var currentTime = new Date(),\r\n                timeDiff = currentTime - self.time;\r\n\r\n            if (timeDiff >= 1000) {\r\n                self.realFPS = self.frameCount;\r\n                self.frameCount = 0;\r\n                self.time = currentTime;\r\n                self.fps = self.realFPS;\r\n            }\r\n\r\n            self.frameCount++;\r\n        },\r\n\r\n        drawFPS: function() {\r\n            this.drawText('FPS: ' + this.realFPS, 10, 11, false, 'white');\r\n        },\r\n\r\n        drawPosition: function() {\r\n            var self = this,\r\n                player = self.game.player;\r\n\r\n            self.drawText('x: ' + player.gridX + ' y: ' + player.gridY, 10, 31, false, 'white');\r\n            self.drawText('x: ' + self.input.getCoords().x + ' y: ' + self.input.getCoords().y + ' instance: ' + self.input.hoveringInstance, 10, 51, false, 'white');\r\n        },\r\n\r\n        drawCollisions: function() {\r\n            var self = this,\r\n                pathingGrid = self.entities.grids.pathingGrid;\r\n\r\n            if (!pathingGrid)\r\n                return;\r\n\r\n            self.camera.forEachVisiblePosition(function(x, y) {\r\n                if (x < 0 || y < 0 || x > self.map.width - 1 || y > self.map.height - 1)\r\n                    return;\r\n\r\n                if (pathingGrid[y][x] !== 0)\r\n                    self.drawCellHighlight(x, y, 'rgba(50, 50, 255, 0.5)');\r\n            });\r\n        },\r\n\r\n        drawPathing: function() {\r\n            var self = this;\r\n\r\n            if (!self.game.player.hasPath())\r\n                return;\r\n\r\n            _.each(self.game.player.path, function(path) {\r\n                self.drawCellHighlight(path[0], path[1], 'rgba(50, 255, 50, 0.5)');\r\n            });\r\n\r\n        },\r\n\r\n        drawSelectedCell: function() {\r\n            var self = this;\r\n\r\n            if (!self.input.selectedCellVisible || self.input.keyMovement)\r\n                return;\r\n\r\n            var posX = self.input.selectedX,\r\n                posY = self.input.selectedY,\r\n                tD = self.input.getTargetData(); // target data\r\n\r\n            if (tD) {\r\n                self.context.save();\r\n                self.setCameraView(self.context);\r\n\r\n                self.context.drawImage(tD.sprite.image, tD.x, tD.y, tD.width, tD.height, tD.dx, tD.dy, tD.dw, tD.dh);\r\n\r\n                self.context.restore();\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * Primitive drawing functions\r\n         */\r\n\r\n        drawTile: function(context, tileId, gridWidth, cellId) {\r\n            var self = this;\r\n\r\n            if (tileId < 0)\r\n                return;\r\n\r\n            var tileset = self.map.getTilesetFromId(tileId);\r\n\r\n            if (!tileset)\r\n                return;\r\n\r\n            tileId -= tileset.firstGID - 1;\r\n\r\n            var setWidth = tileset.width / self.tileSize / tileset.scale;\r\n\r\n            self.drawScaledImage(context, tileset,\r\n                self.getX(tileId + 1, setWidth) * self.tileSize,\r\n                Math.floor(tileId / setWidth) * self.tileSize,\r\n                self.tileSize, self.tileSize,\r\n                self.getX(cellId + 1, gridWidth) * self.tileSize,\r\n                Math.floor(cellId / gridWidth) * self.tileSize);\r\n        },\r\n\r\n        drawScaledImage: function(context, image, x, y, width, height, dx, dy) {\r\n            var self = this,\r\n                tilesetScale = image.scale,\r\n                scale = self.superScaling;\r\n\r\n            if (!context)\r\n                return;\r\n\r\n            context.drawImage(image,\r\n                x * tilesetScale, // Source X\r\n                y * tilesetScale, // Source Y\r\n                width * tilesetScale, // Source Width\r\n                height * tilesetScale, // Source Height\r\n                dx * scale, // Destination X\r\n                dy * scale, // Destination Y\r\n                width * scale, // Destination Width\r\n                height * scale); // Destination Height\r\n        },\r\n\r\n        drawText: function(text, x, y, centered, colour, strokeColour) {\r\n            var self = this,\r\n                strokeSize = 1,\r\n                context = self.textContext;\r\n\r\n            if (self.scale > 2)\r\n                strokeSize = 3;\r\n\r\n            if (text && x && y) {\r\n                context.save();\r\n\r\n                if (centered)\r\n                    context.textAlign = 'center';\r\n\r\n                context.strokeStyle = strokeColour || '#373737';\r\n                context.lineWidth = strokeSize;\r\n                context.strokeText(text, x * self.superScaling, y * self.superScaling);\r\n                context.fillStyle = colour || 'white';\r\n                context.fillText(text, x * self.superScaling, y * self.superScaling);\r\n\r\n                context.restore()\r\n            }\r\n        },\r\n\r\n        updateAnimatedTiles: function() {\r\n            var self = this;\r\n\r\n            if (!self.animateTiles)\r\n                return;\r\n\r\n            self.forEachVisibleTile(function(id, index) {\r\n                /**\r\n                 * We don't want to reinitialize animated tiles that already exist\r\n                 * and are within the visible camera proportions. This way we can parse\r\n                 * it every time the tile moves slightly.\r\n                 */\r\n\r\n                if (!self.map.isAnimatedTile(id))\r\n                    return;\r\n\r\n                /**\r\n                 * Push the pre-existing tiles.\r\n                 */\r\n\r\n                 if (!(index in self.animatedTiles)) {\r\n                     var tile = new Tile(id, index, self.map),\r\n                        position = self.map.indexToGridPosition(tile.index);\r\n\r\n                    tile.setPosition(position);\r\n\r\n                    self.animatedTiles[index] = tile;\r\n                 }\r\n\r\n            }, 2);\r\n\r\n        },\r\n\r\n        drawCellRect: function(x, y, colour) {\r\n            var self = this,\r\n                multiplier = self.tileSize * self.superScaling;\r\n\r\n            self.context.save();\r\n            self.setCameraView(self.context);\r\n\r\n            self.context.lineWidth = 2 * self.superScaling;\r\n\r\n            self.context.translate(x + 2, y + 2);\r\n\r\n            self.context.strokeStyle = colour;\r\n            self.context.strokeRect(0, 0, multiplier - 4, multiplier - 4);\r\n\r\n            self.context.restore();\r\n        },\r\n\r\n        drawCellHighlight: function(x, y, colour) {\r\n            var self = this;\r\n\r\n            self.drawCellRect(x * self.superScaling * self.tileSize, y * self.superScaling * self.tileSize, colour);\r\n        },\r\n\r\n        drawTargetCell: function() {\r\n            var self = this;\r\n\r\n            if (self.mobile || self.tablet || !self.input.targetVisible || !self.input || !self.camera || !self.map || self.input.keyMovement)\r\n                return;\r\n\r\n            var location = self.input.getCoords();\r\n\r\n            if (!(location.x === self.input.selectedX && location.y === self.input.selectedY)) {\r\n                var isColliding = self.map.isColliding(location.x, location.y);\r\n\r\n                self.drawCellHighlight(location.x, location.y, isColliding ? 'rgba(230, 0, 0, 0.7)' : self.input.targetColour);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Primordial Rendering functions\r\n         */\r\n\r\n        forEachVisibleIndex: function(callback, offset) {\r\n            var self = this;\r\n\r\n            self.camera.forEachVisiblePosition(function(x, y) {\r\n                if (!self.map.isOutOfBounds(x, y))\r\n                    callback(self.map.gridPositionToIndex(x, y) - 1);\r\n            }, offset);\r\n        },\r\n\r\n        forEachVisibleTile: function(callback, offset) {\r\n            var self = this;\r\n\r\n            if (!self.map || !self.map.mapLoaded)\r\n                return;\r\n\r\n            self.forEachVisibleIndex(function(index) {\r\n                var indexData = self.map.data[index];\r\n\r\n                if (Array.isArray(indexData))\r\n                    _.each(indexData, function(id) { callback(id - 1, index) });\r\n                else if (!(isNaN(self.map.data[index] - 1)))\r\n                    callback(self.map.data[index] - 1, index);\r\n\r\n            }, offset);\r\n        },\r\n\r\n        forEachAnimatedTile: function(callback) {\r\n            _.each(this.animatedTiles, function(tile) {\r\n                callback(tile);\r\n            });\r\n        },\r\n\r\n        forEachVisibleEntity: function(callback) {\r\n            var self = this;\r\n\r\n            if (!self.entities || !self.camera)\r\n                return;\r\n\r\n            var grids = self.entities.grids;\r\n\r\n            self.camera.forEachVisiblePosition(function(x, y) {\r\n                if (!self.map.isOutOfBounds(x, y) && grids.renderingGrid[y][x])\r\n                    _.each(grids.renderingGrid[y][x], function(entity) {\r\n                        callback(entity);\r\n                    });\r\n            });\r\n        },\r\n\r\n        isVisiblePosition: function(x, y) {\r\n            return y >= this.camera.gridY && y < this.camera.gridY + this.camera.gridHeight &&\r\n                x >= this.camera.gridX && x < this.camera.gridX + this.camera.gridWidth\r\n        },\r\n\r\n        getScale: function() {\r\n            return this.game.getScaleFactor();\r\n        },\r\n\r\n        getSuperScaling: function() {\r\n            return 2;\r\n        },\r\n\r\n        clearContext: function() {\r\n            this.context.clearRect(0, 0, this.screenWidth * this.scale, this.screenHeight * this.scale);\r\n        },\r\n\r\n        clearText: function() {\r\n            this.textContext.clearRect(0, 0, this.textCanvas.width, this.textCanvas.height);\r\n            this.overlayContext.clearRect(0, 0, this.overlay.width, this.overlay.height);\r\n        },\r\n\r\n        restore: function() {\r\n            this.forEachContext(function(context) {\r\n                context.restore();\r\n            });\r\n        },\r\n\r\n        clearAll: function() {\r\n            this.forEachContext(function(context) {\r\n                context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n            });\r\n        },\r\n\r\n        clear: function() {\r\n            this.forEachContext(function(context) {\r\n                context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n            });\r\n        },\r\n\r\n        handleScaling: function() {\r\n            var self = this;\r\n\r\n            /**\r\n             * Using scale factors to zoom canvas may\r\n             * have some adverse performance effects.\r\n             * This is a temporary solution.\r\n             * Eventually, we will have to scale the sprites\r\n             * to 1.5 times their current size to obtain\r\n             * the same effect, with no performance hit. //hopefully\r\n             */\r\n\r\n            self.canvas.style.transformOrigin = '0 0';\r\n            self.canvas.style.transform = 'scale(1.5)';\r\n        },\r\n\r\n        saveAll: function() {\r\n            this.forEachContext(function(context) {\r\n                context.save();\r\n            });\r\n        },\r\n\r\n        restoreAll: function() {\r\n            this.forEachContext(function(context) {\r\n                context.restore();\r\n            });\r\n        },\r\n\r\n        isIntersecting: function(rectOne, rectTwo) {\r\n            return (rectTwo.left > rectOne.right || rectTwo.right < rectOne.left || rectTwo.top > rectOne.bottom || rectTwo.bottom < rectOne.top);\r\n        },\r\n\r\n        focus: function() {\r\n            this.forEachContext(function(context) {\r\n                context.focus();\r\n            });\r\n        },\r\n\r\n        transition: function(duration, forward, callback) {\r\n            var self = this,\r\n                textCanvas = $('#textCanvas'),\r\n                hasThreshold = function() {\r\n                    return forward ? self.brightness > 99 : self.brightness < 1;\r\n                };\r\n\r\n            self.transitioning = true;\r\n\r\n            self.transitionInterval = setInterval(function() {\r\n                self.brightness += forward ? 6 : -6;\r\n\r\n                textCanvas.css('background', 'rgba(0,0,0,' + (1 - (self.brightness / 100)) + ')');\r\n\r\n                if (hasThreshold()) {\r\n                    clearInterval(self.transitionInterval);\r\n                    self.transitionInterval = null;\r\n\r\n                    self.transitioning = false;\r\n\r\n                    callback();\r\n                }\r\n            }, duration);\r\n\r\n        },\r\n\r\n\r\n        /**\r\n         * Rendering Functions\r\n         */\r\n\r\n        updateView: function() {\r\n            var self = this;\r\n\r\n            self.forEachContext(function(context) {\r\n                self.setCameraView(context);\r\n            });\r\n        },\r\n\r\n        updateDrawingView: function() {\r\n            var self = this;\r\n\r\n            self.forEachDrawingContext(function(context) {\r\n                self.setCameraView(context);\r\n            });\r\n        },\r\n\r\n        setCameraView: function(context) {\r\n            var self = this;\r\n\r\n            if (!self.camera || self.stopRendering)\r\n                return;\r\n\r\n            context.translate(-self.camera.x * self.superScaling, -self.camera.y * self.superScaling);\r\n        },\r\n\r\n        clearScreen: function(context) {\r\n            context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n        },\r\n\r\n        hasRenderedMouse: function() {\r\n            return this.input.lastMousePosition.x === this.input.mouse.x && this.input.lastMousePosition.y === this.input.mouse.y;\r\n        },\r\n\r\n        saveMouse: function() {\r\n            var self = this;\r\n\r\n            self.input.lastMousePosition.x = self.input.mouse.x;\r\n            self.input.lastMousePosition.y = self.input.mouse.y;\r\n        },\r\n\r\n        adjustBrightness: function(level) {\r\n            var self = this;\r\n\r\n            if (level < 0 || level > 100)\r\n                return;\r\n\r\n            $('#textCanvas').css('background', 'rgba(0, 0, 0, ' + (0.5 - level / 200) + ')');\r\n        },\r\n\r\n        loadStaticSprites: function() {\r\n            var self = this;\r\n\r\n            self.shadowSprite = self.entities.getSprite('shadow16');\r\n\r\n            if (!self.shadowSprite.loaded)\r\n                self.shadowSprite.load();\r\n\r\n            self.sparksSprite = self.entities.getSprite('sparks');\r\n\r\n            if (!self.sparksSprite.loaded)\r\n                self.sparksSprite.load();\r\n        },\r\n\r\n        hasDrawnTile: function(id) {\r\n            return this.drawnTiles.indexOf(id) > -1;\r\n        },\r\n\r\n        /**\r\n         * Miscellaneous functions\r\n         */\r\n\r\n        forAllContexts: function(callback) {\r\n            _.each(this.allContexts, function(context) {\r\n                callback(context);\r\n            });\r\n        },\r\n\r\n        forEachContext: function(callback) {\r\n            _.each(this.contexts, function(context) {\r\n                callback(context);\r\n            });\r\n        },\r\n\r\n        forEachDrawingContext: function(callback) {\r\n            _.each(this.contexts, function(context) {\r\n                if (context.canvas.id !== 'entities')\r\n                    callback(context);\r\n            });\r\n        },\r\n\r\n        forEachCanvas: function(callback) {\r\n            _.each(this.canvases, function(canvas) {\r\n                callback(canvas);\r\n            });\r\n        },\r\n\r\n        forEachLighting: function(callback) {\r\n            _.each(this.lightings, function(lighting) {\r\n                callback(lighting);\r\n            });\r\n        },\r\n\r\n        getX: function(index, width) {\r\n            if (index === 0)\r\n                return 0;\r\n\r\n            return (index % width === 0) ? width - 1 : (index % width) - 1;\r\n        },\r\n\r\n        checkDevice: function() {\r\n            var self = this;\r\n\r\n            self.mobile = Detect.isMobile();\r\n            self.tablet = Detect.isTablet();\r\n            self.firefox = Detect.isFirefox();\r\n        },\r\n\r\n        verifyCentration: function() {\r\n            this.forceRendering = (this.mobile || this.tablet) && this.camera.centered;\r\n        },\r\n\r\n        isPortableDevice: function() {\r\n            return this.mobile || this.tablet;\r\n        },\r\n\r\n        updateDarkMask: function(color) {\r\n            var self = this;\r\n\r\n            self.darkMask.color = color;\r\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\r\n        },\r\n\r\n        addLight: function(x, y, distance, diffuse, color, relative) {\r\n            var self = this,\r\n                light = new Lamp(self.getLightData(x, y, distance, diffuse, color)),\r\n                lighting = new Lighting({\r\n                    light: light,\r\n                    objects: [],\r\n                    diffuse: light.diffuse\r\n                });\r\n\r\n            light.origX = light.position.x;\r\n            light.origY = light.position.y;\r\n\r\n            light.diff = Math.round(light.distance / 16);\r\n\r\n            if (self.hasLighting(lighting))\r\n                return;\r\n\r\n            if (relative)\r\n                lighting.relative = relative;\r\n\r\n            self.lightings.push(lighting);\r\n            self.darkMask.lights.push(light);\r\n\r\n            self.drawLighting(lighting);\r\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\r\n        },\r\n\r\n        removeAllLights: function() {\r\n            var self = this;\r\n\r\n            self.lightings = [];\r\n            self.darkMask.lights = [];\r\n\r\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\r\n        },\r\n\r\n        removeNonRelativeLights: function() {\r\n            var self = this;\r\n\r\n            _.each(self.lightings, function(lighting) {\r\n                if (!lighting.light.relative) {\r\n                    self.lightings.splice(i, 1);\r\n                    self.darkMask.lights.splice(i, 1);\r\n                }\r\n            });\r\n\r\n            self.darkMask.compute(self.overlay.width, self.overlay.height);\r\n        },\r\n\r\n        getLightData: function(x, y, distance, diffuse, color) {\r\n            return {\r\n                position: new Vec2(x, y),\r\n                distance: distance,\r\n                diffuse: diffuse,\r\n                color: color,\r\n                radius: 0,\r\n                samples: 2,\r\n                roughness: 0,\r\n                angle: 0\r\n            }\r\n        },\r\n\r\n        hasLighting: function(lighting) {\r\n            var self = this;\r\n\r\n            for (var i = 0; i < self.lightings.length; i++) {\r\n                var light = self.lightings[i].light;\r\n\r\n                if (lighting.light.origX === light.origX && lighting.light.origY === light.origY &&\r\n                    lighting.light.distance === light.distance)\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        inRadius: function(lighting) {\r\n            var self = this,\r\n                position = {\r\n                    x: lighting.light.origX,\r\n                    y: lighting.light.origY,\r\n                    diff: lighting.light.diff\r\n                };\r\n\r\n            return position.x > self.camera.gridX - position.diff &&\r\n                position.x < self.camera.gridX + self.camera.gridWidth  + position.diff &&\r\n                position.y > self.camera.gridY - position.diff &&\r\n                position.y < self.camera.gridY + self.camera.gridHeight + position.diff;\r\n        },\r\n\r\n        getMiddle: function() {\r\n            return {\r\n                x: this.overlay.width / 2,\r\n                y: this.overlay.height / 2\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Setters\r\n         */\r\n\r\n        setTileset: function(tileset) {\r\n            this.tileset = tileset;\r\n        },\r\n\r\n        setMap: function(map) {\r\n            this.map = map;\r\n        },\r\n\r\n        setEntities: function(entities) {\r\n            this.entities = entities;\r\n        },\r\n\r\n        setInput: function(input) {\r\n            this.input = input;\r\n        },\r\n\r\n        /**\r\n         * Getters\r\n         */\r\n\r\n        getTargetBounds: function(x, y) {\r\n            var self = this,\r\n                bounds = {},\r\n                tx = x || self.input.selectedX,\r\n                ty = y || self.input.selectedY;\r\n\r\n            bounds.x = ((tx * self.tileSize) - self.camera.x) * self.superScaling;\r\n            bounds.y = ((ty * self.tileSize) - self.camera.y) * self.superScaling;\r\n            bounds.width = self.tileSize * self.superScaling;\r\n            bounds.height = self.tileSize * self.superScaling;\r\n            bounds.left = bounds.x;\r\n            bounds.right = bounds.x + bounds.width;\r\n            bounds.top = bounds.y;\r\n            bounds.bottom = bounds.y + bounds.height;\r\n\r\n            return bounds;\r\n        },\r\n\r\n        getTileset: function() {\r\n            return this.tileset;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/renderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "DarkMask",
    "memberof": "Kaetram-Open/client/js/renderer/renderer.js",
    "static": true,
    "longname": "Kaetram-Open/client/js/renderer/renderer.js~DarkMask",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/renderer/renderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/tile.js",
    "content": "define(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(id, index, map) {\r\n            var self = this;\r\n\r\n            self.id = id;\r\n            self.index = index;\r\n            self.map = map;\r\n\r\n            self.animationInfo = map.getTileAnimation(id);\r\n\r\n            self.animationIndex = 0;\r\n            self.lastTime = 0;\r\n\r\n            self.loaded = false;\r\n        },\r\n\r\n        setPosition: function(position) {\r\n            this.x = position.x;\r\n            this.y = position.y;\r\n        },\r\n\r\n        update: function() {\r\n            this.id = this.animationInfo[this.animationIndex].tileID - 1;\r\n        },\r\n\r\n        animate: function(time) {\r\n            var self = this;\r\n\r\n            if ((time - self.lastTime) > self.animationInfo[self.animationIndex].duration) {\r\n                self.update();\r\n                self.lastTime = time;\r\n\r\n                if (self.animationIndex >= self.animationInfo.length - 1)\r\n                    self.animationIndex = 0;\r\n                else\r\n                    self.animationIndex++;\r\n            }\r\n\r\n        },\r\n\r\n        getPosition: function() {\r\n            return (this.x && this.y) ? [this.x, this.y] : [0, 0];\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/tile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "Kaetram-Open/client/js/renderer/updater.js",
    "content": "/* global log, Modules */\r\n\r\ndefine(['../entity/character/character'], function(Character) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(game) {\r\n            var self = this;\r\n\r\n            self.game = game;\r\n            self.camera = game.getCamera();\r\n            self.renderer = game.renderer;\r\n            self.input = game.input;\r\n            self.sprites = null;\r\n        },\r\n\r\n        update: function() {\r\n            this.timeDifferential = (new Date() - this.lastUpdate) / 1000;\r\n\r\n            this.animateTiles();\r\n            this.updateEntities();\r\n            this.input.updateCursor();\r\n            this.updateKeyboard();\r\n            this.updateAnimations();\r\n            this.updateInfos();\r\n            this.updateBubbles();\r\n\r\n            this.lastUpdate = new Date();\r\n        },\r\n\r\n        animateTiles: function() {\r\n            var self = this,\r\n                time = self.game.time;\r\n\r\n            if (!self.renderer.animateTiles)\r\n                return;\r\n\r\n            self.renderer.forEachAnimatedTile(function(tile) {\r\n                tile.animate(time);\r\n            });\r\n        },\r\n\r\n        updateEntities: function() {\r\n            var self = this;\r\n\r\n            self.game.entities.forEachEntity(function(entity) {\r\n\r\n                if (entity.spriteLoaded) {\r\n                    self.updateFading(entity);\r\n\r\n                    var animation = entity.currentAnimation;\r\n\r\n                    if (animation)\r\n                        animation.update(self.game.time);\r\n\r\n                    if (entity instanceof Character) {\r\n\r\n\r\n                        if (entity.critical && entity.criticalAnimation)\r\n                            entity.criticalAnimation.update(self.game.time);\r\n\r\n                        if (entity.terror && entity.terrorAnimation)\r\n                            entity.terrorAnimation.update(self.game.time);\r\n\r\n                        if (entity.stunned && entity.stunAnimation)\r\n                            entity.stunAnimation.update(self.game.time);\r\n\r\n                        if (entity.explosion && entity.explosionAnimation)\r\n                            entity.explosionAnimation.update(self.game.time);\r\n\r\n                        if (entity.movement && entity.movement.inProgress)\r\n                            entity.movement.step(self.game.time);\r\n\r\n                        if (entity.hasPath() && !entity.movement.inProgress) {\r\n                            var tick = Math.round(266 / entity.movementSpeed);\r\n\r\n                            switch (entity.orientation) {\r\n                                case Modules.Orientation.Left:\r\n\r\n                                    entity.movement.start(self.game.time,\r\n                                        function(x) {\r\n                                            entity.x = x;\r\n                                            entity.moved();\r\n                                        },\r\n                                        function() {\r\n                                            entity.x = entity.movement.endValue;\r\n                                            entity.moved();\r\n                                            entity.nextStep();\r\n                                        },\r\n                                        entity.x - tick,\r\n                                        entity.x - 16,\r\n                                        entity.movementSpeed);\r\n\r\n                                    break;\r\n\r\n                                case Modules.Orientation.Right:\r\n\r\n                                    entity.movement.start(self.game.time,\r\n                                        function(x) {\r\n                                            entity.x = x;\r\n                                            entity.moved();\r\n                                        },\r\n                                        function() {\r\n                                            entity.x = entity.movement.endValue;\r\n                                            entity.moved();\r\n                                            entity.nextStep();\r\n                                        },\r\n                                        entity.x + tick,\r\n                                        entity.x + 16,\r\n                                        entity.movementSpeed);\r\n\r\n                                    break;\r\n\r\n                                case Modules.Orientation.Up:\r\n\r\n                                    entity.movement.start(self.game.time,\r\n                                        function(y) {\r\n                                            entity.y = y;\r\n                                            entity.moved();\r\n                                        },\r\n                                        function() {\r\n                                            entity.y = entity.movement.endValue;\r\n                                            entity.moved();\r\n                                            entity.nextStep();\r\n                                        },\r\n                                        entity.y - tick,\r\n                                        entity.y - 16,\r\n                                        entity.movementSpeed);\r\n\r\n                                    break;\r\n\r\n                                case Modules.Orientation.Down:\r\n\r\n                                    entity.movement.start(self.game.time,\r\n                                        function(y) {\r\n                                            entity.y = y;\r\n                                            entity.moved();\r\n                                        },\r\n                                        function() {\r\n                                            entity.y = entity.movement.endValue;\r\n                                            entity.moved();\r\n                                            entity.nextStep();\r\n                                        },\r\n                                        entity.y + tick,\r\n                                        entity.y + 16,\r\n                                        entity.movementSpeed);\r\n\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                    } else if (entity.type === 'projectile') {\r\n                        var mDistance = entity.speed * self.timeDifferential,\r\n                            dx = entity.destX - entity.x,\r\n                            dy = entity.destY - entity.y,\r\n                            tDistance = Math.sqrt(dx * dx + dy * dy),\r\n                            amount = mDistance / tDistance;\r\n\r\n                        if (amount > 1)\r\n                            amount = 1;\r\n\r\n                        entity.x += dx * amount;\r\n                        entity.y += dy * amount;\r\n\r\n                        if (tDistance < 5)\r\n                            entity.impact();\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n        },\r\n\r\n        updateFading: function(entity) {\r\n            var self = this;\r\n\r\n            if (!entity || !entity.fading)\r\n                return;\r\n\r\n            var duration = 1000,\r\n                time = self.game.time,\r\n                dt = time - entity.fadingTime;\r\n\r\n            if (dt > duration) {\r\n                entity.isFading = false;\r\n                entity.fadingAlpha = 1;\r\n            } else\r\n                entity.fadingAlpha = dt / duration;\r\n        },\r\n\r\n        updateKeyboard: function() {\r\n            var self = this,\r\n                player = self.game.player,\r\n                position = {\r\n                    x: player.gridX,\r\n                    y: player.gridY\r\n                };\r\n\r\n            if (player.frozen)\r\n                return;\r\n\r\n            if (player.moveUp)\r\n                position.y--;\r\n            else if (player.moveDown)\r\n                position.y++;\r\n            else if (player.moveRight)\r\n                position.x++;\r\n            else if (player.moveLeft)\r\n                position.x--;\r\n\r\n            if (player.hasKeyboardMovement())\r\n                self.input.keyMove(position);\r\n\r\n        },\r\n\r\n        updateAnimations: function() {\r\n            var self = this,\r\n                target = self.input.targetAnimation;\r\n\r\n            if (target && self.input.selectedCellVisible)\r\n                target.update(self.game.time);\r\n\r\n            if (!self.sprites)\r\n                return;\r\n\r\n            var sparks = self.sprites.sparksAnimation;\r\n\r\n            if (sparks)\r\n                sparks.update(self.game.time);\r\n        },\r\n\r\n        updateInfos: function() {\r\n            if (this.game.info)\r\n                this.game.info.update(this.game.time);\r\n        },\r\n\r\n        updateBubbles: function() {\r\n            if (this.game.bubble)\r\n                this.game.bubble.update(this.game.time);\r\n\r\n            if (this.game.pointer)\r\n                this.game.pointer.update();\r\n        },\r\n\r\n        setSprites: function(sprites) {\r\n            this.sprites = sprites;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/renderer/updater.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "Kaetram-Open/client/js/text.js",
    "content": "/*\r\n RequireJS text 0.26.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.\r\n Available via the MIT or new BSD license.\r\n see: http://github.com/jrburke/requirejs for details\r\n */\r\n(function(){var j=[\"Msxml2.XMLHTTP\",\"Microsoft.XMLHTTP\",\"Msxml2.XMLHTTP.4.0\"],l=/^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,m=/<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,n=typeof location!==\"undefined\"&&location.href,i=[];define(function(){var e,h,k;typeof window!==\"undefined\"&&window.navigator&&window.document?h=function(a,b){var c=e.createXhr();c.open(\"GET\",a,!0);c.onreadystatechange=function(){c.readyState===4&&b(c.responseText)};c.send(null)}:typeof process!==\"undefined\"&&process.versions&&\r\nprocess.versions.node?(k=require.nodeRequire(\"fs\"),h=function(a,b){b(k.readFileSync(a,\"utf8\"))}):typeof Packages!==\"undefined\"&&(h=function(a,b){var c=new java.io.File(a),g=java.lang.System.getProperty(\"line.separator\"),c=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(c),\"utf-8\")),d,f,e=\"\";try{d=new java.lang.StringBuffer;(f=c.readLine())&&f.length()&&f.charAt(0)===65279&&(f=f.substring(1));for(d.append(f);(f=c.readLine())!==null;)d.append(g),d.append(f);e=String(d.toString())}finally{c.close()}b(e)});\r\n    return e={version:\"0.26.0\",strip:function(a){if(a){var a=a.replace(l,\"\"),b=a.match(m);b&&(a=b[1])}else a=\"\";return a},jsEscape:function(a){return a.replace(/(['\\\\])/g,\"\\\\$1\").replace(/[\\f]/g,\"\\\\f\").replace(/[\\b]/g,\"\\\\b\").replace(/[\\n]/g,\"\\\\n\").replace(/[\\t]/g,\"\\\\t\").replace(/[\\r]/g,\"\\\\r\")},createXhr:function(){var a,b,c;if(typeof XMLHttpRequest!==\"undefined\")return new XMLHttpRequest;else for(b=0;b<3;b++){c=j[b];try{a=new ActiveXObject(c)}catch(e){}if(a){j=[c];break}}if(!a)throw Error(\"createXhr(): XMLHttpRequest not available\");\r\n        return a},get:h,parseName:function(a){var b=!1,c=a.indexOf(\".\"),e=a.substring(0,c),a=a.substring(c+1,a.length),c=a.indexOf(\"!\");c!==-1&&(b=a.substring(c+1,a.length),b=b===\"strip\",a=a.substring(0,c));return{moduleName:e,ext:a,strip:b}},xdRegExp:/^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,canUseXhr:function(a,b,c,g){var d=e.xdRegExp.exec(a),f;if(!d)return!0;a=d[2];d=d[3];d=d.split(\":\");f=d[1];d=d[0];return(!a||a===b)&&(!d||d===c)&&(!f&&!d||f===g)},finishLoad:function(a,b,c,g,d){c=b?e.strip(c):c;d.isBuild&&d.inlineText&&\r\n    (i[a]=c);g(c)},load:function(a,b,c,g){var d=e.parseName(a),f=d.moduleName+\".\"+d.ext,h=b.toUrl(f);!n||e.canUseXhr(h)?e.get(h,function(b){e.finishLoad(a,d.strip,b,c,g)}):b([f],function(a){e.finishLoad(d.moduleName+\".\"+d.ext,d.strip,a,c,g)})},write:function(a,b,c){if(b in i){var g=e.jsEscape(i[b]);c(\"define('\"+a+\"!\"+b+\"', function () { return '\"+g+\"';});\\n\")}},writeFile:function(a,b,c,g,d){var b=e.parseName(b),f=b.moduleName+\".\"+b.ext,h=c.toUrl(b.moduleName+\".\"+b.ext)+\".js\";e.load(f,c,function(){e.write(a,\r\n        f,function(a){g(h,a)},d)},d)}}})})();",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/detect.js",
    "content": "Detect = {};\r\n\r\nDetect.isIpad = function() {\r\n    return /ipad/i.test(navigator.userAgent.toLowerCase());\r\n};\r\n\r\nDetect.isAndroid = function() {\r\n    return /Android/i.test(navigator.userAgent);\r\n};\r\n\r\nDetect.isWindows = function() {\r\n      return Detect.userAgentContains('Windows');\r\n};\r\n\r\nDetect.isChromeOnWindows = function() {\r\n    return Detect.userAgentContains('Chrome') && Detect.userAgentContains('Windows');\r\n};\r\n\r\nDetect.isCanaryOnWindows = function() {\r\n    return Detect.userAgentContains('Chrome/52') && Detect.userAgentContains('Windows');\r\n};\r\n\r\nDetect.isEdgeOnWindows = function() {\r\n    return Detect.userAgentContains('Edge') && Detect.userAgentContains('Windows');\r\n};\r\n\r\nDetect.isFirefox = function() {\r\n    return Detect.userAgentContains('Firefox');\r\n};\r\n\r\nDetect.isSafari = function() {\r\n    return Detect.userAgentContains('Safari') && !Detect.userAgentContains('Chrome');\r\n};\r\n\r\nDetect.isOpera = function() {\r\n    return Detect.userAgentContains('Opera');\r\n};\r\n\r\nDetect.isFirefoxAndroid = function() {\r\n    return Detect.userAgentContains('Android') && Detect.userAgentContains('Firefox');\r\n};\r\n\r\nDetect.userAgentContains = function(string) {\r\n    return navigator.userAgent.indexOf(string) !== -1;\r\n};\r\n\r\nDetect.getUserAgent = function() {\r\n    return navigator.userAgent.toString();\r\n};\r\n\r\nDetect.isTablet = function() {\r\n    var userAgent = navigator.userAgent.toLowerCase(),\r\n        isAppleTablet = /ipad/i.test(userAgent),\r\n        isAndroidTablet = /android/i.test(userAgent);\r\n\r\n    return (isAppleTablet || isAndroidTablet) && window.innerWidth >= 640;\r\n};\r\n\r\nDetect.isMobile = function() {\r\n    return window.innerWidth < 1000;\r\n};\r\n\r\nDetect.iOSVersion = function() {\r\n    if(window.MSStream){\r\n        // There is some iOS in Windows Phone...\r\n        // https://msdn.microsoft.com/en-us/library/hh869301(v=vs.85).aspx\r\n        return '';\r\n    }\r\n    var match = (navigator.appVersion).match(/OS (\\d+)_(\\d+)_?(\\d+)?/),\r\n        version;\r\n\r\n    if (match !== undefined && match !== null) {\r\n        version = [\r\n            parseInt(match[1], 10),\r\n            parseInt(match[2], 10),\r\n            parseInt(match[3] || 0, 10)\r\n        ];\r\n        return parseFloat(version.join('.'));\r\n    }\r\n\r\n    return '';\r\n};\r\n\r\nDetect.androidVersion = function() {\r\n    var userAgent = navigator.userAgent.split('Android'), version;\r\n\r\n    if (userAgent.length > 1)\r\n        version = userAgent[1].split(';')[0];\r\n\r\n    return version;\r\n};\r\n\r\nDetect.supportsWebGL = function() {\r\n    return !!document.createElement('canvas').getContext('webgl');\r\n};\r\n\r\nDetect.isAppleDevice = function() {\r\n    var devices = [\r\n        'iPad Simulator',\r\n        'iPhone Simulator',\r\n        'iPod Simulator',\r\n        'iPad',\r\n        'iPhone',\r\n        'iPod'\r\n    ];\r\n\r\n    if (!!navigator.platform)\r\n        while(devices.length)\r\n            if (navigator.platform = devices.pop())\r\n                return true;\r\n\r\n    return false;\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/utils/detect.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "isIpad",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isIpad",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "isAndroid",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isAndroid",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "isWindows",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isWindows",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "isChromeOnWindows",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isChromeOnWindows",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "isCanaryOnWindows",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isCanaryOnWindows",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "isEdgeOnWindows",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isEdgeOnWindows",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "isFirefox",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isFirefox",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "isSafari",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isSafari",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "isOpera",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isOpera",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "isFirefoxAndroid",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isFirefoxAndroid",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "userAgentContains",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~userAgentContains",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "getUserAgent",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~getUserAgent",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "isTablet",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isTablet",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "isMobile",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isMobile",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "iOSVersion",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~iOSVersion",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "androidVersion",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~androidVersion",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "supportsWebGL",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~supportsWebGL",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "isAppleDevice",
    "memberof": "Kaetram-Open/client/js/utils/detect.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/detect.js~isAppleDevice",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/detect.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/modules.js",
    "content": "Modules = {\r\n    Orientation: {\r\n        Up: 0,\r\n        Down: 1,\r\n        Left: 2,\r\n        Right: 3\r\n    },\r\n\r\n    Types: {\r\n        Player: 0\r\n    },\r\n\r\n    InputType: {\r\n        Key: 0,\r\n        LeftClick: 1\r\n    },\r\n\r\n    Actions: {\r\n        Idle: 0,\r\n        Attack: 1,\r\n        Walk: 2\r\n    },\r\n\r\n    Hits: {\r\n        Damage: 0,\r\n        Poison: 1,\r\n        Heal: 2,\r\n        Mana: 3,\r\n        Experience: 4,\r\n        LevelUp: 5,\r\n        Critical: 6,\r\n        Stun: 7,\r\n        Explosive: 8\r\n    },\r\n\r\n    Equipment: {\r\n        Armour: 0,\r\n        Weapon: 1,\r\n        Pendant: 2,\r\n        Ring: 3,\r\n        Boots: 4\r\n    },\r\n\r\n    Hovering: {\r\n        Colliding: 0,\r\n        Mob: 1,\r\n        Player: 2,\r\n        Item: 3,\r\n        NPC: 4,\r\n        Chest: 5\r\n    },\r\n\r\n    Keys: {\r\n        One: 49,\r\n        Two: 50,\r\n        Three: 51,\r\n        Four: 52,\r\n        Five: 53,\r\n        W: 87,\r\n        A: 65,\r\n        S: 83,\r\n        D: 68,\r\n        Up: 38,\r\n        Left: 37,\r\n        Down: 40,\r\n        Right: 39,\r\n        Esc: 27,\r\n        V: 86,\r\n        U: 85,\r\n        J: 74,\r\n        Enter: 13,\r\n        T: 84\r\n    },\r\n\r\n    AudioTypes: {\r\n        Music: 0,\r\n        SFX: 1\r\n    },\r\n\r\n    DamageColours: {\r\n        'received': {\r\n            fill: 'rgb(255, 50, 50)',\r\n            stroke: 'rgb(255, 180, 180)'\r\n        },\r\n\r\n        'inflicted': {\r\n            fill: 'white',\r\n            stroke: '#373737'\r\n        },\r\n\r\n        'healed': {\r\n            fill: 'rgb(80, 255, 80)',\r\n            stroke: 'rgb(50, 120, 50)'\r\n        },\r\n\r\n        'mana': {\r\n            fill: 'rgb(73, 94, 228)',\r\n            stroke: 'rgb(56, 63, 133)'\r\n        },\r\n\r\n        'health': {\r\n            fill: 'white',\r\n            stroke: '#373737'\r\n        },\r\n\r\n        'exp': {\r\n            fill: 'rgb(80, 180, 255)',\r\n            stroke: 'rgb(50, 180, 255)'\r\n        },\r\n\r\n        'poison': {\r\n            fill: 'rgb(66, 183, 77)',\r\n            stroke: 'rgb(50, 120 , 50)'\r\n        }\r\n    },\r\n\r\n    Pointers: {\r\n        Entity: 0,\r\n        Position: 1,\r\n        Relative: 2\r\n    }\r\n\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/utils/modules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/pathfinder.js",
    "content": "/* global _, log */\r\n\r\ndefine(['../lib/astar'], function(AStar) {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(width, height) {\r\n            var self = this;\r\n\r\n            self.width = width;\r\n            self.height = height;\r\n\r\n            self.mode = 'DEFAULT';\r\n\r\n            self.grid = null;\r\n            self.blankGrid = [];\r\n            self.ignores = [];\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            for (var i = 0; i < self.height; i++) {\r\n                self.blankGrid[i] = [];\r\n\r\n                for (var j = 0; j < self.width; j++)\r\n                    self.blankGrid[i][j] = 0;\r\n            }\r\n\r\n            //log.info('Successfully loaded the pathfinder!');\r\n        },\r\n\r\n        find: function(grid, entity, x, y, incomplete) {\r\n            var self = this,\r\n                start = [entity.gridX, entity.gridY],\r\n                end = [x, y], path;\r\n\r\n            self.grid = grid;\r\n            self.applyIgnore(true);\r\n\r\n            path = AStar(self.grid, start, end, self.mode);\r\n\r\n            if (path.length === 0 && incomplete)\r\n                path = self.findIncomplete(start, end);\r\n\r\n            return path;\r\n        },\r\n\r\n        findIncomplete: function(start, end) {\r\n            var self = this,\r\n                incomplete = [],\r\n                perfect, x, y;\r\n\r\n            perfect = AStar(self.blankGrid, start, end, self.mode);\r\n\r\n            for (var i = perfect.length - 1; i > 0; i--) {\r\n                x = perfect[i][0];\r\n                y = perfect[i][1];\r\n\r\n                if (self.grid[y][x] === 0) {\r\n                    incomplete = AStar(self.grid, start, [x. y], self.mode);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return incomplete;\r\n        },\r\n\r\n        applyIgnore: function(ignored) {\r\n            var self = this,\r\n                x, y, g;\r\n\r\n            _.each(self.ignores, function(entity) {\r\n                x = entity.hasPath() ? entity.nextGridX : entity.gridX;\r\n                y = entity.hasPath() ? entity.nextGridY : entity.gridY;\r\n\r\n                if (x >= 0 && y >= 0)\r\n                    self.grid[y][x] = ignored ? 0 : 1\r\n            });\r\n        },\r\n\r\n        ignoreEntity: function(entity) {\r\n            var self = this;\r\n\r\n            if (!entity)\r\n                return;\r\n\r\n            self.ignores.push(entity);\r\n        },\r\n\r\n        clearIgnores: function() {\r\n            var self = this;\r\n\r\n            self.applyIgnore(false);\r\n            self.ignores = [];\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/utils/pathfinder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/queue.js",
    "content": "/* global _ */\r\n\r\ndefine(function() {\r\n\r\n    /**\r\n     * Very useful file used for queuing various objects,\r\n     * most notably used in the info controller to queue\r\n     * objects to delete\r\n     */\r\n\r\n    return Class.extend({\r\n\r\n        init: function() {\r\n            var self = this;\r\n\r\n            self.queue = [];\r\n        },\r\n\r\n        reset: function() {\r\n            this.queue = [];\r\n        },\r\n\r\n        add: function(object) {\r\n            this.queue.push(object);\r\n        },\r\n\r\n        getQueue: function() {\r\n            return this.queue;\r\n        },\r\n\r\n        forEachQueue: function(callback) {\r\n            _.each(this.queue, function(object) {\r\n                callback(object);\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/utils/queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/storage.js",
    "content": "define(function() {\r\n    var storage = window.localStorage,\r\n        name = 'data';\r\n\r\n    return Class.extend({\r\n\r\n        init: function(app) {\r\n            var self = this;\r\n\r\n            self.app = app;\r\n            self.data = null;\r\n\r\n            self.load();\r\n        },\r\n\r\n        load: function() {\r\n            var self = this;\r\n\r\n            if (storage.data)\r\n                self.data = JSON.parse(storage.getItem(name));\r\n            else\r\n                self.data = self.create();\r\n\r\n            if (self.data.clientVersion !== self.app.config.version) {\r\n                self.data = self.create();\r\n                self.save();\r\n            }\r\n        },\r\n\r\n        create: function() {\r\n            return {\r\n                new: true,\r\n                clientVersion: this.app.config.version,\r\n\r\n                player: {\r\n                    username: '',\r\n                    password: '',\r\n                    autoLogin: false,\r\n                    rememberMe: false,\r\n                    orientation: Modules.Orientation.Down\r\n                },\r\n\r\n                settings: {\r\n                    music: 100,\r\n                    sfx: 100,\r\n                    brightness: 100,\r\n                    soundEnabled: true,\r\n                    FPSCap: true,\r\n                    centerCamera: true,\r\n                    debug: false,\r\n                    showNames: true,\r\n                    showLevels: true\r\n                },\r\n\r\n                map: {\r\n                    regionData: [],\r\n                    collisions: []\r\n                }\r\n            };\r\n        },\r\n\r\n        save: function() {\r\n            if (this.data)\r\n                storage.setItem(name, JSON.stringify(this.data));\r\n        },\r\n\r\n        clear: function() {\r\n            storage.removeItem(name);\r\n            this.data = this.create();\r\n        },\r\n\r\n        toggleRemember: function(toggle) {\r\n            var self = this;\r\n\r\n            self.data.player.rememberMe = toggle;\r\n            self.save();\r\n        },\r\n\r\n        setOrientation: function(orientation) {\r\n            var self = this,\r\n                player = self.getPlayer();\r\n\r\n            player.orientation = orientation;\r\n\r\n            self.save();\r\n        },\r\n\r\n        setPlayer: function(option, value) {\r\n            var self = this,\r\n                pData = self.getPlayer();\r\n\r\n            if (pData.hasOwnProperty(option))\r\n                pData[option] = value;\r\n\r\n            self.save();\r\n        },\r\n\r\n        setSettings: function(option, value) {\r\n            var self = this,\r\n                sData = self.getSettings();\r\n\r\n            if (sData.hasOwnProperty(option))\r\n                sData[option] = value;\r\n\r\n            self.save();\r\n        },\r\n\r\n        setRegionData: function(regionData, collisionData) {\r\n            var self = this;\r\n\r\n            self.data.map.regionData = regionData;\r\n            self.data.map.collisions = collisionData;\r\n\r\n            self.save();\r\n        },\r\n\r\n        getPlayer: function() {\r\n            return this.data.player;\r\n        },\r\n\r\n        getSettings: function() {\r\n            return this.data ? this.data.settings : null;\r\n        },\r\n\r\n        getRegionData: function() {\r\n            return this.data.map.regionData;\r\n        },\r\n\r\n        getCollisions: function() {\r\n            return this.data.map.collisions;\r\n        }\r\n\r\n    });\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/utils/storage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/timer.js",
    "content": "define(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function(start, duration) {\r\n            var self = this;\r\n\r\n            self.time = start;\r\n            self.duration = duration;\r\n        },\r\n\r\n        isOver: function(time) {\r\n            var self = this,\r\n                over = false;\r\n\r\n            if (time - self.time > self.duration) {\r\n                over = true;\r\n                self.time = time;\r\n            }\r\n\r\n            return over;\r\n        }\r\n\r\n    });\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/utils/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/transition.js",
    "content": "define(function() {\r\n\r\n    return Class.extend({\r\n\r\n        init: function() {\r\n            var self = this;\r\n\r\n            self.startValue = 0;\r\n            self.endValue = 0;\r\n            self.duration = 0;\r\n            self.inProgress = false;\r\n        },\r\n\r\n        start: function(currentTime, updateFunction, stopFunction, startValue, endValue, duration) {\r\n            var self = this;\r\n\r\n            self.startTime = currentTime;\r\n            self.updateFunction = updateFunction;\r\n            self.stopFunction = stopFunction;\r\n            self.startValue = startValue;\r\n            self.endValue = endValue;\r\n            self.duration = duration;\r\n\r\n            self.inProgress = true;\r\n            self.count = 0;\r\n        },\r\n\r\n        step: function(currentTime) {\r\n            var self = this;\r\n\r\n            if (!self.inProgress)\r\n                return;\r\n\r\n            if (self.count > 0)\r\n                self.count--;\r\n            else {\r\n                var elapsed = currentTime - self.startTime;\r\n\r\n                if (elapsed > self.duration)\r\n                    elapsed = self.duration;\r\n\r\n                var diff = self.endValue - self.startValue,\r\n                    interval = Math.round(self.startValue + ((diff / self.duration) * elapsed));\r\n\r\n                if (elapsed === self.duration || interval === self.endValue) {\r\n                    self.stop();\r\n                    if (self.stopFunction)\r\n                        self.stopFunction();\r\n                } else if (self.updateFunction)\r\n                    self.updateFunction(interval);\r\n\r\n            }\r\n        },\r\n\r\n        restart: function(currentTime, startValue, endValue) {\r\n            var self = this;\r\n\r\n            self.start(currentTime, self.updateFunction, self.stopFunction, startValue, endValue, self.duration);\r\n            self.step(currentTime);\r\n        },\r\n\r\n        stop: function() {\r\n            this.inProgress = false;\r\n        }\r\n\r\n    });\r\n\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/utils/transition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "Kaetram-Open/client/js/utils/util.js",
    "content": "/**\r\n * New version of the Bind Polyfill\r\n */\r\n\r\nif (!Function.prototype.bind)\r\n    Function.prototype.bind = function(oThis) {\r\n        if (typeof this !== 'function') {\r\n            // closest thing possible to the ECMAScript 5\r\n            // internal IsCallable function\r\n            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\r\n        }\r\n\r\n        var aArgs   = Array.prototype.slice.call(arguments, 1),\r\n            fToBind = this,\r\n            fNOP    = function() {},\r\n            fBound  = function() {\r\n                return fToBind.apply(this instanceof fNOP\r\n                    ? this\r\n                    : oThis,\r\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\r\n            };\r\n\r\n        if (this.prototype) {\r\n            // Function.prototype doesn't have a prototype property\r\n            fNOP.prototype = this.prototype;\r\n        }\r\n        fBound.prototype = new fNOP();\r\n\r\n        return fBound;\r\n    };\r\n\r\nvar isInt = function(n) {\r\n    return (n % 1) === 0;\r\n};\r\n\r\nvar TRANSITIONEND = 'transitionend webkitTransitionEnd oTransitionEnd';\r\n\r\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\nif ( !window.requestAnimationFrame ) {\r\n\r\n    window.requestAnimationFrame = ( function() {\r\n\r\n        return window.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame || // comment out if FF4 is slow (it caps framerate at ~30fps: https://bugzilla.mozilla.org/show_bug.cgi?id=630127)\r\n            window.oRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame ||\r\n            function( /* function FrameRequestCallback */ callback, /* DOMElement Element */ element ) {\r\n\r\n                window.setTimeout( callback, 17 );\r\n\r\n            };\r\n\r\n    } )();\r\n\r\n}\r\n\r\nif (!String.prototype.startsWith) {\r\n    String.prototype.startsWith = function(searchString, position){\r\n        position = position || 0;\r\n        return this.substr(position, searchString.length) === searchString;\r\n    };\r\n}\r\n\r\nif (!String.prototype.includes) {\r\n    String.prototype.includes = function(search, start) {\r\n        'use strict';\r\n        if (typeof start !== 'number') {\r\n            start = 0;\r\n        }\r\n\r\n        if (start + search.length > this.length) {\r\n            return false;\r\n        } else {\r\n            return this.indexOf(search, start) !== -1;\r\n        }\r\n    };\r\n}\r\n\r\nif (!Array.isArray) {\r\n    Array.isArray = function(arg) {\r\n        return Object.prototype.toString.call(arg) === '[object Array]';\r\n    };\r\n}\r\n\r\nif (!Array.prototype.includes) {\r\n    Object.defineProperty(Array.prototype, 'includes', {\r\n        value: function(searchElement, fromIndex) {\r\n\r\n            // 1. Let O be ? ToObject(this value).\r\n            if (this == null) {\r\n                throw new TypeError('\"this\" is null or not defined');\r\n            }\r\n\r\n            var o = Object(this);\r\n\r\n            // 2. Let len be ? ToLength(? Get(O, \"length\")).\r\n            var len = o.length >>> 0;\r\n\r\n            // 3. If len is 0, return false.\r\n            if (len === 0) {\r\n                return false;\r\n            }\r\n\r\n            // 4. Let n be ? ToInteger(fromIndex).\r\n            //    (If fromIndex is undefined, this step produces the value 0.)\r\n            var n = fromIndex | 0;\r\n\r\n            // 5. If n ≥ 0, then\r\n            //  a. Let k be n.\r\n            // 6. Else n < 0,\r\n            //  a. Let k be len + n.\r\n            //  b. If k < 0, let k be 0.\r\n            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\r\n\r\n            function sameValueZero(x, y) {\r\n                return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));\r\n            }\r\n\r\n            // 7. Repeat, while k < len\r\n            while (k < len) {\r\n                // a. Let elementK be the result of ? Get(O, ! ToString(k)).\r\n                // b. If SameValueZero(searchElement, elementK) is true, return true.\r\n                // c. Increase k by 1.\r\n                if (sameValueZero(o[k], searchElement)) {\r\n                    return true;\r\n                }\r\n                k++;\r\n            }\r\n\r\n            // 8. Return false\r\n            return false;\r\n        }\r\n    });\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/js/utils/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "isInt",
    "memberof": "Kaetram-Open/client/js/utils/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/util.js~isInt",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "TRANSITIONEND",
    "memberof": "Kaetram-Open/client/js/utils/util.js",
    "static": true,
    "longname": "Kaetram-Open/client/js/utils/util.js~TRANSITIONEND",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/js/utils/util.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "Kaetram-Open/client/sw.js",
    "content": "// This is the \"Offline page\" service worker\r\n\r\nconst CACHE = 'pwabuilder-page';\r\n\r\nconst offlineFallbackPage = 'index.html';\r\n\r\n// Install stage sets up the offline page in the cache and opens a new cache\r\nself.addEventListener('install', function(event) {\r\n    console.log('[PWA Builder] Install Event processing');\r\n\r\n    event.waitUntil(\r\n        caches.open(CACHE).then(function(cache) {\r\n            console.log('[PWA Builder] Cached offline page during install');\r\n\r\n            return cache.add(offlineFallbackPage);\r\n        })\r\n    );\r\n});\r\n\r\n// If any fetch fails, it will show the offline page.\r\nself.addEventListener('fetch', function(event) {\r\n    if (event.request.method !== 'GET') return;\r\n\r\n    event.respondWith(\r\n        fetch(event.request).catch(function(error) {\r\n            // The following validates that the request was for a navigation to a new document\r\n            if (\r\n                event.request.destination !== 'document' ||\r\n                event.request.mode !== 'navigate'\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            console.error(\r\n                '[PWA Builder] Network request Failed. Serving offline page ' +\r\n                    error\r\n            );\r\n            return caches.open(CACHE).then(function(cache) {\r\n                return cache.match(offlineFallbackPage);\r\n            });\r\n        })\r\n    );\r\n});\r\n\r\n// This is an event that can be fired from your page to tell the SW to update the offline page\r\nself.addEventListener('refreshOffline', function() {\r\n    const offlinePageRequest = new Request(offlineFallbackPage);\r\n\r\n    return fetch(offlineFallbackPage).then(function(response) {\r\n        return caches.open(CACHE).then(function(cache) {\r\n            console.log(\r\n                '[PWA Builder] Offline page updated from refreshOffline event: ' +\r\n                    response.url\r\n            );\r\n            return cache.put(offlinePageRequest, response);\r\n        });\r\n    });\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/client/sw.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "CACHE",
    "memberof": "Kaetram-Open/client/sw.js",
    "static": true,
    "longname": "Kaetram-Open/client/sw.js~CACHE",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/sw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "offlineFallbackPage",
    "memberof": "Kaetram-Open/client/sw.js",
    "static": true,
    "longname": "Kaetram-Open/client/sw.js~offlineFallbackPage",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/client/sw.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/default.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat');\r\n\r\n/*\r\n * The default superclass for combat-related plugins.\r\n * It just shorteness the amount of work that needs to be done\r\n * when adding special entities.\r\n */\r\n\r\nclass Default extends Combat {\r\n\r\n    constructor(character) {\r\n        super(character);\r\n\r\n        let self = this;\r\n\r\n        self.character = character;\r\n\r\n    }\r\n\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/data/combat/default.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/default.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/default.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "class",
    "name": "Default",
    "memberof": "Kaetram-Open/server/data/combat/default.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/default.js~Default",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/default.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/default.js~Default",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/default.js~Default#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/greatsquid.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\r\n    Modules = require('../../js/util/modules');\r\n\r\nclass GreatSquid extends Combat {\r\n\r\n    constructor(character) {\r\n        character.spawnDistance = 15;\r\n        super(character);\r\n\r\n        let self = this;\r\n\r\n        self.character = character;\r\n\r\n        self.lastTerror = new Date().getTime();\r\n    }\r\n\r\n    hit(character, target, hitInfo) {\r\n        let self = this;\r\n\r\n        if (self.canUseTerror) {\r\n            hitInfo.type = Modules.Hits.Stun;\r\n\r\n            self.lastTerror = new Date().getTime();\r\n        }\r\n\r\n        super.hit(character, target, hitInfo);\r\n    }\r\n\r\n    canUseTerror() {\r\n        return new Date().getTime() - this.lastTerror > 15000;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = GreatSquid;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/data/combat/greatsquid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/greatsquid.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "class",
    "name": "GreatSquid",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/greatsquid.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid#hit",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "canUseTerror",
    "memberof": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/greatsquid.js~GreatSquid#canUseTerror",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/ogrelord.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\r\n    Messages = require('../../js/network/messages'),\r\n    Packets = require('../../js/network/packets'),\r\n    Modules = require('../../js/util/modules'),\r\n    Utils = require('../../js/util/utils'),\r\n    _ = require('underscore');\r\n\r\nclass OgreLord extends Combat {\r\n\r\n    constructor(character) {\r\n        super(character);\r\n\r\n        let self = this;\r\n\r\n        self.character = character;\r\n\r\n        self.dialogues = ['Get outta my swamp', 'No, not the onion.', 'My minions give me strength! You stand no chance!'];\r\n\r\n        self.minions = [];\r\n\r\n        self.lastSpawn = 0;\r\n\r\n        self.loaded = false;\r\n\r\n        character.projectile = Modules.Projectiles.Boulder;\r\n        character.projectileName = 'projectile-boulder';\r\n\r\n        character.onDeath(() => {\r\n            self.reset();\r\n        });\r\n    }\r\n\r\n    load() {\r\n        var self = this;\r\n\r\n        self.talkingInterval = setInterval(() => {\r\n\r\n            if (self.character.hasTarget())\r\n                self.forceTalk(self.getMessage());\r\n\r\n        }, 9000);\r\n\r\n        self.updateInterval = setInterval(() => {\r\n\r\n            self.character.armourLevel = 50 + (self.minions.length * 15);\r\n\r\n        }, 2000);\r\n\r\n        self.loaded = true;\r\n    }\r\n\r\n    hit(character, target, hitInfo) {\r\n        var self = this;\r\n\r\n        if (self.isAttacked())\r\n            self.beginMinionAttack();\r\n\r\n        if (!character.isNonDiagonal(target)) {\r\n            var distance = character.getDistance(target);\r\n\r\n            if (distance < 7) {\r\n                hitInfo.isRanged = true;\r\n                character.attackRange = 7;\r\n            }\r\n        }\r\n\r\n        if (self.canSpawn())\r\n            self.spawnMinions();\r\n\r\n        super.hit(character, target, hitInfo);\r\n    }\r\n\r\n    forceTalk(message) {\r\n        var self = this;\r\n\r\n        if (!self.world)\r\n            return;\r\n\r\n        self.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: self.character.region,\r\n            message: new Messages.NPC(Packets.NPCOpcode.Talk, {\r\n                id: self.character.instance,\r\n                text: message,\r\n                nonNPC: true\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    getMessage() {\r\n        return this.dialogues[Utils.randomInt(0, this.dialogues.length - 1)];\r\n    }\r\n\r\n    spawnMinions() {\r\n        var self = this,\r\n            xs = [414, 430, 415, 420, 429],\r\n            ys = [172, 173, 183, 185, 180];\r\n\r\n        self.lastSpawn = new Date().getTime();\r\n\r\n        self.forceTalk('Now you shall see my true power!');\r\n\r\n        for (var i = 0; i < xs.length; i++)\r\n            self.minions.push(self.world.spawnMob(12, xs[i], ys[i]));\r\n\r\n        _.each(self.minions, (minion) => {\r\n\r\n            minion.onDeath(() => {\r\n\r\n                if (self.isLast())\r\n                    self.lastSpawn = new Date().getTime();\r\n\r\n                self.minions.splice(self.minions.indexOf(minion), 1);\r\n\r\n            });\r\n\r\n            if (self.isAttacked())\r\n                self.beginMinionAttack();\r\n\r\n        });\r\n\r\n        if (!self.loaded)\r\n            self.load();\r\n    }\r\n\r\n    beginMinionAttack() {\r\n        var self = this;\r\n\r\n        if (!self.hasMinions())\r\n            return;\r\n\r\n        _.each(self.minions, (minion) => {\r\n            var randomTarget = self.getRandomTarget();\r\n\r\n            if (!minion.hasTarget() && randomTarget)\r\n                minion.combat.begin(randomTarget);\r\n\r\n        });\r\n    }\r\n\r\n    reset() {\r\n        var self = this;\r\n\r\n        self.lastSpawn = 0;\r\n\r\n        var listCopy = self.minions.slice();\r\n\r\n        for (var i = 0; i < listCopy.length; i++)\r\n            self.world.kill(listCopy[i]);\r\n\r\n        clearInterval(self.talkingInterval);\r\n        clearInterval(self.updateInterval);\r\n\r\n        self.talkingInterval = null;\r\n        self.updateInterval = null;\r\n\r\n        self.loaded = false;\r\n    }\r\n\r\n    getRandomTarget() {\r\n        var self = this;\r\n\r\n        if (self.isAttacked()) {\r\n            var keys = Object.keys(self.attackers),\r\n                randomAttacker = self.attackers[keys[Utils.randomInt(0, keys.length)]];\r\n\r\n            if (randomAttacker)\r\n                return randomAttacker;\r\n        }\r\n\r\n        if (self.character.hasTarget())\r\n            return self.character.target;\r\n\r\n        return null;\r\n    }\r\n\r\n    hasMinions() {\r\n        return this.minions.length > 0;\r\n    }\r\n\r\n    isLast() {\r\n        return this.minions.length === 1;\r\n    }\r\n\r\n    canSpawn() {\r\n        return (new Date().getTime() - this.lastSpawn > 50000) && !this.hasMinions() && this.isAttacked();\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = OgreLord;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/data/combat/ogrelord.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/ogrelord.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "OgreLord",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/ogrelord.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#load",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#hit",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "forceTalk",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#forceTalk",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "getMessage",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#getMessage",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "spawnMinions",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#spawnMinions",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "beginMinionAttack",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#beginMinionAttack",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "reset",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#reset",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "getRandomTarget",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#getRandomTarget",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "hasMinions",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#hasMinions",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "isLast",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#isLast",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "canSpawn",
    "memberof": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/ogrelord.js~OgreLord#canSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/piratecaptain.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\r\n    Utils = require('../../js/util/utils'),\r\n    Messages = require('../../js/network/messages'),\r\n    Packets = require('../../js/network/packets'),\r\n    Modules = require('../../js/util/modules');\r\n\r\nclass PirateCaptain extends Combat {\r\n\r\n    constructor(character) {\r\n        character.spawnDistance = 20;\r\n        super(character);\r\n\r\n        let self = this;\r\n\r\n        self.character = character;\r\n\r\n        self.teleportLocations = [];\r\n\r\n        self.lastTeleportIndex = 0;\r\n        self.lastTeleport = 0;\r\n\r\n        self.location = {\r\n            x: self.character.x,\r\n            y: self.character.y\r\n        };\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        var self = this,\r\n            south = { x: 251, y: 574 },\r\n            west = { x: 243, y: 569 },\r\n            east = { x: 258, y: 568 },\r\n            north = { x: 251, y: 563 };\r\n\r\n        self.teleportLocations.push(north, south, west, east);\r\n    }\r\n\r\n    hit(character, target, hitInfo) {\r\n        var self = this;\r\n        if (self.canTeleport())\r\n            self.teleport();\r\n        else\r\n            super.hit(character, target, hitInfo);\r\n    }\r\n\r\n    teleport() {\r\n        var self = this,\r\n            position = self.getRandomPosition();\r\n\r\n        if (!position)\r\n            return;\r\n\r\n        self.stop();\r\n\r\n        self.lastTeleport = new Date().getTime();\r\n        self.lastTeleportIndex = position.index;\r\n\r\n        self.character.setPosition(position.x, position.y);\r\n\r\n        if (self.world)\r\n            self.world.push(Packets.PushOpcode.Regions, {\r\n                regionId: self.character.region,\r\n                message: new Messages.Teleport({\r\n                    id: self.character.instance,\r\n                    x: self.character.x,\r\n                    y: self.character.y,\r\n                    withAnimation: true\r\n                })\r\n            });\r\n\r\n        self.forEachAttacker((attacker) => {\r\n            attacker.removeTarget();\r\n        });\r\n\r\n        if (self.character.hasTarget())\r\n            self.begin(self.character.target);\r\n    }\r\n\r\n    getRandomPosition() {\r\n        var self = this,\r\n            random = Utils.randomInt(0, self.teleportLocations.length - 1),\r\n            position = self.teleportLocations[random];\r\n\r\n        if (!position || random === self.lastTeleportIndex)\r\n            return null;\r\n\r\n        return {\r\n            x: position.x,\r\n            y: position.y,\r\n            index: random\r\n        }\r\n    }\r\n\r\n    canTeleport() {\r\n        //Just randomize the teleportation for shits and giggles.\r\n        return new Date().getTime() - this.lastTeleport > 10000 && Utils.randomInt(0, 4) === 2;\r\n    }\r\n\r\n    getHealthPercentage() {\r\n        //Floor it to avoid random floats\r\n        return Math.floor((this.character.hitPoints / self.character.maxHitPoints) * 100);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = PirateCaptain;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/data/combat/piratecaptain.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/piratecaptain.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "class",
    "name": "PirateCaptain",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/piratecaptain.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#load",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#hit",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "teleport",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#teleport",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "getRandomPosition",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#getRandomPosition",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *, \"index\": *}"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "canTeleport",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#canTeleport",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "getHealthPercentage",
    "memberof": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/piratecaptain.js~PirateCaptain#getHealthPercentage",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/queenant.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\r\n    Packets = require('../../js/network/packets'),\r\n    Messages = require('../../js/network/messages'),\r\n    Utils = require('../../js/util/utils'),\r\n    _ = require('underscore');\r\n\r\nclass QueenAnt extends Combat {\r\n\r\n    /*\r\n     * The queen ant is a little more complex as it uses\r\n     * AoE attacks and has a stun timer.\r\n     */\r\n\r\n    constructor(character) {\r\n        character.spawnDistance = 18;\r\n        super(character);\r\n\r\n        let self = this;\r\n\r\n        self.character = character;\r\n\r\n        self.lastActionThreshold = 10000; //AoE Attack Threshold.\r\n\r\n        self.aoeTimeout = null;\r\n\r\n        self.aoeCountdown = 5;\r\n        self.aoeRadius = 2;\r\n        self.lastAoE = 0;\r\n\r\n        self.minionCount = 7;\r\n        self.lastSpawn = 0;\r\n        self.minions = [];\r\n\r\n        self.frozen = false;\r\n\r\n        self.character.onDeath(() => {\r\n\r\n            /**\r\n             * This is to prevent the boss from dealing\r\n             * any powerful AoE attack after dying.\r\n             */\r\n\r\n            self.lastSpawn = 0;\r\n\r\n            if (self.aoeTimeout) {\r\n                clearTimeout(self.aoeTimeout);\r\n                self.aoeTimeout = null;\r\n            }\r\n\r\n            var listCopy = self.minions.slice();\r\n\r\n            for (var i = 0; i < listCopy.length; i++)\r\n                self.world.kill(listCopy[i]);\r\n\r\n        });\r\n\r\n        self.character.onReturn(() => {\r\n            clearTimeout(self.aoeTimeout);\r\n            self.aoeTimeout = null;\r\n        });\r\n    }\r\n\r\n    begin(attacker) {\r\n        var self = this;\r\n\r\n        self.resetAoE();\r\n\r\n        super.begin(attacker);\r\n    }\r\n\r\n    hit(attacker, target, hitInfo) {\r\n        var self = this;\r\n\r\n        if (self.frozen)\r\n            return;\r\n\r\n        if (self.canCastAoE()) {\r\n            self.doAoE();\r\n            return;\r\n        }\r\n\r\n        if (self.canSpawn())\r\n            self.spawnMinions();\r\n\r\n        if (self.isAttacked())\r\n            self.beginMinionAttack();\r\n\r\n        super.hit(attacker, target, hitInfo);\r\n    }\r\n\r\n    doAoE() {\r\n        var self = this;\r\n\r\n        /**\r\n         * The reason this function does not use its superclass\r\n         * representation is because of the setTimeout function\r\n         * which does not allow us to call super().\r\n         */\r\n\r\n        self.resetAoE();\r\n\r\n        self.lastHit = self.getTime();\r\n\r\n        self.pushFreeze(true);\r\n\r\n        self.pushCountdown(self.aoeCountdown);\r\n\r\n        self.aoeTimeout = setTimeout(() => {\r\n\r\n            self.dealAoE(self.aoeRadius, true);\r\n\r\n            self.pushFreeze(false);\r\n\r\n        }, 5000);\r\n\r\n    }\r\n\r\n    spawnMinions() {\r\n        var self = this;\r\n\r\n        self.lastSpawn = new Date().getTime();\r\n\r\n        for (var i = 0; i < self.minionCount; i++)\r\n            self.minions.push(self.world.spawnMob(13, self.character.x, self.character.y));\r\n\r\n        _.each(self.minions, (minion) => {\r\n\r\n            minion.aggressive = true;\r\n            minion.spawnDistance = 12;\r\n\r\n            minion.onDeath(() => {\r\n\r\n                if (self.isLast())\r\n                    self.lastSpawn = new Date().getTime();\r\n\r\n                self.minions.splice(self.minions.indexOf(minion), 1);\r\n\r\n            });\r\n\r\n            if (self.isAttacked())\r\n                self.beginMinionAttack();\r\n\r\n        });\r\n    }\r\n\r\n    beginMinionAttack() {\r\n        var self = this;\r\n\r\n        if (!self.hasMinions())\r\n            return;\r\n\r\n        _.each(self.minions, (minion) => {\r\n\r\n            var randomTarget = self.getRandomTarget();\r\n\r\n            if (!minion.hasTarget() && randomTarget)\r\n                minion.combat.begin(randomTarget);\r\n\r\n        });\r\n    }\r\n\r\n    resetAoE() {\r\n        this.lastAoE = new Date().getTime();\r\n    }\r\n\r\n    getRandomTarget() {\r\n        var self = this;\r\n\r\n        if (self.isAttacked()) {\r\n            var keys = Object.keys(self.attackers),\r\n                randomAttacker = self.attackers[keys[Utils.randomInt(0, keys.length)]];\r\n\r\n            if (randomAttacker)\r\n                return randomAttacker;\r\n        }\r\n\r\n        if (self.character.hasTarget())\r\n            return self.character.target;\r\n\r\n        return null;\r\n    }\r\n\r\n    pushFreeze(state) {\r\n        var self = this;\r\n\r\n        self.character.frozen = state;\r\n        self.character.stunned = state;\r\n    }\r\n\r\n    pushCountdown(count) {\r\n        var self = this;\r\n\r\n        self.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: self.character.region,\r\n            message: new Messages.NPC(Packets.NPCOpcode.Countdown, {\r\n                id: self.character.instance,\r\n                countdown: count\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    getMinions() {\r\n        var self = this,\r\n            grids = self.world.getGrids();\r\n\r\n\r\n    }\r\n\r\n    isLast() {\r\n        return this.minions.length === 1;\r\n    }\r\n\r\n    hasMinions() {\r\n        return this.minions.length > 0;\r\n    }\r\n\r\n    canCastAoE() {\r\n        return new Date().getTime() - this.lastAoE > 30000;\r\n    }\r\n\r\n    canSpawn() {\r\n        return new Date().getTime() - this.lastSpawn > 45000 && !this.hasMinions() && this.isAttacked();\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = QueenAnt;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/data/combat/queenant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/queenant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 179,
    "kind": "class",
    "name": "QueenAnt",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/queenant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "begin",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#begin",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#hit",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "doAoE",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#doAoE",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "spawnMinions",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#spawnMinions",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "beginMinionAttack",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#beginMinionAttack",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "resetAoE",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#resetAoE",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "lastAoE",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#lastAoE",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "getRandomTarget",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#getRandomTarget",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "pushFreeze",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#pushFreeze",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "pushCountdown",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#pushCountdown",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "getMinions",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#getMinions",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "isLast",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#isLast",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "hasMinions",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#hasMinions",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "canCastAoE",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#canCastAoE",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "canSpawn",
    "memberof": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/queenant.js~QueenAnt#canSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/skeletonking.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\r\n    Utils = require('../../js/util/utils'),\r\n    _ = require('underscore');\r\n\r\nclass SkeletonKing extends Combat {\r\n\r\n    /**\r\n     * First of its kind, the Skeleton King will spawn 4 minions.\r\n     * Two sorcerers on (x + 1, y + 1) & (x - 1, y + 1)\r\n     *\r\n     * And two death knights on (x + 1, y - 1) & (x - 1, y - 1)\r\n     */\r\n\r\n    constructor(character) {\r\n        character.spawnDistance = 10;\r\n        super(character);\r\n\r\n        let self = this;\r\n\r\n        self.lastSpawn = 0;\r\n\r\n        self.minions = [];\r\n\r\n        character.onDeath(() => {\r\n            self.reset();\r\n        });\r\n    }\r\n\r\n    reset() {\r\n        var self = this;\r\n\r\n        self.lastSpawn = 0;\r\n\r\n        var listCopy = self.minions.slice();\r\n\r\n        for (var i = 0; i < listCopy.length; i++)\r\n            self.world.kill(listCopy[i]);\r\n    }\r\n\r\n    hit(character, target, hitInfo) {\r\n        var self = this;\r\n\r\n        if (self.isAttacked())\r\n            self.beginMinionAttack();\r\n\r\n        if (self.canSpawn())\r\n            self.spawnMinions();\r\n\r\n        super.hit(character, target, hitInfo);\r\n    }\r\n\r\n    spawnMinions() {\r\n        var self = this,\r\n            x = self.character.x,\r\n            y = self.character.y;\r\n\r\n        self.lastSpawn = new Date().getTime();\r\n\r\n        if (!self.colliding(x + 2, y - 2))\r\n            self.minions.push(self.world.spawnMob(17, x + 2, y + 2));\r\n\r\n        if (!self.colliding(x - 2, y - 2))\r\n            self.minions.push(self.world.spawnMob(17, x - 2, y + 2));\r\n\r\n        if (!self.colliding(x + 1, y + 1))\r\n            self.minions.push(self.world.spawnMob(11, x + 1, y - 1));\r\n\r\n        if (!self.colliding(x - 1, y + 1))\r\n            self.minions.push(self.world.spawnMob(11, x - 1, y - 1));\r\n\r\n        _.each(self.minions, (minion) => {\r\n            minion.onDeath(() => {\r\n                if (self.isLast())\r\n                    self.lastSpawn = new Date().getTime();\r\n\r\n                self.minions.splice(self.minions.indexOf(minion), 1);\r\n            });\r\n\r\n            if (self.isAttacked())\r\n                self.beginMinionAttack();\r\n        });\r\n    }\r\n\r\n    beginMinionAttack() {\r\n        var self = this;\r\n\r\n        if (!self.hasMinions())\r\n            return;\r\n\r\n        _.each(self.minions, (minion) => {\r\n            var randomTarget = self.getRandomTarget();\r\n\r\n            if (!minion.hasTarget() && randomTarget)\r\n                minion.combat.begin(randomTarget);\r\n\r\n        });\r\n    }\r\n\r\n    getRandomTarget() {\r\n        var self = this;\r\n\r\n        if (self.isAttacked()) {\r\n            var keys = Object.keys(self.attackers),\r\n                randomAttacker = self.attackers[keys[Utils.randomInt(0, keys.length)]];\r\n\r\n            if (randomAttacker)\r\n                return randomAttacker;\r\n        }\r\n\r\n        if (self.character.hasTarget())\r\n            return self.character.target;\r\n\r\n        return null;\r\n    }\r\n\r\n    hasMinions() {\r\n        return this.minions.length > 0;\r\n    }\r\n\r\n    isLast() {\r\n        return this.minions.length === 1;\r\n    }\r\n\r\n    canSpawn() {\r\n        return (new Date().getTime() - this.lastSpawn > 25000) && !this.hasMinions() && this.isAttacked();\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = SkeletonKing;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/data/combat/skeletonking.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/skeletonking.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "SkeletonKing",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/skeletonking.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#constructor",
    "access": "public",
    "description": "First of its kind, the Skeleton King will spawn 4 minions.\nTwo sorcerers on (x + 1, y + 1) & (x - 1, y + 1)\n\nAnd two death knights on (x + 1, y - 1) & (x - 1, y - 1)",
    "lineNumber": 14
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "reset",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#reset",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#hit",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "spawnMinions",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#spawnMinions",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "beginMinionAttack",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#beginMinionAttack",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "getRandomTarget",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#getRandomTarget",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "hasMinions",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#hasMinions",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "isLast",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#isLast",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "canSpawn",
    "memberof": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/skeletonking.js~SkeletonKing#canSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "Kaetram-Open/server/data/combat/tenebris.js",
    "content": "let Combat = require('../../js/game/entity/character/combat/combat'),\r\n    Messages = require('../../js/network/messages'),\r\n    Packets = require('../../js/network/packets'),\r\n    Utils = require('../../js/util/utils');\r\n\r\nclass Tenebris extends Combat {\r\n\r\n    constructor(character) {\r\n        character.spawnDistance = 24;\r\n        super(character);\r\n\r\n        let self = this;\r\n\r\n        self.illusions = [];\r\n        self.firstIllusionKilled = false;\r\n\r\n        self.lastIllusion = new Date().getTime();\r\n        self.respawnDelay = 95000;\r\n\r\n        character.onDeath(() => {\r\n\r\n            if (self.isIllusion())\r\n                if (!self.firstIllusionKilled)\r\n                    self.spawnTenbris();\r\n            else {\r\n\r\n                self.removeIllusions();\r\n\r\n                self.reset();\r\n\r\n            }\r\n        });\r\n\r\n        if (!self.isIllusion())\r\n            self.forceTalk('Who dares summon Tenebris!');\r\n    }\r\n\r\n    reset() {\r\n        var self = this;\r\n\r\n        self.illusions = [];\r\n        self.firstIllusionKilled = false;\r\n\r\n        setTimeout(() => {\r\n\r\n            var offset = Utils.positionOffset(4);\r\n\r\n            self.world.spawnMob(105, 48 + offset.x, 338 + offset.y);\r\n\r\n        }, self.respawnDelay);\r\n\r\n    }\r\n\r\n    hit(attacker, target, hitInfo) {\r\n        var self = this;\r\n\r\n        if (self.isAttacked())\r\n            self.beginIllusionAttack();\r\n\r\n        if (self.canSpawn())\r\n            self.spawnIllusions();\r\n\r\n        super.hit(attacker, target, hitInfo);\r\n    }\r\n\r\n    spawnTenbris() {\r\n        var self = this;\r\n\r\n        self.world.spawnMob(104, self.character.x, self.character.y);\r\n    }\r\n\r\n    spawnIllusions() {\r\n        var self = this;\r\n\r\n        self.illusions.push(self.world.spawnMob(105, self.character.x + 1, self.character.y + 1));\r\n        self.illusions.push(self.world.spawnMob(105, self.character.x - 1, self.character.y + 1));\r\n\r\n        _.each(self.illusions, (illusion) => {\r\n            illusion.onDeath(() => {\r\n                if (self.isLast())\r\n                    self.lastIllusion = new Date().getTime();\r\n\r\n                self.illusions.splice(self.illusions.indexOf(illusion), 1);\r\n            });\r\n\r\n            if (self.isAttacked())\r\n                self.beginIllusionAttack();\r\n        });\r\n\r\n        self.character.setPosition(62, 343);\r\n\r\n        self.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: self.character.region,\r\n            message: new Messages.Teleport({\r\n                id: self.character.instance,\r\n                x: self.character.x,\r\n                y: self.character.y,\r\n                withAnimation: true\r\n            })\r\n        });\r\n        \r\n    }\r\n\r\n    removeIllusions() {\r\n        var self = this;\r\n\r\n        self.lastIllusion = 0;\r\n\r\n        var listCopy = self.illusions.slice();\r\n\r\n        for (var i = 0; i < listCopy.length; i++)\r\n            self.world.kill(listCopy[i]);\r\n    }\r\n\r\n    beginIllusionAttack() {\r\n        var self = this;\r\n\r\n        if (!self.hasIllusions())\r\n            return;\r\n\r\n        _.each(self.illusions, (illusion) => {\r\n            var target = self.getRandomTarget();\r\n\r\n            if (!illusion.hasTarget && target)\r\n                illusion.combat.begin(target);\r\n\r\n        });\r\n    }\r\n\r\n    getRandomTarget() {\r\n        var self = this;\r\n\r\n        if (self.isAttacked()) {\r\n            var keys = Object.keys(self.attackers),\r\n                randomAttacker = self.attackers[keys[Utils.randomInt(0, keys.length)]];\r\n\r\n            if (randomAttacker)\r\n                return randomAttacker;\r\n        }\r\n\r\n        if (self.character.hasTarget())\r\n            return self.character.target;\r\n\r\n        return null;\r\n    }\r\n\r\n    forceTalk(instance, message) {\r\n        var self = this;\r\n\r\n        if (!self.world)\r\n            return;\r\n\r\n        self.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: self.character.region,\r\n            message: new Messages.NPC(Packets.NPCOpcode.Talk, {\r\n                id: instance,\r\n                text: message,\r\n                nonNPC: true\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    isLast() {\r\n        return this.illusions.length === 1;\r\n    }\r\n\r\n    canSpawn() {\r\n        return !this.isIllusion() && !this.hasIllusions && new Date().getTime() - this.lastIllusion === 45000 && Utils.randomInt(0, 4) === 2;\r\n    }\r\n\r\n    isIllusion() {\r\n        return this.character.id === 105;\r\n    }\r\n\r\n    hasIllusions() {\r\n        return this.illusions.length > 0;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Tenebris;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/data/combat/tenebris.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/tenebris.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "class",
    "name": "Tenebris",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/combat/tenebris.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "Combat"
    ],
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "reset",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#reset",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#hit",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "spawnTenbris",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#spawnTenbris",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "spawnIllusions",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#spawnIllusions",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "removeIllusions",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#removeIllusions",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "beginIllusionAttack",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#beginIllusionAttack",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "getRandomTarget",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#getRandomTarget",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "forceTalk",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#forceTalk",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "isLast",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#isLast",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "canSpawn",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#canSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "isIllusion",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#isIllusion",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "hasIllusions",
    "memberof": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/combat/tenebris.js~Tenebris#hasIllusions",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "Kaetram-Open/server/data/items/flask.js",
    "content": "/* global module */\r\n\r\nlet Items = require('../../js/util/items'),\r\n    Utils = require('../../js/util/utils');\r\n\r\nclass Flask {\r\n\r\n    constructor() {\r\n        let self = this;\r\n\r\n        self.id = 190;\r\n\r\n        self.healAmount = 0;\r\n        self.manaAmount = 0;\r\n\r\n        let customData = Items.getCustomData(self.id);\r\n\r\n        if (customData) {\r\n            self.healAmount = customData.healAmount ? customData.healAmount : 0;\r\n            self.manaAmount = customData.manaAmount ? customData.manaAmount : 0;\r\n        }\r\n    }\r\n\r\n    onUse(character) {\r\n        let self = this;\r\n\r\n        if (self.healAmount)\r\n            character.healHitPoints(self.healAmount);\r\n\r\n        if (self.manaAmount)\r\n            character.healManaPoints(self.manaAmount);\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Flask;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/data/items/flask.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/data/items/flask.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/items/flask.js~Items",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/items/flask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "class",
    "name": "Flask",
    "memberof": "Kaetram-Open/server/data/items/flask.js",
    "static": true,
    "longname": "Kaetram-Open/server/data/items/flask.js~Flask",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/data/items/flask.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/data/items/flask.js~Flask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/items/flask.js~Flask#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "onUse",
    "memberof": "Kaetram-Open/server/data/items/flask.js~Flask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/data/items/flask.js~Flask#onUse",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/commands.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Messages = require('../network/messages'),\r\n    Packets = require('../network/packets'),\r\n    MapClient = require('../../data/map/world_client'),\r\n    config = require('../../config');\r\n\r\nclass Commands {\r\n\r\n    constructor(player) {\r\n        let self = this;\r\n\r\n        self.player = player;\r\n        self.world = player.world;\r\n    }\r\n\r\n    parse(rawText) {\r\n        let self = this,\r\n            blocks = rawText.substring(1).split(' ');\r\n\r\n        if (blocks.length < 1)\r\n            return;\r\n\r\n        let command = blocks.shift();\r\n\r\n        self.handlePlayerCommands(command, blocks);\r\n\r\n        if (self.player.rights > 0)\r\n            self.handleModeratorCommands(command, blocks);\r\n\r\n        if (self.player.rights > 1)\r\n            self.handleAdminCommands(command, blocks);\r\n    }\r\n\r\n    handlePlayerCommands(command, blocks) {\r\n        let self = this;\r\n\r\n        switch(command) {\r\n\r\n            case 'players':\r\n                let population = self.world.getPopulation(),\r\n                    singular = population === 1;\r\n\r\n                self.player.notify(`There ${singular ? 'is' : 'are'} currently ${population} ${singular ? 'person' : 'people'} online.`);\r\n\r\n                return;\r\n\r\n            case 'tutstage':\r\n\r\n                log.info(self.player.getTutorial().stage);\r\n\r\n                return;\r\n\r\n            case 'coords':\r\n\r\n                self.player.send(new Messages.Notification(Packets.NotificationOpcode.Text, 'x: ' + self.player.x + ' y: ' + self.player.y));\r\n\r\n                return;\r\n\r\n            case 'progress':\r\n\r\n                let tutorialQuest = self.player.getTutorial();\r\n\r\n                self.player.send(new Messages.Quest(Packets.QuestOpcode.Progress, {\r\n                    id: tutorialQuest.id,\r\n                    stage: tutorialQuest.stage\r\n                }));\r\n\r\n                return;\r\n\r\n            case 'global':\r\n\r\n                self.world.push(Packets.PushOpcode.Broadcast, {\r\n                    message: new Messages.Chat({\r\n                        name: self.player.username,\r\n                        text: blocks.join(' '),\r\n                        isGlobal: true,\r\n                        withBubble: false,\r\n                        colour: 'rgba(191, 191, 63, 1.0)'\r\n                    })\r\n                });\r\n\r\n                return;\r\n\r\n            case 'region':\r\n                log.info(self.player.region);\r\n                return;\r\n\r\n            case 'getintroduction':\r\n                log.info(self.player.quests.getQuest(0).getStage());\r\n                return;\r\n\r\n            case 'resetintro':\r\n                let introduction = self.player.quests.getQuest(0);\r\n\r\n                introduction.setStage(0);\r\n                introduction.clearPointers();\r\n                introduction.update();\r\n                introduction.updatePointers();\r\n\r\n                self.player.updateRegion();\r\n                self.player.save();\r\n\r\n                return;\r\n\r\n        }\r\n    }\r\n\r\n    handleModeratorCommands(command, blocks) {\r\n        let self = this;\r\n\r\n        switch (command) {\r\n\r\n            case 'mute':\r\n            case 'ban':\r\n\r\n                let duration = blocks.shift(),\r\n                    targetName = blocks.join(' '),\r\n                    user = self.world.getPlayerByName(targetName);\r\n\r\n                if (!user)\r\n                    return;\r\n\r\n                if (!duration)\r\n                    duration = 24;\r\n\r\n                let timeFrame = new Date().getTime() + duration * 60 * 60;\r\n\r\n                if (command === 'mute')\r\n                    user.mute = timeFrame;\r\n                else if (command === 'ban') {\r\n                    user.ban = timeFrame;\r\n                    user.save();\r\n\r\n                    user.sendUTF8('ban');\r\n                    user.connection.close('banned');\r\n                }\r\n\r\n                user.save();\r\n\r\n                return;\r\n\r\n            case 'unmute':\r\n\r\n                let uTargetName = blocks.join(' '),\r\n                    uUser = self.world.getPlayerByName(uTargetName);\r\n\r\n                if (!uTargetName)\r\n                    return;\r\n\r\n                uUser.mute = new Date().getTime() - 3600;\r\n\r\n                uUser.save();\r\n\r\n                return;\r\n\r\n        }\r\n    }\r\n\r\n    handleAdminCommands(command, blocks) {\r\n        let self = this,\r\n            username, player;\r\n\r\n        switch (command) {\r\n\r\n            case 'spawn':\r\n\r\n                let spawnId = parseInt(blocks.shift()),\r\n                    count = parseInt(blocks.shift()),\r\n                    ability = parseInt(blocks.shift()),\r\n                    abilityLevel = parseInt(blocks.shift());\r\n\r\n                if (!spawnId || !count)\r\n                    return;\r\n\r\n                self.player.inventory.add({\r\n                    id: spawnId,\r\n                    count: count,\r\n                    ability: ability ? ability : -1,\r\n                    abilityLevel: abilityLevel ? abilityLevel : -1\r\n                });\r\n\r\n                return;\r\n\r\n            case 'maxhealth':\r\n\r\n                self.player.notify('Max health is ' + self.player.hitPoints.getMaxHitPoints());\r\n\r\n                return;\r\n\r\n            case 'ipban':\r\n\r\n                return;\r\n\r\n            case 'drop':\r\n\r\n                let id = parseInt(blocks.shift()),\r\n                    dCount = parseInt(blocks.shift());\r\n\r\n                if (!id)\r\n                    return;\r\n\r\n                if (!dCount)\r\n                    dCount = 1;\r\n\r\n                self.world.dropItem(id, dCount, self.player.x, self.player.y);\r\n\r\n                return;\r\n\r\n            case 'ghost':\r\n\r\n                self.player.equip('ghost', 1, -1, -1);\r\n\r\n                return;\r\n\r\n            case 'notify':\r\n\r\n                self.player.notify('Hello!!!');\r\n\r\n                return;\r\n\r\n            case 'teleport':\r\n\r\n                let x = parseInt(blocks.shift()),\r\n                    y = parseInt(blocks.shift()),\r\n                    withAnimation = parseInt(blocks.shift())\r\n\r\n                log.info(withAnimation ? true : false);\r\n\r\n                if (x && y)\r\n                    self.player.teleport(x, y, false, withAnimation ? true : false);\r\n\r\n                return;\r\n\r\n            case 'teletome':\r\n\r\n                username = blocks.join(' ');\r\n                player = self.world.getPlayerByName(username);\r\n\r\n                if (player)\r\n                    player.teleport(self.player.x, self.player.y);\r\n\r\n                return;\r\n\r\n            case 'teleto':\r\n\r\n                username = blocks.join(' ');\r\n                player = self.world.getPlayerByName(username);\r\n\r\n                if (player)\r\n                    self.player.teleport(player.x, player.y);\r\n\r\n                return;\r\n\r\n            case 'nohit':\r\n\r\n                log.info('invincinil');\r\n\r\n                self.player.invincible = !self.player.invincible;\r\n\r\n                return;\r\n\r\n            case 'mob':\r\n\r\n                let npcId = parseInt(blocks.shift());\r\n\r\n                self.world.spawnMob(npcId, self.player.x, self.player.y);\r\n\r\n                return;\r\n\r\n            case 'pointer':\r\n\r\n                if (blocks.length > 1) {\r\n                    let posX = parseInt(blocks.shift()),\r\n                        posY = parseInt(blocks.shift());\r\n\r\n                    if (!posX || !posY)\r\n                        return;\r\n\r\n                    self.player.send(new Messages.Pointer(Packets.PointerOpcode.Location, {\r\n                        id: self.player.instance,\r\n                        x: posX,\r\n                        y: posY\r\n                    }));\r\n                } else {\r\n                    let instance = blocks.shift();\r\n\r\n                    if (!instance)\r\n                        return;\r\n\r\n                    self.player.send(new Messages.Pointer(Packets.PointerOpcode.NPC, {\r\n                        id: instance\r\n                    }));\r\n                }\r\n\r\n                return;\r\n\r\n            case 'teleall':\r\n\r\n                _.each(self.world.players, (player) => {\r\n                    player.teleport(self.player.x, self.player.y);\r\n                });\r\n\r\n                return;\r\n\r\n            case 'attackaoe':\r\n\r\n                let radius = parseInt(blocks.shift());\r\n\r\n                if (!radius)\r\n                    radius = 1;\r\n\r\n                self.player.combat.dealAoE(radius);\r\n\r\n                return;\r\n\r\n            case 'addexp':\r\n\r\n                let exp = parseInt(blocks.shift());\r\n\r\n                if (!exp)\r\n                    return;\r\n\r\n                self.player.addExperience(exp);\r\n\r\n                return;\r\n\r\n            case 'region':\r\n\r\n                let tileX = parseInt(blocks.shift()),\r\n                    tileY = parseInt(blocks.shift()),\r\n                    tileInfo = parseInt(blocks.shift());\r\n\r\n                if (!tileX || !tileY)\r\n                    return;\r\n\r\n                let tileIndex = self.world.region.gridPositionToIndex(tileX - 1, tileY);\r\n\r\n                log.info('Sending Tile: ' + tileIndex);\r\n\r\n                self.world.push(Packets.PushOpcode.Player, {\r\n                    player: self.player,\r\n                    message: new Messages.Region(Packets.RegionOpcode.Modify, {\r\n                        index: tileIndex,\r\n                        data: tileInfo\r\n                    })\r\n                });\r\n\r\n                return;\r\n\r\n            case 'gettile':\r\n\r\n                let getTileX = parseInt(blocks.shift()),\r\n                    getTileY = parseInt(blocks.shift());\r\n\r\n                if (!getTileX || !getTileY)\r\n                    return;\r\n\r\n                let getTileIndex = self.world.region.gridPositionToIndex(getTileX - 1, getTileY);\r\n\r\n                log.info('Tile Index: ' + getTileIndex);\r\n                log.info('Tile Info: ' + MapClient.data[getTileIndex]);\r\n                log.info('Actual Index: ' + self.world.map.getActualTileIndex(getTileIndex));\r\n\r\n                return;\r\n\r\n            case 'instance':\r\n                self.world.region.createInstance(self.player, self.player.region);\r\n                return;\r\n\r\n            case 'checkregion':\r\n                self.player.notify('Current Region: ' + self.player.region);\r\n                return;\r\n\r\n            case 'deinstance':\r\n                self.world.region.deleteInstance(self.player);\r\n                return;\r\n\r\n            case 'debug':\r\n                self.player.send(new Messages.Command({\r\n                    command: 'debug'\r\n                }));\r\n                return;\r\n\r\n            case 'addexperience':\r\n                self.player.addExperience(parseInt(blocks.shift()));\r\n                return;\r\n\r\n            case 'attackrange':\r\n                log.info(self.player.attackRange);\r\n                return;\r\n\r\n            case 'resetregions':\r\n                log.info('Resetting regions...');\r\n\r\n                self.player.regionsLoaded = [];\r\n                self.player.updateRegion();\r\n\r\n                return;\r\n\r\n            case 'finishQuest':\r\n\r\n                self.player.quests.getQuest(1).finish();\r\n\r\n                break;\r\n\r\n            case 'finishAchievement':\r\n\r\n                self.player.quests.achievements[0].finish();\r\n\r\n                break;\r\n\r\n            case 'resetAchievement':\r\n\r\n                self.player.quests.achievements[1].setProgress(0);\r\n\r\n                break;\r\n\r\n            case 'clear':\r\n\r\n                self.player.inventory.forEachSlot((slot) => {\r\n                    if (slot !== -1) {\r\n                        self.player.inventory.remove(slot.id, slot.count);\r\n                    }\r\n                });\r\n\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Commands;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/controllers/commands.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/commands.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "Commands",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/commands.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "parse",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#parse",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "rawText",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "handlePlayerCommands",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#handlePlayerCommands",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "blocks",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "handleModeratorCommands",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#handleModeratorCommands",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "blocks",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "handleAdminCommands",
    "memberof": "Kaetram-Open/server/js/controllers/commands.js~Commands",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/commands.js~Commands#handleAdminCommands",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "blocks",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/incoming.js",
    "content": "/* global module */\r\n\r\nlet Packets = require('../network/packets'),\r\n    Request = require('request'),\r\n    config = require('../../config.json'),\r\n    _ = require('underscore'),\r\n    Messages = require('../network/messages'),\r\n    sanitizer = require('sanitizer'),\r\n    Commands = require('./commands'),\r\n    Items = require('../util/items'),\r\n    Creator = require('../database/mongodb/creator'),\r\n    Utils = require('../util/utils');\r\n\r\nclass Incoming {\r\n\r\n    constructor(player) {\r\n        let self = this;\r\n\r\n        self.player = player;\r\n        self.connection = self.player.connection;\r\n        self.world = self.player.world;\r\n        self.database = self.player.database;\r\n        self.commands = new Commands(self.player);\r\n\r\n        self.connection.listen((data) => {\r\n\r\n            let packet = data.shift(),\r\n                message = data[0];\r\n\r\n            if (!Utils.validPacket(packet)) {\r\n\r\n                log.error('Non-existent packet received: ' + packet + ' data: ');\r\n                log.error(message);\r\n\r\n                return;\r\n            }\r\n\r\n            self.player.refreshTimeout();\r\n\r\n            switch(packet) {\r\n\r\n                case Packets.Intro:\r\n                    self.handleIntro(message);\r\n                    break;\r\n\r\n                case Packets.Ready:\r\n                    self.handleReady(message);\r\n                    break;\r\n\r\n                case Packets.Who:\r\n                    self.handleWho(message);\r\n                    break;\r\n\r\n                case Packets.Equipment:\r\n                    self.handleEquipment(message);\r\n                    break;\r\n\r\n                case Packets.Movement:\r\n                    self.handleMovement(message);\r\n                    break;\r\n\r\n                case Packets.Request:\r\n                    self.handleRequest(message);\r\n                    break;\r\n\r\n                case Packets.Target:\r\n                    self.handleTarget(message);\r\n                    break;\r\n\r\n                case Packets.Combat:\r\n                    self.handleCombat(message);\r\n                    break;\r\n\r\n                case Packets.Projectile:\r\n                    self.handleProjectile(message);\r\n                    break;\r\n\r\n                case Packets.Network:\r\n                    self.handleNetwork(message);\r\n                    break;\r\n\r\n                case Packets.Chat:\r\n                    self.handleChat(message);\r\n                    break;\r\n\r\n                case Packets.Inventory:\r\n                    self.handleInventory(message);\r\n                    break;\r\n\r\n                case Packets.Bank:\r\n                    self.handleBank(message);\r\n                    break;\r\n\r\n                case Packets.Respawn:\r\n                    self.handleRespawn(message);\r\n                    break;\r\n\r\n                case Packets.Trade:\r\n                    self.handleTrade(message);\r\n                    break;\r\n\r\n                case Packets.Enchant:\r\n                    self.handleEnchant(message);\r\n                    break;\r\n\r\n                case Packets.Click:\r\n                    self.handleClick(message);\r\n                    break;\r\n\r\n                case Packets.Warp:\r\n                    self.handleWarp(message);\r\n                    break;\r\n\r\n                case Packets.Shop:\r\n                    self.handleShop(message);\r\n                    break;\r\n\r\n                case Packets.Region:\r\n                    self.handleRegion(message);\r\n                    break;\r\n\r\n                case Packets.Camera:\r\n                    self.handleCamera(message);\r\n                    break;\r\n\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    handleIntro(message) {\r\n        let self = this,\r\n            loginType = message.shift(),\r\n            username = message.shift().toLowerCase(),\r\n            password = message.shift(),\r\n            isRegistering = loginType === Packets.IntroOpcode.Register,\r\n            isGuest = loginType === Packets.IntroOpcode.Guest,\r\n            email = isRegistering ? message.shift() : '',\r\n            formattedUsername = username ? username.charAt(0).toUpperCase() + username.slice(1) : '';\r\n\r\n        self.player.username = formattedUsername.substr(0, 32).trim().toLowerCase();\r\n        self.player.password = password.substr(0, 32);\r\n        self.player.email = email.substr(0, 128).toLowerCase();\r\n\r\n        if (self.introduced)\r\n            return;\r\n\r\n        if (self.world.playerInWorld(self.player.username)) {\r\n            self.connection.sendUTF8('loggedin');\r\n            self.connection.close('Player already logged in..');\r\n            return;\r\n        }\r\n\r\n        if (config.overrideAuth) {\r\n            self.database.login(self.player);\r\n            return;\r\n        }\r\n\r\n        if (config.offlineMode) {\r\n            let creator = new Creator(null);\r\n\r\n            self.player.load(Creator.getFullData(self.player));\r\n            self.player.intro();\r\n\r\n            return;\r\n        }\r\n\r\n        self.introduced = true;\r\n\r\n        if (isRegistering) {\r\n            self.database.exists(self.player, (result) => {\r\n                if (result.exists) {\r\n                    self.connection.sendUTF8(result.type + 'exists');\r\n                    self.connection.close(result.type + ' is not available.');\r\n                } else\r\n                    self.database.register(self.player);\r\n            });\r\n\r\n        } else if (isGuest) {\r\n\r\n            self.player.username = 'Guest' + Utils.randomInt(0, 2000000);\r\n            self.player.password = null;\r\n            self.player.email = null;\r\n            self.player.isGuest = true;\r\n\r\n            self.database.login(self.player);\r\n\r\n        } else\r\n            self.database.verify(self.player, (result) => {\r\n                if (result.status === 'success')\r\n                    self.database.login(self.player);\r\n                else {\r\n                    self.connection.sendUTF8('invalidlogin');\r\n                    self.connection.close('Wrong password entered for: ' + self.player.username);\r\n                }\r\n            });\r\n\r\n\r\n    }\r\n\r\n    handleReady(message) {\r\n        let self = this,\r\n            isReady = message.shift(),\r\n            preloadedData = message.shift(),\r\n            userAgent = message.shift();\r\n\r\n        if (!isReady)\r\n            return;\r\n\r\n        if (self.player.regionsLoaded.length > 0 && !preloadedData)\r\n            self.player.regionsLoaded = [];\r\n\r\n        self.player.ready = true;\r\n\r\n        self.world.region.handle(self.player);\r\n        self.world.region.push(self.player);\r\n\r\n        self.player.sendEquipment();\r\n        self.player.loadInventory();\r\n        self.player.loadQuests();\r\n\r\n        if (self.world.map.isOutOfBounds(self.player.x, self.player.y))\r\n            self.player.setPosition(50, 89);\r\n\r\n        if (self.player.userAgent !== userAgent) {\r\n\r\n            self.player.userAgent = userAgent;\r\n\r\n            self.player.regionsLoaded = [];\r\n            self.player.updateRegion(true);\r\n        }\r\n\r\n        self.player.save();\r\n\r\n        if (self.player.readyCallback)\r\n            self.player.readyCallback();\r\n    }\r\n\r\n    handleWho(message) {\r\n        let self = this;\r\n\r\n        _.each(message.shift(), (id) => {\r\n            let entity = self.world.getEntityByInstance(id);\r\n\r\n            if (entity && entity.id)\r\n                self.player.send(new Messages.Spawn(entity));\r\n        });\r\n    }\r\n\r\n    handleEquipment(message) {\r\n        let self = this,\r\n            opcode = message.shift();\r\n\r\n        switch (opcode) {\r\n\r\n            case Packets.EquipmentOpcode.Unequip:\r\n                let type = message.shift();\r\n\r\n                if (!self.player.inventory.hasSpace()) {\r\n                    self.player.send(new Messages.Notification(Packets.NotificationOpcode.Text, 'You do not have enough space in your inventory.'));\r\n                    return;\r\n                }\r\n\r\n                switch (type) {\r\n                    case 'weapon':\r\n\r\n                        if (!self.player.hasWeapon())\r\n                            return;\r\n\r\n                        self.player.inventory.add(self.player.weapon.getItem());\r\n                        self.player.setWeapon(-1, -1, -1, -1);\r\n\r\n                        break;\r\n\r\n                    case 'armour':\r\n                        if (self.player.hasArmour() && self.player.armour.id === 114)\r\n                            return;\r\n\r\n                        self.player.inventory.add(self.player.armour.getItem());\r\n                        self.player.setArmour(114, 1, -1, -1);\r\n\r\n                        break;\r\n\r\n                    case 'pendant':\r\n\r\n                        if (!self.player.hasPendant())\r\n                            return;\r\n\r\n                        self.player.inventory.add(self.player.pendant.getItem());\r\n                        self.player.setPendant(-1, -1, -1, -1);\r\n\r\n                        break;\r\n\r\n                    case 'ring':\r\n\r\n                        if (!self.player.hasRing())\r\n                            return;\r\n\r\n                        self.player.inventory.add(self.player.ring.getItem());\r\n                        self.player.setRing(-1, -1, -1, -1);\r\n\r\n                        break;\r\n\r\n                    case 'boots':\r\n\r\n                        if (!self.player.hasBoots())\r\n                            return;\r\n\r\n                        self.player.inventory.add(self.player.boots.getItem());\r\n                        self.player.setBoots(-1, -1, -1, -1);\r\n\r\n                        break;\r\n                }\r\n\r\n                self.player.send(new Messages.Equipment(Packets.EquipmentOpcode.Unequip, [type]));\r\n                self.player.sync();\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleMovement(message) {\r\n        let self = this,\r\n            opcode = message.shift(),\r\n            orientation;\r\n\r\n        if (!self.player || self.player.dead)\r\n            return;\r\n\r\n        switch (opcode) {\r\n            case Packets.MovementOpcode.Request:\r\n                let requestX = message.shift(),\r\n                    requestY = message.shift(),\r\n                    playerX = message.shift(),\r\n                    playerY = message.shift();\r\n\r\n                if (self.preventNoClip(requestX, requestY))\r\n                    self.player.guessPosition(requestX, requestY);\r\n\r\n                break;\r\n\r\n            case Packets.Movement.Started:\r\n                let selectedX = message.shift(),\r\n                    selectedY = message.shift(),\r\n                    pX = message.shift(),\r\n                    pY = message.shift();\r\n\r\n                if (pX !== self.player.x || pY !== self.player.y || self.player.stunned || !self.preventNoClip(selectedX, selectedY))\r\n                    return;\r\n\r\n                self.player.moving = true;\r\n\r\n                break;\r\n\r\n            case Packets.MovementOpcode.Step:\r\n                let x = message.shift(),\r\n                    y = message.shift();\r\n\r\n                if (self.player.stunned || !self.preventNoClip(x, y))\r\n                    return;\r\n\r\n                self.player.setPosition(x, y);\r\n\r\n                break;\r\n\r\n            case Packets.MovementOpcode.Stop:\r\n                let posX = message.shift(),\r\n                    posY = message.shift(),\r\n                    id = message.shift(),\r\n                    hasTarget = message.shift(),\r\n                    entity = self.world.getEntityByInstance(id);\r\n\r\n                orientation = message.shift();\r\n\r\n                if (entity && entity.type === 'item')\r\n                    self.player.inventory.add(entity);\r\n\r\n                if (self.world.map.isDoor(posX, posY) && !hasTarget) {\r\n                    let destination = self.world.map.getDoorDestination(posX, posY);\r\n\r\n                    self.player.teleport(destination.x, destination.y, true);\r\n                } else {\r\n                    self.player.setPosition(posX, posY);\r\n                    self.player.setOrientation(orientation);\r\n                }\r\n\r\n                self.player.moving = false;\r\n                self.player.lastMovement = new Date().getTime();\r\n\r\n                break;\r\n\r\n            case Packets.MovementOpcode.Entity:\r\n\r\n                let instance = message.shift(),\r\n                    entityX = message.shift(),\r\n                    entityY = message.shift(),\r\n                    oEntity = self.world.getEntityByInstance(instance);\r\n\r\n                if (!oEntity || (oEntity.x === entityX && oEntity.y === entityY))\r\n                    return;\r\n\r\n                oEntity.setPosition(entityX, entityY);\r\n\r\n                if (oEntity.hasTarget())\r\n                    oEntity.combat.forceAttack();\r\n\r\n                break;\r\n\r\n            case Packets.MovementOpcode.Orientate:\r\n                orientation = message.shift();\r\n\r\n                self.world.push(Packets.PushOpcode.Regions, {\r\n                    regionId: self.player.region,\r\n                    message: new Messages.Movement(Packets.MovementOpcode.Orientate, [self.player.instance, orientation])\r\n                });\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleRequest(message) {\r\n        let self = this,\r\n            id = message.shift();\r\n\r\n        if (id !== self.player.instance)\r\n            return;\r\n\r\n        self.world.region.push(self.player);\r\n    }\r\n\r\n    handleTarget(message) {\r\n        let self = this,\r\n            opcode = message.shift(),\r\n            instance = message.shift();\r\n\r\n        log.debug('Targeted: ' + instance);\r\n\r\n        switch (opcode) {\r\n\r\n            case Packets.TargetOpcode.Talk:\r\n                let entity = self.world.getEntityByInstance(instance);\r\n\r\n                if (!entity || !self.player.isAdjacent(entity))\r\n                    return;\r\n\r\n                if (entity.type === 'chest') {\r\n                    entity.openChest();\r\n                    return;\r\n                }\r\n\r\n                if (entity.dead)\r\n                    return;\r\n\r\n                if (self.player.npcTalkCallback)\r\n                    self.player.npcTalkCallback(entity);\r\n\r\n                break;\r\n\r\n            case Packets.TargetOpcode.Attack:\r\n\r\n                let target = self.world.getEntityByInstance(instance);\r\n\r\n                if (!target || target.dead || !self.canAttack(self.player, target))\r\n                    return;\r\n\r\n                self.world.push(Packets.PushOpcode.Regions, {\r\n                    regionId: target.region,\r\n                    message: new Messages.Combat(Packets.CombatOpcode.Initiate, {\r\n                        attackerId: self.player.instance,\r\n                        targetId: target.instance\r\n                    })\r\n                });\r\n\r\n                break;\r\n\r\n            case Packets.TargetOpcode.None:\r\n\r\n                self.player.combat.stop();\r\n                self.player.removeTarget();\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleCombat(message) {\r\n        let self = this,\r\n            opcode = message.shift();\r\n\r\n        switch (opcode) {\r\n            case Packets.CombatOpcode.Initiate:\r\n                let attacker = self.world.getEntityByInstance(message.shift()),\r\n                    target = self.world.getEntityByInstance(message.shift());\r\n\r\n                if (!target || target.dead || !attacker || attacker.dead || !self.canAttack(attacker, target))\r\n                    return;\r\n\r\n                attacker.setTarget(target);\r\n\r\n                if (!attacker.combat.started)\r\n                    attacker.combat.forceAttack();\r\n                else {\r\n\r\n                    attacker.combat.start();\r\n\r\n                    attacker.combat.attack(target);\r\n\r\n                }\r\n\r\n                if (target.combat)\r\n                    target.combat.addAttacker(attacker);\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleProjectile(message) {\r\n        let self = this,\r\n            type = message.shift();\r\n\r\n        switch (type) {\r\n            case Packets.ProjectileOpcode.Impact:\r\n                let projectile = self.world.getEntityByInstance(message.shift()),\r\n                    target = self.world.getEntityByInstance(message.shift());\r\n\r\n                if (!target || target.dead || !projectile)\r\n                    return;\r\n\r\n                self.world.handleDamage(projectile.owner, target, projectile.damage);\r\n                self.world.removeProjectile(projectile);\r\n\r\n                if (target.combat.started || target.dead || target.type !== 'mob')\r\n                    return;\r\n\r\n                target.begin(projectile.owner);\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleNetwork(message) {\r\n        let self = this,\r\n            opcode = message.shift();\r\n\r\n        switch (opcode) {\r\n            case Packets.NetworkOpcode.Pong:\r\n                log.info('Pingy pongy pung pong.');\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleChat(message) {\r\n        let self = this,\r\n            text = sanitizer.escape(sanitizer.sanitize(message.shift()));\r\n\r\n        if (!text || text.length < 1 || !(/\\S/.test(text)))\r\n            return;\r\n\r\n        if (text.charAt(0) === '/' || text.charAt(0) === ';')\r\n            self.commands.parse(text);\r\n        else {\r\n\r\n            if (self.player.isMuted()) {\r\n                self.player.send(new Messages.Notification(Packets.NotificationOpcode.Text, 'You are currently muted.'));\r\n                return;\r\n            }\r\n\r\n            if (!self.player.canTalk) {\r\n                self.player.send(new Messages.Notification(Packets.NotificationOpcode.Text, 'You are not allowed to talk for the duration of this event.'));\r\n                return;\r\n            }\r\n\r\n            if (config.debug)\r\n                log.info(`${self.player.username} - ${text}`);\r\n\r\n            self.world.push(Packets.PushOpcode.Regions, {\r\n                regionId: self.player.region,\r\n                message: new Messages.Chat({\r\n                    id: self.player.instance,\r\n                    name: self.player.username,\r\n                    withBubble: true,\r\n                    text: text,\r\n                    duration: 7000\r\n                })\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    handleInventory(message) {\r\n        let self = this,\r\n            opcode = message.shift(),\r\n            id;\r\n\r\n        switch (opcode) {\r\n            case Packets.InventoryOpcode.Remove:\r\n                let item = message.shift(),\r\n                    count;\r\n\r\n                if (!item)\r\n                    return;\r\n\r\n                if (item.count > 1)\r\n                    count = message.shift();\r\n\r\n                id = Items.stringToId(item.string);\r\n\r\n                let iSlot = self.player.inventory.slots[item.index];\r\n\r\n                if (count > iSlot.count)\r\n                    count = iSlot.count;\r\n\r\n                if (self.player.inventory.remove(id, count ? count : item.count, item.index))\r\n                    self.world.dropItem(id, count ? count : 1, self.player.x, self.player.y);\r\n\r\n                break;\r\n\r\n            case Packets.InventoryOpcode.Select:\r\n                let index = message.shift(),\r\n                    slot = self.player.inventory.slots[index],\r\n                    string = slot.string,\r\n                    sCount = slot.count,\r\n                    ability = slot.ability,\r\n                    abilityLevel = slot.abilityLevel;\r\n\r\n                if (!slot)\r\n                    return;\r\n\r\n                id = Items.stringToId(slot.string);\r\n\r\n                if (slot.equippable) {\r\n\r\n                    if (!self.player.canEquip(string))\r\n                        return;\r\n\r\n                    self.player.inventory.remove(id, slot.count, slot.index);\r\n\r\n                    self.player.equip(string, sCount, ability, abilityLevel);\r\n\r\n                } else if (slot.edible) {\r\n\r\n                    self.player.inventory.remove(id, 1, slot.index);\r\n\r\n                    self.player.eat(id);\r\n\r\n                }\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleBank(message) {\r\n        let self = this,\r\n            opcode = message.shift();\r\n\r\n        switch (opcode) {\r\n            case Packets.BankOpcode.Select:\r\n                let type = message.shift(),\r\n                    index = message.shift(),\r\n                    isBank = type === 'bank';\r\n\r\n                if (isBank) {\r\n                    let bankSlot = self.player.bank.slots[index];\r\n\r\n                    //Infinite stacks move all at onces, otherwise move one by one.\r\n                    let moveAmount = Items.maxStackSize(bankSlot.id) === -1 ? bankSlot.count : 1;\r\n\r\n                    if (self.player.inventory.add(bankSlot,moveAmount))\r\n                        self.player.bank.remove(bankSlot.id, moveAmount, index);\r\n\r\n                } else {\r\n                    let inventorySlot = self.player.inventory.slots[index];\r\n\r\n                    if (self.player.bank.add(inventorySlot.id, inventorySlot.count, inventorySlot.ability, inventorySlot.abilityLevel))\r\n                        self.player.inventory.remove(inventorySlot.id, inventorySlot.count, index);\r\n                }\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleRespawn(message) {\r\n        let self = this,\r\n            instance = message.shift();\r\n\r\n        if (self.player.instance !== instance)\r\n            return;\r\n\r\n        let spawn = self.player.getSpawn();\r\n\r\n        self.player.dead = false;\r\n        self.player.setPosition(spawn.x, spawn.y);\r\n\r\n        self.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: self.player.region,\r\n            message: new Messages.Spawn(self.player),\r\n            ignoreId: self.player.instance\r\n        })\r\n\r\n        self.player.send(new Messages.Respawn(self.player.instance, self.player.x, self.player.y));\r\n\r\n        self.player.revertPoints();\r\n    }\r\n\r\n    handleTrade(message) {\r\n        let self = this,\r\n            opcode = message.shift(),\r\n            oPlayer = self.world.getEntityByInstance(message.shift());\r\n\r\n        if (!oPlayer || !opcode)\r\n            return;\r\n\r\n        switch (opcode) {\r\n            case Packets.TradeOpcode.Request:\r\n\r\n                break;\r\n\r\n            case Packets.TradeOpcode.Accept:\r\n\r\n                break;\r\n\r\n            case Packets.TradeOpcode.Decline:\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleEnchant(message) {\r\n        let self = this,\r\n            opcode = message.shift();\r\n\r\n        switch (opcode) {\r\n            case Packets.EnchantOpcode.Select:\r\n                let index = message.shift(),\r\n                    item = self.player.inventory.slots[index],\r\n                    type = 'item';\r\n\r\n                if (Items.isShard(item.id))\r\n                    type = 'shards';\r\n\r\n                self.player.enchant.add(type, item);\r\n\r\n                break;\r\n\r\n            case Packets.EnchantOpcode.Remove:\r\n\r\n                self.player.enchant.remove(message.shift());\r\n\r\n                break;\r\n\r\n            case Packets.EnchantOpcode.Enchant:\r\n\r\n                self.player.enchant.enchant();\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleClick(message) {\r\n        let self = this,\r\n            type = message.shift(),\r\n            state = message.shift();\r\n\r\n        switch (type) {\r\n            case 'profile':\r\n\r\n                self.player.toggleProfile(state);\r\n\r\n                break;\r\n\r\n            case 'inventory':\r\n\r\n                self.player.toggleInventory(state);\r\n\r\n                break;\r\n\r\n            case 'warp':\r\n\r\n                self.player.toggleWarp(state);\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleWarp(message) {\r\n        let self = this,\r\n            id = parseInt(message.shift()) - 1;\r\n\r\n        if (self.player.warp)\r\n            self.player.warp.warp(id);\r\n    }\r\n\r\n    handleShop(message) {\r\n        let self = this,\r\n            opcode = message.shift(),\r\n            shopId = message.shift();\r\n\r\n        switch (opcode) {\r\n            case Packets.ShopOpcode.Buy:\r\n                let buyId = message.shift(),\r\n                    amount = message.shift();\r\n\r\n                if (!buyId || !amount) {\r\n                    self.player.notify('Incorrect purchase packets.');\r\n                    return;\r\n                }\r\n\r\n                log.debug('Received Buy: ' + shopId + ' ' + buyId + ' ' + amount);\r\n\r\n                self.world.shops.buy(self.player, shopId, buyId, amount);\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleCamera(message) {\r\n        let self = this;\r\n\r\n        log.info(self.player.x + ' ' + self.player.y);\r\n\r\n        self.player.cameraArea = null;\r\n        self.player.handler.detectCamera(self.player.x, self.player.y);\r\n    }\r\n\r\n    canAttack(attacker, target) {\r\n\r\n        /**\r\n         * Used to prevent client-sided manipulation. The client will send the packet to start combat\r\n         * but if it was modified by a presumed hacker, it will simply cease when it arrives to this condition.\r\n         */\r\n\r\n        if (attacker.type === 'mob' || target.type === 'mob')\r\n            return true;\r\n\r\n        return attacker.type === 'player' && target.type === 'player' && attacker.pvp && target.pvp;\r\n    }\r\n\r\n    preventNoClip(x, y) {\r\n        let self = this,\r\n            isMapColliding = self.world.map.isColliding(x, y),\r\n            isInstanceColliding = self.player.doors.hasCollision(x, y);\r\n\r\n        if (isMapColliding || isInstanceColliding) {\r\n            self.player.stopMovement(true);\r\n            self.player.notify('We have detected no-clipping in your client. Please submit a bug report.');\r\n\r\n            let x = self.player.previousX < 0 ? self.player.x : self.player.previousX,\r\n                y = self.player.previousY < 0 ? self.player.y : self.player.previousY;\r\n\r\n            self.player.teleport(x, y, false, true);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Incoming;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/controllers/incoming.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "Packets",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Packets",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/incoming.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "Incoming",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/incoming.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 240,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "handleIntro",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleIntro",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "handleReady",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleReady",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "handleWho",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleWho",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "handleEquipment",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleEquipment",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "handleMovement",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleMovement",
    "access": "public",
    "description": null,
    "lineNumber": 322,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "handleRequest",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleRequest",
    "access": "public",
    "description": null,
    "lineNumber": 421,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "handleTarget",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleTarget",
    "access": "public",
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "handleCombat",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleCombat",
    "access": "public",
    "description": null,
    "lineNumber": 485,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "handleProjectile",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 516,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "handleNetwork",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleNetwork",
    "access": "public",
    "description": null,
    "lineNumber": 540,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "handleChat",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleChat",
    "access": "public",
    "description": null,
    "lineNumber": 551,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "handleInventory",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleInventory",
    "access": "public",
    "description": null,
    "lineNumber": 590,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "handleBank",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleBank",
    "access": "public",
    "description": null,
    "lineNumber": 652,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "handleRespawn",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleRespawn",
    "access": "public",
    "description": null,
    "lineNumber": 682,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "handleTrade",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleTrade",
    "access": "public",
    "description": null,
    "lineNumber": 705,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "handleEnchant",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleEnchant",
    "access": "public",
    "description": null,
    "lineNumber": 728,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "handleClick",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleClick",
    "access": "public",
    "description": null,
    "lineNumber": 759,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "handleWarp",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleWarp",
    "access": "public",
    "description": null,
    "lineNumber": 785,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "handleShop",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleShop",
    "access": "public",
    "description": null,
    "lineNumber": 793,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "handleCamera",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#handleCamera",
    "access": "public",
    "description": null,
    "lineNumber": 816,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "canAttack",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#canAttack",
    "access": "public",
    "description": null,
    "lineNumber": 825,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "preventNoClip",
    "memberof": "Kaetram-Open/server/js/controllers/incoming.js~Incoming",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/incoming.js~Incoming#preventNoClip",
    "access": "public",
    "description": null,
    "lineNumber": 838,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/minigames.js",
    "content": "/* global module */\r\n\r\nlet TeamWar = require('../minigames/impl/teamwar');\r\n\r\nclass Minigames {\r\n\r\n    constructor(world) {\r\n        let self = this;\r\n\r\n        self.world = world;\r\n\r\n        self.minigames = {};\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n        \r\n        self.minigames['TeamWar'] = new TeamWar();\r\n    }\r\n\r\n    getTeamWar() {\r\n        return this.minigames['TeamWar'];\r\n    }\r\n}\r\n\r\nmodule.exports = Minigames;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/controllers/minigames.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "variable",
    "name": "TeamWar",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~TeamWar",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/minigames.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "class",
    "name": "Minigames",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~Minigames",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/minigames.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js~Minigames",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~Minigames#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js~Minigames",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~Minigames#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "getTeamWar",
    "memberof": "Kaetram-Open/server/js/controllers/minigames.js~Minigames",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/minigames.js~Minigames#getTeamWar",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/quests.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Introduction = require('../game/entity/character/player/quest/impl/introduction'),\r\n    BulkySituation = require('../game/entity/character/player/quest/impl/bulkysituation'),\r\n    QuestData = require('../../data/quests.json'),\r\n    AchievementData = require('../../data/achievements.json'),\r\n    Achievement = require('../game/entity/character/player/achievement');\r\n\r\nclass Quests {\r\n\r\n    constructor(player) {\r\n        let self = this;\r\n\r\n        self.player = player;\r\n\r\n        self.quests = {};\r\n        self.achievements = {};\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this,\r\n            questCount = 0;\r\n\r\n        _.each(QuestData, (quest) => {\r\n\r\n            if (questCount === 0)\r\n                self.quests[quest.id] = new Introduction(self.player, quest);\r\n            else if (questCount === 1)\r\n                self.quests[quest.id] = new BulkySituation(self.player, quest);\r\n\r\n            questCount++;\r\n        });\r\n\r\n        _.each(AchievementData, (achievement) => {\r\n            self.achievements[achievement.id] = new Achievement(achievement.id, self.player);\r\n        });\r\n    }\r\n\r\n    updateQuests(ids, stages) {\r\n        let self = this;\r\n\r\n        if (!ids || !stages) {\r\n            _.each(self.quests, (quest) => {\r\n                quest.load(0);\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        for (let id = 0; id < ids.length; id++)\r\n            if (!isNaN(parseInt(ids[id])) && self.quests[id])\r\n                self.quests[id].load(stages[id]);\r\n\r\n        if (self.questsReadyCallback)\r\n            self.questsReadyCallback();\r\n    }\r\n\r\n    updateAchievements(ids, progress) {\r\n        let self = this;\r\n\r\n        for (let id = 0; id < ids.length; id++)\r\n            if (!isNaN(parseInt(ids[id])) && self.achievements[id])\r\n                self.achievements[id].setProgress(progress[id]);\r\n\r\n        if (self.achievementsReadyCallback)\r\n            self.achievementsReadyCallback();\r\n    }\r\n\r\n    getQuest(id) {\r\n        let self = this;\r\n\r\n        if (id in self.quests)\r\n            return self.quests[id];\r\n\r\n        return null;\r\n    }\r\n\r\n    getQuests() {\r\n        let self = this,\r\n            ids = '',\r\n            stages = '';\r\n\r\n        for (let id = 0; id < self.getQuestSize(); id++) {\r\n            var quest = self.quests[id];\r\n\r\n            ids += id + ' ';\r\n            stages += quest.stage + ' ';\r\n\r\n        }\r\n\r\n        return {\r\n            username: self.player.username,\r\n            ids: ids,\r\n            stages: stages\r\n        }\r\n    }\r\n\r\n    getAchievements() {\r\n        let self = this,\r\n            ids = '',\r\n            progress = '';\r\n\r\n        for (let id = 0; id < self.getAchievementSize(); id++) {\r\n            ids += id + ' ';\r\n            progress += self.achievements[id].progress + ' '\r\n        }\r\n\r\n        return {\r\n            username: self.player.username,\r\n            ids: ids,\r\n            progress: progress\r\n        }\r\n    }\r\n\r\n    getAchievementData() {\r\n        let self = this,\r\n            achievements = [];\r\n\r\n        self.forEachAchievement((achievement) => {\r\n            achievements.push(achievement.getInfo());\r\n        });\r\n\r\n        return {\r\n            achievements: achievements\r\n        }\r\n    }\r\n\r\n    getQuestData() {\r\n        let self = this,\r\n            quests = [];\r\n\r\n        self.forEachQuest((quest) => {\r\n            quests.push(quest.getInfo());\r\n        });\r\n\r\n        return {\r\n            quests: quests\r\n        }\r\n    }\r\n\r\n    forEachQuest(callback) {\r\n        _.each(this.quests, (quest) => {\r\n            callback(quest);\r\n        });\r\n    }\r\n\r\n    forEachAchievement(callback) {\r\n        _.each(this.achievements, (achievement) => {\r\n            callback(achievement);\r\n        });\r\n    }\r\n\r\n    getQuestsCompleted() {\r\n        let self = this,\r\n            count = 0;\r\n\r\n        for (let id in self.quests)\r\n            if (self.quests.hasOwnProperty(id))\r\n                if (self.quests[id].isFinished())\r\n                    count++;\r\n\r\n        return count;\r\n    }\r\n\r\n    getAchievementsCompleted() {\r\n        let self = this,\r\n            count = 0;\r\n\r\n        for (let id in self.achievements)\r\n            if (self.achievements.hasOwnProperty(id))\r\n                if (self.achievements[id].isFinished())\r\n                    count++;\r\n\r\n        return count;\r\n    }\r\n\r\n    getQuestSize() {\r\n        return Object.keys(this.quests).length;\r\n    }\r\n\r\n    getAchievementSize() {\r\n        return Object.keys(this.achievements).length;\r\n    }\r\n\r\n    getQuestByNPC(npc) {\r\n        let self = this;\r\n\r\n        /**\r\n         * Iterate through the quest list in the order it has been\r\n         * added so that NPC's that are required by multiple quests\r\n         * follow the proper order.\r\n         */\r\n\r\n        for (let id in self.quests) {\r\n            if (self.quests.hasOwnProperty(id)) {\r\n                let quest = self.quests[id];\r\n\r\n                if (quest.hasNPC(npc.id))\r\n                    return quest;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getAchievementByNPC(npc) {\r\n        let self = this;\r\n\r\n        for (let id in self.achievements)\r\n            if (self.achievements.hasOwnProperty(id))\r\n                if (self.achievements[id].data.npc === npc.id && !self.achievements[id].isFinished())\r\n                    return self.achievements[id];\r\n\r\n        return null;\r\n    }\r\n\r\n    getAchievementByMob(mob) {\r\n        let self = this;\r\n\r\n        for (let id in self.achievements)\r\n            if (self.achievements.hasOwnProperty(id))\r\n                if (self.achievements[id].data.mob === mob.id)\r\n                    return self.achievements[id];\r\n\r\n        return null;\r\n    }\r\n\r\n    isQuestMob(mob) {\r\n        let self = this;\r\n\r\n        for (let id in self.quests) {\r\n            if (self.quests.hasOwnProperty(id)) {\r\n                let quest = self.quests[id];\r\n\r\n                if (!quest.isFinished() && quest.hasMob(mob.id))\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isAchievementMob(mob) {\r\n        let self = this;\r\n\r\n        for (let id in self.achievements)\r\n            if (self.achievements.hasOwnProperty(id))\r\n                if (self.achievements[id].data.mob === mob.id && !self.achievements[id].isFinished())\r\n                    return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    isQuestNPC(npc) {\r\n        let self = this;\r\n\r\n        for (let id in self.quests) {\r\n            if (self.quests.hasOwnProperty(id)) {\r\n                let quest = self.quests[id];\r\n\r\n                if (!quest.isFinished() && quest.hasNPC(npc.id))\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isAchievementNPC(npc) {\r\n        let self = this;\r\n\r\n        for (let id in self.achievements)\r\n            if (self.achievements.hasOwnProperty(id))\r\n                if (self.achievements[id].data.npc === npc.id && !self.achievements[id].isFinished())\r\n                    return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    onAchievementsReady(callback) {\r\n        this.achievementsReadyCallback = callback;\r\n    }\r\n\r\n    onQuestsReady(callback) {\r\n        this.questsReadyCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Quests;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/controllers/quests.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/quests.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "class",
    "name": "Quests",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/quests.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 272,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#load",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "updateQuests",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#updateQuests",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "stages",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "updateAchievements",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#updateAchievements",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "progress",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "getQuest",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuest",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "getQuests",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuests",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"username\": *, \"ids\": *, \"stages\": *}"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "getAchievements",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievements",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"username\": *, \"ids\": *, \"progress\": *}"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "getAchievementData",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementData",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"achievements\": *}"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "getQuestData",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuestData",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"quests\": *}"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "forEachQuest",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#forEachQuest",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "forEachAchievement",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#forEachAchievement",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getQuestsCompleted",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuestsCompleted",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "getAchievementsCompleted",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementsCompleted",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "getQuestSize",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuestSize",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "getAchievementSize",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementSize",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "getQuestByNPC",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getQuestByNPC",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "getAchievementByNPC",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementByNPC",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "getAchievementByMob",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#getAchievementByMob",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "params": [
      {
        "name": "mob",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "isQuestMob",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#isQuestMob",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "params": [
      {
        "name": "mob",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "isAchievementMob",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#isAchievementMob",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [
      {
        "name": "mob",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "isQuestNPC",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#isQuestNPC",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "isAchievementNPC",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#isAchievementNPC",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "onAchievementsReady",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#onAchievementsReady",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "achievementsReadyCallback",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#achievementsReadyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "onQuestsReady",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#onQuestsReady",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "questsReadyCallback",
    "memberof": "Kaetram-Open/server/js/controllers/quests.js~Quests",
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/quests.js~Quests#questsReadyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "Kaetram-Open/server/js/controllers/shops.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    ShopData = require('../util/shops'),\r\n    Items = require('../util/items'),\r\n    Messages = require('../network/messages'),\r\n    Packets = require('../network/packets');\r\n\r\nclass Shops {\r\n\r\n    constructor(world) {\r\n        let self = this;\r\n\r\n        self.world = world;\r\n\r\n        self.interval = 60000;\r\n        self.shopInterval = null;\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        self.shopInterval = setInterval(() => {\r\n\r\n            _.each(ShopData.Data, (info) => {\r\n\r\n                for (let i = 0; i < info.count; i++)\r\n                    if (info.count[i] < info.originalCount[i])\r\n                        ShopData.increment(info.id, info.items[i], 1);\r\n\r\n            });\r\n\r\n        }, self.interval);\r\n    }\r\n\r\n    open(player, npcId) {\r\n        let self = this;\r\n\r\n        player.send(new Messages.Shop(Packets.ShopOpcode.Open, {\r\n            instance: player.instance,\r\n            npcId: npcId,\r\n            shopData: self.getShopData(npcId)\r\n        }));\r\n\r\n    }\r\n\r\n    buy(player, npcId, buyId, count) {\r\n        let self = this,\r\n            cost = ShopData.getCost(npcId, buyId, count),\r\n            currency = self.getCurrency(npcId),\r\n            stock = ShopData.getStock(npcId, buyId);\r\n\r\n        if (!cost || !currency || !stock) {\r\n            log.info('Invalid shop data.');\r\n            return;\r\n        }\r\n\r\n        //TODO: Make it so that when you have the exact coin count, it removes coins and replaces it with the item purchased.\r\n\r\n        if (stock === 0) {\r\n            player.notify('This item is currently out of stock.');\r\n            return;\r\n        }\r\n\r\n        if (!player.inventory.contains(currency, cost)) {\r\n            player.notify('You do not have enough money to purchase this.');\r\n            return;\r\n        }\r\n\r\n        if (!player.inventory.hasSpace()) {\r\n            player.notify('You do not have enough space in your inventory.');\r\n            return;\r\n        }\r\n\r\n        if (count > stock)\r\n            count = stock;\r\n\r\n        player.inventory.remove(currency, cost);\r\n        player.inventory.add({\r\n            id: ShopData.getItem(npcId, buyId),\r\n            count: count,\r\n            ability: -1,\r\n            abilityLevel: -1\r\n        });\r\n\r\n        ShopData.decrement(npcId, buyId, count);\r\n\r\n        self.refresh(npcId);\r\n    }\r\n\r\n    refresh(shop) {\r\n        let self = this;\r\n\r\n        self.world.push(Packets.PushOpcode.Broadcast, {\r\n            message: new Messages.Shop(Packets.ShopOpcode.Refresh, self.getShopData(shop))\r\n        });\r\n    }\r\n\r\n    getCurrency(npcId) {\r\n        let shop = ShopData.Ids[npcId];\r\n\r\n        if (!shop)\r\n            return null;\r\n\r\n        return shop.currency;\r\n    }\r\n\r\n    getShopData(npcId) {\r\n        let self = this,\r\n            strings = [],\r\n            names = [],\r\n            items = ShopData.getItems(npcId);\r\n\r\n        for (let i = 0; i < items.length; i++) {\r\n            strings.push(Items.idToString(items[i]));\r\n            names.push(Items.idToName(items[i]));\r\n        }\r\n\r\n        return {\r\n            id: npcId,\r\n            strings: strings,\r\n            names: names,\r\n            counts: ShopData.getCount(npcId)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Shops;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/controllers/shops.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/shops.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "class",
    "name": "Shops",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/controllers/shops.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#load",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "open",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#open",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "npcId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "buy",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#buy",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "npcId",
        "types": [
          "*"
        ]
      },
      {
        "name": "buyId",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "refresh",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "shop",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "getCurrency",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#getCurrency",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "npcId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "getShopData",
    "memberof": "Kaetram-Open/server/js/controllers/shops.js~Shops",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/controllers/shops.js~Shops#getShopData",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "npcId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"id\": *, \"strings\": *, \"names\": *, \"counts\": *}"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "Kaetram-Open/server/js/database/database.js",
    "content": "/* global module */\r\n\r\nlet MongoDB = require('./mongodb/mongodb'),\r\n    config = require('../../config');\r\n\r\nclass Database {\r\n\r\n    constructor(databaseType) {\r\n        let self = this;\r\n\r\n        self.database = null;\r\n        self.databaseType = databaseType;\r\n\r\n        switch(self.databaseType) {\r\n            case 'mongo':\r\n            case 'mongodb':\r\n                self.database = new MongoDB(config.mongoHost, config.mongoPort, config.mongoUser,\r\n                    config.mongoPassword, config.mongoDatabase);\r\n                break;\r\n\r\n            default:\r\n                log.error('The database ' + self.databaseType + ' could not be found.');\r\n                break;\r\n        }\r\n    }\r\n\r\n    getDatabase() {\r\n        let self = this;\r\n\r\n        if (!self.database)\r\n            log.error('[Database] No database is currently present. It is advised against proceeding in this state.');\r\n\r\n        return self.database;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Database;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/database/database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "variable",
    "name": "MongoDB",
    "memberof": "Kaetram-Open/server/js/database/database.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/database.js~MongoDB",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/database/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "class",
    "name": "Database",
    "memberof": "Kaetram-Open/server/js/database/database.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/database.js~Database",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/database/database.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 311,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/database/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/database.js~Database#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "getDatabase",
    "memberof": "Kaetram-Open/server/js/database/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/database.js~Database#getDatabase",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "Kaetram-Open/server/js/database/mongodb/creator.js",
    "content": "/* global module */\r\n\r\nlet bcrypt = require('bcrypt'),\r\n    config = require('../../../config');\r\n\r\nclass Creator {\r\n\r\n    constructor(database) {\r\n        this.database = database;\r\n    }\r\n\r\n    save(player) {\r\n        let self = this;\r\n\r\n        self.database.getDatabase((database) => {\r\n            let playerData = database.collection('player_data'),\r\n                playerEquipment = database.collection('player_equipment'),\r\n                playerQuests = database.collection('player_quests'),\r\n                playerAchievements = database.collection('player_achievements'),\r\n                playerBank = database.collection('player_bank'),\r\n                playerRegions = database.collection('player_regions'),\r\n                playerAbilities = database.collection('player_abilities'),\r\n                playerInventory = database.collection('player_inventory');\r\n\r\n            self.savePlayerData(playerData, player);\r\n            self.savePlayerEquipment(playerEquipment, player);\r\n            self.savePlayerQuests(playerQuests, player);\r\n            self.savePlayerAchievements(playerAchievements, player);\r\n            self.savePlayerBank(playerBank, player);\r\n            self.savePlayerRegions(playerRegions, player);\r\n            self.savePlayerAbilities(playerAbilities, player);\r\n            self.savePlayerInventory(playerInventory, player, () => {\r\n                database.close();\r\n            });\r\n        });\r\n    }\r\n\r\n    savePlayerData(collection, player) {\r\n        Creator.getPlayerData(player, (data) => {\r\n            collection.updateOne({\r\n                username: player.username\r\n            }, { $set: data }, {\r\n                upsert: true\r\n            }, (error, result) => {\r\n                if (error)\r\n                    throw error;\r\n\r\n                if (result)\r\n                    log.debug('Player ' + player.username + ' data has been saved successfully.');\r\n            });\r\n        });\r\n    }\r\n\r\n    savePlayerEquipment(collection, player) {\r\n        collection.updateOne({\r\n            username: player.username\r\n        }, { $set: Creator.getPlayerEquipment(player) }, {\r\n            upsert: true\r\n        }, (error, result) => {\r\n            if (error)\r\n                throw error;\r\n\r\n            if (result)\r\n                log.debug('Player ' + player.username + ' equipment data has been saved successfully.');\r\n        });\r\n    }\r\n\r\n    savePlayerQuests(collection, player) {\r\n        collection.updateOne({\r\n            username: player.username\r\n        }, { $set: player.quests.getQuests() }, {\r\n            upsert: true\r\n        }, (error, result) => {\r\n            if (error)\r\n                throw error;\r\n\r\n            if (result)\r\n                log.debug('Player ' + player.username + ' quest data has been saved successfully.');\r\n        });\r\n\r\n    }\r\n\r\n    savePlayerAchievements(collection, player) {\r\n        collection.updateOne({\r\n            username: player.username\r\n        }, { $set: player.quests.getAchievements() }, {\r\n            upsert: true\r\n        }, (error, result) => {\r\n            if (error)\r\n                throw error;\r\n\r\n            if (result)\r\n                log.debug('Player ' + player.username + ' achievement data has been saved successfully.');\r\n        });\r\n\r\n    }\r\n\r\n    savePlayerBank(collection, player) {\r\n        collection.updateOne({\r\n            username: player.username\r\n        }, { $set: player.bank.getArray() }, {\r\n            upsert: true\r\n        }, (error, result) => {\r\n            if (error)\r\n                throw error;\r\n\r\n            if (result)\r\n                log.debug('Player ' + player.username + ' bank data has been saved successfully.');\r\n        });\r\n    }\r\n\r\n    savePlayerRegions(collection, player) {\r\n        collection.updateOne({\r\n            username: player.username\r\n        }, { $set: { regions: player.regionsLoaded.toString(), gameVersion: config.gver } }, {\r\n            upsert: true\r\n        }, (error, result) => {\r\n            if (error) throw error;\r\n\r\n            if (result)\r\n                log.debug('Player ' + player.username + ' regions data has been saved successfully.');\r\n        });\r\n    }\r\n\r\n    savePlayerAbilities(collection, player) {\r\n        collection.updateOne({\r\n            username: player.username\r\n        }, { $set: player.abilities.getArray() }, {\r\n            upsert: true\r\n        }, (error, result) => {\r\n            if (error)\r\n                throw error;\r\n\r\n            if (result)\r\n                log.debug('Player ' + player.username + ' abilities data has been saved successfully.');\r\n        });\r\n    }\r\n\r\n    savePlayerInventory(collection, player, callback) {\r\n        collection.updateOne({\r\n            username: player.username\r\n        }, { $set: player.inventory.getArray() }, {\r\n            upsert: true\r\n        }, (error, result) => {\r\n            if (error)\r\n                throw error;\r\n\r\n            if (result)\r\n                log.debug('Player ' + player.username + ' inventory data has been saved successfully.');\r\n        });\r\n    }\r\n\r\n    static getPasswordHash(password, callback) {\r\n        bcrypt.hash(password, 10, (error, hash) => {\r\n            if (error) throw error;\r\n\r\n            callback(hash);\r\n        })\r\n    }\r\n\r\n    static getPlayerData(player, callback) {\r\n        Creator.getPasswordHash(player.password, (hash) => {\r\n            callback({\r\n                username: player.username,\r\n                password: hash,\r\n                email: player.email,\r\n                x: player.x,\r\n                y: player.y,\r\n                experience: player.experience,\r\n                kind: player.kind,\r\n                rights: player.rights,\r\n                poisoned: player.poisoned,\r\n                hitPoints: player.getHitPoints(),\r\n                mana: player.getMana(),\r\n                pvpKills: player.pvpKills,\r\n                pvpDeaths: player.pvpDeaths,\r\n                orientation: player.orientation,\r\n                rank: player.rank,\r\n                ban: player.ban,\r\n                mute: player.mute,\r\n                membership: player.membership,\r\n                lastLogin: player.lastLogin,\r\n                lastWarp: player.lastWarp,\r\n                guildName: player.guildName,\r\n                invisibleIds: player.formatInvisibles(),\r\n                userAgent: player.userAgent\r\n            })\r\n        });\r\n    }\r\n\r\n    static getPlayerEquipment(player) {\r\n        return {\r\n            username: player.username,\r\n            armour: [player.armour ? player.armour.getId() : 114, player.armour ? player.armour.getCount() : 0, player.armour ? player.armour.getAbility() : 0, player.armour ? player.armour.getAbilityLevel() : 0],\r\n            weapon: [player.weapon ? player.weapon.getId() : -1, player.weapon ? player.weapon.getCount() : 0, player.weapon ? player.weapon.getAbility() : 0, player.weapon ? player.weapon.getAbilityLevel() : 0],\r\n            pendant: [player.pendant ? player.pendant.getId() : -1, player.pendant ? player.pendant.getCount() : 0, player.pendant ? player.pendant.getAbility() : 0, player.pendant ? player.pendant.getAbilityLevel() : 0],\r\n            ring: [player.ring ? player.ring.getId() : -1, player.ring ? player.ring.getCount() : 0, player.ring ? player.ring.getAbility() : 0, player.ring ? player.ring.getAbilityLevel() : 0],\r\n            boots: [player.boots ? player.boots.getId() : -1, player.boots ? player.boots.getCount() : 0, player.boots ? player.boots.getAbility() : 0, player.boots ? player.boots.getAbilityLevel() : 0]\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crossed over from the MySQL database. This should be refined\r\n     * fairly soon as it is just unnecessary code for speed development.\r\n     * The above object arrays should just be concatenated.\r\n     */\r\n\r\n    static getFullData(player) {\r\n        let position = player.getSpawn();\r\n\r\n        return {\r\n            username: player.username,\r\n            password: player.password,\r\n            email: player.email ? player.email : 'null',\r\n            x: position.x,\r\n            y: position.y,\r\n            kind: player.kind ? player.kind : 0,\r\n            rights: player.rights ? player.rights : 0,\r\n            hitPoints: player.hitPoints ? player.hitPoints : 100,\r\n            mana: player.mana ? player.mana : 20,\r\n            poisoned: player.poisoned ? player.poisoned : 0,\r\n            experience: player.experience ? player.experience : 0,\r\n            ban: player.ban ? player.ban : 0,\r\n            mute: player.mute ? player.mute : 0,\r\n            rank: player.rank ? player.rank : 0,\r\n            membership: player.membership ? player.membership : 0,\r\n            lastLogin: player.lastLogin ? player.lastLogin : 0,\r\n            pvpKills: player.pvpKills ? player.pvpKills : 0,\r\n            pvpDeaths: player.pvpDeaths ? player.pvpDeaths : 0,\r\n            orientation: player.orientation ? player.orientation : 0,\r\n            lastWarp: player.warp.lastWarp ? player.warp.lastWarp : 0,\r\n            armour: [player.armour ? player.armour.getId() : 114, player.armour ? player.armour.getCount() : 0, player.armour ? player.armour.getAbility() : 0, player.armour ? player.armour.getAbilityLevel() : 0],\r\n            weapon: [player.weapon ? player.weapon.getId() : -1, player.weapon ? player.weapon.getCount() : 0, player.weapon ? player.weapon.getAbility() : 0, player.weapon ? player.weapon.getAbilityLevel() : 0],\r\n            pendant: [player.pendant ? player.pendant.getId() : -1, player.pendant ? player.pendant.getCount() : 0, player.pendant ? player.pendant.getAbility() : 0, player.pendant ? player.pendant.getAbilityLevel() : 0],\r\n            ring: [player.ring ? player.ring.getId() : -1, player.ring ? player.ring.getCount() : 0, player.ring ? player.ring.getAbility() : 0, player.ring ? player.ring.getAbilityLevel() : 0],\r\n            boots: [player.boots ? player.boots.getId() : -1, player.boots ? player.boots.getCount() : 0, player.boots ? player.boots.getAbility() : 0, player.boots ? player.boots.getAbilityLevel() : 0]\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Creator;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/database/mongodb/creator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "variable",
    "name": "bcrypt",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~bcrypt",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/database/mongodb/creator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 315,
    "kind": "class",
    "name": "Creator",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/database/mongodb/creator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "database",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#database",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "save",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#save",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "savePlayerData",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerData",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "savePlayerEquipment",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerEquipment",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "savePlayerQuests",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerQuests",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "savePlayerAchievements",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerAchievements",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "savePlayerBank",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerBank",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "savePlayerRegions",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerRegions",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "savePlayerAbilities",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerAbilities",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "savePlayerInventory",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator#savePlayerInventory",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "getPasswordHash",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator.getPasswordHash",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "password",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "getPlayerData",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator.getPlayerData",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "getPlayerEquipment",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator.getPlayerEquipment",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"username\": *, \"armour\": *, \"weapon\": *, \"pendant\": *, \"ring\": *, \"boots\": *}"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "getFullData",
    "memberof": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/creator.js~Creator.getFullData",
    "access": "public",
    "description": "Crossed over from the MySQL database. This should be refined\nfairly soon as it is just unnecessary code for speed development.\nThe above object arrays should just be concatenated.",
    "lineNumber": 208,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"username\": *, \"password\": *, \"email\": *, \"x\": *, \"y\": *, \"kind\": *, \"rights\": *, \"hitPoints\": *, \"mana\": *, \"poisoned\": *, \"experience\": *, \"ban\": *, \"mute\": *, \"rank\": *, \"membership\": *, \"lastLogin\": *, \"pvpKills\": *, \"pvpDeaths\": *, \"orientation\": *, \"lastWarp\": *, \"armour\": *, \"weapon\": *, \"pendant\": *, \"ring\": *, \"boots\": *}"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "file",
    "name": "Kaetram-Open/server/js/database/mongodb/loader.js",
    "content": "/* global module */\r\n\r\nclass Loader {\r\n\r\n    constructor(database) {\r\n        this.database = database;\r\n    }\r\n\r\n    getInventory(player, callback) {\r\n        let self = this;\r\n\r\n        self.database.getDatabase((database) => {\r\n            let inventory = database.collection('player_inventory'),\r\n                cursor = inventory.find({ username: player.username });\r\n\r\n            cursor.toArray().then((inventoryArray) => {\r\n                let info = inventoryArray[0];\r\n\r\n                if (info) {\r\n                    if (info.username !== player.username)\r\n                        log.notice('[Loader] Mismatch in usernames whilst retrieving inventory data for: ' + player.username);\r\n\r\n                    callback(info.ids.split(' '), info.counts.split(' '), info.abilities.split(' '), info.abilityLevels.split(' '));\r\n                } else\r\n                    callback(null, null, null, null);\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n    getBank(player, callback) {\r\n        let self = this;\r\n\r\n        self.database.getDatabase((database) => {\r\n            let bank = database.collection('player_bank'),\r\n                cursor = bank.find({ username: player.username });\r\n\r\n            cursor.toArray().then((bankArray) => {\r\n                let info = bankArray[0];\r\n\r\n                if (info) {\r\n                    if (info.username !== player.username)\r\n                        log.notice('[Loader] Mismatch in usernames whilst retrieving bank data for: ' + player.username);\r\n\r\n                    callback(info.ids.split(' '), info.counts.split(' '), info.abilities.split(' '), info.abilityLevels.split(' '));\r\n                }\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n    getQuests(player, callback) {\r\n        let self = this;\r\n\r\n        self.database.getDatabase((database) => {\r\n            let quests = database.collection('player_quests'),\r\n                cursor = quests.find({ username: player.username });\r\n\r\n            cursor.toArray().then((questArray) => {\r\n                let info = questArray[0];\r\n\r\n                if (info) {\r\n                    if (info.username !== player.username)\r\n                        log.notice('[Loader] Mismatch in usernames whilst retrieving quest data for: ' + player.username);\r\n\r\n                    callback(info.ids.split(' '), info.stages.split(' '));\r\n                } else\r\n                    callback(null, null);\r\n            });\r\n        });\r\n    }\r\n\r\n    getAchievements(player, callback) {\r\n        let self = this;\r\n\r\n        self.database.getDatabase((database) => {\r\n            let achievements = database.collection('player_achievements'),\r\n                cursor = achievements.find({ username: player.username });\r\n\r\n            cursor.toArray().then((achievementsArray) => {\r\n                let info = achievementsArray[0];\r\n\r\n                if (info) {\r\n                    if (info.username !== player.username)\r\n                        log.notice('[Loader] Mismatch in usernames whilst retrieving achievement data for: ' + player.username);\r\n\r\n                    callback(info.ids.split(' '), info.progress.split(' '));\r\n                }\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Loader;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/database/mongodb/loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 332,
    "kind": "class",
    "name": "Loader",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/database/mongodb/loader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 333,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "database",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#database",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "getInventory",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#getInventory",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "getBank",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#getBank",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "getQuests",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#getQuests",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "getAchievements",
    "memberof": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/loader.js~Loader#getAchievements",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "file",
    "name": "Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "content": "/* global module */\r\n\r\nlet MongoClient = require('mongodb').MongoClient,\r\n    Loader = require('./loader'),\r\n    Creator = require('./creator'),\r\n    bcrypt = require('bcrypt'),\r\n    _ = require('underscore'),\r\n    config = require('../../../config');\r\n\r\nclass MongoDB {\r\n\r\n    constructor(host, port, user, password, database) {\r\n        let self = this;\r\n\r\n        self.host = host;\r\n        self.port = port;\r\n        self.user = user;\r\n        self.password = password;\r\n        self.database = database;\r\n\r\n        self.loader = new Loader(self);\r\n        self.creator = new Creator(self);\r\n\r\n        self.connection = null;\r\n    }\r\n\r\n    getDatabase(callback, type) {\r\n        let self = this,\r\n            URL= `mongodb://${self.host}:${self.port}/${self.database}`;\r\n\r\n            if (config.mongoAuth)\r\n                URL = `mongodb://${self.user}:${self.password}@${self.host}:${self.port}/${self.database}`;\r\n\r\n            let client = new MongoClient(URL, {\r\n              useUnifiedTopology: true,\r\n              useNewUrlParser: true,\r\n              wtimeout: 5\r\n            });\r\n\r\n        if (self.connection) {\r\n            callback(self.connection);\r\n            return;\r\n        }\r\n\r\n        client.connect((error, newClient) => {\r\n            if (error) throw error;\r\n\r\n            self.connection = newClient.db(self.database);\r\n\r\n            callback(self.connection);\r\n        });\r\n\r\n    }\r\n\r\n    login(player) {\r\n        let self = this;\r\n\r\n        self.getDatabase((database) => {\r\n            let dataCursor = database.collection('player_data').find({ username: player.username }),\r\n                equipmentCursor = database.collection('player_equipment').find({ username: player.username }),\r\n                regionsCursor = database.collection('player_regions').find({ username: player.username });\r\n\r\n            dataCursor.toArray().then((playerData) => {\r\n                equipmentCursor.toArray().then((equipmentData) => {\r\n                    regionsCursor.toArray().then((regionData) => {\r\n\r\n                        if (playerData.length === 0)\r\n                            self.register(player);\r\n                        else {\r\n                            let playerInfo = playerData[0],\r\n                                equipmentInfo = equipmentData[0],\r\n                                regions = regionData[0];\r\n\r\n                            playerInfo['armour'] = equipmentInfo.armour;\r\n                            playerInfo['weapon'] = equipmentInfo.weapon;\r\n                            playerInfo['pendant'] = equipmentInfo.pendant;\r\n                            playerInfo['ring'] = equipmentInfo.ring;\r\n                            playerInfo['boots'] = equipmentInfo.boots;\r\n\r\n                            if (regions && regions.gameVersion === config.gver)\r\n                                player.regionsLoaded = regions.regions.split(',');\r\n\r\n                            player.load(playerInfo);\r\n                            player.intro();\r\n                        }\r\n\r\n                    });\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    verify(player, callback) {\r\n        let self = this;\r\n\r\n        self.getDatabase((database) => {\r\n            let dataCursor = database.collection('player_data').find({ username: player.username });\r\n\r\n            dataCursor.toArray().then((data) => {\r\n                if (data.length === 0)\r\n                    callback({ status: 'error' });\r\n                else {\r\n                    let info = data[0];\r\n\r\n                    bcrypt.compare(player.password, info.password, (error, result) => {\r\n                        if (error) throw error;\r\n\r\n                        if (result)\r\n                            callback({ status: 'success' });\r\n                        else\r\n                            callback({ status: 'error' });\r\n                    });\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    register(player) {\r\n        let self = this;\r\n\r\n        self.getDatabase((database) => {\r\n            let playerData = database.collection('player_data'),\r\n                cursor = playerData.find({ username: player.username });\r\n\r\n            cursor.toArray().then((info) => {\r\n                if (info.length === 0) {\r\n                    log.info('No player data found for ' + player.username + '. Creating user.');\r\n\r\n                    player.new = true;\r\n\r\n                    player.load(Creator.getFullData(player));\r\n                    player.intro();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    exists(player, callback) {\r\n        let self = this;\r\n\r\n        self.getDatabase((database) => {\r\n            let playerData = database.collection('player_data'),\r\n                emailCursor = playerData.find({ email: player.email }),\r\n                usernameCursor = playerData.find({ username: player.username });\r\n\r\n            log.info('Looking for - ' + player.email +' or ' + player.username);\r\n\r\n            emailCursor.toArray().then((emailArray) => {\r\n                if (emailArray.length === 0) {\r\n                    usernameCursor.toArray().then((usernameArray) => {\r\n                        if (usernameArray.length === 0)\r\n                            callback({ exists: false });\r\n                        else\r\n                            callback({ exists: true, type: 'user' });\r\n                    });\r\n                } else\r\n                    callback({ exists: true, type: 'email' });\r\n            });\r\n        });\r\n    }\r\n\r\n    delete(player) {\r\n        let self = this;\r\n\r\n        self.getDatabase((database) => {\r\n            let collections = ['player_data', 'player_equipment', 'player_inventory', 'player_abilities', 'player_bank', 'player_quests', 'player_achievements'];\r\n\r\n            _.each(collections, (col) => {\r\n                let collection = database.collection(col);\r\n\r\n                collection.deleteOne({\r\n                    username: player.username\r\n                }, (error, result) => {\r\n                    if (error) throw error;\r\n\r\n                    if (result)\r\n                        log.info('Player ' + player.username + ' has been deleted.')\r\n                })\r\n            });\r\n        });\r\n    }\r\n\r\n    registeredCount(callback) {\r\n\r\n        this.getDatabase((database) => {\r\n            let collection = database.collection('player_data');\r\n\r\n            collection.countDocuments().then((count) => {\r\n                callback(count);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = MongoDB;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "variable",
    "name": "MongoClient",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoClient",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 341,
    "kind": "class",
    "name": "MongoDB",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/database/mongodb/mongodb.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "getDatabase",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#getDatabase",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "login",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#login",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "verify",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#verify",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "register",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#register",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "exists",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#exists",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "delete",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#delete",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "registeredCount",
    "memberof": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/database/mongodb/mongodb.js~MongoDB#registeredCount",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/character.js",
    "content": "/* global module */\r\n\r\nlet Entity = require('../entity'),\r\n    Modules = require('../../../util/modules'),\r\n    Mobs = require('../../../util/mobs'),\r\n    Combat = require('./combat/combat');\r\n\r\nclass Character extends Entity {\r\n\r\n    constructor(id, type, instance, x, y) {\r\n        super(id, type, instance, x, y);\r\n\r\n        let self = this;\r\n\r\n        self.level = -1;\r\n\r\n        self.movementSpeed = 150;\r\n        self.attackRange = 1;\r\n        self.attackRate = 1000;\r\n        self.healingRate = 7000;\r\n\r\n        self.spawnDistance = 7;\r\n\r\n        self.previousX = -1;\r\n        self.previousY = -1;\r\n\r\n        self.hitPoints = -1;\r\n        self.maxHitPoints = -1;\r\n\r\n        self.dead = false;\r\n        self.aggressive = false;\r\n        self.aggroRange = 2;\r\n\r\n        self.target = null;\r\n        self.potentialTarget = null;\r\n\r\n        self.stunTimeout = null;\r\n\r\n        self.projectile = Modules.Projectiles.Arrow;\r\n        self.projectileName = 'projectile-pinearrow';\r\n\r\n        self.healingInterval = null;\r\n\r\n        self.loadCombat();\r\n        self.startHealing();\r\n    }\r\n\r\n    loadCombat() {\r\n        let self = this;\r\n\r\n        /**\r\n         * Ternary could be used here, but readability\r\n         * would become nonexistent.\r\n         */\r\n\r\n        if (Mobs.hasCombatPlugin(self.id))\r\n            self.combat = new (Mobs.isNewCombatPlugin(self.id))(self);\r\n        else\r\n            self.combat = new Combat(self);\r\n    }\r\n\r\n    startHealing() {\r\n        let self = this;\r\n\r\n        self.healingInterval = setInterval(() => {\r\n\r\n            if (!self.hasTarget() && !self.combat.isAttacked() && !self.dead)\r\n                self.heal(1);\r\n\r\n        }, 5000);\r\n    }\r\n\r\n    stopHealing() {\r\n        let self = this;\r\n\r\n        clearInterval(self.healingInterval);\r\n        self.healingInterval = null;\r\n    }\r\n\r\n    setStun(stun) {\r\n        let self = this;\r\n\r\n        self.stunned = stun;\r\n\r\n        if (self.stunCallback)\r\n            self.stunCallback(stun);\r\n    }\r\n\r\n    hit(attacker) {\r\n        let self = this;\r\n\r\n        if (self.hitCallback)\r\n            self.hitCallback(attacker);\r\n    }\r\n\r\n    heal(amount) {\r\n        let self = this;\r\n\r\n        self.setHitPoints(self.hitPoints + amount);\r\n\r\n        if (self.hitPoints >= self.maxHitPoints)\r\n            self.hitPoints = self.maxHitPoints;\r\n    }\r\n\r\n    addExperience() {\r\n        //Unimplemented.\r\n    }\r\n\r\n    isRanged() {\r\n        return this.attackRange > 1;\r\n    }\r\n\r\n    applyDamage(damage) {\r\n        this.hitPoints -= damage;\r\n    }\r\n\r\n    isDead() {\r\n        return this.hitPoints < 1 || this.dead;\r\n    }\r\n\r\n    getCombat() {\r\n        return this.combat;\r\n    }\r\n\r\n    getHitPoints() {\r\n        return this.hitPoints;\r\n    }\r\n\r\n    getMaxHitPoints() {\r\n        return this.maxHitPoints;\r\n    }\r\n\r\n    setPosition(x, y) {\r\n        let self = this;\r\n\r\n        self.previousX = self.x;\r\n        self.previousY = self.y;\r\n\r\n        super.setPosition(x, y);\r\n\r\n        if (self.movementCallback)\r\n            self.movementCallback(x, y);\r\n    }\r\n\r\n    setTarget(target) {\r\n        let self = this;\r\n\r\n        self.target = target;\r\n\r\n        if (self.targetCallback)\r\n            self.targetCallback(target);\r\n    }\r\n\r\n    setPotentialTarget(potentialTarget) {\r\n        this.potentialTarget = potentialTarget;\r\n    }\r\n\r\n    setHitPoints(hitPoints) {\r\n        let self = this;\r\n\r\n        self.hitPoints = hitPoints;\r\n\r\n        if (self.hitPointsCallback)\r\n            self.hitPointsCallback();\r\n    }\r\n\r\n    getProjectile() {\r\n        return this.projectile;\r\n    }\r\n\r\n    getProjectileName() {\r\n        return this.projectileName;\r\n    }\r\n\r\n    getDrop() {\r\n        return null;\r\n    }\r\n\r\n    hasMaxHitPoitns() {\r\n        return this.hitPoints >= this.maxHitPoints;\r\n    }\r\n\r\n    removeTarget() {\r\n        let self = this;\r\n\r\n        if (self.removeTargetCallback)\r\n            self.removeTargetCallback();\r\n\r\n        self.clearTarget();\r\n    }\r\n\r\n    hasTarget() {\r\n        return !(this.target === null);\r\n    }\r\n\r\n    hasPotentialTarget(potentialTarget) {\r\n        return this.potentialTarget === potentialTarget;\r\n    }\r\n\r\n    clearTarget() {\r\n        this.target = null;\r\n    }\r\n\r\n    onTarget(callback) {\r\n        this.targetCallback = callback;\r\n    }\r\n\r\n    onRemoveTarget(callback) {\r\n        this.removeTargetCallback = callback;\r\n    }\r\n\r\n    onMovement(callback) {\r\n        this.movementCallback = callback;\r\n    }\r\n\r\n    onHit(callback) {\r\n        this.hitCallback = callback;\r\n    }\r\n\r\n    onHealthChange(callback) {\r\n        this.healthChangeCallback = callback;\r\n    }\r\n\r\n    onDamage(callback) {\r\n        this.damageCallback = callback;\r\n    }\r\n\r\n    onStunned(callback) {\r\n        this.stunCallback = callback;\r\n    }\r\n\r\n    onSubAoE(callback) {\r\n        this.subAoECallback = callback;\r\n    }\r\n}\r\n\r\nmodule.exports = Character;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/character.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/character.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "Character",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/character.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "loadCombat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#loadCombat",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "startHealing",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#startHealing",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "stopHealing",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#stopHealing",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "setStun",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setStun",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "stun",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hit",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "heal",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#heal",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "addExperience",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#addExperience",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "applyDamage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#applyDamage",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "damage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "hitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "isDead",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#isDead",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "getCombat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getCombat",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "getHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "getMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "setPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setPosition",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "setTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setTarget",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "setPotentialTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setPotentialTarget",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "potentialTarget",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "potentialTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#potentialTarget",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "setHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#setHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "hitPoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "getProjectile",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "getProjectileName",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getProjectileName",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "getDrop",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#getDrop",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "hasMaxHitPoitns",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hasMaxHitPoitns",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "removeTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#removeTarget",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "hasTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hasTarget",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "hasPotentialTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hasPotentialTarget",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "params": [
      {
        "name": "potentialTarget",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "clearTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#clearTarget",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "target",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#target",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "onTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onTarget",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "targetCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#targetCallback",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "onRemoveTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onRemoveTarget",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "removeTargetCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#removeTargetCallback",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "onMovement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onMovement",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "movementCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#movementCallback",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "onHit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onHit",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "hitCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#hitCallback",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "onHealthChange",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onHealthChange",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "healthChangeCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#healthChangeCallback",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "onDamage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onDamage",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "damageCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#damageCallback",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "onStunned",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onStunned",
    "access": "public",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "stunCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#stunCallback",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "onSubAoE",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#onSubAoE",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "subAoECallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/character.js~Character",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/character.js~Character#subAoECallback",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Hit = require('./hit'),\r\n    CombatQueue = require('./combatqueue'),\r\n    Utils = require('../../../../util/utils'),\r\n    Formulas = require('../../../../util/formulas'),\r\n    Modules = require('../../../../util/modules'),\r\n    Messages = require('../../../../network/messages'),\r\n    Packets = require('../../../../network/packets');\r\n\r\nclass Combat {\r\n\r\n    constructor(character) {\r\n        let self = this;\r\n\r\n        self.character = character;\r\n        self.world = null;\r\n\r\n        self.attackers = {};\r\n\r\n        self.retaliate = false;\r\n\r\n        self.queue = new CombatQueue();\r\n\r\n        self.attacking = false;\r\n\r\n        self.attackLoop = null;\r\n        self.followLoop = null;\r\n        self.checkLoop = null;\r\n\r\n        self.first = false;\r\n        self.started = false;\r\n        self.lastAction = -1;\r\n        self.lastHit = -1;\r\n\r\n        self.lastActionThreshold = 7000;\r\n\r\n        self.cleanTimeout = null;\r\n\r\n        self.character.onSubAoE((radius, hasTerror) => {\r\n\r\n            self.dealAoE(radius, hasTerror);\r\n\r\n        });\r\n\r\n        self.character.onDamage((target, hitInfo) => {\r\n\r\n            if (self.isPlayer() && self.character.hasBreakableWeapon() && Formulas.getWeaponBreak(self.character, target))\r\n                self.character.breakWeapon();\r\n\r\n            if (hitInfo.type === Modules.Hits.Stun) {\r\n\r\n                target.setStun(true);\r\n\r\n                if (target.stunTimeout)\r\n                    clearTimeout(target.stunTimeout);\r\n\r\n                target.stunTimeout = setTimeout(() => {\r\n\r\n                    target.setStun(false);\r\n\r\n                }, 3000);\r\n            }\r\n        });\r\n    }\r\n\r\n    begin(attacker) {\r\n        let self = this;\r\n\r\n        self.start();\r\n\r\n        self.character.setTarget(attacker);\r\n        self.addAttacker(attacker);\r\n\r\n        attacker.combat.addAttacker(self.character); //For mobs attacking players..\r\n\r\n        self.attack(attacker);\r\n    }\r\n\r\n    start() {\r\n        let self = this;\r\n\r\n        if (self.started)\r\n            return;\r\n\r\n        self.lastAction = new Date().getTime();\r\n\r\n        self.attackLoop = setInterval(() => { self.parseAttack(); }, self.character.attackRate);\r\n\r\n        self.followLoop = setInterval(() => { self.parseFollow(); }, 400);\r\n\r\n        self.checkLoop = setInterval(() => { self.parseCheck(); }, 1000);\r\n\r\n        self.started = true;\r\n    }\r\n\r\n    stop() {\r\n        let self = this;\r\n\r\n        if (!self.started)\r\n            return;\r\n\r\n        clearInterval(self.attackLoop);\r\n        clearInterval(self.followLoop);\r\n        clearInterval(self.checkLoop);\r\n\r\n        self.attackLoop = null;\r\n        self.followLoop = null;\r\n        self.checkLoop = null;\r\n\r\n        self.started = false;\r\n    }\r\n\r\n    parseAttack() {\r\n        let self = this;\r\n\r\n        if (!self.world || !self.queue || self.character.stunned)\r\n            return;\r\n\r\n        if (self.character.hasTarget() && self.inProximity()) {\r\n\r\n            if (self.queue.hasQueue())\r\n                self.hit(self.character, self.character.target, self.queue.getHit());\r\n\r\n            if (self.character.target && !self.character.target.isDead())\r\n                self.attack(self.character.target);\r\n\r\n            self.sync();\r\n\r\n            self.lastAction = self.getTime();\r\n\r\n        } else\r\n            self.queue.clear();\r\n\r\n    }\r\n\r\n    parseFollow() {\r\n        let self = this;\r\n\r\n        if (self.character.frozen || self.character.stunned)\r\n            return;\r\n\r\n        if (self.isMob()) {\r\n\r\n            if (!self.character.isRanged())\r\n                self.sendFollow();\r\n\r\n            if (self.isAttacked() || self.character.hasTarget())\r\n                self.lastAction = self.getTime();\r\n\r\n            if (self.onSameTile()) {\r\n                let newPosition = self.getNewPosition();\r\n\r\n                self.move(self.character, newPosition.x, newPosition.y);\r\n            }\r\n\r\n            if (self.character.hasTarget() && !self.inProximity()) {\r\n                let attacker = self.getClosestAttacker();\r\n\r\n                if (attacker)\r\n                    self.follow(self.character, attacker);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    parseCheck() {\r\n        let self = this;\r\n\r\n        if (self.getTime() - self.lastAction > self.lastActionThreshold) {\r\n\r\n            self.stop();\r\n\r\n            self.forget();\r\n\r\n        }\r\n    }\r\n\r\n    attack(target) {\r\n        let self = this,\r\n            hit;\r\n\r\n        if (self.isPlayer())\r\n            hit = self.character.getHit(target);\r\n        else\r\n            hit = new Hit(Modules.Hits.Damage, Formulas.getDamage(self.character, target));\r\n\r\n        if (!hit)\r\n            return;\r\n\r\n        self.queue.add(hit);\r\n    }\r\n\r\n    sync() {\r\n        let self = this;\r\n\r\n        if (self.character.type !== 'mob')\r\n            return;\r\n\r\n        self.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: self.character.region,\r\n            message: new Messages.Combat(Packets.CombatOpcode.Sync, {\r\n                attackerId: self.character.instance, //irrelevant\r\n                targetId: self.character.instance, //can be the same since we're acting on an entity.\r\n                x: self.character.x,\r\n                y: self.character.y\r\n            })\r\n        })\r\n    }\r\n\r\n    dealAoE(radius, hasTerror) {\r\n        let self = this;\r\n\r\n        /**\r\n         * TODO - Find a way to implement special effects without hardcoding them.\r\n         */\r\n\r\n        if (!self.world)\r\n            return;\r\n\r\n        let entities = self.world.getGrids().getSurroundingEntities(self.character, radius);\r\n\r\n        _.each(entities, (entity) => {\r\n\r\n            let hitData = new Hit(Modules.Hits.Damage, Formulas.getAoEDamage(self.character, entity)).getData();\r\n\r\n            hitData.isAoE = true;\r\n            hitData.hasTerror = hasTerror;\r\n\r\n            self.hit(self.character, entity, hitData);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    forceAttack() {\r\n        let self = this;\r\n\r\n        if (!self.character.target || !self.inProximity())\r\n            return;\r\n\r\n        self.stop();\r\n        self.start();\r\n\r\n        self.attackCount(2, self.character.target);\r\n        self.hit(self.character, self.character.target, self.queue.getHit());\r\n    }\r\n\r\n    attackCount(count, target) {\r\n        let self = this;\r\n\r\n        for (let i = 0; i < count; i++)\r\n            self.attack(target);\r\n    }\r\n\r\n    addAttacker(character) {\r\n        let self = this;\r\n\r\n        if (self.hasAttacker(character))\r\n            return;\r\n\r\n        self.attackers[character.instance] = character;\r\n    }\r\n\r\n    removeAttacker(character) {\r\n        let self = this;\r\n\r\n        if (self.hasAttacker(character))\r\n            delete self.attackers[character.instance];\r\n\r\n        if (!self.isAttacked())\r\n            self.sendToSpawn();\r\n    }\r\n\r\n    sendToSpawn() {\r\n        let self = this;\r\n\r\n        if (!self.isMob())\r\n            return;\r\n\r\n        self.character.return();\r\n\r\n        self.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: self.character.region,\r\n            message: new Messages.Movement(Packets.MovementOpcode.Move, {\r\n                id: self.character.instance,\r\n                x: self.character.x,\r\n                y: self.character.y,\r\n                forced: false,\r\n                teleport: false\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    hasAttacker(character) {\r\n        let self = this;\r\n\r\n        if (!self.isAttacked())\r\n            return;\r\n\r\n        return character.instance in self.attackers;\r\n    }\r\n\r\n    onSameTile() {\r\n        let self = this;\r\n\r\n        if (!self.character.target || self.character.type !== 'mob')\r\n            return;\r\n\r\n        return self.character.x === self.character.target.x && self.character.y === self.character.target.y;\r\n    }\r\n\r\n    isAttacked() {\r\n        return this.attackers && Object.keys(this.attackers).length > 0;\r\n    }\r\n\r\n    getNewPosition() {\r\n        let self = this,\r\n            position = {\r\n                x: self.character.x,\r\n                y: self.character.y\r\n            };\r\n\r\n        let random = Utils.randomInt(0, 3);\r\n\r\n        if (random === 0)\r\n            position.x++;\r\n        else if (random === 1)\r\n            position.y--;\r\n        else if (random === 2)\r\n            position.x--;\r\n        else if (random === 3)\r\n            position.y++;\r\n\r\n        return position;\r\n    }\r\n\r\n    isRetaliating() {\r\n        return this.isPlayer() && !this.character.hasTarget() && this.retaliate && !this.character.moving && new Date().getTime() - this.character.lastMovement > 1500;\r\n    }\r\n\r\n    inProximity() {\r\n        let self = this;\r\n\r\n        if (!self.character.target)\r\n            return;\r\n\r\n        let targetDistance = self.character.getDistance(self.character.target),\r\n            range = self.character.attackRange;\r\n\r\n        if (self.character.isRanged())\r\n            return targetDistance <= range;\r\n\r\n        return self.character.isNonDiagonal(self.character.target);\r\n    }\r\n\r\n    getClosestAttacker() {\r\n        let self = this,\r\n            closest = null,\r\n            lowestDistance = 100;\r\n\r\n        self.forEachAttacker((attacker) => {\r\n            let distance = self.character.getDistance(attacker);\r\n\r\n            if (distance < lowestDistance)\r\n                closest = attacker;\r\n        });\r\n\r\n        return closest;\r\n    }\r\n\r\n    setWorld(world) {\r\n        let self = this;\r\n\r\n        if (!self.world)\r\n            self.world = world;\r\n    }\r\n\r\n    forget() {\r\n        let self = this;\r\n\r\n        self.attackers = {};\r\n        self.character.removeTarget();\r\n\r\n        if (self.forgetCallback)\r\n            self.forgetCallback();\r\n    }\r\n\r\n    move(character, x, y) {\r\n        let self = this;\r\n\r\n        /**\r\n         * The server and mob types can parse the mob movement\r\n         */\r\n\r\n        if (character.type !== 'mob')\r\n            return;\r\n\r\n        character.setPosition(x, y);\r\n    }\r\n\r\n    hit(character, target, hitInfo) {\r\n        let self = this,\r\n            time = self.getTime();\r\n\r\n        if (time - self.lastHit < self.character.attackRate && !hitInfo.isAoE)\r\n            return;\r\n\r\n        if (character.isRanged() || hitInfo.isRanged) {\r\n\r\n            let projectile = self.world.createProjectile([character, target], hitInfo);\r\n\r\n            self.world.push(Packets.PushOpcode.Regions, {\r\n                regionId: character.region,\r\n                message: new Messages.Projectile(Packets.ProjectileOpcode.Create, projectile.getData())\r\n            });\r\n\r\n        } else {\r\n\r\n            self.world.push(Packets.PushOpcode.Regions, {\r\n                regionId: character.region,\r\n                message: new Messages.Combat(Packets.CombatOpcode.Hit, {\r\n                    attackerId: character.instance,\r\n                    targetId: target.instance,\r\n                    hitInfo: hitInfo\r\n                })\r\n            });\r\n\r\n            self.world.handleDamage(character, target, hitInfo.damage);\r\n\r\n        }\r\n\r\n        if (character.damageCallback)\r\n            character.damageCallback(target, hitInfo);\r\n\r\n        self.lastHit = self.getTime();\r\n    }\r\n\r\n    follow(character, target) {\r\n        this.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: character.region,\r\n            message: new Messages.Movement(Packets.MovementOpcode.Follow, {\r\n                attackerId: character.instance,\r\n                targetId: target.instance,\r\n                isRanged: character.isRanged,\r\n                attackRange: character.attackRange\r\n            })\r\n        });\r\n    }\r\n\r\n    end() {\r\n        this.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: this.character.region,\r\n            message: new Messages.Combat(Packets.CombatOpcode.Finish, {\r\n                attackerId: this.character.instance,\r\n                targetId: null\r\n            })\r\n        });\r\n    }\r\n\r\n    sendFollow() {\r\n        let self = this;\r\n\r\n        if (!self.character.hasTarget() || self.character.target.isDead())\r\n            return;\r\n\r\n        let ignores = [self.character.instance, self.character.target.instance];\r\n\r\n        self.world.push(Packets.PushOpcode.Selectively, {\r\n            message: new Messages.Movement(Packets.MovementOpcode.Follow, {\r\n                attackerId: self.character.instance,\r\n                targetId: self.character.target.instance\r\n            }),\r\n            ignores: ignores\r\n        });\r\n\r\n    }\r\n\r\n    forEachAttacker(callback) {\r\n        _.each(this.attackers, (attacker) => {\r\n            callback(attacker);\r\n        });\r\n    }\r\n\r\n    onForget(callback) {\r\n        this.forgetCallback = callback;\r\n    }\r\n\r\n    targetOutOfBounds() {\r\n        let self = this;\r\n\r\n        if (!self.character.hasTarget() || !self.isMob())\r\n            return;\r\n\r\n        let spawnPoint = self.character.spawnLocation,\r\n            target = self.character.target;\r\n\r\n        return Utils.getDistance(spawnPoint[0], spawnPoint[1], target.x, target.y) > self.character.spawnDistance;\r\n    }\r\n\r\n    getTime() {\r\n        return new Date().getTime();\r\n    }\r\n\r\n    colliding(x, y) {\r\n        return this.world.map.isColliding(x, y);\r\n    }\r\n\r\n    isPlayer() {\r\n        return this.character.type === 'player'\r\n    }\r\n\r\n    isMob() {\r\n        return this.character.type === 'mob';\r\n    }\r\n\r\n    isTargetMob() {\r\n        return this.character.target.type === 'mob';\r\n    }\r\n\r\n    canAttackAoE(target) {\r\n        return this.isMob() || target.type === 'mob' || (this.isPlayer() && target.type === 'player' && target.pvp && this.character.pvp);\r\n    }\r\n\r\n\r\n}\r\n\r\nmodule.exports = Combat;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "class",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/combat/combat.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 401,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "begin",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#begin",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "start",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#start",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "stop",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#stop",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "parseAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#parseAttack",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "parseFollow",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#parseFollow",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "parseCheck",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#parseCheck",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "attack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#attack",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "sync",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#sync",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "dealAoE",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#dealAoE",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasTerror",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "forceAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#forceAttack",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "attackCount",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#attackCount",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "addAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#addAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "removeAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#removeAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "sendToSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#sendToSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "hasAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#hasAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "onSameTile",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#onSameTile",
    "access": "public",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "isAttacked",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isAttacked",
    "access": "public",
    "description": null,
    "lineNumber": 315,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "getNewPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#getNewPosition",
    "access": "public",
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "isRetaliating",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isRetaliating",
    "access": "public",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "inProximity",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#inProximity",
    "access": "public",
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "getClosestAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#getClosestAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "setWorld",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#setWorld",
    "access": "public",
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "params": [
      {
        "name": "world",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "forget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#forget",
    "access": "public",
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "move",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#move",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "hit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#hit",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "hitInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "follow",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#follow",
    "access": "public",
    "description": null,
    "lineNumber": 441,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "end",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#end",
    "access": "public",
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "sendFollow",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#sendFollow",
    "access": "public",
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "forEachAttacker",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#forEachAttacker",
    "access": "public",
    "description": null,
    "lineNumber": 481,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "onForget",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#onForget",
    "access": "public",
    "description": null,
    "lineNumber": 487,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "forgetCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#forgetCallback",
    "access": "public",
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "targetOutOfBounds",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#targetOutOfBounds",
    "access": "public",
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "getTime",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#getTime",
    "access": "public",
    "description": null,
    "lineNumber": 503,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "colliding",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#colliding",
    "access": "public",
    "description": null,
    "lineNumber": 507,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "isPlayer",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 511,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "isMob",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isMob",
    "access": "public",
    "description": null,
    "lineNumber": 515,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "isTargetMob",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#isTargetMob",
    "access": "public",
    "description": null,
    "lineNumber": 519,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "canAttackAoE",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combat.js~Combat#canAttackAoE",
    "access": "public",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js",
    "content": "/* global module */\r\n\r\nclass CombatQueue {\r\n\r\n    constructor() {\r\n        this.hitQueue = [];\r\n    }\r\n\r\n    add(hit) {\r\n        this.hitQueue.push(hit);\r\n    }\r\n\r\n    hasQueue() {\r\n        return this.hitQueue.length > 0;\r\n    }\r\n\r\n    clear() {\r\n        this.hitQueue = [];\r\n    }\r\n\r\n    getHit() {\r\n        let self = this;\r\n\r\n        if (self.hitQueue.length < 1)\r\n            return;\r\n\r\n        return self.hitQueue.shift().getData();\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = CombatQueue;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 441,
    "kind": "class",
    "name": "CombatQueue",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 442,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 443,
    "kind": "member",
    "name": "hitQueue",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#hitQueue",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#add",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "hit",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "hasQueue",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#hasQueue",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "clear",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#clear",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "getHit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/combatqueue.js~CombatQueue#getHit",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/combat/hit.js",
    "content": "/* global module */\r\n\r\nclass Hit {\r\n\r\n    constructor(type, damage) {\r\n        let self = this;\r\n\r\n        self.type = type;\r\n        self.damage = damage;\r\n\r\n        self.ranged = false;\r\n        self.aoe = false;\r\n        self.terror = false;\r\n    }\r\n\r\n    isRanged() {\r\n        return this.ranged;\r\n    }\r\n\r\n    isAoE() {\r\n        return this.aoe;\r\n    }\r\n\r\n    getDamage() {\r\n        return this.damage;\r\n    }\r\n\r\n    getData() {\r\n        return {\r\n            type: this.type,\r\n            damage: this.damage,\r\n            isRanged: this.isRanged(),\r\n            isAoE: this.isAoE(),\r\n            hasTerror: this.terror\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Hit;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/combat/hit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 450,
    "kind": "class",
    "name": "Hit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/combat/hit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 451,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "isAoE",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#isAoE",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "getDamage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#getDamage",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/combat/hit.js~Hit#getData",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"damage\": *, \"isRanged\": *, \"isAoE\": *, \"hasTerror\": *}"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Character = require('../character'),\r\n    Mobs = require('../../../../util/mobs'),\r\n    Utils = require('../../../../util/utils'),\r\n    Items = require('../../../../util/items'),\r\n    MobHandler = require('./mobhandler');\r\n\r\nclass Mob extends Character {\r\n\r\n    constructor(id, instance, x, y, world) {\r\n        super(id, 'mob', instance, x, y);\r\n\r\n        let self = this;\r\n\r\n        if (!Mobs.exists(id))\r\n            return;\r\n\r\n        self.world = world;\r\n\r\n        self.data = Mobs.Ids[self.id];\r\n        self.hitPoints = self.data.hitPoints;\r\n        self.maxHitPoints = self.data.hitPoints;\r\n        self.drops = self.data.drops;\r\n\r\n        self.respawnDelay = self.data.spawnDelay;\r\n\r\n        self.level = self.data.level;\r\n\r\n        self.armourLevel = self.data.armour;\r\n        self.weaponLevel = self.data.weapon;\r\n        self.attackRange = self.data.attackRange;\r\n        self.aggroRange = self.data.aggroRange;\r\n        self.aggressive = self.data.aggressive;\r\n\r\n        self.spawnLocation = [x, y];\r\n\r\n        self.dead = false;\r\n        self.boss = false;\r\n        self.static = false;\r\n        self.hiddenName = false;\r\n\r\n        self.roaming = false;\r\n        self.maxRoamingDistance = 3;\r\n\r\n        self.projectileName = self.getProjectileName();\r\n\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        self.handler = new MobHandler(self, self.world);\r\n    }\r\n\r\n    refresh() {\r\n        let self = this;\r\n\r\n        self.hitPoints = self.data.hitPoints;\r\n        self.maxHitPoints = self.data.hitPoints;\r\n\r\n        if (self.refreshCallback)\r\n            self.refreshCallback();\r\n\r\n    }\r\n\r\n    getDrop() {\r\n        let self = this;\r\n\r\n        if (!self.drops)\r\n            return null;\r\n\r\n        let min = 0,\r\n            percent = 0,\r\n            random = Utils.randomInt(0, 1000);\r\n\r\n\r\n        for (let drop in self.drops)\r\n            if (self.drops.hasOwnProperty(drop)) {\r\n                let chance = self.drops[drop];\r\n\r\n                min = percent;\r\n                percent += chance;\r\n\r\n                if (random >= min && random < percent) {\r\n                    let count = 1;\r\n\r\n                    if (drop === 'gold')\r\n                        count = Utils.randomInt(1, self.level * (Math.floor(Math.pow(2, self.level / 7) / (self.level / 4))));\r\n\r\n                    return {\r\n                        id: Items.stringToId(drop),\r\n                        count: count\r\n                    }\r\n                }\r\n            }\r\n\r\n        return null;\r\n    }\r\n\r\n    getProjectileName() {\r\n        return this.data.projectileName ? this.data.projectileName : 'projectile-pinearrow';\r\n    }\r\n\r\n    canAggro(player) {\r\n        let self = this;\r\n\r\n        if (self.hasTarget())\r\n          return false;\r\n\r\n        if (!self.aggressive)\r\n          return false;\r\n\r\n        if (Math.floor(self.level * 1.5) < player.level)\r\n          return false;\r\n\r\n        if (!player.hasAggressionTimer())\r\n          return false;\r\n\r\n        return self.isNear(player, self.aggroRange);\r\n    }\r\n\r\n    destroy() {\r\n        let self = this;\r\n\r\n        self.dead = true;\r\n        self.clearTarget();\r\n        self.resetPosition();\r\n        self.respawn();\r\n\r\n        if (self.area)\r\n            self.area.removeEntity(self);\r\n    }\r\n\r\n    return() {\r\n        let self = this;\r\n\r\n        self.clearTarget();\r\n        self.resetPosition();\r\n        self.setPosition(self.x, self.y);\r\n    }\r\n\r\n    isRanged() {\r\n        return this.attackRange > 1;\r\n    }\r\n\r\n    distanceToSpawn() {\r\n        return this.getCoordDistance(this.spawnLocation[0], this.spawnLocation[1]);\r\n    }\r\n\r\n    isAtSpawn() {\r\n        return this.x === this.spawnLocation[0] && this.y === this.spawnLocation[1];\r\n    }\r\n\r\n    isOutsideSpawn() {\r\n        return this.distanceToSpawn() > this.spawnDistance;\r\n    }\r\n\r\n    addToChestArea(chestAreas) {\r\n        let self = this,\r\n            area = _.find(chestAreas, (area) => { return area.contains(self.x, self.y); });\r\n\r\n        if (area)\r\n            area.addEntity(self);\r\n    }\r\n\r\n    respawn() {\r\n        let self = this;\r\n\r\n        /**\r\n         * Some entities are static (only spawned once during an event)\r\n         * Meanwhile, other entities act as an illusion to another entity,\r\n         * so the resawning script is handled elsewhere.\r\n         */\r\n\r\n        if (!self.static || self.respawnDelay === -1)\r\n            return;\r\n\r\n        setTimeout(() => {\r\n            if (self.respawnCallback)\r\n                self.respawnCallback();\r\n\r\n        }, self.respawnDelay);\r\n    }\r\n\r\n    getState() {\r\n        let self = this,\r\n            base = super.getState();\r\n\r\n        base.hitPoints = self.hitPoints;\r\n        base.maxHitPoints = self.maxHitPoints;\r\n        base.attackRange = self.attackRange;\r\n        base.level = self.level;\r\n        base.hiddenName = self.hiddenName;\r\n\r\n        return base;\r\n    }\r\n\r\n    resetPosition() {\r\n        let self = this;\r\n\r\n        self.setPosition(self.spawnLocation[0], self.spawnLocation[1]);\r\n    }\r\n\r\n    onRespawn(callback) {\r\n        this.respawnCallback = callback;\r\n    }\r\n\r\n    onReturn(callback) {\r\n        this.returnCallback = callback;\r\n    }\r\n\r\n    onRefresh(callback) {\r\n        this.refreshCallback = callback;\r\n    }\r\n\r\n    onDeath(callback) {\r\n        this.deathCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Mob;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 458,
    "kind": "class",
    "name": "Mob",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/mob/mob.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "Character"
    ],
    "ignore": true
  },
  {
    "__docId__": 459,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#load",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "refresh",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "getDrop",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#getDrop",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "getProjectileName",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#getProjectileName",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "canAggro",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#canAggro",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "destroy",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "return",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#return",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "distanceToSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#distanceToSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "isAtSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#isAtSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "isOutsideSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#isOutsideSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "addToChestArea",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#addToChestArea",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "chestAreas",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "respawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#respawn",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "getState",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#getState",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "resetPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#resetPosition",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "onRespawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#onRespawn",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "respawnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#respawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "onReturn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#onReturn",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 478,
    "kind": "member",
    "name": "returnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#returnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "onRefresh",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#onRefresh",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "refreshCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#refreshCallback",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "onDeath",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#onDeath",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 482,
    "kind": "member",
    "name": "deathCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mob.js~Mob#deathCallback",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "content": "let Utils = require('../../../../util/utils'),\r\n    Messages = require('../../../../network/messages'),\r\n    Packets = require('../../../../network/packets');\r\n\r\nclass MobHandler {\r\n\r\n    constructor(mob, world) {\r\n        let self = this;\r\n\r\n        self.mob = mob;\r\n        self.world = world;\r\n        self.map = world.map;\r\n\r\n        self.roamingInterval = null;\r\n        self.spawnLocation = mob.spawnLocation;\r\n        self.maxRoamingDistance = mob.maxRoamingDistance;\r\n\r\n        self.load();\r\n        self.loadCallbacks();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        if (!self.mob.roaming)\r\n            return;\r\n\r\n        self.roamingInterval = setInterval(() => {\r\n\r\n            if (!self.mob.dead) {\r\n                let newX = self.mob.x + Utils.randomInt(-self.maxRoamingDistance, self.maxRoamingDistance),\r\n                    newY = self.mob.y + Utils.randomInt(-self.maxRoamingDistance, self.maxRoamingDistance),\r\n                    distance = Utils.getDistance(self.spawnLocation[0], self.spawnLocation[1], newX, newY);\r\n\r\n                if (self.map.isColliding(newX, newY))\r\n                    return;\r\n\r\n                if (self.map.isEmpty(newX, newY))\r\n                    return;\r\n\r\n                if (self.map.isDoor(newX, newY))\r\n                    return;\r\n\r\n                if (distance < self.mob.maxRoamingDistance)\r\n                    return;\r\n\r\n                if (self.mob.combat.started)\r\n                    return;\r\n\r\n                self.mob.setPosition(newX, newY);\r\n\r\n                self.world.push(Packets.PushOpcode.Regions, {\r\n                    regionId: self.mob.region,\r\n                    message: new Messages.Movement(Packets.MovementOpcode.Move, {\r\n                        id: self.mob.instance,\r\n                        x: newX,\r\n                        y: newY\r\n                    })\r\n                });\r\n\r\n            }\r\n\r\n        }, 5000);\r\n    }\r\n\r\n    loadCallbacks() {\r\n        let self = this;\r\n\r\n        /*self.mob.onMovement((x, y) => {\r\n\r\n\r\n            console.trace(`x: ${x}, y: ${y}`);\r\n        });*/\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = MobHandler;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 484,
    "kind": "variable",
    "name": "Utils",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 485,
    "kind": "class",
    "name": "MobHandler",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 486,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 487,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler#load",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "loadCallbacks",
    "memberof": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/mob/mobhandler.js~MobHandler#loadCallbacks",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 489,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    AbilityInfo = require('../../../../../util/abilities');\r\n\r\nclass Abilities {\r\n    \r\n    constructor(player) {\r\n        let self = this;\r\n        \r\n        self.player = player;\r\n        \r\n        self.abilities = {};\r\n        \r\n        self.shortcuts = [];\r\n        \r\n        self.shortcutSize = 5;\r\n    }\r\n\r\n    addAbility(ability) {\r\n        this.abilities[ability.name] = ability;\r\n    }\r\n\r\n    addShortcut(ability) {\r\n        let self = this;\r\n\r\n        if (self.shortcutSize >= 5)\r\n            return;\r\n\r\n        self.shortcuts.push(ability.name);\r\n    }\r\n\r\n    removeAbility(ability) {\r\n        let self = this;\r\n\r\n        if (self.isShortcut(ability))\r\n            self.removeShortcut(self.shortcuts.indexOf(ability.name));\r\n\r\n        delete self.abilities[ability.name];\r\n    }\r\n\r\n    removeShortcut(index) {\r\n        if (index > -1)\r\n            this.shortcuts.splice(index, 1);\r\n    }\r\n\r\n    hasAbility(ability) {\r\n        _.each(this.abilities, (uAbility) => {\r\n            if (uAbility.name === ability.name)\r\n                return true;\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    isShortcut(ability) {\r\n        return this.shortcuts.indexOf(ability.name) > -1;\r\n    }\r\n\r\n    getArray() {\r\n        let self = this,\r\n            abilities = '',\r\n            abilityLevels = '',\r\n            shortcuts = self.shortcuts.toString();\r\n\r\n        _.each(self.abilities, (ability) => {\r\n            abilities += ability.name;\r\n            abilityLevels += ability.level;\r\n        });\r\n\r\n        return {\r\n            username: self.player.username,\r\n            abilities: abilities,\r\n            abilityLevels: abilityLevels,\r\n            shortcuts: shortcuts\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nmodule.exports = Abilities;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 490,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 491,
    "kind": "class",
    "name": "Abilities",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 492,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "addAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#addAbility",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "addShortcut",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#addShortcut",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "removeAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#removeAbility",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "removeShortcut",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#removeShortcut",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "hasAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#hasAbility",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "isShortcut",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#isShortcut",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "getArray",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/abilities.js~Abilities#getArray",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"username\": *, \"abilities\": *, \"abilityLevels\": *, \"shortcuts\": *}"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "content": "/* global module */\r\n\r\nlet Abilities = require('../../../../../../util/abilities');\r\n\r\nclass Ability {\r\n\r\n    constructor(name, type) {\r\n        let self = this;\r\n\r\n        self.name = name;\r\n        self.type = type;\r\n\r\n        self.level = -1;\r\n\r\n        self.data = Abilities.Data[name];\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Ability;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 501,
    "kind": "variable",
    "name": "Abilities",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js~Abilities",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 502,
    "kind": "class",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 503,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js~Ability",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/ability.js~Ability#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 504,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "content": "/* global module */\r\n\r\nlet Ability = require('./ability');\r\n\r\nclass FireStrike extends Ability {\r\n\r\n    constructor(name, type) {\r\n        super(name, type);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = FireStrike;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 505,
    "kind": "variable",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 506,
    "kind": "class",
    "name": "FireStrike",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js~FireStrike",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Ability"
    ],
    "ignore": true
  },
  {
    "__docId__": 507,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js~FireStrike",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/firestrike.js~FireStrike#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 508,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "content": "/* global module */\r\n\r\nlet Ability = require('./ability');\r\n\r\nclass IceStrike extends Ability {\r\n\r\n    constructor(name, type) {\r\n        super(name, type);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = IceStrike;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 509,
    "kind": "variable",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 510,
    "kind": "class",
    "name": "IceStrike",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js~IceStrike",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Ability"
    ],
    "ignore": true
  },
  {
    "__docId__": 511,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js~IceStrike",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/icestrike.js~IceStrike#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 512,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "content": "/* global module */\r\n\r\nlet Ability = require('./ability');\r\n\r\nclass Run extends Ability {\r\n\r\n    constructor(name, type) {\r\n        super(name, type);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Run;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 513,
    "kind": "variable",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 514,
    "kind": "class",
    "name": "Run",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js~Run",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Ability"
    ],
    "ignore": true
  },
  {
    "__docId__": 515,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js~Run",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/ability/impl/run.js~Run#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 516,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "content": "/* global module */\r\n\r\nlet Data = require('../../../../../data/achievements'),\r\n    Messages = require('../../../../network/messages'),\r\n    Packets = require('../../../../network/packets'),\r\n    Modules = require('../../../../util/modules');\r\n\r\nclass Achievement {\r\n\r\n    constructor(id, player) {\r\n        let self = this;\r\n\r\n        self.id = id;\r\n        self.player = player;\r\n\r\n        self.progress = 0;\r\n\r\n        self.data = Data[self.id];\r\n\r\n        self.name = self.data.name;\r\n        self.description = self.data.description;\r\n\r\n        self.discovered = false;\r\n    }\r\n\r\n    step() {\r\n        let self = this;\r\n\r\n        if (self.isThreshold())\r\n            return;\r\n\r\n        self.progress++;\r\n\r\n        self.update();\r\n\r\n        self.player.send(new Messages.Quest(Packets.QuestOpcode.Progress, {\r\n            id: self.id,\r\n            name: self.name,\r\n            progress: self.progress,\r\n            count: self.data.count,\r\n            isQuest: false\r\n        }));\r\n    }\r\n\r\n    converse(npc) {\r\n        let self = this;\r\n\r\n        if (self.isThreshold() || self.hasItem())\r\n            self.finish(npc);\r\n        else {\r\n\r\n            self.player.send(new Messages.NPC(Packets.NPCOpcode.Talk, {\r\n                id: npc.instance,\r\n                text: npc.talk(self.data.text)\r\n            }));\r\n\r\n            if (!self.isStarted() && npc.talkIndex === 0)\r\n                self.step();\r\n        }\r\n    }\r\n\r\n    finish(npc) {\r\n        let self = this,\r\n            rewardType = self.data.rewardType;\r\n\r\n        switch (rewardType) {\r\n            case Modules.Achievements.Rewards.Item:\r\n\r\n                if (!self.player.inventory.hasSpace()) {\r\n                    self.player.notify('You do not have enough space in your inventory to finish this achievement.');\r\n                    return;\r\n                }\r\n\r\n                self.player.inventory.add({\r\n                    id: self.data.item,\r\n                    count: self.data.itemCount\r\n                });\r\n\r\n                break;\r\n\r\n            case Modules.Achievements.Rewards.Experience:\r\n\r\n                self.player.addExperience(self.data.reward);\r\n\r\n                break;\r\n        }\r\n\r\n        self.setProgress(9999);\r\n        self.update();\r\n\r\n        self.player.send(new Messages.Quest(Packets.QuestOpcode.Finish, {\r\n            id: self.id,\r\n            name: self.name,\r\n            isQuest: false\r\n        }));\r\n\r\n        if (npc && self.player.npcTalkCallback)\r\n            self.player.npcTalkCallback(npc);\r\n    }\r\n\r\n    update() {\r\n        this.player.save();\r\n    }\r\n\r\n    isThreshold() {\r\n        return this.progress >= this.data.count;\r\n    }\r\n\r\n    hasItem() {\r\n        let self = this;\r\n\r\n        if (self.data.type === Modules.Achievements.Type.Scavenge && self.player.inventory.contains(self.data.item)) {\r\n            self.player.inventory.remove(self.data.item, self.data.itemCount);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    setProgress(progress) {\r\n        this.progress = parseInt(progress);\r\n    }\r\n\r\n    isStarted() {\r\n        return this.progress > 0;\r\n    }\r\n\r\n    isFinished() {\r\n        return this.progress > 9998;\r\n    }\r\n\r\n    getInfo() {\r\n        return {\r\n            id: this.id,\r\n            name: this.name,\r\n            type: this.data.type,\r\n            description: this.description,\r\n            count: this.data.count ? this.data.count : 1,\r\n            progress: this.progress,\r\n            finished: this.isFinished()\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Achievement;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "variable",
    "name": "Data",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Data",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 518,
    "kind": "class",
    "name": "Achievement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/achievement.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 519,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "step",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#step",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "converse",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#converse",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "finish",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#finish",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "update",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#update",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "isThreshold",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#isThreshold",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "hasItem",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#hasItem",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "setProgress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#setProgress",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "progress",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "progress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#progress",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "isStarted",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#isStarted",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "isFinished",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#isFinished",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "getInfo",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/achievement.js~Achievement#getInfo",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"id\": *, \"name\": *, \"type\": *, \"description\": *, \"count\": *, \"progress\": *, \"finished\": *}"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Container = require('../container'),\r\n    Messages = require('../../../../../../network/messages'),\r\n    Packets = require('../../../../../../network/packets'),\r\n    Items = require('../../../../../../util/items');\r\n\r\nclass Bank extends Container {\r\n\r\n    constructor(owner, size) {\r\n        super('Bank', owner, size);\r\n\r\n        this.open = false;\r\n    }\r\n\r\n    load(ids, counts, abilities, abilityLevels) {\r\n        super.load(ids, counts, abilities, abilityLevels);\r\n\r\n        this.owner.send(new Messages.Bank(Packets.BankOpcode.Batch, [this.size, this.slots]));\r\n    }\r\n\r\n    add(id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        if (!self.canHold(id, count)) {\r\n            self.owner.send(new Messages.Notification(Packets.NotificationOpcode.Text, 'You do not have enough space in your bank.'));\r\n            return false;\r\n        }\r\n\r\n        let slot = super.add(id, parseInt(count), ability, abilityLevel);\r\n\r\n        self.owner.send(new Messages.Bank(Packets.BankOpcode.Add, slot));\r\n        self.owner.save();\r\n\r\n        return true;\r\n    }\r\n\r\n    remove(id, count, index) {\r\n        let self = this;\r\n\r\n        if (!super.remove(index, id, count))\r\n            return;\r\n\r\n        self.owner.send(new Messages.Bank(Packets.BankOpcode.Remove, {\r\n            index: parseInt(index),\r\n            count: count\r\n        }));\r\n\r\n        self.owner.save();\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Bank;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 532,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 533,
    "kind": "class",
    "name": "Bank",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "Container"
    ],
    "ignore": true
  },
  {
    "__docId__": 534,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 535,
    "kind": "member",
    "name": "open",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#open",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "counts",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilities",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#add",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/bank/bank.js~Bank#remove",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 539,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Slot = require('./slot'),\r\n    Items = require('../../../../../util/items'),\r\n    Constants = require('../../../../../util/constants');\r\n\r\nclass Container {\r\n\r\n    constructor(type, owner, size) {\r\n        let self = this;\r\n\r\n        self.type = type;\r\n        self.owner = owner;\r\n        self.size = size;\r\n\r\n        self.slots = [];\r\n\r\n        for (let i = 0; i < self.size; i++)\r\n            self.slots.push(new Slot(i));\r\n    }\r\n\r\n    load(ids, counts, abilities, abilityLevels) {\r\n        let self = this;\r\n\r\n        /**\r\n         * Fill each slot with manual data or the database\r\n         */\r\n\r\n        if (ids.length !== self.slots.length)\r\n            log.error('[' + self.type + '] Mismatch in container size.');\r\n\r\n        for (let i = 0; i < self.slots.length; i++)\r\n            self.slots[i].load(ids[i], counts[i], abilities[i], abilityLevels[i]);\r\n    }\r\n\r\n    loadEmpty() {\r\n        let self = this,\r\n            data = [];\r\n\r\n        for (let i = 0; i < self.size; i++)\r\n            data.push(-1);\r\n\r\n        self.load(data, data, data, data);\r\n    }\r\n\r\n    add(id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        //log.info('Trying to pickup ' + count + ' x ' + id);\r\n        let maxStackSize = Items.maxStackSize(id)  === -1 ? Constants.MAX_STACK : Items.maxStackSize(id);\r\n\r\n        //log.info('Max stack size = ' + maxStackSize);\r\n\r\n        if (!id || count < 0 || count > maxStackSize )\r\n            return null;\r\n\r\n        if (!Items.isStackable(id)) {\r\n            if (self.hasSpace()) {\r\n                let nsSlot = self.slots[self.getEmptySlot()]; //non-stackable slot\r\n\r\n                nsSlot.load(id, count, ability, abilityLevel);\r\n\r\n                return nsSlot;\r\n            }\r\n        } else {\r\n            if (maxStackSize === -1 || self.type === 'Bank') {\r\n                let sSlot = self.getSlot(id);\r\n\r\n                if (sSlot) {\r\n                    sSlot.increment(count);\r\n                    return sSlot;\r\n                } else {\r\n                    if (self.hasSpace()) {\r\n                        let slot = self.slots[self.getEmptySlot()];\r\n\r\n                        slot.load(id, count, ability, abilityLevel);\r\n\r\n                        return slot;\r\n\r\n                    }\r\n                }\r\n            } else {\r\n\r\n                let remainingItems = count;\r\n\r\n                for (let i = 0; i < self.slots.length; i++) {\r\n                    if (self.slots[i].id === id) {\r\n                        let rSlot = self.slots[i];\r\n\r\n                        let available = maxStackSize - rSlot.count;\r\n\r\n                        if (available >= remainingItems) {\r\n\r\n                            rSlot.increment(remainingItems);\r\n\r\n                            return rSlot;\r\n                        } else if (available > 0) {\r\n\r\n                            rSlot.increment(available);\r\n                            remainingItems -= available;\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n                if (remainingItems > 0 && self.hasSpace()) {\r\n                    let rrSlot = self.slots[self.getEmptySlot()];\r\n\r\n\r\n                    rrSlot.load(id, remainingItems, ability, abilityLevel);\r\n\r\n                    return rrSlot;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    canHold(id, count) {\r\n        let self = this;\r\n\r\n        if (!Items.isStackable(id))\r\n            return self.hasSpace();\r\n\r\n        if (self.hasSpace())\r\n            return true;\r\n\r\n        let maxStackSize = Items.maxStackSize(id);\r\n\r\n        if ((self.type === 'Bank' || maxStackSize === -1) && self.contains(id))\r\n            return true;\r\n\r\n        if (maxStackSize !== -1 && count > maxStackSize)\r\n            return false;\r\n\r\n        let remainingSpace = 0;\r\n\r\n        for (let i = 0; i < self.slots.length; i++)\r\n            if (self.slots[i].id === id)\r\n                remainingSpace += (maxStackSize - self.slots[i].count);\r\n\r\n        return remainingSpace >= count;\r\n    }\r\n\r\n    remove(index, id, count) {\r\n        /**\r\n         * Perform item validity prior to calling the method.\r\n         */\r\n\r\n        let self = this,\r\n            slot = self.slots[index];\r\n\r\n        if (!slot)\r\n            return false;\r\n\r\n        if (Items.isStackable(id)) {\r\n            if (count >= slot.count)\r\n                slot.empty();\r\n            else\r\n                slot.decrement(count);\r\n        } else\r\n            slot.empty();\r\n\r\n        return true;\r\n    }\r\n\r\n    getSlot(id) {\r\n        let self = this;\r\n\r\n        for (let i = 0; i < self.slots.length; i++)\r\n            if (self.slots[i].id === id)\r\n                return self.slots[i];\r\n\r\n        return null;\r\n    }\r\n\r\n    contains(id, count) {\r\n        let self = this;\r\n\r\n        if (!count || count === 'undefined')\r\n            count = 1;\r\n\r\n        for (let index in self.slots) {\r\n            let slot = self.slots[index];\r\n\r\n            if (slot.id === id)\r\n                return slot.count >= count;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    containsSpaces(count) {\r\n        let self = this,\r\n            emptySpaces = [];\r\n\r\n        for (let i = 0; i < self.slots.length; i++)\r\n            if (self.slots[i].id === -1)\r\n                emptySpaces.push(self.slots[i]);\r\n\r\n        return emptySpaces.length === count;\r\n    }\r\n\r\n    hasSpace() {\r\n        return this.getEmptySlot() > -1;\r\n    }\r\n\r\n    getEmptySlot() {\r\n        let self = this;\r\n\r\n        for (let i = 0; i < self.slots.length; i++)\r\n            if (self.slots[i].id === -1)\r\n                return i;\r\n\r\n        return -1;\r\n    }\r\n\r\n    getIndex(id) {\r\n        let self = this;\r\n\r\n        /**\r\n         * Used when the index is not determined,\r\n         * returns the first item found based on the id.\r\n         */\r\n\r\n        for (let i = 0; i < self.slots.length; i++)\r\n            if (self.slots[i].id === id)\r\n                return i;\r\n\r\n        return -1;\r\n    }\r\n\r\n    check() {\r\n        let self = this;\r\n\r\n        _.each(self.slots, (slot) => {\r\n            if (isNaN(slot.id))\r\n                slot.empty();\r\n        });\r\n    }\r\n\r\n    forEachSlot(callback) {\r\n        let self = this;\r\n\r\n        for (let i = 0; i < self.slots.length; i++)\r\n            callback(self.slots[i]);\r\n    }\r\n\r\n    getArray() {\r\n        let self = this,\r\n            ids = '',\r\n            counts = '',\r\n            abilities = '',\r\n            abilityLevels = '';\r\n\r\n        for (let i = 0; i < self.slots.length; i++) {\r\n            ids += self.slots[i].id + ' ';\r\n            counts += self.slots[i].count + ' ';\r\n            abilities += self.slots[i].ability + ' ';\r\n            abilityLevels += self.slots[i].abilityLevel + ' ';\r\n        }\r\n\r\n        return {\r\n            username: self.owner.username,\r\n            ids: ids.slice(0, -1),\r\n            counts: counts.slice(0, -1),\r\n            abilities: abilities.slice(0, -1),\r\n            abilityLevels: abilityLevels.slice(0, -1)\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Container;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 540,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 541,
    "kind": "class",
    "name": "Container",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/container.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 542,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 543,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#load",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "counts",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilities",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "loadEmpty",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#loadEmpty",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#add",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "canHold",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#canHold",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#remove",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "getSlot",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#getSlot",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "contains",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#contains",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "containsSpaces",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#containsSpaces",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "hasSpace",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#hasSpace",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "getEmptySlot",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#getEmptySlot",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "getIndex",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#getIndex",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "check",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#check",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "forEachSlot",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#forEachSlot",
    "access": "public",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "getArray",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/container.js~Container#getArray",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"username\": *, \"ids\": *, \"counts\": *, \"abilities\": *, \"abilityLevels\": *}"
      ]
    }
  },
  {
    "__docId__": 557,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/constants.js",
    "content": "/* global module */\r\n\r\nmodule.exports = {\r\n    InventoryFull: 'You do not have enough space in your inventory!',\r\n    NoDrop: 'You cannot drop an item here.'\r\n};",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/containers/inventory/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 558,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Container = require('../container'),\r\n    Messages = require('../../../../../../network/messages'),\r\n    Packets = require('../../../../../../network/packets'),\r\n    Constants = require('./constants'),\r\n    Items = require('../../../../../../util/items');\r\n\r\nclass Inventory extends Container {\r\n\r\n    constructor(owner, size) {\r\n        super('Inventory', owner, size);\r\n    }\r\n\r\n    load(ids, counts, abilities, abilityLevels) {\r\n        super.load(ids, counts, abilities, abilityLevels);\r\n\r\n        this.owner.send(new Messages.Inventory(Packets.InventoryOpcode.Batch, [this.size, this.slots]));\r\n    }\r\n\r\n    add(item, count) {\r\n        let self = this;\r\n\r\n        if (!count)\r\n            count = -1;\r\n\r\n        if (count === -1)  //default to moving whole stack\r\n            count = parseInt(item.count);\r\n\r\n        if (!self.canHold(item.id, count)) {\r\n            self.owner.send(new Messages.Notification(Packets.NotificationOpcode.Text, Constants.InventoryFull));\r\n            return false;\r\n        }\r\n\r\n        let slot = super.add(item.id, count, item.ability, item.abilityLevel);\r\n\r\n        if (!slot)\r\n            return false;\r\n\r\n        self.owner.send(new Messages.Inventory(Packets.InventoryOpcode.Add, slot));\r\n\r\n        self.owner.save();\r\n\r\n        if (item.instance)\r\n            self.owner.world.removeItem(item);\r\n\r\n        return true;\r\n    }\r\n\r\n    remove(id, count, index) {\r\n        let self = this;\r\n\r\n        if (!id || !count)\r\n            return false;\r\n\r\n        if (!index)\r\n            index = self.getIndex(id);\r\n\r\n        if (!super.remove(index, id, count))\r\n            return false;\r\n\r\n        self.owner.send(new Messages.Inventory(Packets.InventoryOpcode.Remove, {\r\n            index: parseInt(index),\r\n            count: count\r\n        }));\r\n\r\n        self.owner.save();\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Inventory;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 559,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 560,
    "kind": "class",
    "name": "Inventory",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "Container"
    ],
    "ignore": true
  },
  {
    "__docId__": 561,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory#load",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "counts",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilities",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevels",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory#add",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/inventory/inventory.js~Inventory#remove",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 565,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "content": "/* global module */\r\n\r\nlet Items = require('../../../../../util/items');\r\n\r\nclass Slot {\r\n\r\n    constructor(index) {\r\n        let self = this;\r\n\r\n        self.index = index;\r\n\r\n        self.id = -1;\r\n        self.count = -1;\r\n        self.ability = -1;\r\n        self.abilityLevel = -1;\r\n\r\n        self.string = null;\r\n    }\r\n\r\n    load(id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        self.id = parseInt(id);\r\n        self.count = parseInt(count);\r\n        self.ability = parseInt(ability);\r\n        self.abilityLevel = parseInt(abilityLevel);\r\n\r\n        self.string = Items.idToString(self.id);\r\n        self.edible = Items.isEdible(self.id);\r\n        self.equippable = Items.isEquippable(self.string);\r\n\r\n        self.verify();\r\n    }\r\n\r\n    empty() {\r\n        let self = this;\r\n\r\n        self.id = -1;\r\n        self.count = -1;\r\n        self.ability = -1;\r\n        self.abilityLevel = -1;\r\n\r\n        self.string = null;\r\n    }\r\n\r\n    increment(amount) {\r\n        let self = this;\r\n\r\n        self.count += parseInt(amount);\r\n\r\n        self.verify();\r\n    }\r\n\r\n    decrement(amount) {\r\n        let self = this;\r\n\r\n        self.count -= parseInt(amount);\r\n\r\n        if (self.count < 1)\r\n            log.error('[Slot] Item ' + self.id + ' has a count below 1 -> count: ' + self.count);\r\n\r\n        self.verify();\r\n    }\r\n\r\n    verify() {\r\n        let self = this;\r\n\r\n        if (isNaN(self.count) || self.count < 1)\r\n            self.count = 1;\r\n    }\r\n\r\n    getData() {\r\n        return {\r\n            index: this.index,\r\n            string: this.string,\r\n            count: this.count,\r\n            ability: this.ability,\r\n            abilityLevel: this.abilityLevel\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Slot;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 566,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Items",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 567,
    "kind": "class",
    "name": "Slot",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/containers/slot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 568,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#load",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "empty",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#empty",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "increment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#increment",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "decrement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#decrement",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "verify",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#verify",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/containers/slot.js~Slot#getData",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"index\": *, \"string\": *, \"count\": *, \"ability\": *, \"abilityLevel\": *}"
      ]
    }
  },
  {
    "__docId__": 575,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    DoorData = require('../../../../../data/doors'),\r\n    Messages = require('../../../../network/messages'),\r\n    Packets = require('../../../../network/packets');\r\n\r\nclass Doors {\r\n\r\n    constructor(player) {\r\n        let self = this;\r\n\r\n        self.world = player.world;\r\n        self.player = player;\r\n\r\n        self.doors = {};\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        _.each(DoorData, (door) => {\r\n            self.doors[door.id] = {\r\n                id: door.id,\r\n                x: door.x,\r\n                y: door.y,\r\n                status: door.status,\r\n                requirement: door.requirement,\r\n                level: door.level,\r\n                questId: door.questId,\r\n                closedIds: door.closedIds,\r\n                openIds: door.openIds\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    getStatus(door) {\r\n        let self = this;\r\n\r\n        switch(door.requirement) {\r\n\r\n            case 'quest':\r\n                let quest = self.player.quests.getQuest(door.questId);\r\n\r\n                if (door.status === 'open')\r\n                    return door.status;\r\n\r\n                return (quest && quest.hasDoorUnlocked(door)) ? 'open' : 'closed';\r\n\r\n            case 'level':\r\n                return self.player.level >= door.level ? 'open' : 'closed';\r\n\r\n        }\r\n    }\r\n\r\n    getTiles(door) {\r\n        let self = this,\r\n            tiles = {\r\n                indexes: [],\r\n                data: [],\r\n                collisions: []\r\n            };\r\n\r\n        let status = self.getStatus(door),\r\n            doorState = {\r\n            open: door.openIds,\r\n            closed: door.closedIds\r\n        };\r\n\r\n        _.each(doorState[status], (value, key) => {\r\n            tiles.indexes.push(parseInt(key));\r\n            tiles.data.push(value.data);\r\n            tiles.collisions.push(value.isColliding);\r\n        });\r\n\r\n        return tiles;\r\n    }\r\n\r\n    getAllTiles() {\r\n        let self = this,\r\n            allTiles = {\r\n                indexes: [],\r\n                data: [],\r\n                collisions: []\r\n            };\r\n\r\n        _.each(self.doors, (door) => {\r\n            let tiles = self.getTiles(door);\r\n\r\n            allTiles.indexes.push.apply(allTiles.indexes, tiles.indexes);\r\n            allTiles.data.push.apply(allTiles.data, tiles.data);\r\n            allTiles.collisions.push.apply(allTiles.collisions, tiles.collisions)\r\n        });\r\n\r\n        return allTiles;\r\n    }\r\n\r\n    hasCollision(x, y) {\r\n        let self = this,\r\n            tiles = self.getAllTiles(),\r\n            tileIndex = self.world.map.gridPositionToIndex(x, y),\r\n            index = tiles.indexes.indexOf(tileIndex) - 1 ;\r\n\r\n        return index < 0 ? false : tiles.collisions[index];\r\n    }\r\n    getDoor(x, y, callback) {\r\n        this.forEachDoor((door) => {\r\n            callback((door.x === x && door.y === y) ? door : null);\r\n        })\r\n    }\r\n\r\n    isDoor(x, y, callback) {\r\n        this.forEachDoor((door) => {\r\n            callback(door.x === x && door.y === y);\r\n        });\r\n    }\r\n\r\n    forEachDoor(callback) {\r\n        _.each(this.doors, (door) => {\r\n            callback(door);\r\n        })\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Doors;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 576,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 577,
    "kind": "class",
    "name": "Doors",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/doors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 578,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#load",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "getStatus",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#getStatus",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "door",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "getTiles",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#getTiles",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "door",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "getAllTiles",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#getAllTiles",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "hasCollision",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#hasCollision",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "getDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#getDoor",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "isDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#isDoor",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "forEachDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/doors.js~Doors#forEachDoor",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 587,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "content": "/* global module */\r\n\r\nlet Items = require('../../../../util/items'),\r\n    Messages = require('../../../../network/messages'),\r\n    Packets = require('../../../../network/packets'),\r\n    Utils = require('../../../../util/utils');\r\n\r\nclass Enchant {\r\n\r\n    /**\r\n     * Tier 1 - Damage/Armour boost (1-5%)\r\n     * Tier 2 - Damage boost (1-10% & 10% for special ability or special ability level up)\r\n     * Tier 3 - Damage boost (1-15% & 15% for special ability or special ability level up)\r\n     * Tier 4 - Damage boost (1-20% & 20% for special ability or special ability level up)\r\n     * Tier 5 - Damage boost (1-40% & 25% for special ability or special ability level up)\r\n     */\r\n\r\n\r\n    constructor(player) {\r\n        let self = this;\r\n\r\n        self.player = player;\r\n\r\n        self.selectedItem = null;\r\n        self.selectedShards = null;\r\n    }\r\n\r\n    add(type, item) {\r\n        let self = this,\r\n            isItem = item === 'item';\r\n\r\n        if (isItem && !Items.isEnchantable(item.id))\r\n            return;\r\n\r\n        if (type === 'item') {\r\n            if (self.selectedItem)\r\n                self.remove('item');\r\n\r\n            self.selectedItem = item;\r\n\r\n        } else if (type === 'shards') {\r\n\r\n            if (self.selectedShards)\r\n                self.remove('shards');\r\n\r\n            self.selectedShards = item;\r\n        }\r\n\r\n        self.player.send(new Messages.Enchant(Packets.EnchantOpcode.Select, {\r\n            type: type,\r\n            index: item.index\r\n        }));\r\n    }\r\n\r\n    remove(type) {\r\n        let self = this,\r\n            index;\r\n\r\n        if (type === 'item' && self.selectedItem) {\r\n\r\n            index = self.selectedItem.index;\r\n\r\n            self.selectedItem = null;\r\n\r\n        } else if (type === 'shards' && self.selectedShards) {\r\n\r\n            index = self.selectedShards.index;\r\n\r\n\r\n            self.selectedShards = null;\r\n        }\r\n\r\n        self.player.send(new Messages.Enchant(Packets.EnchantOpcode.Remove, {\r\n            type: type,\r\n            index: index\r\n        }));\r\n    }\r\n\r\n    convert(shard) {\r\n        let self = this;\r\n\r\n        if (!Items.isShard(shard.id) || !self.player.inventory.hasSpace())\r\n            return;\r\n\r\n        let tier = Items.getShardTier(shard.id);\r\n\r\n        if (shard.count < 11 && tier > 5)\r\n            return;\r\n\r\n        for (let i = 0; i < shard.count; i += 10) {\r\n            self.player.inventory.remove(shard.id, 10, shard.index);\r\n\r\n            self.player.inventory.add({\r\n                id: shard.id + 1,\r\n                count: 1,\r\n                ability: -1,\r\n                abilityLevel: -1\r\n            });\r\n        }\r\n    }\r\n\r\n    enchant() {\r\n        let self = this;\r\n\r\n        if (!self.selectedItem) {\r\n            self.player.notify('You have not selected an item to enchant.');\r\n            return;\r\n        }\r\n\r\n        if (!self.selectedShards) {\r\n            self.player.notify('You have to select shards to infuse.');\r\n            return;\r\n        }\r\n\r\n        if (!self.verify()) {\r\n            self.player.notify('This item cannot be enchanted.');\r\n            return;\r\n        }\r\n\r\n        if (self.selectedShards.count < 10) {\r\n            self.player.notify('You must have a minimum of 10 shards to enchant.');\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * Implement probabilities here based on the number of shards\r\n         * and reason them out.\r\n         */\r\n\r\n        let tier = self.selectedItem.tier;\r\n\r\n        self.selectedItem.count = Utils.randomInt(1, tier === 5 ? 40 : 5 * tier);\r\n\r\n        if (tier < 2)\r\n            return;\r\n\r\n        if (self.hasAbility(self.selectedItem))\r\n            if (self.selectedItem.abilityLevel < 5)\r\n                self.selectedItem.abilityLevel++;\r\n            else\r\n                self.generateAbility();\r\n\r\n        self.player.inventory.remove(self.selectedShards.id, 10, self.selectedShards.index);\r\n        self.player.sync();\r\n    }\r\n\r\n    generateAbility() {\r\n        let self = this,\r\n            type = Items.getType(self.selectedItem.id),\r\n            probability = Utils.randomInt(0, 100);\r\n\r\n        if (probability > 5 + (5 * self.selectedShards.tier))\r\n            return;\r\n\r\n        switch (type) {\r\n            case 'armor':\r\n            case 'armorarcher':\r\n\r\n                self.selectedItem.ability = Utils.randomInt(2, 3);\r\n\r\n\r\n                break;\r\n\r\n            case 'weapon':\r\n\r\n                self.selectedItem.ability = Utils.randomInt(0, 1);\r\n\r\n                break;\r\n\r\n            case 'weaponarcher':\r\n\r\n                self.selectedItem.ability = Utils.randomInt(4, 5);\r\n\r\n                break;\r\n\r\n            case 'pendant':\r\n\r\n                break;\r\n\r\n            case 'ring':\r\n\r\n                break;\r\n\r\n            case 'boots':\r\n\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    verify() {\r\n        return Items.isEnchantable(this.selectedItem.id) && Items.isShard(this.selectedShards.id);\r\n    }\r\n\r\n    hasAbility(item) {\r\n        return item.ability !== -1;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Enchant;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 588,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Items",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 589,
    "kind": "class",
    "name": "Enchant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/enchant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 590,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#constructor",
    "access": "public",
    "description": "Tier 1 - Damage/Armour boost (1-5%)\nTier 2 - Damage boost (1-10% & 10% for special ability or special ability level up)\nTier 3 - Damage boost (1-15% & 15% for special ability or special ability level up)\nTier 4 - Damage boost (1-20% & 20% for special ability or special ability level up)\nTier 5 - Damage boost (1-40% & 25% for special ability or special ability level up)",
    "lineNumber": 19
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#add",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#remove",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "convert",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#convert",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "shard",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "enchant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#enchant",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "generateAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#generateAbility",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "verify",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#verify",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "hasAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/enchant.js~Enchant#hasAbility",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "content": "/* global module */\r\n\r\nlet Equipment = require('./equipment'),\r\n    Items = require('../../../../../util/items'),\r\n    Modules = require('../../../../../util/modules');\r\n\r\nclass Armour extends Equipment {\r\n\r\n    constructor(name, id, count, ability, abilityLevel) {\r\n        super(name, id, count, ability, abilityLevel);\r\n\r\n        this.defense = Items.getArmourLevel(name);\r\n    }\r\n\r\n    hasAntiStun() {\r\n        return this.ability === 6;\r\n    }\r\n\r\n    setDefense(defense) {\r\n        this.defense = defense;\r\n    }\r\n\r\n    getDefense() {\r\n        return this.defense;\r\n    }\r\n\r\n    getType() {\r\n        return Modules.Equipment.Armour;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Armour;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 599,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 600,
    "kind": "class",
    "name": "Armour",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 601,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "defense",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#defense",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "hasAntiStun",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#hasAntiStun",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "setDefense",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#setDefense",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "defense",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "getDefense",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#getDefense",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/armour.js~Armour#getType",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "content": "/* global module */\r\n\r\nlet Equipment = require('./equipment'),\r\n    Items = require('../../../../../util/items'),\r\n    Modules = require('../../../../../util/modules');\r\n\r\nclass Boots extends Equipment {\r\n\r\n    constructor(name, id, count, ability, abilityLevel) {\r\n        super(name, id, count, ability, abilityLevel);\r\n\r\n        this.bootsLevel = Items.getBootsLevel(name);\r\n    }\r\n\r\n    getBaseAmplifier() {\r\n        return 1.00 + (this.bootsLevel / 200);\r\n    }\r\n\r\n    getType() {\r\n        return Modules.Equipment.Boots;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Boots;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 609,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 610,
    "kind": "class",
    "name": "Boots",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 611,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 612,
    "kind": "member",
    "name": "bootsLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots#bootsLevel",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "getBaseAmplifier",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots#getBaseAmplifier",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/boots.js~Boots#getType",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "content": "/* global module */\r\n\r\nlet Items = require('../../../../../util/items');\r\n\r\nclass Equipment {\r\n\r\n    constructor(name, id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        self.name = name;\r\n        self.id = id;\r\n        self.count = count ? count : 0;\r\n        self.ability = ability ? ability : 0;\r\n        self.abilityLevel = abilityLevel ? abilityLevel : 0;\r\n    }\r\n\r\n    getName() {\r\n        return this.name;\r\n    }\r\n\r\n    getId() {\r\n        return this.id;\r\n    }\r\n\r\n    getCount() {\r\n        return this.count;\r\n    }\r\n\r\n    getAbility() {\r\n        return this.ability;\r\n    }\r\n\r\n    getAbilityLevel() {\r\n        return this.abilityLevel;\r\n    }\r\n\r\n    getBaseAmplifier() {\r\n        return 1.00;\r\n    }\r\n\r\n    getType() {\r\n        return -1;\r\n    }\r\n\r\n    getData() {\r\n        return {\r\n            type: this.getType(),\r\n            name: Items.idToName(this.id),\r\n            string: Items.idToString(this.id),\r\n            count: this.count,\r\n            ability: this.ability,\r\n            abilityLevel: this.abilityLevel\r\n        };\r\n    }\r\n\r\n    getString() {\r\n        return Items.idToString(this.id);\r\n    }\r\n\r\n    getItem() {\r\n        return {\r\n            name: this.name,\r\n            string: Items.idToString(this.id),\r\n            id: this.id,\r\n            count: this.count,\r\n            ability: this.ability,\r\n            abilityLevel: this.abilityLevel\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Equipment;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 616,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Items",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 617,
    "kind": "class",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 618,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "getName",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getName",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "getId",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getId",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "getCount",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getCount",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "getAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getAbility",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "getAbilityLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getAbilityLevel",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "getBaseAmplifier",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getBaseAmplifier",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getType",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getData",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"name\": *, \"string\": *, \"count\": *, \"ability\": *, \"abilityLevel\": *}"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "getString",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getString",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "getItem",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/equipment.js~Equipment#getItem",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"name\": *, \"string\": *, \"id\": *, \"count\": *, \"ability\": *, \"abilityLevel\": *}"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "content": "/* global module */\r\n\r\nlet Equipment = require('./equipment'),\r\n    Items = require('../../../../../util/items'),\r\n    Modules = require('../../../../../util/modules');\r\n\r\nclass Pendant extends Equipment {\r\n\r\n    constructor(name, id, count, ability, abilityLevel) {\r\n        super(name, id, count, ability, abilityLevel);\r\n\r\n        this.pendantLevel = Items.getPendantLevel(name);\r\n    }\r\n\r\n    getBaseAmplifier() {\r\n        return 1.00 + (this.pendantLevel / 100);\r\n    }\r\n\r\n    getType() {\r\n        return Modules.Equipment.Pendant;\r\n    }\r\n}\r\n\r\nmodule.exports = Pendant;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 630,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 631,
    "kind": "class",
    "name": "Pendant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 632,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 633,
    "kind": "member",
    "name": "pendantLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant#pendantLevel",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "getBaseAmplifier",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant#getBaseAmplifier",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/pendant.js~Pendant#getType",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "content": "/* global module */\r\n\r\nlet Equipment = require('./equipment'),\r\n    Items = require('../../../../../util/items'),\r\n    Modules = require('../../../../../util/modules');\r\n\r\nclass Ring extends Equipment {\r\n\r\n    constructor(name, id, count, ability, abilityLevel) {\r\n        super(name, id, count, ability, abilityLevel);\r\n\r\n        this.ringLevel = Items.getRingLevel(name);\r\n    }\r\n\r\n    getBaseAmplifier() {\r\n        return 1.00 + (this.ringLevel / 100);\r\n    }\r\n\r\n    getType() {\r\n        return Modules.Equipment.Ring;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Ring;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 637,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 638,
    "kind": "class",
    "name": "Ring",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 639,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 640,
    "kind": "member",
    "name": "ringLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring#ringLevel",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "getBaseAmplifier",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring#getBaseAmplifier",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/ring.js~Ring#getType",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "content": "/* global module */\r\n\r\nlet Equipment = require('./equipment'),\r\n    Items = require('../../../../../util/items'),\r\n    Modules = require('../../../../../util/modules');\r\n\r\nclass Weapon extends Equipment {\r\n\r\n    constructor(name, id, count, ability, abilityLevel) {\r\n        super(name, id, count, ability, abilityLevel);\r\n\r\n        let self = this;\r\n\r\n        self.level = Items.getWeaponLevel(name);\r\n        self.ranged = Items.isArcherWeapon(name);\r\n\r\n        self.breakable = false;\r\n    }\r\n\r\n    hasCritical() {\r\n        return this.ability === 1;\r\n    }\r\n\r\n    hasExplosive() {\r\n        return this.ability === 4;\r\n    }\r\n\r\n    hasStun() {\r\n        return this.ability === 5;\r\n    }\r\n\r\n    isRanged() {\r\n        return this.ranged\r\n    }\r\n\r\n    setLevel(level) {\r\n        this.level = level;\r\n    }\r\n\r\n    getLevel() {\r\n        return this.level;\r\n    }\r\n\r\n    getType() {\r\n        return Modules.Equipment.Weapon;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Weapon;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 644,
    "kind": "variable",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 645,
    "kind": "class",
    "name": "Weapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Equipment"
    ],
    "ignore": true
  },
  {
    "__docId__": 646,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "hasCritical",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#hasCritical",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "hasExplosive",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#hasExplosive",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "method",
    "name": "hasStun",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#hasStun",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "setLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#setLevel",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 652,
    "kind": "member",
    "name": "level",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#level",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "getLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#getLevel",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "method",
    "name": "getType",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/equipment/weapon.js~Weapon#getType",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "content": "/* global module */\r\n\r\nlet Messages = require('../../../../network/messages'),\r\n    Packets = require('../../../../network/packets');\r\n\r\nclass Guild {\r\n    \r\n    constructor(player, data) {\r\n        let self = this;\r\n        \r\n        self.player = player;\r\n        self.data = data;\r\n    }\r\n\r\n    join() {\r\n        let self = this;\r\n\r\n        if (self.data && self.data.name)\r\n            self.leave();\r\n\r\n\r\n    }\r\n\r\n    leave() {\r\n        let self = this;\r\n\r\n        if (!self.data) {\r\n            self.player.notify('You are not in a guild.');\r\n            return;\r\n        }\r\n\r\n        self.getController().remove(self.player, self.data.string);\r\n\r\n        self.data = null;\r\n\r\n        self.player.send(new Messages.Guild(Packets.GuildOpcode.Leave));\r\n\r\n    }\r\n\r\n    /*\r\n     * We keep each player up to date with changes\r\n     * to the guild.\r\n     */\r\n\r\n    update(data) {\r\n        let self = this;\r\n\r\n        // Do a server-sided update.\r\n        self.data = data;\r\n\r\n        // Do a client-sided update.\r\n        self.player.send(new Messages.Guild(Packets.GuildOpcode.Update, data));\r\n    }\r\n\r\n    getController() {\r\n        return this.player.world.guilds;\r\n    }\r\n}\r\n\r\nmodule.exports = Guild;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 656,
    "kind": "variable",
    "name": "Messages",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Messages",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 657,
    "kind": "class",
    "name": "Guild",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/guild.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 658,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "join",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#join",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "leave",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#leave",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "update",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#update",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "getController",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/guild.js~Guild#getController",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Messages = require('../../../../network/messages'),\r\n    Packets = require('../../../../network/packets'),\r\n    Npcs = require('../../../../util/npcs'),\r\n    Shops = require('../../../../util/shops');\r\n\r\nclass Handler {\r\n\r\n    constructor(player) {\r\n        let self = this;\r\n\r\n        self.player = player;\r\n        self.world = player.world;\r\n        self.map = player.world.map;\r\n\r\n        self.updateInterval = 400; //400 milliseconds\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        self.player.updateInterval = setInterval(() => {\r\n\r\n            self.detectAggro();\r\n\r\n        }, 400);\r\n\r\n        self.player.onMovement((x, y) => {\r\n\r\n            self.player.checkRegions();\r\n\r\n            self.detectPVP(x, y);\r\n            self.detectMusic(x, y);\r\n            self.detectOverlay(x, y);\r\n            self.detectCamera(x, y);\r\n            self.detectLights(x, y);\r\n\r\n        });\r\n\r\n        self.player.onDeath(() => {\r\n\r\n\r\n        });\r\n\r\n        self.player.onHit((attacker, damage) => {\r\n\r\n            /**\r\n             * Handles actions whenever the player\r\n             * instance is hit by 'damage' amount\r\n             */\r\n\r\n            if (self.player.combat.isRetaliating())\r\n                self.player.combat.begin(attacker);\r\n\r\n        });\r\n\r\n        self.player.onKill((character) => {\r\n\r\n            if (self.player.quests.isAchievementMob(character)) {\r\n                let achievement = self.player.quests.getAchievementByMob(character);\r\n\r\n                if (achievement && achievement.isStarted())\r\n                    self.player.quests.getAchievementByMob(character).step();\r\n            }\r\n        });\r\n\r\n        self.player.onRegion(() => {\r\n            self.player.lastRegionChange = new Date().getTime();\r\n\r\n            self.world.region.handle(self.player);\r\n            self.world.region.push(self.player);\r\n        });\r\n\r\n        self.player.connection.onClose(() => {\r\n            self.player.stopHealing();\r\n\r\n            self.world.removePlayer(self.player);\r\n        });\r\n\r\n        self.player.onTalkToNPC((npc) => {\r\n\r\n            if (self.player.quests.isQuestNPC(npc)) {\r\n                self.player.quests.getQuestByNPC(npc).triggerTalk(npc);\r\n\r\n                return;\r\n            }\r\n\r\n            if (self.player.quests.isAchievementNPC(npc)) {\r\n                self.player.quests.getAchievementByNPC(npc).converse(npc);\r\n\r\n                return;\r\n            }\r\n\r\n            if (Shops.isShopNPC(npc.id)) {\r\n                self.world.shops.open(self.player, npc.id);\r\n                return;\r\n            }\r\n\r\n            switch(Npcs.getType(npc.id)) {\r\n                case 'banker':\r\n                    self.player.send(new Messages.NPC(Packets.NPCOpcode.Bank, {}));\r\n                    return;\r\n\r\n                case 'enchanter':\r\n                    self.player.send(new Messages.NPC(Packets.NPCOpcode.Enchant, {}));\r\n                    break;\r\n            }\r\n\r\n            let text = Npcs.getText(npc.id);\r\n\r\n            if (!text)\r\n                return;\r\n\r\n            self.player.send(new Messages.NPC(Packets.NPCOpcode.Talk, {\r\n                id: npc.instance,\r\n                text: npc.talk(text)\r\n            }));\r\n\r\n        });\r\n    }\r\n\r\n    detectAggro() {\r\n        let self = this,\r\n            region = self.world.region.regions[self.player.region];\r\n\r\n        if (!region)\r\n            return;\r\n\r\n        _.each(region.entities, (entity) => {\r\n            if (entity && entity.type === 'mob' && self.canEntitySee(entity)) {\r\n                let aggro = entity.canAggro(self.player);\r\n\r\n                if (aggro)\r\n                    entity.combat.begin(self.player);\r\n            }\r\n        });\r\n    }\r\n\r\n    detectMusic(x, y) {\r\n        let self = this,\r\n            musicArea = _.find(self.world.getMusicAreas(), (area) => { return area.contains(x, y); });\r\n\r\n        if (musicArea && self.player.currentSong !== musicArea.id)\r\n            self.player.updateMusic(musicArea.id);\r\n    }\r\n\r\n    detectPVP(x, y) {\r\n        let self = this,\r\n            pvpArea = _.find(self.world.getPVPAreas(), (area) => { return area.contains(x, y); });\r\n\r\n        self.player.updatePVP(!!pvpArea);\r\n    }\r\n\r\n    detectOverlay(x, y) {\r\n        let self = this,\r\n            overlayArea = _.find(self.world.getOverlayAreas(), (area) => {\r\n                return area.contains(x, y);\r\n            });\r\n\r\n        self.player.updateOverlay(overlayArea);\r\n    }\r\n\r\n    detectCamera(x, y) {\r\n        let self = this,\r\n            cameraArea = _.find(self.world.getCameraAreas(), (area) => {\r\n                return area.contains(x, y);\r\n            });\r\n\r\n        self.player.updateCamera(cameraArea);\r\n    }\r\n\r\n    detectLights(x, y) {\r\n        let self = this;\r\n\r\n        _.each(self.map.lights, (light) => {\r\n            if (self.map.nearLight(light, x, y) && !self.player.hasLoadedLight(light)) {\r\n\r\n                self.player.lightsLoaded.push(light);\r\n                self.player.send(new Messages.Overlay(Packets.OverlayOpcode.Lamp, light));\r\n            }\r\n        });\r\n    }\r\n\r\n    canEntitySee(entity) {\r\n        return !this.player.hasInvisible(entity) && !this.player.hasInvisibleId(entity.id);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Handler;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 664,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 665,
    "kind": "class",
    "name": "Handler",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/handler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 666,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 667,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#load",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "detectAggro",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectAggro",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "detectMusic",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectMusic",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "detectPVP",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectPVP",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "detectOverlay",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectOverlay",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "detectCamera",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectCamera",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "detectLights",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#detectLights",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "canEntitySee",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/handler.js~Handler#canEntitySee",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/player.js",
    "content": "/* global module */\r\n\r\nlet Character = require('../character'),\r\n    Incoming = require('../../../../controllers/incoming'),\r\n    Armour = require('./equipment/armour'),\r\n    Weapon = require('./equipment/weapon'),\r\n    Pendant = require('./equipment/pendant'),\r\n    Ring = require('./equipment/ring'),\r\n    Boots = require('./equipment/boots'),\r\n    Items = require('../../../../util/items'),\r\n    Messages = require('../../../../network/messages'),\r\n    Formulas = require('../../../../util/formulas'),\r\n    HitPoints = require('./points/hitpoints'),\r\n    Mana = require('./points/mana'),\r\n    Packets = require('../../../../network/packets'),\r\n    Modules = require('../../../../util/modules'),\r\n    Handler = require('./handler'),\r\n    Quests = require('../../../../controllers/quests'),\r\n    Inventory = require('./containers/inventory/inventory'),\r\n    Abilities = require('./ability/abilities'),\r\n    Bank = require('./containers/bank/bank'),\r\n    config = require('../../../../../config.json'),\r\n    Enchant = require('./enchant'),\r\n    Utils = require('../../../../util/utils'),\r\n    Hit = require('../combat/hit'),\r\n    Trade = require('./trade'),\r\n    Warp = require('./warp'),\r\n    Guild = require('./guild'),\r\n    Doors = require('./doors');\r\n\r\nclass Player extends Character {\r\n\r\n    constructor(world, database, connection, clientId) {\r\n        super(-1, 'player', connection.id, -1, -1);\r\n\r\n        let self = this;\r\n\r\n        self.world = world;\r\n        self.database = database;\r\n        self.connection = connection;\r\n\r\n        self.clientId = clientId;\r\n\r\n        self.incoming = new Incoming(self);\r\n\r\n        self.ready = false;\r\n\r\n        self.moving = false;\r\n        self.potentialPosition = null;\r\n        self.futurePosition = null;\r\n\r\n        self.regionPosition = null;\r\n        self.newRegion = false;\r\n\r\n        self.team = null;\r\n        self.userAgent = null;\r\n\r\n        self.disconnectTimeout = null;\r\n        self.timeoutDuration = 1000 * 60 * 10; //10 minutes\r\n        self.lastRegionChange = new Date().getTime();\r\n\r\n        self.handler = new Handler(self);\r\n\r\n        self.inventory = new Inventory(self, 20);\r\n        self.abilities = new Abilities(self);\r\n        self.enchant = new Enchant(self);\r\n        self.bank = new Bank(self, 56);\r\n        self.quests = new Quests(self);\r\n        self.trade = new Trade(self);\r\n        self.doors = new Doors(self);\r\n        self.warp = new Warp(self);\r\n\r\n        self.introduced = false;\r\n        self.currentSong = null;\r\n        self.acceptedTrade = false;\r\n        self.invincible = false;\r\n        self.noDamage = false;\r\n        self.isGuest = false;\r\n\r\n        self.pvp = false;\r\n\r\n        self.canTalk = true;\r\n\r\n        self.profileDialogOpen = false;\r\n\r\n        self.instanced = false;\r\n        self.visible = true;\r\n\r\n        self.regionsLoaded = [];\r\n        self.lightsLoaded = [];\r\n    }\r\n\r\n    load(data) {\r\n        let self = this;\r\n\r\n        self.kind = data.kind;\r\n        self.rights = data.rights;\r\n        self.experience = data.experience;\r\n        self.ban = data.ban;\r\n        self.mute = data.mute;\r\n        self.membership = data.membership;\r\n        self.lastLogin = data.lastLogin;\r\n        self.pvpKills = data.pvpKills;\r\n        self.pvpDeaths = data.pvpDeaths;\r\n        self.orientation = data.orientation;\r\n\r\n        self.warp.setLastWarp(data.lastWarp);\r\n\r\n        self.level = Formulas.expToLevel(self.experience);\r\n        self.nextExperience = Formulas.nextExp(self.experience);\r\n        self.prevExperience = Formulas.prevExp(self.experience);\r\n        self.hitPoints = new HitPoints(data.hitPoints, Formulas.getMaxHitPoints(self.level));\r\n        self.mana = new Mana(data.mana, Formulas.getMaxMana(self.level));\r\n\r\n        if (data.invisibleIds)\r\n            self.invisiblesIds = data.invisibleIds.split(' ');\r\n\r\n        self.userAgent = data.userAgent;\r\n\r\n        let armour = data.armour,\r\n            weapon = data.weapon,\r\n            pendant = data.pendant,\r\n            ring = data.ring,\r\n            boots = data.boots;\r\n\r\n        self.setPosition(data.x, data.y);\r\n        self.setArmour(armour[0], armour[1], armour[2], armour[3]);\r\n        self.setWeapon(weapon[0], weapon[1], weapon[2], weapon[3]);\r\n        self.setPendant(pendant[0], pendant[1], pendant[2], pendant[3]);\r\n        self.setRing(ring[0], ring[1], ring[2], ring[3]);\r\n        self.setBoots(boots[0], boots[1], boots[2], boots[3]);\r\n\r\n        self.guild = new Guild(self, null);\r\n    }\r\n\r\n    loadInventory() {\r\n        let self = this;\r\n\r\n        if (config.offlineMode) {\r\n            self.inventory.loadEmpty();\r\n            return;\r\n        }\r\n\r\n        self.database.loader.getInventory(self, (ids, counts, skills, skillLevels) => {\r\n            if (ids === null && counts === null) {\r\n                self.inventory.loadEmpty();\r\n                return;\r\n            }\r\n\r\n            if (ids.length !== self.inventory.size)\r\n                self.save();\r\n\r\n            self.inventory.load(ids, counts, skills, skillLevels);\r\n            self.inventory.check();\r\n\r\n            self.loadBank();\r\n        });\r\n    }\r\n\r\n    loadBank() {\r\n        let self = this;\r\n\r\n        if (config.offlineMode) {\r\n            self.bank.loadEmpty();\r\n            return;\r\n        }\r\n\r\n        self.database.loader.getBank(self, (ids, counts, skills, skillLevels) => {\r\n            if (ids.length !== self.bank.size)\r\n                self.save();\r\n\r\n            self.bank.load(ids, counts, skills, skillLevels);\r\n            self.bank.check();\r\n        });\r\n    }\r\n\r\n    loadQuests() {\r\n        let self = this;\r\n\r\n        if (config.offlineMode)\r\n            return;\r\n\r\n        self.database.loader.getAchievements(self, (ids, progress) => {\r\n            ids.pop();\r\n            progress.pop();\r\n\r\n            if (self.quests.getAchievementSize() !== ids.length) {\r\n                log.info('Mismatch in achievements data.');\r\n\r\n                self.save();\r\n            }\r\n\r\n            self.quests.updateAchievements(ids, progress);\r\n        });\r\n\r\n        self.database.loader.getQuests(self, (ids, stages) => {\r\n            if (!ids || !stages) {\r\n                self.quests.updateQuests(ids, stages);\r\n                return;\r\n            }\r\n\r\n            /* Removes the empty space created by the loader */\r\n\r\n            ids.pop();\r\n            stages.pop();\r\n\r\n            if (self.quests.getQuestSize() !== ids.length) {\r\n                log.info('Mismatch in quest data.');\r\n\r\n                self.save();\r\n            }\r\n\r\n            self.quests.updateQuests(ids, stages);\r\n        });\r\n\r\n        self.quests.onAchievementsReady(() => {\r\n\r\n            self.send(new Messages.Quest(Packets.QuestOpcode.AchievementBatch, self.quests.getAchievementData()));\r\n\r\n            /* Update region here because we receive quest info */\r\n            self.updateRegion();\r\n\r\n            self.achievementsLoaded = true;\r\n        });\r\n\r\n        self.quests.onQuestsReady(() => {\r\n\r\n            self.send(new Messages.Quest(Packets.QuestOpcode.QuestBatch, self.quests.getQuestData()));\r\n\r\n            /* Update region here because we receive quest info */\r\n            self.updateRegion();\r\n\r\n            self.questsLoaded = true;\r\n        });\r\n\r\n    }\r\n\r\n    intro() {\r\n        let self = this;\r\n\r\n        if (self.ban > new Date()) {\r\n            self.connection.sendUTF8('ban');\r\n            self.connection.close('Player: ' + self.username + ' is banned.');\r\n        }\r\n\r\n        if (self.x <= 0 || self.y <= 0)\r\n            self.sendToSpawn();\r\n\r\n        if (self.hitPoints.getHitPoints() < 0)\r\n            self.hitPoints.setHitPoints(self.getMaxHitPoints());\r\n\r\n        if (self.mana.getMana() < 0)\r\n            self.mana.setMana(self.mana.getMaxMana());\r\n\r\n        self.verifyRights();\r\n\r\n        let info = {\r\n            instance: self.instance,\r\n            username: self.username.charAt(0).toUpperCase() + self.username.substr(1),\r\n            x: self.x,\r\n            y: self.y,\r\n            kind: self.kind,\r\n            rights: self.rights,\r\n            hitPoints: self.hitPoints.getData(),\r\n            mana: self.mana.getData(),\r\n            experience: self.experience,\r\n            nextExperience: self.nextExperience,\r\n            prevExperience: self.prevExperience,\r\n            level: self.level,\r\n            lastLogin: self.lastLogin,\r\n            pvpKills: self.pvpKills,\r\n            pvpDeaths: self.pvpDeaths,\r\n            orientation: self.orientation\r\n        };\r\n\r\n        self.regionPosition = [self.x, self.y];\r\n\r\n        /**\r\n         * Send player data to client here\r\n         */\r\n\r\n        self.world.addPlayer(self);\r\n\r\n        self.send(new Messages.Welcome(info));\r\n    }\r\n\r\n    verifyRights() {\r\n        let self = this;\r\n\r\n        if (config.moderators.indexOf(self.username.toLowerCase()) > -1)\r\n            self.rights = 1;\r\n\r\n        if (config.administrators.indexOf(self.username.toLowerCase()) > -1 ||\r\n            config.offlineMode)\r\n            self.rights = 2;\r\n\r\n    }\r\n\r\n    addExperience(exp) {\r\n        let self = this;\r\n\r\n        self.experience += exp;\r\n\r\n        let oldLevel = self.level;\r\n\r\n        self.level = Formulas.expToLevel(self.experience);\r\n        self.nextExperience = Formulas.nextExp(self.experience);\r\n        self.prevExperience = Formulas.prevExp(self.experience);\r\n\r\n        if (oldLevel !== self.level) {\r\n            self.hitPoints.setMaxHitPoints(Formulas.getMaxHitPoints(self.level));\r\n\r\n            self.updateRegion();\r\n        }\r\n\r\n        let data = {\r\n            id: self.instance,\r\n            level: self.level\r\n        };\r\n\r\n        /**\r\n         * Sending two sets of data as other users do not need to\r\n         * know the experience of another player.. (yet).\r\n         */\r\n\r\n        self.sendToAdjacentRegions(self.region, new Messages.Experience(data), self.instance);\r\n\r\n        data.amount = exp;\r\n        data.experience = self.experience;\r\n        data.nextExperience = self.nextExperience;\r\n        data.prevExperience = self.prevExperience;\r\n\r\n        self.send(new Messages.Experience(data));\r\n    }\r\n\r\n    heal(amount) {\r\n        let self = this;\r\n\r\n        /**\r\n         * Passed from the superclass...\r\n         */\r\n\r\n        if (!self.hitPoints || !self.mana)\r\n            return;\r\n\r\n        self.hitPoints.heal(amount);\r\n        self.mana.heal(amount);\r\n\r\n        self.sync();\r\n    }\r\n\r\n    healHitPoints(amount) {\r\n        let self = this,\r\n            type = 'health';\r\n\r\n        self.hitPoints.heal(amount);\r\n\r\n        self.sync();\r\n\r\n        self.sendToAdjacentRegions(self.region, new Messages.Heal({\r\n            id: self.instance,\r\n            type: type,\r\n            amount: amount\r\n        }));\r\n    }\r\n\r\n    healManaPoints(amount) {\r\n        let self = this,\r\n            type = 'mana';\r\n\r\n        self.mana.heal(amount);\r\n\r\n        self.sync();\r\n\r\n        self.sendToAdjacentRegions(self.region, new Messages.Heal({\r\n            id: self.instance,\r\n            type: type,\r\n            amount: amount\r\n        }));\r\n    }\r\n\r\n\r\n    eat(id) {\r\n        let self = this,\r\n            item = Items.getPlugin(id);\r\n\r\n        if (!item)\r\n            return;\r\n\r\n        new (item)().onUse(self);\r\n    }\r\n\r\n    equip(string, count, ability, abilityLevel) {\r\n        let self = this,\r\n            data = Items.getData(string),\r\n            type, id;\r\n\r\n        if (!data || data === 'null')\r\n            return;\r\n\r\n        if (Items.isArmour(string))\r\n            type = Modules.Equipment.Armour;\r\n        else if (Items.isWeapon(string))\r\n            type = Modules.Equipment.Weapon;\r\n        else if (Items.isPendant(string))\r\n            type = Modules.Equipment.Pendant;\r\n        else if (Items.isRing(string))\r\n            type = Modules.Equipment.Ring;\r\n        else if (Items.isBoots(string))\r\n            type = Modules.Equipment.Boots;\r\n\r\n        id = Items.stringToId(string);\r\n\r\n        switch(type) {\r\n            case Modules.Equipment.Armour:\r\n\r\n                if (self.hasArmour() && self.armour.id !== 114)\r\n                    self.inventory.add(self.armour.getItem());\r\n\r\n                self.setArmour(id, count, ability, abilityLevel);\r\n                break;\r\n\r\n            case Modules.Equipment.Weapon:\r\n\r\n                if (self.hasWeapon())\r\n                    self.inventory.add(self.weapon.getItem());\r\n\r\n                self.setWeapon(id, count, ability, abilityLevel);\r\n                break;\r\n\r\n            case Modules.Equipment.Pendant:\r\n\r\n                if (self.hasPendant())\r\n                    self.inventory.add(self.pendant.getItem());\r\n\r\n                self.setPendant(id, count, ability, abilityLevel);\r\n                break;\r\n\r\n            case Modules.Equipment.Ring:\r\n\r\n                if (self.hasRing())\r\n                    self.inventory.add(self.ring.getItem());\r\n\r\n                self.setRing(id, count, ability, abilityLevel);\r\n                break;\r\n\r\n            case Modules.Equipment.Boots:\r\n\r\n                if (self.hasBoots())\r\n                    self.inventory.add(self.boots.getItem());\r\n\r\n                self.setBoots(id, count, ability, abilityLevel);\r\n                break;\r\n        }\r\n\r\n        self.send(new Messages.Equipment(Packets.EquipmentOpcode.Equip, {\r\n            type: type,\r\n            name: Items.idToName(id),\r\n            string: string,\r\n            count: count,\r\n            ability: ability,\r\n            abilityLevel: abilityLevel\r\n        }));\r\n\r\n        self.sync();\r\n    }\r\n\r\n    updateRegion(force) {\r\n        this.world.region.sendRegion(this, this.region, force);\r\n    }\r\n\r\n    isInvisible(instance) {\r\n        let self = this,\r\n            entity = self.world.getEntityByInstance(instance);\r\n\r\n        if (!entity)\r\n            return false;\r\n\r\n        return super.hasInvisibleId(entity.id) || super.hasInvisible(entity);\r\n    }\r\n\r\n    formatInvisibles() {\r\n        return this.invisiblesIds.join(\" \");\r\n    }\r\n\r\n    canEquip(string) {\r\n        let self = this,\r\n            requirement = Items.getLevelRequirement(string);\r\n\r\n        if (requirement > self.level) {\r\n            self.notify('You must be at least level ' + requirement + ' to equip this.');\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    die() {\r\n        let self = this;\r\n\r\n        self.dead = true;\r\n\r\n        if (self.deathCallback)\r\n            self.deathCallback();\r\n\r\n        self.send(new Messages.Death(self.instance));\r\n    }\r\n\r\n    teleport(x, y, isDoor, animate) {\r\n        let self = this;\r\n\r\n        if (isDoor && !self.finishedTutorial()) {\r\n            if (self.doorCallback)\r\n                self.doorCallback(x, y);\r\n\r\n            return;\r\n        }\r\n\r\n        self.sendToAdjacentRegions(self.region, new Messages.Teleport({\r\n            id: self.instance,\r\n            x: x,\r\n            y: y,\r\n            withAnimation: animate\r\n        }));\r\n\r\n        self.setPosition(x, y);\r\n        //self.checkRegions();\r\n\r\n        self.world.cleanCombat(self);\r\n    }\r\n\r\n    updatePVP(pvp) {\r\n        let self = this;\r\n\r\n        /**\r\n         * No need to update if the state is the same\r\n         */\r\n\r\n        if (self.pvp === pvp)\r\n            return;\r\n\r\n        if (self.pvp && !pvp)\r\n            self.notify('You are no longer in a PvP zone!');\r\n        else\r\n            self.notify('You have entered a PvP zone!');\r\n\r\n        self.pvp = pvp;\r\n\r\n        self.sendToRegion(new Messages.PVP(self.instance, self.pvp));\r\n    }\r\n\r\n    updateOverlay(overlay) {\r\n        let self = this;\r\n\r\n        if (self.overlayArea === overlay)\r\n            return;\r\n\r\n        self.overlayArea = overlay;\r\n\r\n        if (overlay && overlay.id) {\r\n            self.lightsLoaded = [];\r\n\r\n            self.send(new Messages.Overlay(Packets.OverlayOpcode.Set, {\r\n                image: overlay.fog ? overlay.fog : 'empty',\r\n                colour: 'rgba(0,0,0,' + overlay.darkness + ')'\r\n            }));\r\n        } else\r\n            self.send(new Messages.Overlay(Packets.OverlayOpcode.Remove));\r\n    }\r\n\r\n    updateCamera(camera) {\r\n        let self = this;\r\n\r\n        if (self.cameraArea === camera)\r\n            return;\r\n\r\n        self.cameraArea = camera;\r\n\r\n        if (camera) {\r\n            switch(camera.type) {\r\n                case 'lockX':\r\n                    self.send(new Messages.Camera(Packets.CameraOpcode.LockX));\r\n                    break;\r\n\r\n                case 'lockY':\r\n                    self.send(new Messages.Camera(Packets.CameraOpcode.LockY));\r\n                    break;\r\n\r\n                case 'player':\r\n                    self.send(new Messages.Camera(Packets.CameraOpcode.Player));\r\n                    break;\r\n            }\r\n\r\n        } else\r\n            self.send(new Messages.Camera(Packets.CameraOpcode.FreeFlow));\r\n    }\r\n\r\n    updateMusic(song) {\r\n        let self = this;\r\n\r\n        self.currentSong = song;\r\n\r\n        self.send(new Messages.Audio(song));\r\n    }\r\n\r\n    revertPoints() {\r\n        let self = this;\r\n\r\n        self.hitPoints.setHitPoints(self.hitPoints.getMaxHitPoints());\r\n        self.mana.setMana(self.mana.getMaxMana());\r\n\r\n        self.sync();\r\n    }\r\n\r\n    applyDamage(damage) {\r\n        this.hitPoints.decrement(damage);\r\n    }\r\n\r\n    toggleProfile(state) {\r\n        let self = this;\r\n\r\n        self.profileDialogOpen = state;\r\n\r\n        if (self.profileToggleCallback)\r\n            self.profileToggleCallback(state);\r\n    }\r\n\r\n    toggleInventory(state) {\r\n        let self = this;\r\n\r\n        self.inventoryOpen = state;\r\n\r\n        if (self.inventoryToggleCallback)\r\n            self.inventoryToggleCallback(state);\r\n    }\r\n\r\n    toggleWarp(state) {\r\n        let self = this;\r\n\r\n        self.warpOpen = state;\r\n\r\n        if (self.warpToggleCallback)\r\n            self.warpToggleCallback(state);\r\n    }\r\n\r\n    getMana() {\r\n        return this.mana.getMana();\r\n    }\r\n\r\n    getMaxMana() {\r\n        return this.mana.getMaxMana();\r\n    }\r\n\r\n    getHitPoints() {\r\n        return this.hitPoints.getHitPoints();\r\n    }\r\n\r\n    getMaxHitPoints() {\r\n        return this.hitPoints.getMaxHitPoints();\r\n    }\r\n\r\n    getTutorial() {\r\n        return this.quests.getQuest(Modules.Quests.Introduction);\r\n    }\r\n\r\n    /**\r\n     * Setters\r\n     */\r\n\r\n    setArmour(id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        if (!id)\r\n            return;\r\n\r\n        self.armour = new Armour(Items.idToString(id), id, count, ability, abilityLevel);\r\n    }\r\n\r\n    breakWeapon() {\r\n        let self = this;\r\n\r\n        self.notify('Your weapon has been broken.');\r\n\r\n        self.setWeapon(-1, 0, 0, 0);\r\n\r\n        self.sendEquipment();\r\n    }\r\n\r\n    setWeapon(id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        if (!id)\r\n            return;\r\n\r\n        self.weapon = new Weapon(Items.idToString(id), id, count, ability, abilityLevel);\r\n\r\n        if (self.weapon.ranged)\r\n            self.attackRange = 7;\r\n    }\r\n\r\n    setPendant(id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        if (!id)\r\n            return;\r\n\r\n        self.pendant = new Pendant(Items.idToString(id), id, count, ability, abilityLevel);\r\n    }\r\n\r\n    setRing(id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        if (!id)\r\n            return;\r\n\r\n        self.ring = new Ring(Items.idToString(id), id, count, ability, abilityLevel);\r\n    }\r\n\r\n    setBoots(id, count, ability, abilityLevel) {\r\n        let self = this;\r\n\r\n        if (!id)\r\n            return;\r\n\r\n        self.boots = new Boots(Items.idToString(id), id, count, ability, abilityLevel);\r\n    }\r\n\r\n    guessPosition(x, y) {\r\n        this.potentialPosition = {\r\n            x: x,\r\n            y: y\r\n        }\r\n    }\r\n\r\n    setPosition(x, y) {\r\n        let self = this;\r\n\r\n        if (self.dead)\r\n            return;\r\n\r\n        if (self.world.map.isOutOfBounds(x, y)) {\r\n            x = 50;\r\n            y = 89;\r\n        }\r\n\r\n        super.setPosition(x, y);\r\n\r\n        self.sendToAdjacentRegions(self.region, new Messages.Movement(Packets.MovementOpcode.Move, {\r\n            id: self.instance,\r\n            x: x,\r\n            y: y,\r\n            forced: false,\r\n            teleport: false\r\n        }), self.instance);\r\n    }\r\n\r\n    setOrientation(orientation) {\r\n        let self = this;\r\n\r\n        self.orientation = orientation;\r\n\r\n        if (self.orientationCallback) // Will be necessary in the future.\r\n            self.orientationCallback;\r\n    }\r\n\r\n    setFuturePosition(x, y) {\r\n        /**\r\n         * Most likely will be used for anti-cheating methods\r\n         * of calculating the actual time and duration for the\r\n         * displacement.\r\n         */\r\n\r\n        this.futurePosition = {\r\n            x: x,\r\n            y: y\r\n        }\r\n    }\r\n\r\n    loadRegion(regionId) {\r\n        this.regionsLoaded.push(regionId);\r\n    }\r\n\r\n    hasLoadedRegion(region) {\r\n        return this.regionsLoaded.indexOf(region) > -1;\r\n    }\r\n\r\n    hasLoadedLight(light) {\r\n        return this.lightsLoaded.indexOf(light) > -1;\r\n    }\r\n\r\n    timeout() {\r\n        let self = this;\r\n\r\n        self.connection.sendUTF8('timeout');\r\n        self.connection.close('Player timed out.');\r\n    }\r\n\r\n    refreshTimeout() {\r\n        let self = this;\r\n\r\n        clearTimeout(self.disconnectTimeout);\r\n\r\n        self.disconnectTimeout = setTimeout(() => {\r\n\r\n            self.timeout();\r\n\r\n        }, self.timeoutDuration);\r\n    }\r\n\r\n    /**\r\n     * Getters\r\n     */\r\n\r\n    hasArmour() {\r\n        return this.armour && this.armour.name !== 'null' && this.armour.id !== -1;\r\n    }\r\n\r\n    hasWeapon() {\r\n        return this.weapon && this.weapon.name !== 'null' && this.weapon.id !== -1;\r\n    }\r\n\r\n    hasBreakableWeapon() {\r\n        return this.weapon && this.weapon.breakable;\r\n    }\r\n\r\n    hasPendant() {\r\n        return this.pendant && this.pendant.name !== 'null' && this.pendant.id !== -1;\r\n    }\r\n\r\n    hasRing() {\r\n        return this.ring && this.ring.name !== 'null' && this.ring.id !== -1;\r\n    }\r\n\r\n    hasBoots() {\r\n        return this.boots && this.boots.name !== 'null' && this.boots.id !== -1;\r\n    }\r\n\r\n    hasMaxHitPoints() {\r\n        return this.getHitPoints() >= this.hitPoints.getMaxHitPoints();\r\n    }\r\n\r\n    hasMaxMana() {\r\n        return this.mana.getMana() >= this.mana.getMaxMana();\r\n    }\r\n\r\n    hasSpecialAttack() {\r\n        return this.weapon && (this.weapon.hasCritical() || this.weapon.hasExplosive() || this.weapon.hasStun());\r\n    }\r\n\r\n    hasGuild() {\r\n\r\n    }\r\n\r\n    canBeStunned() {\r\n        return true;\r\n    }\r\n\r\n    getState() {\r\n        let self = this;\r\n\r\n        return {\r\n            type: self.type,\r\n            id: self.instance,\r\n            name: self.username,\r\n            x: self.x,\r\n            y: self.y,\r\n            rights: self.rights,\r\n            level: self.level,\r\n            pvp: self.pvp,\r\n            pvpKills: self.pvpKills,\r\n            pvpDeaths: self.pvpDeaths,\r\n            orientation: self.orientation,\r\n            hitPoints: self.hitPoints.getData(),\r\n            mana: self.mana.getData(),\r\n            armour: self.armour.getData(),\r\n            weapon: self.weapon.getData(),\r\n            pendant: self.pendant.getData(),\r\n            ring: self.ring.getData(),\r\n            boots: self.boots.getData()\r\n        };\r\n    }\r\n\r\n    getRemoteAddress() {\r\n        return this.connection.socket.conn.remoteAddress;\r\n    }\r\n\r\n    getSpawn() {\r\n        let self = this,\r\n            position;\r\n\r\n        /**\r\n         * Here we will implement functions from quests and\r\n         * other special events and determine a spawn point.\r\n         */\r\n\r\n\r\n        return self.finishedTutorial() ? { x: 324, y: 86 } : { x: 17, y: 557 };\r\n    }\r\n\r\n    getHit(target) {\r\n        let self = this;\r\n\r\n        let defaultDamage = Formulas.getDamage(self, target),\r\n            isSpecial = 100 - self.weapon.abilityLevel < Utils.randomInt(0, 100);\r\n\r\n        if (!self.hasSpecialAttack() || !isSpecial)\r\n            return new Hit(Modules.Hits.Damage, defaultDamage);\r\n\r\n        switch (self.weapon.ability) {\r\n\r\n            case Modules.Enchantment.Critical:\r\n\r\n                /**\r\n                 * Still experimental, not sure how likely it is that you're\r\n                 * gonna do a critical strike. I just do not want it getting\r\n                 * out of hand, it's easier to buff than to nerf..\r\n                 */\r\n\r\n                let multiplier = 1.00 + self.weapon.abilityLevel,\r\n                    damage = defaultDamage * multiplier;\r\n\r\n                return new Hit(Modules.Hits.Critical, damage);\r\n\r\n            case Modules.Enchantment.Stun:\r\n                return new Hit(Modules.Hits.Stun, defaultDamage);\r\n\r\n            case Modules.Enchantment.Explosive:\r\n                return new Hit(Modules.Hits.Explosive, defaultDamage);\r\n\r\n        }\r\n    }\r\n\r\n    isMuted() {\r\n        let self = this,\r\n            time = new Date().getTime();\r\n\r\n        return self.mute - time > 0;\r\n    }\r\n\r\n    isRanged() {\r\n        return this.weapon && this.weapon.isRanged();\r\n    }\r\n\r\n    isDead() {\r\n        return this.getHitPoints() < 1 || this.dead;\r\n    }\r\n\r\n    /**\r\n     * Miscellaneous\r\n     */\r\n\r\n    send(message) {\r\n        this.world.push(Packets.PushOpcode.Player, {\r\n            player: this,\r\n            message: message\r\n        });\r\n    }\r\n\r\n    sendToRegion(message) {\r\n        this.world.push(Packets.PushOpcode.Region, {\r\n            regionId: this.region,\r\n            message: message\r\n        });\r\n    }\r\n\r\n    sendToAdjacentRegions(regionId, message, ignoreId) {\r\n        this.world.push(Packets.PushOpcode.Regions, {\r\n            regionId: regionId,\r\n            message: message,\r\n            ignoreId: ignoreId\r\n        });\r\n    }\r\n\r\n    sendEquipment() {\r\n        let self = this,\r\n            info = {\r\n                armour: self.armour.getData(),\r\n                weapon: self.weapon.getData(),\r\n                pendant: self.pendant.getData(),\r\n                ring: self.ring.getData(),\r\n                boots: self.boots.getData()\r\n            };\r\n\r\n        self.send(new Messages.Equipment(Packets.EquipmentOpcode.Batch, info));\r\n    }\r\n\r\n    sendToSpawn() {\r\n        let self = this,\r\n            position = self.getSpawn();\r\n\r\n        self.x = position.x;\r\n        self.y = position.y;\r\n    }\r\n\r\n    sync(all) {\r\n        let self = this;\r\n\r\n        /**\r\n         * Function to be used for syncing up health,\r\n         * mana, exp, and other letiables\r\n         */\r\n\r\n        if (!self.hitPoints || !self.mana)\r\n            return;\r\n\r\n        let info = {\r\n            id: self.instance,\r\n            hitPoints: self.getHitPoints(),\r\n            maxHitPoints: self.getMaxHitPoints(),\r\n            mana: self.mana.getMana(),\r\n            maxMana: self.mana.getMaxMana(),\r\n            experience: self.experience,\r\n            level: self.level,\r\n            armour: self.armour.getString(),\r\n            weapon: self.weapon.getData()\r\n        };\r\n\r\n        self.sendToAdjacentRegions(self.region, new Messages.Sync(info), all ? null : self.instance);\r\n\r\n        self.save();\r\n    }\r\n\r\n    notify(message) {\r\n        let self = this;\r\n\r\n        if (!message)\r\n            return;\r\n\r\n        self.send(new Messages.Notification(Packets.NotificationOpcode.Text, message));\r\n    }\r\n\r\n    stopMovement(force) {\r\n        /**\r\n         * Forcefully stopping the player will simply halt\r\n         * them in between tiles. Should only be used if they are\r\n         * being transported elsewhere.\r\n         */\r\n\r\n        let self = this;\r\n\r\n        self.send(new Messages.Movement(Packets.MovementOpcode.Stop, {\r\n            instance: self.instance,\r\n            force: force\r\n        }));\r\n    }\r\n\r\n    finishedTutorial() {\r\n        let self = this;\r\n\r\n        if (!self.quests || config.offlineMode)\r\n            return true;\r\n\r\n        return self.quests.getQuest(0).isFinished() || !config.tutorialEnabled;\r\n    }\r\n\r\n    checkRegions() {\r\n        let self = this;\r\n\r\n        if (!self.regionPosition)\r\n            return;\r\n\r\n        let diffX = Math.abs(self.regionPosition[0] - self.x),\r\n            diffY = Math.abs(self.regionPosition[1] - self.y);\r\n\r\n        if (diffX >= 10 || diffY >= 10) {\r\n            self.regionPosition = [self.x, self.y];\r\n\r\n            if (self.regionCallback)\r\n                self.regionCallback();\r\n        }\r\n    }\r\n\r\n    movePlayer() {\r\n        let self = this;\r\n\r\n        /**\r\n         * Server-sided callbacks towards movement should\r\n         * not be able to be overwritten. In the case that\r\n         * this is used (for Quests most likely) the server must\r\n         * check that no hacker removed the constraint in the client-side.\r\n         * If they are not within the bounds, apply the according punishment.\r\n         */\r\n\r\n        self.send(new Messages.Movement(Packets.MovementOpcode.Started));\r\n    }\r\n\r\n    walkRandomly() {\r\n        let self = this;\r\n\r\n        setInterval(() => {\r\n            self.setPosition(self.x + Utils.randomInt(-5, 5), self.y + Utils.randomInt(-5, 5));\r\n        }, 2000);\r\n\r\n    }\r\n\r\n    killCharacter(character) {\r\n        let self = this;\r\n\r\n        if (self.killCallback)\r\n            self.killCallback(character);\r\n    }\r\n\r\n    save() {\r\n        let self = this;\r\n\r\n        if (config.offlineMode || self.isGuest)\r\n            return;\r\n\r\n        if ((!self.questsLoaded || !self.achievementsLoaded) && !self.new)\r\n            return;\r\n\r\n        self.database.creator.save(self);\r\n    }\r\n\r\n    inTutorial() {\r\n        return this.world.map.inTutorialArea(this);\r\n    }\r\n\r\n    hasAggressionTimer() {\r\n        return new Date().getTime() - this.lastRegionChange < 1200000; // 20 Minutes\r\n    }\r\n\r\n    onOrientation(callback) {\r\n        this.orientationCallback = callback;\r\n    }\r\n\r\n    onRegion(callback) {\r\n        this.regionCallback = callback;\r\n    }\r\n\r\n    onAttack(callback) {\r\n        this.attackCallback = callback;\r\n    }\r\n\r\n    onHit(callback) {\r\n        this.hitCallback = callback;\r\n    }\r\n\r\n    onKill(callback) {\r\n        this.killCallback = callback;\r\n    }\r\n\r\n    onDeath(callback) {\r\n        this.deathCallback = callback;\r\n    }\r\n\r\n    onTalkToNPC(callback) {\r\n        this.npcTalkCallback = callback;\r\n    }\r\n\r\n    onDoor(callback) {\r\n        this.doorCallback = callback;\r\n    }\r\n\r\n    onProfile(callback) {\r\n        this.profileToggleCallback = callback;\r\n    }\r\n\r\n    onInventory(callback) {\r\n        this.inventoryToggleCallback = callback;\r\n    }\r\n\r\n    onWarp(callback) {\r\n        this.warpToggleCallback = callback;\r\n    }\r\n\r\n    onReady(callback) {\r\n        this.readyCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Player;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/player.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 676,
    "kind": "variable",
    "name": "Character",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Character",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 677,
    "kind": "class",
    "name": "Player",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/player.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "interface": false,
    "extends": [
      "Character"
    ],
    "ignore": true
  },
  {
    "__docId__": 678,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#load",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "loadInventory",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#loadInventory",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "loadBank",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#loadBank",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "loadQuests",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#loadQuests",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 683,
    "kind": "method",
    "name": "intro",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#intro",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "verifyRights",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#verifyRights",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "addExperience",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#addExperience",
    "access": "public",
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "params": [
      {
        "name": "exp",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "heal",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#heal",
    "access": "public",
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "healHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#healHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "healManaPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#healManaPoints",
    "access": "public",
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "eat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#eat",
    "access": "public",
    "description": null,
    "lineNumber": 383,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "equip",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#equip",
    "access": "public",
    "description": null,
    "lineNumber": 393,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "updateRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updateRegion",
    "access": "public",
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "params": [
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "isInvisible",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#isInvisible",
    "access": "public",
    "description": null,
    "lineNumber": 472,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "formatInvisibles",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#formatInvisibles",
    "access": "public",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "canEquip",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#canEquip",
    "access": "public",
    "description": null,
    "lineNumber": 486,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "die",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#die",
    "access": "public",
    "description": null,
    "lineNumber": 498,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "teleport",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#teleport",
    "access": "public",
    "description": null,
    "lineNumber": 509,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "isDoor",
        "types": [
          "*"
        ]
      },
      {
        "name": "animate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "updatePVP",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updatePVP",
    "access": "public",
    "description": null,
    "lineNumber": 532,
    "undocument": true,
    "params": [
      {
        "name": "pvp",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "updateOverlay",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updateOverlay",
    "access": "public",
    "description": null,
    "lineNumber": 552,
    "undocument": true,
    "params": [
      {
        "name": "overlay",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "updateCamera",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updateCamera",
    "access": "public",
    "description": null,
    "lineNumber": 571,
    "undocument": true,
    "params": [
      {
        "name": "camera",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "updateMusic",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#updateMusic",
    "access": "public",
    "description": null,
    "lineNumber": 598,
    "undocument": true,
    "params": [
      {
        "name": "song",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "revertPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#revertPoints",
    "access": "public",
    "description": null,
    "lineNumber": 606,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "applyDamage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#applyDamage",
    "access": "public",
    "description": null,
    "lineNumber": 615,
    "undocument": true,
    "params": [
      {
        "name": "damage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "toggleProfile",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#toggleProfile",
    "access": "public",
    "description": null,
    "lineNumber": 619,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "toggleInventory",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#toggleInventory",
    "access": "public",
    "description": null,
    "lineNumber": 628,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "toggleWarp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#toggleWarp",
    "access": "public",
    "description": null,
    "lineNumber": 637,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "getMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getMana",
    "access": "public",
    "description": null,
    "lineNumber": 646,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "getMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 650,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "getHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 654,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "getMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 658,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "getTutorial",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getTutorial",
    "access": "public",
    "description": null,
    "lineNumber": 662,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "setArmour",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setArmour",
    "access": "public",
    "description": "Setters",
    "lineNumber": 670,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "breakWeapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#breakWeapon",
    "access": "public",
    "description": null,
    "lineNumber": 679,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "setWeapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setWeapon",
    "access": "public",
    "description": null,
    "lineNumber": 689,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "setPendant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setPendant",
    "access": "public",
    "description": null,
    "lineNumber": 701,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "setRing",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setRing",
    "access": "public",
    "description": null,
    "lineNumber": 710,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "setBoots",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setBoots",
    "access": "public",
    "description": null,
    "lineNumber": 719,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "ability",
        "types": [
          "*"
        ]
      },
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "guessPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#guessPosition",
    "access": "public",
    "description": null,
    "lineNumber": 728,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 718,
    "kind": "member",
    "name": "potentialPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#potentialPosition",
    "access": "public",
    "description": null,
    "lineNumber": 729,
    "undocument": true,
    "type": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "setPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setPosition",
    "access": "public",
    "description": null,
    "lineNumber": 735,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "setOrientation",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setOrientation",
    "access": "public",
    "description": null,
    "lineNumber": 757,
    "undocument": true,
    "params": [
      {
        "name": "orientation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "setFuturePosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#setFuturePosition",
    "access": "public",
    "description": null,
    "lineNumber": 766,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 722,
    "kind": "member",
    "name": "futurePosition",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#futurePosition",
    "access": "public",
    "description": "Most likely will be used for anti-cheating methods\nof calculating the actual time and duration for the\ndisplacement.",
    "lineNumber": 773,
    "type": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "loadRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#loadRegion",
    "access": "public",
    "description": null,
    "lineNumber": 779,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "hasLoadedRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasLoadedRegion",
    "access": "public",
    "description": null,
    "lineNumber": 783,
    "undocument": true,
    "params": [
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "hasLoadedLight",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasLoadedLight",
    "access": "public",
    "description": null,
    "lineNumber": 787,
    "undocument": true,
    "params": [
      {
        "name": "light",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "timeout",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#timeout",
    "access": "public",
    "description": null,
    "lineNumber": 791,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "refreshTimeout",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#refreshTimeout",
    "access": "public",
    "description": null,
    "lineNumber": 798,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "hasArmour",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasArmour",
    "access": "public",
    "description": "Getters",
    "lineNumber": 814,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "hasWeapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasWeapon",
    "access": "public",
    "description": null,
    "lineNumber": 818,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "hasBreakableWeapon",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasBreakableWeapon",
    "access": "public",
    "description": null,
    "lineNumber": 822,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "hasPendant",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasPendant",
    "access": "public",
    "description": null,
    "lineNumber": 826,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "hasRing",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasRing",
    "access": "public",
    "description": null,
    "lineNumber": 830,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "hasBoots",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasBoots",
    "access": "public",
    "description": null,
    "lineNumber": 834,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "hasMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 838,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "hasMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 842,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "hasSpecialAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasSpecialAttack",
    "access": "public",
    "description": null,
    "lineNumber": 846,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "hasGuild",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasGuild",
    "access": "public",
    "description": null,
    "lineNumber": 850,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "canBeStunned",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#canBeStunned",
    "access": "public",
    "description": null,
    "lineNumber": 854,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "getState",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getState",
    "access": "public",
    "description": null,
    "lineNumber": 858,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"id\": *, \"name\": *, \"x\": *, \"y\": *, \"rights\": *, \"level\": *, \"pvp\": *, \"pvpKills\": *, \"pvpDeaths\": *, \"orientation\": *, \"hitPoints\": *, \"mana\": *, \"armour\": *, \"weapon\": *, \"pendant\": *, \"ring\": *, \"boots\": *}"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "getRemoteAddress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getRemoteAddress",
    "access": "public",
    "description": null,
    "lineNumber": 883,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "getSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 887,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "getHit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#getHit",
    "access": "public",
    "description": null,
    "lineNumber": 900,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "isMuted",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#isMuted",
    "access": "public",
    "description": null,
    "lineNumber": 933,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "isRanged",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#isRanged",
    "access": "public",
    "description": null,
    "lineNumber": 940,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "isDead",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#isDead",
    "access": "public",
    "description": null,
    "lineNumber": 944,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "send",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#send",
    "access": "public",
    "description": "Miscellaneous",
    "lineNumber": 952,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "sendToRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sendToRegion",
    "access": "public",
    "description": null,
    "lineNumber": 959,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "sendToAdjacentRegions",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sendToAdjacentRegions",
    "access": "public",
    "description": null,
    "lineNumber": 966,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoreId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "sendEquipment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sendEquipment",
    "access": "public",
    "description": null,
    "lineNumber": 974,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "sendToSpawn",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sendToSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 987,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 751,
    "kind": "method",
    "name": "sync",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#sync",
    "access": "public",
    "description": null,
    "lineNumber": 995,
    "undocument": true,
    "params": [
      {
        "name": "all",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 752,
    "kind": "method",
    "name": "notify",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#notify",
    "access": "public",
    "description": null,
    "lineNumber": 1023,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 753,
    "kind": "method",
    "name": "stopMovement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#stopMovement",
    "access": "public",
    "description": null,
    "lineNumber": 1032,
    "undocument": true,
    "params": [
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "finishedTutorial",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#finishedTutorial",
    "access": "public",
    "description": null,
    "lineNumber": 1047,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "method",
    "name": "checkRegions",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#checkRegions",
    "access": "public",
    "description": null,
    "lineNumber": 1056,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 756,
    "kind": "method",
    "name": "movePlayer",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#movePlayer",
    "access": "public",
    "description": null,
    "lineNumber": 1073,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 757,
    "kind": "method",
    "name": "walkRandomly",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#walkRandomly",
    "access": "public",
    "description": null,
    "lineNumber": 1087,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "killCharacter",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#killCharacter",
    "access": "public",
    "description": null,
    "lineNumber": 1096,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "save",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#save",
    "access": "public",
    "description": null,
    "lineNumber": 1103,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 760,
    "kind": "method",
    "name": "inTutorial",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#inTutorial",
    "access": "public",
    "description": null,
    "lineNumber": 1115,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "method",
    "name": "hasAggressionTimer",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hasAggressionTimer",
    "access": "public",
    "description": null,
    "lineNumber": 1119,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 762,
    "kind": "method",
    "name": "onOrientation",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onOrientation",
    "access": "public",
    "description": null,
    "lineNumber": 1123,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 763,
    "kind": "member",
    "name": "orientationCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#orientationCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 764,
    "kind": "method",
    "name": "onRegion",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onRegion",
    "access": "public",
    "description": null,
    "lineNumber": 1127,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "regionCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#regionCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "onAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onAttack",
    "access": "public",
    "description": null,
    "lineNumber": 1131,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "attackCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#attackCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "onHit",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onHit",
    "access": "public",
    "description": null,
    "lineNumber": 1135,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 769,
    "kind": "member",
    "name": "hitCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#hitCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "onKill",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onKill",
    "access": "public",
    "description": null,
    "lineNumber": 1139,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 771,
    "kind": "member",
    "name": "killCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#killCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1140,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "onDeath",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onDeath",
    "access": "public",
    "description": null,
    "lineNumber": 1143,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 773,
    "kind": "member",
    "name": "deathCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#deathCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "onTalkToNPC",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onTalkToNPC",
    "access": "public",
    "description": null,
    "lineNumber": 1147,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 775,
    "kind": "member",
    "name": "npcTalkCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#npcTalkCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 776,
    "kind": "method",
    "name": "onDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onDoor",
    "access": "public",
    "description": null,
    "lineNumber": 1151,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 777,
    "kind": "member",
    "name": "doorCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#doorCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1152,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 778,
    "kind": "method",
    "name": "onProfile",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onProfile",
    "access": "public",
    "description": null,
    "lineNumber": 1155,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 779,
    "kind": "member",
    "name": "profileToggleCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#profileToggleCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "onInventory",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onInventory",
    "access": "public",
    "description": null,
    "lineNumber": 1159,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 781,
    "kind": "member",
    "name": "inventoryToggleCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#inventoryToggleCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "onWarp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onWarp",
    "access": "public",
    "description": null,
    "lineNumber": 1163,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 783,
    "kind": "member",
    "name": "warpToggleCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#warpToggleCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1164,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "onReady",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#onReady",
    "access": "public",
    "description": null,
    "lineNumber": 1167,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 785,
    "kind": "member",
    "name": "readyCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/player.js~Player#readyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 1168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 786,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "content": "/* global module */\r\n\r\nlet Points = require('./points');\r\n\r\nclass HitPoints extends Points {\r\n\r\n    constructor(hitPoints, maxHitPoints) {\r\n        super(hitPoints, maxHitPoints);\r\n    }\r\n\r\n    setHitPoints(hitPoints) {\r\n        let self = this;\r\n\r\n        super.setPoints(hitPoints);\r\n\r\n        if (self.hitPointsCallback)\r\n            self.hitPointsCallback();\r\n    }\r\n\r\n    setMaxHitPoints(maxHitPoints) {\r\n        let self = this;\r\n\r\n        super.setMaxPoints(maxHitPoints);\r\n\r\n        if (self.maxHitPointsCallback)\r\n            self.maxHitPointsCallback();\r\n    }\r\n\r\n    getHitPoints() {\r\n        return this.points;\r\n    }\r\n\r\n    getMaxHitPoints() {\r\n        return this.maxPoints;\r\n    }\r\n\r\n    onHitPoints(callback) {\r\n        return this.hitPointsCallback = callback;\r\n    }\r\n\r\n    onMaxHitPoints(callback) {\r\n        return this.maxHitPointsCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = HitPoints;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 787,
    "kind": "variable",
    "name": "Points",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~Points",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 788,
    "kind": "class",
    "name": "HitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Points"
    ],
    "ignore": true
  },
  {
    "__docId__": 789,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "setHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#setHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "hitPoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "setMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#setMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "maxHitPoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "getHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#getHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "getMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#getMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "onHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#onHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "onMaxHitPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/hitpoints.js~HitPoints#onMaxHitPoints",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 796,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "content": "/* global module */\r\n\r\nlet Points = require('./points');\r\n\r\nclass Mana extends Points {\r\n\r\n    constructor(mana, maxMana) {\r\n        super(mana, maxMana);\r\n    }\r\n\r\n    setMana(mana) {\r\n        let self = this;\r\n\r\n        self.points = mana;\r\n\r\n        if (self.manaCallback)\r\n            self.manaCallback();\r\n    }\r\n\r\n    setMaxMana(maxMana) {\r\n        let self = this;\r\n\r\n        self.maxPoints = maxMana;\r\n\r\n        if (self.maxManaCallback)\r\n            self.maxManaCallback();\r\n    }\r\n\r\n    getMana() {\r\n        return this.points;\r\n    }\r\n\r\n    getMaxMana() {\r\n        return this.maxPoints;\r\n    }\r\n\r\n    onMana(callback) {\r\n        this.manaCallback = callback;\r\n    }\r\n\r\n    onMaxMana(callback) {\r\n        this.maxManaCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Mana;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 797,
    "kind": "variable",
    "name": "Points",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Points",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 798,
    "kind": "class",
    "name": "Mana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/points/mana.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Points"
    ],
    "ignore": true
  },
  {
    "__docId__": 799,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "setMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#setMana",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "mana",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "setMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#setMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "maxMana",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "getMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#getMana",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "getMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#getMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "onMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#onMana",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 805,
    "kind": "member",
    "name": "manaCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#manaCallback",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 806,
    "kind": "method",
    "name": "onMaxMana",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#onMaxMana",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 807,
    "kind": "member",
    "name": "maxManaCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/mana.js~Mana#maxManaCallback",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/points/points.js",
    "content": "/* global module */\r\n\r\nclass Points {\r\n\r\n    constructor(points, maxPoints) {\r\n        let self = this;\r\n\r\n        self.points = points;\r\n        self.maxPoints = maxPoints;\r\n    }\r\n\r\n    heal(amount) {\r\n        let self = this;\r\n\r\n        self.setPoints(self.points + amount);\r\n\r\n        if (self.healCallback)\r\n            self.healCallback();\r\n    }\r\n\r\n    increment(amount) {\r\n        this.points += amount;\r\n    }\r\n\r\n    decrement(amount) {\r\n        this.points -= amount;\r\n    }\r\n\r\n    setPoints(points) {\r\n        let self = this;\r\n\r\n        self.points = points;\r\n\r\n        if (self.points >= self.maxPoints)\r\n            self.points = self.maxPoints;\r\n    }\r\n\r\n    setMaxPoints(maxPoints) {\r\n        this.maxPoints = maxPoints;\r\n    }\r\n\r\n    getData() {\r\n        return [this.points, this.maxPoints];\r\n    }\r\n\r\n    onHeal(callback) {\r\n        this.healCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Points;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/points/points.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 809,
    "kind": "class",
    "name": "Points",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/points/points.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 810,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 811,
    "kind": "method",
    "name": "heal",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#heal",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 812,
    "kind": "method",
    "name": "increment",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#increment",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 813,
    "kind": "member",
    "name": "points",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#points",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "decrement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#decrement",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "amount",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 816,
    "kind": "method",
    "name": "setPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#setPoints",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "points",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "setMaxPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#setMaxPoints",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "maxPoints",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 818,
    "kind": "member",
    "name": "maxPoints",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#maxPoints",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#getData",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "onHeal",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#onHeal",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 821,
    "kind": "member",
    "name": "healCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/points/points.js~Points#healCallback",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 822,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "content": "/* global module */\r\n\r\nlet Quest = require('../quest'),\r\n    Packets = require('../../../../../../network/packets'),\r\n    Messages = require('../../../../../../network/messages');\r\n\r\nclass BulkySituation extends Quest {\r\n\r\n    constructor(player, data) {\r\n        super(player, data);\r\n\r\n        let self = this;\r\n\r\n        self.player = player;\r\n        self.data = data;\r\n\r\n        self.lastNPC = null;\r\n    }\r\n\r\n    load(stage) {\r\n        let self = this;\r\n\r\n        super.load(stage);\r\n\r\n        if (self.stage > 9998)\r\n            return;\r\n\r\n        self.loadCallbacks();\r\n    }\r\n\r\n    loadCallbacks() {\r\n        let self = this;\r\n\r\n        self.onNPCTalk((npc) => {\r\n\r\n            if (self.hasRequirement()) {\r\n                self.progress('item');\r\n                return;\r\n            }\r\n\r\n            let conversation = self.getConversation(npc.id);\r\n\r\n            self.lastNPC = npc;\r\n\r\n            self.player.send(new Messages.NPC(Packets.NPCOpcode.Talk, {\r\n                id: npc.instance,\r\n                text: npc.talk(conversation)\r\n            }));\r\n\r\n            if (npc.talkIndex === 0)\r\n                self.progress('talk');\r\n\r\n        });\r\n\r\n    }\r\n\r\n    progress(type) {\r\n        let self = this,\r\n            task = self.data.task[self.stage];\r\n\r\n        if (!task || task !== type)\r\n            return;\r\n\r\n        if (self.stage === self.data.stages) {\r\n            self.finish();\r\n            return;\r\n        }\r\n\r\n        switch (type) {\r\n            case 'item':\r\n\r\n                self.player.inventory.remove(self.getItem(), 1);\r\n\r\n                break;\r\n        }\r\n\r\n        self.resetTalkIndex(self.lastNPC);\r\n\r\n        self.stage++;\r\n\r\n        self.player.send(new Messages.Quest(Packets.QuestOpcode.Progress, {\r\n            id: self.id,\r\n            stage: self.stage,\r\n            isQuest: true\r\n        }));\r\n\r\n        self.update();\r\n    }\r\n\r\n    finish() {\r\n        super.finish();\r\n    }\r\n\r\n    hasRequirement() {\r\n        return this.getTask() === 'item' && this.player.inventory.contains(this.getItem());\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = BulkySituation;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 823,
    "kind": "variable",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 824,
    "kind": "class",
    "name": "BulkySituation",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Quest"
    ],
    "ignore": true
  },
  {
    "__docId__": 825,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 826,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#load",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "loadCallbacks",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#loadCallbacks",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "progress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#progress",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "finish",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#finish",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "hasRequirement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/bulkysituation.js~BulkySituation#hasRequirement",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 831,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "content": "/* global module */\r\n\r\nlet Quest = require('../quest'),\r\n    Packets = require('../../../../../../network/packets'),\r\n    Messages = require('../../../../../../network/messages');\r\n\r\nclass Introduction extends Quest {\r\n\r\n    constructor(player, data) {\r\n        super(player, data);\r\n\r\n        let self = this;\r\n\r\n        self.player = player;\r\n        self.data = data;\r\n\r\n        self.lastNPC = null;\r\n    }\r\n\r\n    load(stage) {\r\n        let self = this;\r\n\r\n        if (!self.player.inTutorial()) {\r\n            self.setStage(9999);\r\n            self.update();\r\n            return;\r\n        }\r\n\r\n        super.load(stage);\r\n\r\n        self.updatePointers();\r\n        self.toggleChat();\r\n\r\n        if (self.stage > 9998)\r\n            return;\r\n\r\n        self.loadCallbacks();\r\n    }\r\n\r\n    loadCallbacks() {\r\n        let self = this;\r\n\r\n        self.onNPCTalk((npc) => {\r\n\r\n            let conversation = self.getConversation(npc.id);\r\n\r\n            self.lastNPC = npc;\r\n\r\n            self.player.send(new Messages.NPC(Packets.NPCOpcode.Talk, {\r\n                id: npc.instance,\r\n                text: npc.talk(conversation)\r\n            }));\r\n\r\n            if (npc.talkIndex === 0)\r\n                self.progress('talk');\r\n\r\n        });\r\n\r\n        self.player.onReady(() => {\r\n\r\n            self.updatePointers();\r\n\r\n        });\r\n\r\n        self.player.onDoor((destX, destY) => {\r\n            if (self.getTask() !== 'door') {\r\n                self.player.notify('You cannot go through this door yet.');\r\n                return;\r\n            }\r\n\r\n            if (!self.verifyDoor(self.player.x, self.player.y))\r\n                self.player.notify('You are not supposed to go through here.');\r\n            else {\r\n                self.progress('door');\r\n                self.player.teleport(destX, destY, false);\r\n            }\r\n        });\r\n\r\n        self.player.onProfile((isOpen) => {\r\n\r\n            if (isOpen)\r\n                self.progress('click');\r\n\r\n        });\r\n\r\n        self.player.onInventory((isOpen) => {\r\n\r\n            if (isOpen)\r\n                self.progress('click');\r\n\r\n        });\r\n\r\n        self.player.onWarp((isOpen) => {\r\n\r\n            if (isOpen)\r\n                self.progress('click');\r\n\r\n        });\r\n\r\n        self.player.onKill((character) => {\r\n            if (self.data.kill[self.stage] === character.id)\r\n                self.progress('kill');\r\n\r\n        });\r\n\r\n    }\r\n\r\n    progress(type) {\r\n        let self = this,\r\n            task = self.data.task[self.stage];\r\n\r\n        if (!task || task !== type)\r\n            return;\r\n\r\n        if (self.stage === self.data.stages) {\r\n            self.finish();\r\n            return;\r\n        }\r\n\r\n        switch (type) {\r\n            case 'talk':\r\n\r\n                if (self.stage === 6)\r\n                    self.player.updateRegion();\r\n\r\n                break;\r\n\r\n            case 'door':\r\n\r\n                if (self.stage === 7)\r\n                    self.player.inventory.add({\r\n                        id: 248,\r\n                        count: 1,\r\n                        ability: -1,\r\n                        abilityLevel: -1\r\n                    });\r\n\r\n                else if (self.stage === 15)\r\n                    self.player.inventory.add({\r\n                        id: 87,\r\n                        count: 1,\r\n                        ability: -1,\r\n                        abilityLevel: -1\r\n                    });\r\n\r\n                break;\r\n\r\n\r\n        }\r\n\r\n        self.stage++;\r\n\r\n        self.clearPointers();\r\n        self.resetTalkIndex(self.lastNPC);\r\n\r\n        self.update();\r\n        self.updatePointers();\r\n\r\n        self.player.send(new Messages.Quest(Packets.QuestOpcode.Progress, {\r\n            id: self.id,\r\n            stage: self.stage,\r\n            isQuest: true\r\n        }));\r\n    }\r\n\r\n    isFinished() {\r\n        return super.isFinished() || !this.player.inTutorial();\r\n    }\r\n\r\n    toggleChat() {\r\n        this.player.canTalk = !this.player.canTalk;\r\n    }\r\n\r\n    setStage(stage) {\r\n        let self = this;\r\n\r\n        super.setStage(stage);\r\n\r\n        self.clearPointers();\r\n    }\r\n\r\n    finish() {\r\n        let self = this;\r\n\r\n        self.toggleChat();\r\n        super.finish();\r\n    }\r\n\r\n    hasDoorUnlocked(door) {\r\n        let self = this;\r\n\r\n        switch (door.id) {\r\n            case 0:\r\n                return self.stage > 5;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    verifyDoor(destX, destY) {\r\n        let self = this,\r\n            doorData = self.data.doors[self.stage];\r\n\r\n        if (!doorData)\r\n            return;\r\n\r\n        return doorData[0] === destX && doorData[1] === destY;\r\n    }\r\n\r\n    onFinishedLoading(callback) {\r\n        this.finishedCallback = callback;\r\n    }\r\n}\r\n\r\nmodule.exports = Introduction;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 832,
    "kind": "variable",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 833,
    "kind": "class",
    "name": "Introduction",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "Quest"
    ],
    "ignore": true
  },
  {
    "__docId__": 834,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 835,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#load",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 836,
    "kind": "method",
    "name": "loadCallbacks",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#loadCallbacks",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 837,
    "kind": "method",
    "name": "progress",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#progress",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 838,
    "kind": "method",
    "name": "isFinished",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#isFinished",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "toggleChat",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#toggleChat",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 840,
    "kind": "method",
    "name": "setStage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#setStage",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "finish",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#finish",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 842,
    "kind": "method",
    "name": "hasDoorUnlocked",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#hasDoorUnlocked",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "door",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 843,
    "kind": "method",
    "name": "verifyDoor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#verifyDoor",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "destX",
        "types": [
          "*"
        ]
      },
      {
        "name": "destY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 844,
    "kind": "method",
    "name": "onFinishedLoading",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#onFinishedLoading",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 845,
    "kind": "member",
    "name": "finishedCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/introduction.js~Introduction#finishedCallback",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 846,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "content": "/* global module */\r\n\r\nlet Quest = require('../quest'),\r\n    Packets = require('../../../../../network/packets');\r\n\r\nclass Thelie extends Quest {\r\n\r\n    constructor(player, data) {\r\n        super(player, data);\r\n\r\n        let self = this;\r\n\r\n        self.player = player;\r\n        self.data = data;\r\n    }\r\n\r\n    load(stage) {\r\n        let self = this;\r\n\r\n        super.load(stage);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Thelie;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 847,
    "kind": "variable",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 848,
    "kind": "class",
    "name": "Thelie",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "Quest"
    ],
    "ignore": true
  },
  {
    "__docId__": 849,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 850,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/impl/thelie.js~Thelie#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 851,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "content": "/* global module */\r\n\r\nlet Messages = require('../../../../../network/messages'),\r\n    Packets = require('../../../../../network/packets'),\r\n    Utils = require('../../../../../util/utils'),\r\n    _ = require('underscore');\r\n\r\nclass Quest {\r\n\r\n    constructor(player, data) {\r\n        let self = this;\r\n\r\n        self.player = player;\r\n        self.data = data;\r\n\r\n        self.id = data.id;\r\n        self.name = data.name;\r\n        self.description = data.description;\r\n\r\n        self.stage = 0;\r\n    }\r\n\r\n    load(stage) {\r\n        let self = this;\r\n\r\n        if (!stage)\r\n            self.update();\r\n        else\r\n            self.stage = parseInt(stage);\r\n    }\r\n\r\n    finish() {\r\n        let self = this;\r\n\r\n        if (self.hasItemReward()) {\r\n            let item = self.getItemReward();\r\n\r\n            if (item) {\r\n                if (self.hasInventorySpace(item.id, item.count))\r\n                    self.player.inventory.add(item.id, item.count);\r\n                else {\r\n                    self.player.notify('You do not have enough space in your inventory.');\r\n                    self.player.notify('Please make room prior to finishing the quest.');\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        self.setStage(9999);\r\n\r\n        self.player.send(new Messages.Quest(Packets.QuestOpcode.Finish, {\r\n            id: self.id,\r\n            isQuest: true\r\n        }));\r\n\r\n        self.update();\r\n    }\r\n\r\n    setStage(stage) {\r\n        let self = this;\r\n\r\n        self.stage = stage;\r\n        self.update();\r\n    }\r\n\r\n    triggerTalk(npc) {\r\n        let self = this;\r\n\r\n        if (self.npcTalkCallback)\r\n            self.npcTalkCallback(npc);\r\n    }\r\n\r\n    update() {\r\n        return this.player.save();\r\n    }\r\n\r\n    getConversation(id) {\r\n        let self = this,\r\n            conversation = self.data.conversations[id];\r\n\r\n        if (!conversation || !conversation[self.stage])\r\n            return [''];\r\n\r\n        return conversation[self.stage];\r\n    }\r\n\r\n    updatePointers() {\r\n        let self = this;\r\n\r\n        if (!self.data.pointers)\r\n            return;\r\n\r\n        let pointer = self.data.pointers[self.stage];\r\n\r\n        if (!pointer)\r\n            return;\r\n\r\n        let opcode = pointer[0];\r\n\r\n        if (opcode === 4)\r\n            self.player.send(new Messages.Pointer(opcode, {\r\n                id: Utils.generateRandomId(),\r\n                button: pointer[1]\r\n            }));\r\n        else\r\n            self.player.send(new Messages.Pointer(opcode, {\r\n                id: Utils.generateRandomId(),\r\n                x: pointer[1],\r\n                y: pointer[2]\r\n            }));\r\n\r\n    }\r\n\r\n    forceTalk(npc, message) {\r\n        let self = this;\r\n\r\n        if (!npc)\r\n            return;\r\n\r\n        npc.talkIndex = 0;\r\n\r\n        self.player.send(new Messages.NPC(Packets.NPCOpcode.Talk, {\r\n            id: npc.instance,\r\n            text: message\r\n        }));\r\n    }\r\n\r\n    resetTalkIndex(npc) {\r\n        let self = this;\r\n\r\n        /**\r\n         * Ensures that an NPC does not go off the conversation\r\n         * index and is resetted in order to start a new chat\r\n         */\r\n\r\n        if(!npc)\r\n            return;\r\n\r\n        npc.talkIndex = 0;\r\n    }\r\n\r\n    clearPointers() {\r\n        this.player.send(new Messages.Pointer(Packets.PointerOpcode.Remove, {}))\r\n    }\r\n\r\n    onNPCTalk(callback) {\r\n        this.npcTalkCallback = callback;\r\n    }\r\n\r\n    static hasMob() {\r\n        return false;\r\n    }\r\n\r\n    hasNPC(id) {\r\n        return this.data.npcs.indexOf(id) > -1;\r\n    }\r\n\r\n    hasItemReward() {\r\n        return !!this.data.itemReward;\r\n    }\r\n\r\n    hasInventorySpace(id, count) {\r\n        return this.player.inventory.canHold(id, count);\r\n    }\r\n\r\n    hasDoorUnlocked(door) {\r\n        return this.stage > 9998;\r\n    }\r\n\r\n    isFinished() {\r\n        return this.stage > 9998;\r\n    }\r\n\r\n    getId() {\r\n        return this.id;\r\n    }\r\n\r\n    getName() {\r\n        return this.name;\r\n    }\r\n\r\n    getTask() {\r\n        return this.data.task[this.stage];\r\n    }\r\n\r\n    getItem() {\r\n        return this.data.itemReq ? this.data.itemReq[this.stage] : null;\r\n    }\r\n\r\n    getStage() {\r\n        return this.stage;\r\n    }\r\n\r\n    getItemReward() {\r\n        return this.hasItemReward() ? this.data.itemReward : null;\r\n    }\r\n\r\n    getDescription() {\r\n        return this.description;\r\n    }\r\n\r\n    getInfo() {\r\n        return {\r\n            id: this.getId(),\r\n            name: this.getName(),\r\n            description: this.getDescription(),\r\n            stage: this.getStage(),\r\n            finished: this.isFinished()\r\n        };\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Quest;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 852,
    "kind": "variable",
    "name": "Messages",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Messages",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 853,
    "kind": "class",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/quest/quest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 854,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 855,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#load",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "finish",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#finish",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 857,
    "kind": "method",
    "name": "setStage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#setStage",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "stage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "triggerTalk",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#triggerTalk",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "update",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#update",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "getConversation",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getConversation",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "updatePointers",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#updatePointers",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 862,
    "kind": "method",
    "name": "forceTalk",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#forceTalk",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 863,
    "kind": "method",
    "name": "resetTalkIndex",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#resetTalkIndex",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 864,
    "kind": "method",
    "name": "clearPointers",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#clearPointers",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 865,
    "kind": "method",
    "name": "onNPCTalk",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#onNPCTalk",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 866,
    "kind": "member",
    "name": "npcTalkCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#npcTalkCallback",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "hasMob",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest.hasMob",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 868,
    "kind": "method",
    "name": "hasNPC",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#hasNPC",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 869,
    "kind": "method",
    "name": "hasItemReward",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#hasItemReward",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 870,
    "kind": "method",
    "name": "hasInventorySpace",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#hasInventorySpace",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 871,
    "kind": "method",
    "name": "hasDoorUnlocked",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#hasDoorUnlocked",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "door",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 872,
    "kind": "method",
    "name": "isFinished",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#isFinished",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 873,
    "kind": "method",
    "name": "getId",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getId",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 874,
    "kind": "method",
    "name": "getName",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getName",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 875,
    "kind": "method",
    "name": "getTask",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getTask",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 876,
    "kind": "method",
    "name": "getItem",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getItem",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 877,
    "kind": "method",
    "name": "getStage",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getStage",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 878,
    "kind": "method",
    "name": "getItemReward",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getItemReward",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "method",
    "name": "getDescription",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getDescription",
    "access": "public",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 880,
    "kind": "method",
    "name": "getInfo",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/quest/quest.js~Quest#getInfo",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"id\": *, \"name\": *, \"description\": *, \"stage\": *, \"finished\": *}"
      ]
    }
  },
  {
    "__docId__": 881,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "content": "/* global module */\r\n\r\nlet Modules = require('../../../../util/modules');\r\n\r\nclass Trade {\r\n    \r\n    constructor(player) {\r\n        let self = this;\r\n        \r\n        self.player = player;\r\n        self.oPlayer = null;\r\n        \r\n        self.requestee = null;\r\n        \r\n        self.state = null;\r\n        self.subState = null;\r\n        \r\n        self.playerItems = [];\r\n        self.oPlayerItems = [];\r\n    }\r\n\r\n    start() {\r\n        let self = this;\r\n\r\n        self.oPlayer = self.requestee;\r\n        self.state = Modules.Trade.Started;\r\n    }\r\n\r\n    stop() {\r\n        let self = this;\r\n\r\n        self.oPlayer = null;\r\n        self.state = null;\r\n        self.subState = null;\r\n        self.requestee = null;\r\n\r\n        self.playerItems = [];\r\n        self.oPlayerItems = [];\r\n    }\r\n\r\n    finalize() {\r\n        let self = this;\r\n\r\n        if (!self.player.inventory.containsSpaces(self.oPlayerItems.length))\r\n            return;\r\n\r\n        for (let i in self.oPlayerItems) {\r\n            let item = self.oPlayerItems[i];\r\n\r\n            if (!item || item.id === -1)\r\n                continue;\r\n\r\n            self.oPlayer.inventory.remove(item.id, item.count, item.index);\r\n            self.player.inventory.add(item);\r\n        }\r\n    }\r\n\r\n    select(slot) {\r\n        let self = this,\r\n            item = self.player.inventory.slots[slot];\r\n\r\n        if (!item || item.id === -1 || self.playerItems.indexOf(item) < 0)\r\n            return;\r\n\r\n        self.playerItems.push(item);\r\n    }\r\n\r\n    request(oPlayer) {\r\n        let self = this;\r\n\r\n        self.requestee = oPlayer;\r\n\r\n        if (oPlayer.trade.getRequestee() === self.player.instance)\r\n            self.start();\r\n\r\n\r\n    }\r\n\r\n    accept() {\r\n        let self = this;\r\n\r\n        self.subState = Modules.Trade.Accepted;\r\n\r\n        if (self.oPlayer.trade.subState === Modules.Trade.Accepted) {\r\n            self.finalize();\r\n            self.oPlayer.trade.finalize();\r\n        }\r\n    }\r\n\r\n    getRequestee() {\r\n        let self = this;\r\n\r\n        if (!self.requestee)\r\n            return null;\r\n\r\n        return self.requestee.instance;\r\n    }\r\n\r\n    decline() {\r\n        this.stop();\r\n    }\r\n\r\n    isStarted() {\r\n        return this.state !== null;\r\n    }\r\n    \r\n}\r\n\r\nmodule.exports = Trade;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 882,
    "kind": "variable",
    "name": "Modules",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Modules",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 883,
    "kind": "class",
    "name": "Trade",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/trade.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 884,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "start",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#start",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 886,
    "kind": "method",
    "name": "stop",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#stop",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 887,
    "kind": "method",
    "name": "finalize",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#finalize",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 888,
    "kind": "method",
    "name": "select",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#select",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "slot",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 889,
    "kind": "method",
    "name": "request",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#request",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "oPlayer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 890,
    "kind": "method",
    "name": "accept",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#accept",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 891,
    "kind": "method",
    "name": "getRequestee",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#getRequestee",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 892,
    "kind": "method",
    "name": "decline",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#decline",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 893,
    "kind": "method",
    "name": "isStarted",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/trade.js~Trade#isStarted",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 894,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "content": "/* global module */\r\n\r\nlet Modules = require('../../../../util/modules'),\r\n    Utils = require('../../../../util/utils');\r\n\r\nclass Warp {\r\n    \r\n    constructor(player) {\r\n        let self = this;\r\n        \r\n        self.player = player;\r\n        \r\n        self.lastWarp = 0;\r\n        self.warpTimeout = 30000;\r\n    }\r\n\r\n    warp(id) {\r\n        let self = this;\r\n\r\n        if (!self.isCooldown()) {\r\n            self.player.notify('You must wait another ' + self.getDuration() + ' to warp.');\r\n            return;\r\n        }\r\n\r\n        let data = Modules.Warps[id];\r\n\r\n        if (!data)\r\n            return;\r\n\r\n        let name = data[0],\r\n            x = data[3] ? data[1] + Utils.randomInt(0, 1) : data[1],\r\n            y = data[3] ? data[2] + Utils.randomInt(0, 1) : data[2],\r\n            levelRequirement = data[4];\r\n\r\n        log.info('Player Rights: ' + self.player.rights);\r\n\r\n        if (self.hasRequirement()) {\r\n            self.player.notify('You must be at least level ' + levelRequirement + ' to warp here!');\r\n            return;\r\n        }\r\n\r\n        self.player.teleport(x, y, false, true);\r\n\r\n        self.player.notify('You have been warped to ' + name);\r\n\r\n        self.lastWarp = new Date().getTime();\r\n    }\r\n\r\n    setLastWarp(lastWarp) {\r\n        let self = this;\r\n\r\n        if (isNaN(lastWarp)) {\r\n            self.lastWarp = 0;\r\n            self.player.save();\r\n        } else\r\n            self.lastWarp = lastWarp;\r\n\r\n    }\r\n\r\n    isCooldown() {\r\n        return this.getDifference() > this.warpTimeout || this.player.rights > 1;\r\n    }\r\n\r\n    hasRequirement(levelRequirement) {\r\n        return this.player.level < levelRequirement || !this.player.rights > 1;\r\n    }\r\n\r\n    getDuration() {\r\n        let self = this,\r\n            difference = this.warpTimeout - self.getDifference();\r\n\r\n        if (!difference)\r\n            return '5 minutes';\r\n\r\n        return difference > 60000 ? Math.ceil(difference / 60000) + ' minutes' : Math.floor(difference / 1000) + ' seconds';\r\n    }\r\n\r\n    getDifference() {\r\n        return new Date().getTime() - this.lastWarp;\r\n    }\r\n    \r\n}\r\n\r\nmodule.exports = Warp;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 895,
    "kind": "variable",
    "name": "Modules",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Modules",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 896,
    "kind": "class",
    "name": "Warp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/character/player/warp.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 897,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 898,
    "kind": "method",
    "name": "warp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#warp",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 899,
    "kind": "method",
    "name": "setLastWarp",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#setLastWarp",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "lastWarp",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 900,
    "kind": "method",
    "name": "isCooldown",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#isCooldown",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "hasRequirement",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#hasRequirement",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "levelRequirement",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "getDuration",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#getDuration",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "getDifference",
    "memberof": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/character/player/warp.js~Warp#getDifference",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 904,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/entity.js",
    "content": "/* global module */\r\n\r\nlet Mobs = require('../../util/mobs'),\r\n    Items = require('../../util/items'),\r\n    NPCs = require('../../util/npcs');\r\n\r\nclass Entity {\r\n\r\n    constructor(id, type, instance, x, y) {\r\n        let self = this;\r\n\r\n        self.id = id;\r\n        self.type = type;\r\n        self.instance = instance;\r\n\r\n        self.x = x;\r\n        self.y = y;\r\n\r\n        self.oldX = x;\r\n        self.oldY = y;\r\n\r\n        self.combat = null;\r\n\r\n        self.dead = false;\r\n        self.recentRegions = [];\r\n\r\n        self.invisibles = {}; // For Entity Instances\r\n        self.invisiblesIds = []; // For Entity IDs\r\n    }\r\n\r\n    talk() {\r\n        return null;\r\n    }\r\n\r\n    getCombat() {\r\n        return null;\r\n    }\r\n\r\n    getDistance(entity) {\r\n        let self = this,\r\n            x = Math.abs(self.x - entity.x),\r\n            y = Math.abs(self.y - entity.y);\r\n\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    getCoordDistance(toX, toY) {\r\n        let self = this,\r\n            x = Math.abs(self.x - toX),\r\n            y = Math.abs(self.y - toY);\r\n\r\n        return x > y ? x : y;\r\n    }\r\n\r\n    setPosition(x, y) {\r\n        let self = this;\r\n\r\n        self.x = x;\r\n        self.y = y;\r\n\r\n        if (self.setPositionCallback)\r\n            self.setPositionCallback();\r\n    }\r\n\r\n    updatePosition() {\r\n        let self = this;\r\n\r\n        self.oldX = self.x;\r\n        self.oldY = self.y;\r\n    }\r\n\r\n    /**\r\n     * Used for determining whether an entity is\r\n     * within a given range to another entity.\r\n     * Especially useful for ranged attacks and whatnot.\r\n     */\r\n\r\n    isNear(entity, distance) {\r\n        let self = this,\r\n            dx = Math.abs(self.x - entity.x),\r\n            dy = Math.abs(self.y - entity.y);\r\n\r\n        return dx <= distance && dy <= distance;\r\n    }\r\n\r\n    isAdjacent(entity) {\r\n        return entity && this.getDistance(entity) < 2;\r\n    }\r\n\r\n    isNonDiagonal(entity) {\r\n        return this.isAdjacent(entity) && !(entity.x !== this.x && entity.y !== this.y);\r\n    }\r\n\r\n    hasSpecialAttack() {\r\n        return false;\r\n    }\r\n\r\n    isMob() {\r\n        return this.type === 'mob';\r\n    }\r\n\r\n    isNPC() {\r\n        return this.type === 'npc';\r\n    }\r\n\r\n    isItem() {\r\n        return this.type === 'item';\r\n    }\r\n\r\n    isPlayer() {\r\n        return this.type === 'player';\r\n    }\r\n\r\n    onSetPosition(callback) {\r\n        this.setPositionCallback = callback;\r\n    }\r\n\r\n    addInvisible(entity) {\r\n        this.invisibles[entity.instance] = entity;\r\n    }\r\n\r\n    addInvisibleId(entityId) {\r\n        this.invisiblesIds.push(entityId);\r\n    }\r\n\r\n    removeInvisible(entity) {\r\n        delete this.invisibles[entity.instance];\r\n    }\r\n\r\n    removeInvisibleId(entityId) {\r\n        let self = this,\r\n            index = self.invisiblesIds.indexOf(entityId);\r\n\r\n        if (index > -1)\r\n            self.invisiblesIds.splice(index, 1);\r\n    }\r\n\r\n    hasInvisible(entity) {\r\n        return entity.instance in this.invisibles;\r\n    }\r\n\r\n    hasInvisibleId(entityId) {\r\n        return this.invisiblesIds.indexOf(entityId) > -1;\r\n    }\r\n\r\n    hasInvisibleInstance(instance) {\r\n        return instance in this.invisibles;\r\n    }\r\n\r\n    getState() {\r\n        let self = this,\r\n            string = self.isMob() ? Mobs.idToString(self.id) : (self.isNPC() ? NPCs.idToString(self.id) : Items.idToString(self.id)),\r\n            name = self.isMob() ? Mobs.idToName(self.id) : (self.isNPC() ? NPCs.idToName(self.id) : Items.idToName(self.id));\r\n\r\n        return {\r\n            type: self.type,\r\n            id: self.instance,\r\n            string: string,\r\n            name: name,\r\n            x: self.x,\r\n            y: self.y\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Entity;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 905,
    "kind": "variable",
    "name": "Mobs",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Mobs",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/entity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 906,
    "kind": "class",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/entity.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 907,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 908,
    "kind": "method",
    "name": "talk",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#talk",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 909,
    "kind": "method",
    "name": "getCombat",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#getCombat",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 910,
    "kind": "method",
    "name": "getDistance",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#getDistance",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 911,
    "kind": "method",
    "name": "getCoordDistance",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#getCoordDistance",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "toX",
        "types": [
          "*"
        ]
      },
      {
        "name": "toY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 912,
    "kind": "method",
    "name": "setPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#setPosition",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 913,
    "kind": "method",
    "name": "updatePosition",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#updatePosition",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 914,
    "kind": "method",
    "name": "isNear",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isNear",
    "access": "public",
    "description": "Used for determining whether an entity is\nwithin a given range to another entity.\nEspecially useful for ranged attacks and whatnot.",
    "lineNumber": 78,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "distance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 915,
    "kind": "method",
    "name": "isAdjacent",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isAdjacent",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 916,
    "kind": "method",
    "name": "isNonDiagonal",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isNonDiagonal",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 917,
    "kind": "method",
    "name": "hasSpecialAttack",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#hasSpecialAttack",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 918,
    "kind": "method",
    "name": "isMob",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isMob",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "isNPC",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isNPC",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 920,
    "kind": "method",
    "name": "isItem",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isItem",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 921,
    "kind": "method",
    "name": "isPlayer",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#isPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 922,
    "kind": "method",
    "name": "onSetPosition",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#onSetPosition",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 923,
    "kind": "member",
    "name": "setPositionCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#setPositionCallback",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 924,
    "kind": "method",
    "name": "addInvisible",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#addInvisible",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 925,
    "kind": "method",
    "name": "addInvisibleId",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#addInvisibleId",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "entityId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 926,
    "kind": "method",
    "name": "removeInvisible",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#removeInvisible",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 927,
    "kind": "method",
    "name": "removeInvisibleId",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#removeInvisibleId",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "entityId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 928,
    "kind": "method",
    "name": "hasInvisible",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#hasInvisible",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 929,
    "kind": "method",
    "name": "hasInvisibleId",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#hasInvisibleId",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "entityId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 930,
    "kind": "method",
    "name": "hasInvisibleInstance",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#hasInvisibleInstance",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 931,
    "kind": "method",
    "name": "getState",
    "memberof": "Kaetram-Open/server/js/game/entity/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/entity.js~Entity#getState",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"id\": *, \"string\": *, \"name\": *, \"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 932,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/npc/npc.js",
    "content": "/* global module */\r\n\r\nlet Entity = require('../entity');\r\n\r\nclass NPC extends Entity {\r\n\r\n    constructor(id, instance, x, y) {\r\n        super(id, 'npc', instance, x, y);\r\n\r\n        this.talkIndex = 0;\r\n    }\r\n\r\n    talk(messages) {\r\n        let self = this,\r\n            message = messages[self.talkIndex];\r\n\r\n        if (self.talkIndex > messages.length - 1)\r\n            self.talkIndex = 0;\r\n        else\r\n            self.talkIndex++;\r\n\r\n        return message;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = NPC;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/npc/npc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 933,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/npc/npc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 934,
    "kind": "class",
    "name": "NPC",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/npc/npc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 935,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 936,
    "kind": "member",
    "name": "talkIndex",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC#talkIndex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 937,
    "kind": "method",
    "name": "talk",
    "memberof": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/npc/npc.js~NPC#talk",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "messages",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 938,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/objects/chest.js",
    "content": "/* global module */\r\n\r\nlet Entity = require('../entity'),\r\n    Utils = require('../../../util/utils');\r\n\r\nclass Chest extends Entity {\r\n\r\n    constructor(id, instance, x, y) {\r\n        super(id, 'chest', instance, x, y);\r\n\r\n        let self = this;\r\n\r\n        self.respawnDuration = 25000;\r\n        self.static = false;\r\n\r\n        self.items = [];\r\n    }\r\n\r\n    openChest() {\r\n        let self = this;\r\n\r\n        if (self.openCallback)\r\n            self.openCallback();\r\n    }\r\n\r\n    respawn() {\r\n        let self = this;\r\n\r\n        setTimeout(() => {\r\n\r\n            if (self.respawnCallback)\r\n                self.respawnCallback();\r\n\r\n        }, self.respawnDuration);\r\n    }\r\n\r\n    getItem() {\r\n        let self = this,\r\n            random = Utils.randomInt(0, self.items.length - 1),\r\n            item = self.items[random];\r\n\r\n        /**\r\n         * We must ensure an item is always present in order\r\n         * to avoid any unforeseen circumstances.\r\n         */\r\n        if (!item)\r\n            return;\r\n\r\n        return item;\r\n    }\r\n\r\n    onOpen(callback) {\r\n        this.openCallback = callback;\r\n    }\r\n\r\n    onRespawn(callback) {\r\n        this.respawnCallback = callback;\r\n    }\r\n}\r\n\r\nmodule.exports = Chest;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/objects/chest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 939,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/objects/chest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 940,
    "kind": "class",
    "name": "Chest",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/objects/chest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 941,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 942,
    "kind": "method",
    "name": "openChest",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#openChest",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 943,
    "kind": "method",
    "name": "respawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#respawn",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 944,
    "kind": "method",
    "name": "getItem",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#getItem",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 945,
    "kind": "method",
    "name": "onOpen",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#onOpen",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 946,
    "kind": "member",
    "name": "openCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#openCallback",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 947,
    "kind": "method",
    "name": "onRespawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#onRespawn",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 948,
    "kind": "member",
    "name": "respawnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/chest.js~Chest#respawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 949,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/objects/item.js",
    "content": "/* global module */\r\n\r\nlet Entity = require('../entity');\r\n\r\nclass Item extends Entity {\r\n\r\n    constructor(id, instance, x, y) {\r\n        super(id, 'item', instance, x, y);\r\n\r\n        let self = this;\r\n\r\n        self.static = false;\r\n        self.dropped = false;\r\n        self.shard = false;\r\n\r\n        self.count = 1;\r\n        self.ability = 0;\r\n        self.abilityLevel = 0;\r\n        self.tier = 1;\r\n\r\n        self.respawnTime = 30000;\r\n        self.despawnDuration = 4000;\r\n        self.blinkDelay = 20000;\r\n        self.despawnDelay = 1000;\r\n\r\n        self.blinkTimeout = null;\r\n        self.despawnTimeout = null;\r\n    }\r\n\r\n    destroy() {\r\n        let self = this;\r\n\r\n        if (self.blinkTimeout)\r\n            clearTimeout(self.blinkTimeout);\r\n\r\n        if (self.despawnTimeout)\r\n            clearTimeout(self.despawnTimeout);\r\n\r\n        if (self.static)\r\n            self.respawn();\r\n\r\n    }\r\n\r\n    despawn() {\r\n        let self = this;\r\n\r\n        self.blinkTimeout = setTimeout(() => {\r\n            if (self.blinkCallback)\r\n                self.blinkCallback();\r\n\r\n            self.despawnTimeout = setTimeout(() => {\r\n                if (self.despawnCallback)\r\n                    self.despawnCallback();\r\n\r\n            }, self.despawnDuration);\r\n\r\n        }, self.blinkDelay);\r\n    }\r\n\r\n    respawn() {\r\n        let self = this;\r\n\r\n        setTimeout(() => {\r\n            if (self.respawnCallback)\r\n                self.respawnCallback();\r\n\r\n        }, self.respawnTime);\r\n    }\r\n\r\n    getData() {\r\n        return [this.id, this.count, this.ability, this.abilityLevel];\r\n    }\r\n\r\n    getState() {\r\n        let self = this,\r\n            state = super.getState();\r\n\r\n        state.count = self.count;\r\n        state.ability = self.ability;\r\n        state.abilityLevel = self.abilityLevel;\r\n\r\n        return state;\r\n    }\r\n\r\n    setCount(count) {\r\n        this.count = count;\r\n    }\r\n\r\n    setAbility(ability) {\r\n        this.ability = ability;\r\n    }\r\n\r\n    setAbilityLevel(abilityLevel) {\r\n        this.abilityLevel = abilityLevel;\r\n    }\r\n\r\n    onRespawn(callback) {\r\n        this.respawnCallback = callback;\r\n    }\r\n\r\n    onBlink(callback) {\r\n        this.blinkCallback = callback;\r\n    }\r\n\r\n    onDespawn(callback) {\r\n        this.despawnCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Item;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/objects/item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 950,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/objects/item.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 951,
    "kind": "class",
    "name": "Item",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/objects/item.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 952,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 953,
    "kind": "method",
    "name": "destroy",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 954,
    "kind": "method",
    "name": "despawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#despawn",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 955,
    "kind": "method",
    "name": "respawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#respawn",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 956,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#getData",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 957,
    "kind": "method",
    "name": "getState",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#getState",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 958,
    "kind": "method",
    "name": "setCount",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#setCount",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 959,
    "kind": "member",
    "name": "count",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#count",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 960,
    "kind": "method",
    "name": "setAbility",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#setAbility",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "ability",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 961,
    "kind": "member",
    "name": "ability",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#ability",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 962,
    "kind": "method",
    "name": "setAbilityLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#setAbilityLevel",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "abilityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 963,
    "kind": "member",
    "name": "abilityLevel",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#abilityLevel",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 964,
    "kind": "method",
    "name": "onRespawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#onRespawn",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 965,
    "kind": "member",
    "name": "respawnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#respawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 966,
    "kind": "method",
    "name": "onBlink",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#onBlink",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 967,
    "kind": "member",
    "name": "blinkCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#blinkCallback",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 968,
    "kind": "method",
    "name": "onDespawn",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#onDespawn",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 969,
    "kind": "member",
    "name": "despawnCallback",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/item.js~Item",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/item.js~Item#despawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 970,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "content": "/* global module */\r\n\r\nlet Entity = require('../entity');\r\n\r\nclass Projectile extends Entity {\r\n\r\n    constructor(id, instance) {\r\n        super(id, 'projectile', instance);\r\n\r\n        let self = this;\r\n\r\n        self.startX = -1;\r\n        self.startY = -1;\r\n\r\n        self.destX = -1;\r\n        self.destY = -1;\r\n\r\n        self.target = null;\r\n\r\n        self.damage = -1;\r\n\r\n        self.hitType = null;\r\n\r\n        self.owner = null;\r\n    }\r\n\r\n    setStart(x, y) {\r\n        let self = this;\r\n\r\n        self.x = x;\r\n        self.y = y;\r\n    }\r\n\r\n    /**\r\n     * TODO - Merge setTarget() && setStaticTarget into one function.\r\n     */\r\n\r\n    setTarget(target) {\r\n        let self = this;\r\n\r\n        self.target = target;\r\n\r\n        self.destX = target.x;\r\n        self.destY = target.y;\r\n    }\r\n\r\n    setStaticTarget(x, y) {\r\n        let self = this;\r\n\r\n        self.static = true;\r\n\r\n        self.destX = x;\r\n        self.destY = y;\r\n    }\r\n\r\n    getData() {\r\n        let self = this;\r\n\r\n        /**\r\n         * Refrain from creating a projectile unless\r\n         * an owner and a target are available.\r\n         */\r\n\r\n        if (!self.owner || !self.target)\r\n            return;\r\n\r\n        return {\r\n            id: self.instance,\r\n            name: self.owner.projectileName,\r\n            characterId: self.owner.instance,\r\n            targetId: self.target.instance,\r\n            damage: self.damage,\r\n            special: self.special,\r\n            hitType: self.hitType,\r\n            type: self.type\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Projectile;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 971,
    "kind": "variable",
    "name": "Entity",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Entity",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 972,
    "kind": "class",
    "name": "Projectile",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/entity/objects/projectile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entity"
    ],
    "ignore": true
  },
  {
    "__docId__": 973,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 974,
    "kind": "method",
    "name": "setStart",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#setStart",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 975,
    "kind": "method",
    "name": "setTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#setTarget",
    "access": "public",
    "description": "TODO - Merge setTarget() && setStaticTarget into one function.",
    "lineNumber": 38,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 976,
    "kind": "method",
    "name": "setStaticTarget",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#setStaticTarget",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 977,
    "kind": "method",
    "name": "getData",
    "memberof": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/entity/objects/projectile.js~Projectile#getData",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"id\": *, \"name\": *, \"characterId\": *, \"targetId\": *, \"damage\": *, \"special\": *, \"hitType\": *, \"type\": *}"
      ]
    }
  },
  {
    "__docId__": 978,
    "kind": "file",
    "name": "Kaetram-Open/server/js/game/world.js",
    "content": "/* global module */\r\n\r\nlet config = require('../../config.json'),\r\n    Player = require('./entity/character/player/player'),\r\n    Map = require('../map/map'),\r\n    _ = require('underscore'),\r\n    Messages = require('../network/messages'),\r\n    Utils = require('../util/utils'),\r\n    Mobs = require('../util/mobs'),\r\n    Mob = require('./entity/character/mob/mob'),\r\n    NPCs = require('../util/npcs'),\r\n    NPC = require('./entity/npc/npc'),\r\n    Items = require('../util/items'),\r\n    Item = require('./entity/objects/item'),\r\n    Chest = require('./entity/objects/chest'),\r\n    Character = require('./entity/character/character'),\r\n    Projectile = require('./entity/objects/projectile'),\r\n    Packets = require('../network/packets'),\r\n    Formulas = require('../util/formulas'),\r\n    Modules = require('../util/modules'),\r\n    Shops = require('../controllers/shops'),\r\n    Region = require('../region/region'),\r\n    Network = require('../network/network');\r\n\r\nclass World {\r\n\r\n    constructor(id, socket, database) {\r\n        let self = this;\r\n\r\n        self.id = id;\r\n        self.socket = socket;\r\n        self.database = database;\r\n\r\n        self.playerCount = 0;\r\n\r\n        self.maxPlayers = config.maxPlayers;\r\n        self.updateTime = config.updateTime;\r\n\r\n        self.debug = false;\r\n\r\n        self.players = {};\r\n        self.entities = {};\r\n        self.items = {};\r\n        self.chests = {};\r\n        self.mobs = {};\r\n        self.npcs = {};\r\n        self.projectiles = {};\r\n\r\n        self.loadedRegions = false;\r\n\r\n        self.ready = false;\r\n\r\n        self.malformTimeout = null;\r\n\r\n    }\r\n\r\n    load(onWorldLoad) {\r\n        let self = this;\r\n\r\n        log.info('************ World ' + self.id + ' ***********');\r\n\r\n        /**\r\n         * The reason maps are loaded per each world is because\r\n         * we can have slight modifications for each world if we want in the\r\n         * future. Using region loading, we can just send the client\r\n         * whatever new map we have created server sided. Cleaner and nicer.\r\n         */\r\n\r\n        self.map = new Map(self);\r\n        self.map.isReady(() => {\r\n\r\n            log.info('The map has been successfully loaded!');\r\n\r\n            self.loaded();\r\n\r\n            self.spawnChests();\r\n            self.spawnEntities();\r\n\r\n            onWorldLoad();\r\n\r\n        });\r\n\r\n    }\r\n\r\n    loaded() {\r\n        let self = this;\r\n        /**\r\n         * Similar to Kaetram engine here, but it's loaded upon initialization\r\n         * rather than being called from elsewhere.\r\n         */\r\n\r\n        self.shops = new Shops(self);\r\n        self.region = new Region(self);\r\n        self.network = new Network(self);\r\n\r\n        self.ready = true;\r\n\r\n        self.tick();\r\n\r\n        log.info('********************************');\r\n    }\r\n\r\n    tick() {\r\n        let self = this;\r\n\r\n        setInterval(() => {\r\n\r\n            self.network.parsePackets();\r\n            self.region.parseRegions();\r\n\r\n        }, 1000 / self.updateTime);\r\n\r\n    }\r\n\r\n    /****************************\r\n     * Entity related functions *\r\n     ****************************/\r\n\r\n    kill(entity) {\r\n        let self = this;\r\n\r\n        entity.applyDamage(entity.hitPoints);\r\n\r\n        self.push(Packets.PushOpcode.Regions, [{\r\n            regionId: entity.region,\r\n            message: new Messages.Points({\r\n                id: entity.instance,\r\n                hitPoints: entity.getHitPoints(),\r\n                mana: null\r\n            })\r\n        }, {\r\n            regionId: entity.region,\r\n            message: new Messages.Despawn(entity.instance)\r\n        }]);\r\n\r\n        self.handleDeath(entity, true);\r\n    }\r\n\r\n    handleDamage(attacker, target, damage) {\r\n        let self = this;\r\n\r\n        if (!attacker || !target || isNaN(damage) || target.invincible)\r\n            return;\r\n\r\n        if (target.type === 'player' && target.hitCallback)\r\n            target.hitCallback(attacker, damage);\r\n\r\n        //Stop screwing with this - it's so the target retaliates.\r\n\r\n        target.hit(attacker);\r\n        target.applyDamage(damage);\r\n\r\n        self.push(Packets.PushOpcode.Regions, {\r\n            regionId: target.region,\r\n            message: new Messages.Points({\r\n                id: target.instance,\r\n                hitPoints: target.getHitPoints(),\r\n                mana: null\r\n            })\r\n        });\r\n\r\n        // If target has died...\r\n        if (target.getHitPoints() < 1) {\r\n            if (target.type === 'mob')\r\n                attacker.addExperience(Mobs.getXp(target.id));\r\n\r\n            if (attacker.type === 'player')\r\n                attacker.killCharacter(target);\r\n\r\n            target.combat.forEachAttacker((attacker) => {\r\n                attacker.removeTarget();\r\n            });\r\n\r\n            self.push(Packets.PushOpcode.Regions, [{\r\n                regionId: target.region,\r\n                message: new Messages.Combat(Packets.CombatOpcode.Finish, {\r\n                    attackerId: attacker.instance,\r\n                    targetId: target.instance\r\n                })\r\n            }, {\r\n                regionId: target.region,\r\n                message: new Messages.Despawn(target.instance)\r\n            }]);\r\n\r\n            self.handleDeath(target);\r\n\r\n        }\r\n    }\r\n\r\n    handleDeath(character, ignoreDrops) {\r\n        let self = this;\r\n\r\n        if (!character)\r\n            return;\r\n\r\n        if (character.type === 'mob') {\r\n            let deathX = character.x,\r\n                deathY = character.y;\r\n\r\n            if (character.deathCallback)\r\n                character.deathCallback();\r\n\r\n            self.removeEntity(character);\r\n\r\n            character.dead = true;\r\n\r\n            character.destroy();\r\n\r\n            character.combat.stop();\r\n\r\n            if (!ignoreDrops) {\r\n                let drop = character.getDrop();\r\n\r\n                if (drop)\r\n                    self.dropItem(drop.id, drop.count, deathX, deathY);\r\n            }\r\n\r\n        } else if (character.type === 'player')\r\n            character.die();\r\n    }\r\n\r\n    createProjectile(info) {\r\n        let self = this,\r\n            attacker = info.shift(),\r\n            target = info.shift();\r\n\r\n        if (!attacker || !target)\r\n            return null;\r\n\r\n        let startX = attacker.x,\r\n            startY = attacker.y,\r\n            type = attacker.getProjectile(),\r\n            hit = null,\r\n            projectile = new Projectile(type, Utils.generateInstance(5, type, startX + startY));\r\n\r\n        projectile.setStart(startX, startY);\r\n        projectile.setTarget(target);\r\n\r\n        if (attacker.type === 'player')\r\n            hit = attacker.getHit(target);\r\n\r\n        projectile.damage = hit ? hit.damage : Formulas.getDamage(attacker, target, true);\r\n        projectile.hitType = hit ? hit.type : Modules.Hits.Damage;\r\n\r\n        projectile.owner = attacker;\r\n\r\n        self.addProjectile(projectile, projectile.owner.region);\r\n\r\n        return projectile;\r\n    }\r\n\r\n    getEntityByInstance(instance) {\r\n        if (instance in this.entities)\r\n            return this.entities[instance];\r\n    }\r\n\r\n    spawnEntities() {\r\n        let self = this,\r\n            entities = 0;\r\n\r\n        _.each(self.map.staticEntities, (data) => {\r\n            let key = data.string,\r\n                isMob = !!Mobs.Properties[key],\r\n                isNpc = !!NPCs.Properties[key],\r\n                isItem = !!Items.Data[key],\r\n                info = isMob ? Mobs.Properties[key] : (isNpc ? NPCs.Properties[key] : isItem ? Items.getData(key) : null),\r\n                position = self.map.indexToGridPosition(data.tileIndex);\r\n\r\n            position.x++;\r\n\r\n            if (!info || info === 'null') {\r\n                if (self.debug) log.info('Unknown object spawned at: ' + position.x + ' ' + position.y);\r\n\r\n                return;\r\n            }\r\n\r\n            let instance = Utils.generateInstance(isMob ? 2 : (isNpc ? 3 : 4), info.id + entities, position.x + entities, position.y);\r\n\r\n            if (isMob) {\r\n                let mob = new Mob(info.id, instance, position.x, position.y, self);\r\n\r\n                mob.static = true;\r\n\r\n                if (data.roaming)\r\n                    mob.roaming = true;\r\n\r\n                if (Mobs.Properties[key].hiddenName)\r\n                    mob.hiddenName = Mobs.Properties[key].hiddenName;\r\n\r\n                mob.load();\r\n\r\n                mob.onRespawn(() => {\r\n\r\n                    mob.dead = false;\r\n\r\n                    mob.refresh();\r\n\r\n                    self.addMob(mob);\r\n\r\n                });\r\n\r\n                self.addMob(mob);\r\n            }\r\n\r\n            if (isNpc)\r\n                self.addNPC(new NPC(info.id, instance, position.x, position.y));\r\n\r\n            if (isItem) {\r\n                let item = self.createItem(info.id, instance, position.x, position.y);\r\n                item.static = true;\r\n                self.addItem(item);\r\n            }\r\n\r\n\r\n            entities++;\r\n        });\r\n\r\n        log.info('Spawned ' + Object.keys(self.entities).length + ' entities!');\r\n    }\r\n\r\n    spawnChests() {\r\n        let self = this,\r\n            chests = 0;\r\n\r\n        _.each(self.map.chests, (info) => {\r\n\r\n            self.spawnChest(info.i, info.x, info.y, true);\r\n\r\n            chests++;\r\n        });\r\n\r\n        log.info('Spawned ' + Object.keys(self.chests).length + ' static chests');\r\n    }\r\n\r\n    spawnMob(id, x, y) {\r\n        let self = this,\r\n            instance = Utils.generateInstance(2, id, x + id, y),\r\n            mob = new Mob(id, instance, x, y);\r\n\r\n        if (!Mobs.exists(id))\r\n            return;\r\n\r\n        self.addMob(mob);\r\n\r\n        return mob;\r\n    }\r\n\r\n    spawnChest(items, x, y, staticChest) {\r\n        let self = this,\r\n            chestCount = Object.keys(self.chests).length,\r\n            instance = Utils.generateInstance(5, 194, chestCount, x, y),\r\n            chest = new Chest(194, instance, x, y);\r\n\r\n        chest.items = items;\r\n\r\n        if (staticChest) {\r\n\r\n            chest.static = staticChest;\r\n\r\n            chest.onRespawn(self.addChest.bind(self, chest));\r\n\r\n        }\r\n\r\n        chest.onOpen(() => {\r\n\r\n            /**\r\n             * Pretty simple concept, detect when the player opens the chest\r\n             * then remove it and drop an item instead. Give it a 25 second\r\n             * cooldown prior to respawning and voila.\r\n             */\r\n\r\n            self.removeChest(chest);\r\n\r\n            if (config.debug)\r\n                log.info(`Opening chest at x: ${chest.x}, y: ${chest.y}`);\r\n\r\n            self.dropItem(Items.stringToId(chest.getItem()), 1, chest.x, chest.y);\r\n\r\n        });\r\n\r\n        self.addChest(chest);\r\n\r\n        return chest;\r\n    }\r\n\r\n    createItem(id, instance, x, y) {\r\n        return new Item(id, instance, x, y);;\r\n    }\r\n\r\n    dropItem(id, count, x, y) {\r\n        let self = this,\r\n            instance = Utils.generateInstance(4, id + (Object.keys(self.entities)).length, x, y),\r\n            item = self.createItem(id, instance, x, y);\r\n\r\n        item.count = count;\r\n        item.dropped = true;\r\n\r\n        self.addItem(item);\r\n        item.despawn();\r\n\r\n        if (config.debug) {\r\n            log.info(`Item - ${id} has been dropped at x: ${x}, y: ${y}.`);\r\n            log.info(`Item Region - ${item.region}`);\r\n        }\r\n\r\n        item.onBlink(() => {\r\n            self.push(Packets.PushOpcode.Broadcast, {\r\n                message: new Messages.Blink(item.intsance)\r\n            });\r\n        });\r\n\r\n        item.onDespawn(() => {\r\n            self.removeItem(item);\r\n        });\r\n    }\r\n\r\n    push(type, info) {\r\n        let self = this;\r\n\r\n        if (_.isArray(info)) {\r\n            _.each(info, (i) => { self.push(type, i); });\r\n            return;\r\n        }\r\n\r\n        if (!info.message) {\r\n            log.info('No message found whilst attempting to push.');\r\n            log.info(info);\r\n            return;\r\n        }\r\n\r\n        switch (type) {\r\n            case Packets.PushOpcode.Broadcast:\r\n\r\n                self.network.pushBroadcast(info.message);\r\n\r\n                break;\r\n\r\n            case Packets.PushOpcode.Selectively:\r\n\r\n                self.network.pushSelectively(info.message, info.ignores);\r\n\r\n                break;\r\n\r\n            case Packets.PushOpcode.Player:\r\n\r\n                self.network.pushToPlayer(info.player, info.message);\r\n\r\n                break;\r\n\r\n            case Packets.PushOpcode.Players:\r\n\r\n                self.network.pushToPlayers(info.players, info.message);\r\n\r\n                break;\r\n\r\n            case Packets.PushOpcode.Region:\r\n\r\n                self.network.pushToRegion(info.regionId, info.message, info.ignoreId);\r\n\r\n                break;\r\n\r\n            case Packets.PushOpcode.Regions:\r\n\r\n                self.network.pushToAdjacentRegions(info.regionId, info.message, info.ignoreId);\r\n\r\n                break;\r\n\r\n            case Packets.PushOpcode.NameArray:\r\n\r\n                self.network.pushToNameArray(info.names, info.message);\r\n\r\n                break;\r\n\r\n            case Packets.PushOpcode.OldRegions:\r\n\r\n                self.network.pushToOldRegions(info.player, info.message);\r\n\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    addEntity(entity, region) {\r\n        let self = this;\r\n\r\n        if (entity.instance in self.entities)\r\n            log.info('Entity ' + entity.instance + ' already exists.');\r\n\r\n        self.entities[entity.instance] = entity;\r\n\r\n        if (entity.type !== 'projectile')\r\n            self.region.handle(entity, region);\r\n\r\n        if (entity.x > 0 && entity.y > 0)\r\n            self.getGrids().addToEntityGrid(entity, entity.x, entity.y);\r\n\r\n        entity.onSetPosition(() => {\r\n\r\n            self.getGrids().updateEntityPosition(entity);\r\n\r\n            if (entity.isMob() && entity.isOutsideSpawn()) {\r\n\r\n                entity.removeTarget();\r\n                entity.combat.forget();\r\n                entity.combat.stop();\r\n\r\n                entity.return();\r\n\r\n                self.push(Packets.PushOpcode.Broadcast, [{\r\n                    message: new Messages.Combat(Packets.CombatOpcode.Finish, {\r\n                        attackerId: null,\r\n                        targetId: entity.instance\r\n                    })\r\n                }, {\r\n                    message: new Messages.Movement(Packets.MovementOpcode.Move, {\r\n                        id: entity.instance,\r\n                        x: entity.x,\r\n                        y: entity.y,\r\n                        forced: false,\r\n                        teleport: false\r\n                    })\r\n                }]);\r\n\r\n            }\r\n\r\n        });\r\n\r\n        if (entity instanceof Character) {\r\n\r\n            entity.getCombat().setWorld(self);\r\n\r\n            entity.onStunned((stun) => {\r\n\r\n                self.push(Packets.PushOpcode.Regions, {\r\n                    regionId: entity.region,\r\n                    message: new Messages.Movement(Packets.MovementOpcode.Stunned, {\r\n                        id: entity.instance,\r\n                        state: stun\r\n                    })\r\n                });\r\n\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    addPlayer(player) {\r\n        let self = this;\r\n\r\n        self.addEntity(player);\r\n        self.players[player.instance] = player;\r\n\r\n        if (self.populationCallback)\r\n            self.populationCallback();\r\n    }\r\n\r\n    addNPC(npc, region) {\r\n        let self = this;\r\n\r\n        self.addEntity(npc, region);\r\n        self.npcs[npc.instance] = npc;\r\n    }\r\n\r\n    addMob(mob, region) {\r\n        let self = this;\r\n\r\n        if (!Mobs.exists(mob.id)) {\r\n            log.error('Cannot spawn mob. ' + mob.id + ' does not exist.');\r\n            return;\r\n        }\r\n\r\n        self.addEntity(mob, region);\r\n        self.mobs[mob.instance] = mob;\r\n\r\n        mob.addToChestArea(self.getChestAreas());\r\n\r\n        mob.onHit((attacker) => {\r\n            if (mob.isDead() || mob.combat.started)\r\n                return;\r\n\r\n            mob.combat.begin(attacker);\r\n        });\r\n    }\r\n\r\n    addItem(item, region) {\r\n        let self = this;\r\n\r\n        if (item.static)\r\n            item.onRespawn(self.addItem.bind(self, item));\r\n\r\n        self.addEntity(item, region);\r\n        self.items[item.instance] = item;\r\n    }\r\n\r\n    addProjectile(projectile, region) {\r\n        let self = this;\r\n\r\n        self.addEntity(projectile, region);\r\n        self.projectiles[projectile.instance] = projectile;\r\n    }\r\n\r\n    addChest(chest, region) {\r\n        let self = this;\r\n\r\n        self.addEntity(chest, region);\r\n        self.chests[chest.instance] = chest;\r\n    }\r\n\r\n    removeEntity(entity) {\r\n        let self = this;\r\n\r\n        if (entity.instance in self.entities)\r\n            delete self.entities[entity.instance];\r\n\r\n        if (entity.instance in self.mobs)\r\n            delete self.mobs[entity.instance];\r\n\r\n        if (entity.instance in self.items)\r\n            delete self.items[entity.instance];\r\n\r\n        self.getGrids().removeFromEntityGrid(entity, entity.x, entity.y);\r\n\r\n        self.region.remove(entity);\r\n    }\r\n\r\n    cleanCombat(entity) {\r\n        let self = this;\r\n\r\n        _.each(this.entities, (oEntity) => {\r\n            if (oEntity instanceof Character && oEntity.combat.hasAttacker(entity))\r\n                oEntity.combat.removeAttacker(entity);\r\n\r\n        });\r\n    }\r\n\r\n    removeItem(item) {\r\n        let self = this;\r\n\r\n        self.removeEntity(item);\r\n        self.push(Packets.PushOpcode.Broadcast, {\r\n            message: new Messages.Despawn(item.instance)\r\n        });\r\n\r\n        if (item.static)\r\n            item.respawn();\r\n    }\r\n\r\n    removePlayer(player) {\r\n        let self = this;\r\n\r\n        self.push(Packets.PushOpcode.Regions, {\r\n            regionId: player.region,\r\n            message: new Messages.Despawn(player.instance)\r\n        });\r\n\r\n        if (player.ready)\r\n            player.save();\r\n\r\n        if (self.populationCallback)\r\n            self.populationCallback();\r\n\r\n        self.removeEntity(player);\r\n\r\n        self.cleanCombat(player);\r\n\r\n        if (player.isGuest)\r\n            self.database.delete(player);\r\n\r\n        delete self.players[player.instance];\r\n        delete self.network.packets[player.instance];\r\n    }\r\n\r\n    removeProjectile(projectile) {\r\n        let self = this;\r\n\r\n        self.removeEntity(projectile);\r\n\r\n        delete self.projectiles[projectile.instance];\r\n    }\r\n\r\n    removeChest(chest) {\r\n        let self = this;\r\n\r\n        self.removeEntity(chest);\r\n        self.push(Packets.PushOpcode.Broadcast, {\r\n            message: new Messages.Despawn(chest.instance)\r\n        });\r\n\r\n        if (chest.static)\r\n            chest.respawn();\r\n        else\r\n            delete self.chests[chest.instance];\r\n    }\r\n\r\n    playerInWorld(username) {\r\n        let self = this;\r\n\r\n        for (let id in self.players)\r\n            if (self.players.hasOwnProperty(id))\r\n                if (self.players[id].username.toLowerCase() === username.toLowerCase())\r\n                    return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    getPlayerByName(name) {\r\n        let self = this;\r\n\r\n        for (let id in self.players)\r\n            if (self.players.hasOwnProperty(id))\r\n                if (self.players[id].username.toLowerCase() === name.toLowerCase())\r\n                    return self.players[id];\r\n\r\n        return null;\r\n    }\r\n\r\n    getPlayerByInstance(instance) {\r\n        let self = this;\r\n\r\n        if (instance in self.players)\r\n            return self.players[instance];\r\n\r\n        return null;\r\n    }\r\n\r\n    forEachPlayer(callback) {\r\n        _.each(this.players, (player) => {\r\n            callback(player);\r\n        });\r\n    }\r\n\r\n    getPVPAreas() {\r\n        return this.map.areas['PVP'].pvpAreas;\r\n    }\r\n\r\n    getMusicAreas() {\r\n        return this.map.areas['Music'].musicAreas;\r\n    }\r\n\r\n    getChestAreas() {\r\n        return this.map.areas['Chests'].chestAreas;\r\n    }\r\n\r\n    getOverlayAreas() {\r\n        return this.map.areas['Overlays'].overlayAreas;\r\n    }\r\n\r\n    getCameraAreas() {\r\n        return this.map.areas['Cameras'].cameraAreas;\r\n    }\r\n\r\n    getGrids() {\r\n        return this.map.grids;\r\n    }\r\n\r\n    getPopulation() {\r\n        return _.size(this.players);\r\n    }\r\n\r\n    onPlayerConnection(callback) {\r\n        this.playerConnectCallback = callback;\r\n    }\r\n\r\n    onPopulationChange(callback) {\r\n        this.populationCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = World;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/game/world.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 979,
    "kind": "variable",
    "name": "config",
    "memberof": "Kaetram-Open/server/js/game/world.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/world.js~config",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/world.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 980,
    "kind": "class",
    "name": "World",
    "memberof": "Kaetram-Open/server/js/game/world.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/game/world.js~World",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/game/world.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 981,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 982,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#load",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "onWorldLoad",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 983,
    "kind": "method",
    "name": "loaded",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#loaded",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 984,
    "kind": "method",
    "name": "tick",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#tick",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 985,
    "kind": "method",
    "name": "kill",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#kill",
    "access": "public",
    "description": "*************************\nEntity related functions *\n**************************",
    "lineNumber": 119,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 986,
    "kind": "method",
    "name": "handleDamage",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#handleDamage",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "attacker",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "damage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 987,
    "kind": "method",
    "name": "handleDeath",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#handleDeath",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "params": [
      {
        "name": "character",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoreDrops",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 988,
    "kind": "method",
    "name": "createProjectile",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#createProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 989,
    "kind": "method",
    "name": "getEntityByInstance",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getEntityByInstance",
    "access": "public",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 990,
    "kind": "method",
    "name": "spawnEntities",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#spawnEntities",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 991,
    "kind": "method",
    "name": "spawnChests",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#spawnChests",
    "access": "public",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 992,
    "kind": "method",
    "name": "spawnMob",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#spawnMob",
    "access": "public",
    "description": null,
    "lineNumber": 335,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 993,
    "kind": "method",
    "name": "spawnChest",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#spawnChest",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "params": [
      {
        "name": "items",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "staticChest",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 994,
    "kind": "method",
    "name": "createItem",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#createItem",
    "access": "public",
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "instance",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 995,
    "kind": "method",
    "name": "dropItem",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#dropItem",
    "access": "public",
    "description": null,
    "lineNumber": 390,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "count",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 996,
    "kind": "method",
    "name": "push",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#push",
    "access": "public",
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 997,
    "kind": "method",
    "name": "addEntity",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addEntity",
    "access": "public",
    "description": null,
    "lineNumber": 483,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 998,
    "kind": "method",
    "name": "addPlayer",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 547,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 999,
    "kind": "method",
    "name": "addNPC",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addNPC",
    "access": "public",
    "description": null,
    "lineNumber": 557,
    "undocument": true,
    "params": [
      {
        "name": "npc",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1000,
    "kind": "method",
    "name": "addMob",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addMob",
    "access": "public",
    "description": null,
    "lineNumber": 564,
    "undocument": true,
    "params": [
      {
        "name": "mob",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1001,
    "kind": "method",
    "name": "addItem",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addItem",
    "access": "public",
    "description": null,
    "lineNumber": 585,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1002,
    "kind": "method",
    "name": "addProjectile",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 595,
    "undocument": true,
    "params": [
      {
        "name": "projectile",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1003,
    "kind": "method",
    "name": "addChest",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#addChest",
    "access": "public",
    "description": null,
    "lineNumber": 602,
    "undocument": true,
    "params": [
      {
        "name": "chest",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1004,
    "kind": "method",
    "name": "removeEntity",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removeEntity",
    "access": "public",
    "description": null,
    "lineNumber": 609,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1005,
    "kind": "method",
    "name": "cleanCombat",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#cleanCombat",
    "access": "public",
    "description": null,
    "lineNumber": 626,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1006,
    "kind": "method",
    "name": "removeItem",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removeItem",
    "access": "public",
    "description": null,
    "lineNumber": 636,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1007,
    "kind": "method",
    "name": "removePlayer",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removePlayer",
    "access": "public",
    "description": null,
    "lineNumber": 648,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1008,
    "kind": "method",
    "name": "removeProjectile",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removeProjectile",
    "access": "public",
    "description": null,
    "lineNumber": 673,
    "undocument": true,
    "params": [
      {
        "name": "projectile",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1009,
    "kind": "method",
    "name": "removeChest",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#removeChest",
    "access": "public",
    "description": null,
    "lineNumber": 681,
    "undocument": true,
    "params": [
      {
        "name": "chest",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1010,
    "kind": "method",
    "name": "playerInWorld",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#playerInWorld",
    "access": "public",
    "description": null,
    "lineNumber": 695,
    "undocument": true,
    "params": [
      {
        "name": "username",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1011,
    "kind": "method",
    "name": "getPlayerByName",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getPlayerByName",
    "access": "public",
    "description": null,
    "lineNumber": 706,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1012,
    "kind": "method",
    "name": "getPlayerByInstance",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getPlayerByInstance",
    "access": "public",
    "description": null,
    "lineNumber": 717,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1013,
    "kind": "method",
    "name": "forEachPlayer",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#forEachPlayer",
    "access": "public",
    "description": null,
    "lineNumber": 726,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1014,
    "kind": "method",
    "name": "getPVPAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getPVPAreas",
    "access": "public",
    "description": null,
    "lineNumber": 732,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1015,
    "kind": "method",
    "name": "getMusicAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getMusicAreas",
    "access": "public",
    "description": null,
    "lineNumber": 736,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1016,
    "kind": "method",
    "name": "getChestAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getChestAreas",
    "access": "public",
    "description": null,
    "lineNumber": 740,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1017,
    "kind": "method",
    "name": "getOverlayAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getOverlayAreas",
    "access": "public",
    "description": null,
    "lineNumber": 744,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1018,
    "kind": "method",
    "name": "getCameraAreas",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getCameraAreas",
    "access": "public",
    "description": null,
    "lineNumber": 748,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1019,
    "kind": "method",
    "name": "getGrids",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getGrids",
    "access": "public",
    "description": null,
    "lineNumber": 752,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1020,
    "kind": "method",
    "name": "getPopulation",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#getPopulation",
    "access": "public",
    "description": null,
    "lineNumber": 756,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1021,
    "kind": "method",
    "name": "onPlayerConnection",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#onPlayerConnection",
    "access": "public",
    "description": null,
    "lineNumber": 760,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1022,
    "kind": "member",
    "name": "playerConnectCallback",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#playerConnectCallback",
    "access": "public",
    "description": null,
    "lineNumber": 761,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1023,
    "kind": "method",
    "name": "onPopulationChange",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#onPopulationChange",
    "access": "public",
    "description": null,
    "lineNumber": 764,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1024,
    "kind": "member",
    "name": "populationCallback",
    "memberof": "Kaetram-Open/server/js/game/world.js~World",
    "static": false,
    "longname": "Kaetram-Open/server/js/game/world.js~World#populationCallback",
    "access": "public",
    "description": null,
    "lineNumber": 765,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1025,
    "kind": "file",
    "name": "Kaetram-Open/server/js/main.js",
    "content": "let World = require('./game/world'),\r\n    WebSocket = require('./network/websocket'),\r\n    config = require('../config'),\r\n    Log = require('log'),\r\n    Parser = require('./util/parser'),\r\n    Database = require('./database/database'),\r\n    _ = require('underscore'),\r\n    worlds = [], allowConnections = false,\r\n    worldsCreated = 0;\r\n\r\nlog = new Log(config.worlds > 1 ? 'notice' : config.debugLevel, config.localDebug ? fs.createWriteStream('runtime.log') : null);\r\n\r\nfunction main() {\r\n    log.info('Initializing ' + config.name + ' game engine...');\r\n\r\n    let webSocket = new WebSocket(config.host, config.port, config.gver),\r\n        database = new Database(config.database),\r\n        stdin = process.openStdin();\r\n\r\n    webSocket.onConnect(function(connection) {\r\n        if (allowConnections) {\r\n            let world;\r\n\r\n            for (let i = 0; i < worlds.length; i++)\r\n                if (worlds[i].playerCount < worlds[i].maxPlayers) {\r\n                    world = worlds[i];\r\n                    break;\r\n                }\r\n\r\n            if (world)\r\n                world.playerConnectCallback(connection);\r\n            else {\r\n                log.info('Worlds are all currently full. Closing connection.');\r\n\r\n                connection.sendUTF8('full');\r\n                connection.close();\r\n            }\r\n\r\n        } else {\r\n            connection.sendUTF8('disallowed');\r\n            connection.close();\r\n        }\r\n\r\n    });\r\n\r\n\r\n    webSocket.onWebSocketReady(function() {\r\n        /**\r\n         * Initialize the worlds after the webSocket finishes.\r\n         */\r\n\r\n        loadParser();\r\n\r\n        for (let i = 0; i < config.worlds; i++)\r\n            worlds.push(new World(i + 1, webSocket, database.getDatabase()));\r\n\r\n        initializeWorlds();\r\n\r\n    });\r\n\r\n    stdin.addListener('data', (data) => {\r\n        let message = data.toString().replace(/(\\r\\n|\\n|\\r)/gm, ''),\r\n            type = message.charAt(0);\r\n\r\n        if (type !== '/')\r\n            return;\r\n\r\n        let blocks = message.substring(1).split(' '),\r\n            command = blocks.shift();\r\n\r\n        if (!command)\r\n            return;\r\n\r\n        switch (command) {\r\n\r\n            case 'players':\r\n                let total = 0;\r\n\r\n                _.each(worlds, (world) => {\r\n                    total += world.playerCount;\r\n                });\r\n\r\n                log.info(`There are ${total} player(s) in ${worlds.length} world(s).`);\r\n\r\n                break;\r\n\r\n            case 'registered':\r\n\r\n                worlds[0].database.registeredCount((count) => {\r\n                    log.info(`There are ${count} users registered.`);\r\n                });\r\n\r\n                break;\r\n\r\n        }\r\n    });\r\n\r\n}\r\n\r\nfunction onWorldLoad() {\r\n    worldsCreated++;\r\n    if (worldsCreated === worlds.length)\r\n        allWorldsCreated();\r\n}\r\n\r\nfunction allWorldsCreated() {\r\n    log.notice('Finished creating ' + worlds.length + ' world' + (worlds.length > 1 ? 's' : '') + '!');\r\n    allowConnections = true;\r\n\r\n    var host = config.host === '0.0.0.0' ? 'localhost' : config.host;\r\n    log.notice('Connect locally via http://' + host + ':' + config.port);\r\n}\r\n\r\nfunction loadParser() {\r\n    new Parser();\r\n}\r\n\r\nfunction initializeWorlds() {\r\n    for (var worldId in worlds)\r\n        if (worlds.hasOwnProperty(worldId))\r\n            worlds[worldId].load(onWorldLoad);\r\n}\r\n\r\nfunction getPopulations() {\r\n    var counts = [];\r\n\r\n    for (var index in worlds)\r\n        if (worlds.hasOwnProperty(index))\r\n            counts.push(worlds[index].getPopulation());\r\n\r\n    return counts;\r\n}\r\n\r\nfunction saveAll() {\r\n    _.each(worlds, function(world) {\r\n        world.saveAll();\r\n    });\r\n\r\n    var plural = worlds.length > 1;\r\n\r\n    log.notice('Saved players for ' + worlds.length + ' world' + (plural ? 's' : '') + '.');\r\n}\r\n\r\nif ( typeof String.prototype.startsWith !== 'function' ) {\r\n    String.prototype.startsWith = function(str) {\r\n        return str.length > 0 && this.substring( 0, str.length ) === str;\r\n    };\r\n}\r\n\r\nif ( typeof String.prototype.endsWith !== 'function' ) {\r\n    String.prototype.endsWith = function(str) {\r\n        return str.length > 0 && this.substring( this.length - str.length, this.length ) === str;\r\n    };\r\n}\r\n\r\nmain();\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1026,
    "kind": "variable",
    "name": "World",
    "memberof": "Kaetram-Open/server/js/main.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~World",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1027,
    "kind": "function",
    "name": "main",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~main",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1028,
    "kind": "function",
    "name": "onWorldLoad",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~onWorldLoad",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1029,
    "kind": "function",
    "name": "allWorldsCreated",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~allWorldsCreated",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1030,
    "kind": "function",
    "name": "loadParser",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~loadParser",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1031,
    "kind": "function",
    "name": "initializeWorlds",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~initializeWorlds",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1032,
    "kind": "function",
    "name": "getPopulations",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~getPopulations",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1033,
    "kind": "function",
    "name": "saveAll",
    "memberof": "Kaetram-Open/server/js/main.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/main.js~saveAll",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/main.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1034,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/area.js",
    "content": "/* global module */\r\n\r\nclass Area {\r\n\r\n    constructor(id, x, y, width, height) {\r\n        let self = this;\r\n\r\n        self.id = id;\r\n\r\n        self.x = x;\r\n        self.y = y;\r\n\r\n        self.width = width;\r\n        self.height = height;\r\n\r\n        self.entities = [];\r\n        self.items = [];\r\n\r\n        self.hasRespawned = true;\r\n        self.chest = null;\r\n\r\n        self.maxEntities = 0;\r\n    }\r\n\r\n    contains(x, y) {\r\n        return x >= this.x && y >= this.y && x < this.x + this.width && y < this.y + this.height;\r\n    }\r\n\r\n    addEntity(entity) {\r\n        let self = this;\r\n\r\n        if (self.entities.indexOf(entity) > 0)\r\n            return;\r\n\r\n        self.entities.push(entity);\r\n        entity.area = self;\r\n\r\n        if (self.spawnCallback)\r\n            self.spawnCallback();\r\n    }\r\n\r\n    removeEntity(entity) {\r\n        let self = this,\r\n            index = self.entities.indexOf(entity);\r\n\r\n        if (index > -1)\r\n            self.entities.splice(index, 1);\r\n\r\n        if (self.entities.length === 0 && self.emptyCallback)\r\n            self.emptyCallback();\r\n    }\r\n\r\n    setMaxEntities(maxEntities) {\r\n        this.maxEntities = maxEntities;\r\n    }\r\n\r\n    onEmpty(callback) {\r\n        this.emptyCallback = callback;\r\n    }\r\n\r\n    onSpawn(callback) {\r\n        this.spawnCallback = callback;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Area;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/map/area.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1035,
    "kind": "class",
    "name": "Area",
    "memberof": "Kaetram-Open/server/js/map/area.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/area.js~Area",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/area.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1036,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 1037,
    "kind": "method",
    "name": "contains",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#contains",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1038,
    "kind": "method",
    "name": "addEntity",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#addEntity",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1039,
    "kind": "method",
    "name": "removeEntity",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#removeEntity",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1040,
    "kind": "method",
    "name": "setMaxEntities",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#setMaxEntities",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "maxEntities",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1041,
    "kind": "member",
    "name": "maxEntities",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#maxEntities",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1042,
    "kind": "method",
    "name": "onEmpty",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#onEmpty",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1043,
    "kind": "member",
    "name": "emptyCallback",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#emptyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1044,
    "kind": "method",
    "name": "onSpawn",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#onSpawn",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1045,
    "kind": "member",
    "name": "spawnCallback",
    "memberof": "Kaetram-Open/server/js/map/area.js~Area",
    "static": false,
    "longname": "Kaetram-Open/server/js/map/area.js~Area#spawnCallback",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1046,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/cameraareas.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Area = require('../area'),\r\n    map = require('../../../data/map/world_server');\r\n\r\nclass CameraAreas {\r\n\r\n    constructor() {\r\n        let self = this;\r\n\r\n        self.cameraAreas = [];\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this,\r\n            list = map.cameraAreas;\r\n\r\n        _.each(list, (o) => {\r\n            let cameraArea = new Area(o.id, o.x, o.y, o.width, o.height);\r\n\r\n            cameraArea.type = o.type;\r\n\r\n            self.cameraAreas.push(cameraArea);\r\n\r\n        });\r\n\r\n        log.info('Loaded ' + self.cameraAreas.length + ' camera areas.');\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = CameraAreas;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/map/areas/cameraareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1047,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/cameraareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/cameraareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/cameraareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1048,
    "kind": "class",
    "name": "CameraAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/cameraareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/cameraareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1049,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 1050,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/cameraareas.js~CameraAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1051,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/chestareas.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Area = require('../area'),\r\n    map = require('../../../data/map/world_server');\r\n\r\nclass ChestAreas {\r\n\r\n    constructor(world) {\r\n        let self = this;\r\n\r\n        self.world = world;\r\n\r\n        self.chestAreas = [];\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        _.each(map.chestAreas, (m) => {\r\n            let chestArea = new Area(m.id, m.x, m.y, m.width, m.height);\r\n\r\n            chestArea.maxEntities = m.entities;\r\n            chestArea.items = m.i;\r\n            chestArea.cX = m.tx;\r\n            chestArea.cY = m.ty;\r\n\r\n            self.chestAreas.push(chestArea);\r\n\r\n            chestArea.onEmpty(() => {\r\n                self.spawnChest(this);\r\n            });\r\n\r\n            chestArea.onSpawn(() => {\r\n                self.removeChest(this);\r\n            });\r\n\r\n        });\r\n\r\n        log.info('Loaded ' + self.chestAreas.length + ' chest areas.');\r\n    }\r\n\r\n    spawnChest(chestArea) {\r\n        chestArea.chest = this.world.spawnChest(chestArea.items, chestArea.cX, chestArea.cY, false);\r\n    }\r\n\r\n    removeChest(chestArea) {\r\n        let self = this;\r\n\r\n        if (!chestArea.chest)\r\n            return;\r\n\r\n        self.world.removeChest(chestArea.chest);\r\n\r\n        chestArea.chest = null;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = ChestAreas;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/map/areas/chestareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1052,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/chestareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1053,
    "kind": "class",
    "name": "ChestAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/chestareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1054,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 1055,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1056,
    "kind": "method",
    "name": "spawnChest",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas#spawnChest",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "chestArea",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1057,
    "kind": "method",
    "name": "removeChest",
    "memberof": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/chestareas.js~ChestAreas#removeChest",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "chestArea",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1058,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/musicareas.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Area = require('../area'),\r\n    map = require('../../../data/map/world_server');\r\n\r\nclass MusicAreas {\r\n\r\n    constructor() {\r\n        let self = this;\r\n\r\n        self.musicAreas = [];\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        _.each(map.musicAreas, (m) => {\r\n            let musicArea = new Area(m.id, m.x, m.y, m.width, m.height);\r\n\r\n            self.musicAreas.push(musicArea);\r\n        });\r\n\r\n        log.info('Loaded ' + self.musicAreas.length + ' music areas.');\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = MusicAreas;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/map/areas/musicareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1059,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/musicareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/musicareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/musicareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1060,
    "kind": "class",
    "name": "MusicAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/musicareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/musicareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1061,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 1062,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/musicareas.js~MusicAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1063,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/overlayareas.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Area = require('../area'),\r\n    map = require('../../../data/map/world_server');\r\n\r\nclass OverlayAreas {\r\n\r\n    constructor() {\r\n        let self = this;\r\n\r\n        self.overlayAreas = [];\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this,\r\n            list = map.overlayAreas;\r\n\r\n        _.each(list, (o) => {\r\n            let overlayArea = new Area(o.id, o.x, o.y, o.width, o.height);\r\n\r\n            overlayArea.darkness = o.darkness;\r\n            overlayArea.type = o.type;\r\n\r\n            if (o.fog)\r\n                overlayArea.fog = o.fog;\r\n\r\n            self.overlayAreas.push(overlayArea);\r\n        });\r\n\r\n        log.info('Loaded ' + self.overlayAreas.length + ' overlay areas.');\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = OverlayAreas;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/map/areas/overlayareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1064,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/overlayareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/overlayareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/overlayareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1065,
    "kind": "class",
    "name": "OverlayAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/overlayareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/overlayareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1066,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 1067,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/overlayareas.js~OverlayAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1068,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/areas/pvpareas.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Area = require('../area'),\r\n    map = require('../../../data/map/world_server');\r\n\r\nclass PVPAreas {\r\n\r\n    constructor() {\r\n        let self = this;\r\n\r\n        self.pvpAreas = [];\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this,\r\n            list = map.pvpAreas;\r\n\r\n        _.each(list, (p) => {\r\n            let pvpArea = new Area(p.id, p.x, p.y, p.width, p.height);\r\n\r\n            self.pvpAreas.push(pvpArea);\r\n        });\r\n\r\n        log.info('Loaded ' + self.pvpAreas.length + ' PVP areas.');\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = PVPAreas;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/map/areas/pvpareas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1069,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/areas/pvpareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/pvpareas.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/pvpareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1070,
    "kind": "class",
    "name": "PVPAreas",
    "memberof": "Kaetram-Open/server/js/map/areas/pvpareas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/areas/pvpareas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1071,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 1072,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/areas/pvpareas.js~PVPAreas#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1073,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/grids.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore');\r\n\r\nclass Grids {\r\n\r\n    constructor(map) {\r\n        let self = this;\r\n\r\n        self.map = map;\r\n\r\n        self.entityGrid = [];\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        for (let i = 0; i < self.map.height; i++) {\r\n            self.entityGrid[i] = [];\r\n\r\n            for (let j = 0; j < self.map.width; j++)\r\n                self.entityGrid[i][j] = {};\r\n        }\r\n    }\r\n\r\n    updateEntityPosition(entity) {\r\n        let self = this;\r\n\r\n        if (entity && entity.oldX === entity.x && entity.oldY === entity.y)\r\n            return;\r\n\r\n        self.removeFromEntityGrid(entity, entity.oldX, entity.oldY);\r\n        self.addToEntityGrid(entity, entity.x, entity.y);\r\n\r\n        entity.updatePosition();\r\n    }\r\n\r\n    addToEntityGrid(entity, x, y) {\r\n        let self = this;\r\n\r\n        if (entity && x > 0 && y > 0 && x < self.map.width && x < self.map.height && self.entityGrid[y][x])\r\n            self.entityGrid[y][x][entity.instance] = entity;\r\n    }\r\n\r\n    removeFromEntityGrid(entity, x, y) {\r\n        let self = this;\r\n\r\n        if (entity && x > 0 && y > 0 && x < self.map.width && y < self.map.height && self.entityGrid[y][x] && entity.instance in self.entityGrid[y][x])\r\n            delete self.entityGrid[y][x][entity.instance];\r\n    }\r\n\r\n    getSurroundingEntities(entity, radius, include) {\r\n        let self = this,\r\n            entities = [];\r\n\r\n        if (!self.checkBounds(entity.x, entity.y, radius))\r\n            return;\r\n\r\n        for (let i = -radius; i < radius + 1; i++) {\r\n\r\n            for (let j = -radius; j < radius + 1; j++) {\r\n                let pos = self.entityGrid[entity.y + i][entity.x + j];\r\n\r\n                if (_.size(pos) > 0) {\r\n                    _.each(pos,  (pEntity) => {\r\n\r\n                        if (!include && pEntity.instance !== entity.instance)\r\n                            entities.push(pEntity);\r\n                    });\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        return entities;\r\n    }\r\n\r\n    checkBounds(x, y, radius) {\r\n        return x + radius < this.map.width && x - radius > 0 && y + radius < this.map.height && y - radius > 0;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Grids;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/map/grids.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1074,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/grids.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/grids.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/grids.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1075,
    "kind": "class",
    "name": "Grids",
    "memberof": "Kaetram-Open/server/js/map/grids.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/grids.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1076,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 1077,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1078,
    "kind": "method",
    "name": "updateEntityPosition",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#updateEntityPosition",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1079,
    "kind": "method",
    "name": "addToEntityGrid",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#addToEntityGrid",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1080,
    "kind": "method",
    "name": "removeFromEntityGrid",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#removeFromEntityGrid",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1081,
    "kind": "method",
    "name": "getSurroundingEntities",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#getSurroundingEntities",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "include",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1082,
    "kind": "method",
    "name": "checkBounds",
    "memberof": "Kaetram-Open/server/js/map/grids.js~Grids",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/grids.js~Grids#checkBounds",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "radius",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1083,
    "kind": "file",
    "name": "Kaetram-Open/server/js/map/regions.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    map = require('../../data/map/world_server');\r\n\r\nclass Regions {\r\n\r\n    constructor(map) {\r\n        let self = this;\r\n\r\n        self.map = map;\r\n\r\n        self.width = self.map.width;\r\n        self.height = self.map.height;\r\n\r\n        self.zoneWidth = self.map.zoneWidth;\r\n        self.zoneHeight = self.map.zoneHeight;\r\n\r\n        self.regionWidth = self.map.regionWidth;\r\n        self.regionHeight = self.map.regionHeight;\r\n\r\n        self.linkedRegions = {};\r\n\r\n        self.loadDoors();\r\n    }\r\n\r\n    loadDoors() {\r\n        let self = this,\r\n            doors = map.doors;\r\n\r\n        _.each(doors, (door) => {\r\n            let regionId = self.regionIdFromPosition(door.x, door.y),\r\n                linkedRegionId = self.regionIdFromPosition(door.tx, door.ty),\r\n                linkedRegionPosition = self.regionIdToPosition(linkedRegionId);\r\n\r\n            if (regionId in self.linkedRegions)\r\n                self.linkedRegions[regionId].push(linkedRegionPosition);\r\n            else\r\n                self.linkedRegions[regionId] = [linkedRegionPosition];\r\n        });\r\n    }\r\n\r\n    // y y x y y\r\n    // y y x y y\r\n    // y x x x y\r\n    // y y x y x\r\n    // y y x y y\r\n\r\n    getAdjacentRegions(id, offset = 1) {\r\n        let self = this,\r\n            position = self.regionIdToPosition(id),\r\n            x = position.x, y = position.y;\r\n\r\n        let list = [];\r\n\r\n        for (let i = -offset; i <= offset; i++) // y\r\n            for (let j = -1; j <= 1; j++) // x\r\n                if (i > -2 || i < 2)\r\n                    list.push({ x: x + j, y: y + i });\r\n\r\n        _.each(self.linkedRegions[id], (regionPosition) => {\r\n\r\n            if (!_.any(list, (regionPosition) => {\r\n                return regionPosition.x === x && regionPosition.y === y;\r\n            })) list.push(regionPosition);\r\n\r\n        });\r\n\r\n        return _.reject(list, (regionPosition) => {\r\n            let gX = regionPosition.x,\r\n                gY = regionPosition.y;\r\n\r\n            return gX < 0 || gY < 0 || gX >= self.regionWidth || gY >= self.regionHeight;\r\n        });\r\n\r\n    }\r\n\r\n    forEachRegion(callback) {\r\n        let self = this;\r\n\r\n        for (let x = 0; x < self.regionWidth; x++)\r\n            for (let y = 0; y < self.regionHeight; y++)\r\n                callback(x + '-' + y)\r\n    }\r\n\r\n    forEachAdjacentRegion(regionId, callback, offset) {\r\n        let self = this;\r\n\r\n        if (!regionId)\r\n            return;\r\n\r\n        _.each(self.getAdjacentRegions(regionId, offset), (position) => {\r\n            callback(position.x + '-' + position.y);\r\n        });\r\n    }\r\n\r\n    regionIdFromPosition(x, y) {\r\n        return (Math.floor(x / this.zoneWidth) + '-' + (Math.floor(y / this.zoneHeight)));\r\n    }\r\n\r\n    regionIdToPosition(id) {\r\n        let position = id.split('-');\r\n\r\n        return {\r\n            x: parseInt(position[0], 10),\r\n            y: parseInt(position[1], 10)\r\n        }\r\n    }\r\n\r\n    regionIdToCoordinates(id) {\r\n        let self = this,\r\n            position = id.split('-');\r\n\r\n        return {\r\n            x: parseInt(position[0]) * self.zoneWidth,\r\n            y: parseInt(position[1]) * self.zoneHeight\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Regions;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/map/regions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1084,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/map/regions.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/regions.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/regions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1085,
    "kind": "class",
    "name": "Regions",
    "memberof": "Kaetram-Open/server/js/map/regions.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/map/regions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1086,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 1087,
    "kind": "method",
    "name": "loadDoors",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#loadDoors",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1088,
    "kind": "method",
    "name": "getAdjacentRegions",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#getAdjacentRegions",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1089,
    "kind": "method",
    "name": "forEachRegion",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#forEachRegion",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1090,
    "kind": "method",
    "name": "forEachAdjacentRegion",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#forEachAdjacentRegion",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1091,
    "kind": "method",
    "name": "regionIdFromPosition",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#regionIdFromPosition",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1092,
    "kind": "method",
    "name": "regionIdToPosition",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#regionIdToPosition",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 1093,
    "kind": "method",
    "name": "regionIdToCoordinates",
    "memberof": "Kaetram-Open/server/js/map/regions.js~Regions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/map/regions.js~Regions#regionIdToCoordinates",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 1094,
    "kind": "file",
    "name": "Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "content": "/* global module */\r\n\r\nlet Minigame = require('../minigame');\r\n\r\nclass DreamWorld extends Minigame {\r\n\r\n}\r\n\r\nmodule.exports = DreamWorld;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1095,
    "kind": "variable",
    "name": "Minigame",
    "memberof": "Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/minigames/impl/dreamworld.js~Minigame",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1096,
    "kind": "class",
    "name": "DreamWorld",
    "memberof": "Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/minigames/impl/dreamworld.js~DreamWorld",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/minigames/impl/dreamworld.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "Minigame"
    ],
    "ignore": true
  },
  {
    "__docId__": 1097,
    "kind": "file",
    "name": "Kaetram-Open/server/js/minigames/minigame.js",
    "content": "/* global module */\r\n\r\nclass Minigame {\r\n\r\n    constructor(id, name) {\r\n        let self = this;\r\n\r\n        self.id = id;\r\n        self.name = name;\r\n    }\r\n\r\n    getId() {\r\n        return this.id;\r\n    }\r\n\r\n    getName() {\r\n        return this.name;\r\n    }\r\n}\r\n\r\nmodule.exports = Minigame;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/minigames/minigame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1098,
    "kind": "class",
    "name": "Minigame",
    "memberof": "Kaetram-Open/server/js/minigames/minigame.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/minigames/minigame.js~Minigame",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/minigames/minigame.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1099,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/minigames/minigame.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/minigames/minigame.js~Minigame#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 1100,
    "kind": "method",
    "name": "getId",
    "memberof": "Kaetram-Open/server/js/minigames/minigame.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/minigames/minigame.js~Minigame#getId",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1101,
    "kind": "method",
    "name": "getName",
    "memberof": "Kaetram-Open/server/js/minigames/minigame.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/minigames/minigame.js~Minigame#getName",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1102,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/connection.js",
    "content": "/* global module */\r\n\r\nclass Connection {\r\n\r\n    constructor(id, connection, server) {\r\n        let self = this;\r\n\r\n        self.id = id;\r\n        self.socket = connection;\r\n        self._server = server;\r\n\r\n        self.socket.on('message', (message) => {\r\n            if (self.listenCallback)\r\n                self.listenCallback(JSON.parse(message));\r\n        });\r\n\r\n        self.socket.on('disconnect', () => {\r\n            log.info('Closed socket: ' + self.socket.conn.remoteAddress);\r\n\r\n            if (self.closeCallback)\r\n                self.closeCallback();\r\n\r\n            delete self._server.removeConnection(self.id);\r\n        });\r\n    }\r\n\r\n    listen(callback) {\r\n        this.listenCallback = callback;\r\n    }\r\n\r\n    onClose(callback) {\r\n        this.closeCallback = callback;\r\n    }\r\n\r\n    send(message) {\r\n        this.sendUTF8(JSON.stringify(message));\r\n    }\r\n\r\n    sendUTF8(data) {\r\n        this.socket.send(data);\r\n    }\r\n\r\n    close(reason) {\r\n        if (reason)\r\n            log.info('[Connection] Closing - ' + reason);\r\n\r\n        this.socket.conn.close();\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Connection;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/network/connection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1103,
    "kind": "class",
    "name": "Connection",
    "memberof": "Kaetram-Open/server/js/network/connection.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/connection.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1104,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 1105,
    "kind": "method",
    "name": "listen",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#listen",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1106,
    "kind": "member",
    "name": "listenCallback",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#listenCallback",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1107,
    "kind": "method",
    "name": "onClose",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#onClose",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1108,
    "kind": "member",
    "name": "closeCallback",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#closeCallback",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1109,
    "kind": "method",
    "name": "send",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#send",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1110,
    "kind": "method",
    "name": "sendUTF8",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#sendUTF8",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1111,
    "kind": "method",
    "name": "close",
    "memberof": "Kaetram-Open/server/js/network/connection.js~Connection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/connection.js~Connection#close",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "reason",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1112,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/messages.js",
    "content": "/* global module */\r\n\r\nlet Packets = require('./packets'),\r\n    Messages = {};\r\n\r\nMessages.Handshake = class {\r\n\r\n    constructor(info) {\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Handshake, this.info];\r\n    }\r\n};\r\n\r\nMessages.Welcome = class {\r\n\r\n    constructor(data) {\r\n        this.info = data; //array of info\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Welcome, this.info];\r\n    }\r\n};\r\n\r\nMessages.Spawn = class {\r\n\r\n    constructor(entity) {\r\n        this.entity = entity;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Spawn, this.entity.getState()];\r\n    }\r\n\r\n};\r\n\r\nMessages.List = class {\r\n\r\n    constructor(list) {\r\n        this.list = list;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.List, this.list];\r\n    }\r\n};\r\n\r\nMessages.Sync = class {\r\n\r\n    constructor(data) {\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Sync, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Equipment = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Equipment, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Movement = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Movement, this.opcode, this.info];\r\n    }\r\n};\r\n\r\nMessages.Teleport = class {\r\n\r\n    constructor(info) {\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Teleport, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Despawn = class {\r\n\r\n    constructor(id) {\r\n        this.id = id;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Despawn, this.id];\r\n    }\r\n\r\n};\r\n\r\nMessages.Animation = class {\r\n\r\n    constructor(id, data) {\r\n        this.id = id;\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Animation, this.id, this.info];\r\n    }\r\n\r\n};\r\n\r\n// TODO - Revise this when going over combat.\r\nMessages.Combat = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Combat, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Projectile = class {\r\n\r\n    constructor(opcode, data) {\r\n        this.opcode = opcode;\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Projectile, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Population = class {\r\n\r\n    constructor(playerCount) {\r\n        this.playerCount = playerCount\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Population, this.playerCount];\r\n    }\r\n\r\n};\r\n\r\nMessages.Points = class {\r\n\r\n    constructor(data) {\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Points, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Network = class {\r\n\r\n    constructor(opcode) {\r\n        this.opcode = opcode;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Network, this.opcode];\r\n    }\r\n};\r\n\r\nMessages.Chat = class {\r\n\r\n    constructor(data) {\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Chat, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Command = class {\r\n\r\n    constructor(data) {\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Command, this.info];\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Should we just have a packet that represents containers\r\n * as a whole or just send it separately for each?\r\n */\r\n\r\nMessages.Inventory = class {\r\n\r\n    constructor(opcode, data) {\r\n        this.opcode = opcode;\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Inventory, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Bank = class {\r\n\r\n    constructor(opcode, data) {\r\n        this.opcode = opcode;\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Bank, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Ability = class {\r\n\r\n    constructor(opcode, data) {\r\n        this.opcode = opcode;\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Ability, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Quest = class {\r\n\r\n    constructor(opcode, data) {\r\n        this.opcode = opcode;\r\n        this.info = data;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Quest, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Notification = class {\r\n\r\n    constructor(opcode, message) {\r\n        this.opcode = opcode;\r\n        this.message = message;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Notification, this.opcode, this.message];\r\n    }\r\n\r\n};\r\n\r\nMessages.Blink = class {\r\n\r\n    constructor(instance) {\r\n        this.instance = instance;\r\n    }\r\n\r\n    serialize () {\r\n        return [Packets.Blink, this.instance];\r\n    }\r\n\r\n};\r\n\r\nMessages.Heal = class {\r\n\r\n    constructor(info) {\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Heal, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Experience = class {\r\n\r\n    constructor(info) {\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Experience, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Death = class {\r\n\r\n    constructor(id) {\r\n        this.id = id;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Death, this.id];\r\n    }\r\n\r\n};\r\n\r\nMessages.Audio = class {\r\n\r\n    constructor(song) {\r\n        this.song = song;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Audio, this.song];\r\n    }\r\n\r\n};\r\n\r\nMessages.NPC = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.NPC, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Respawn = class {\r\n\r\n    constructor(instance, x, y) {\r\n        this.instance = instance;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Respawn, this.instance, this.x, this.y];\r\n    }\r\n\r\n};\r\n\r\nMessages.Enchant = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Enchant, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Guild = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Guild, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Pointer = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Pointer, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.PVP = class {\r\n\r\n    constructor(id, pvp) {\r\n        this.id = id;\r\n        this.pvp = pvp;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.PVP, this.id, this.pvp];\r\n    }\r\n\r\n};\r\n\r\nMessages.Shop = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Shop, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Minigame = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Shop, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Region = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Region, this.opcode, this.info];\r\n    }\r\n};\r\n\r\nMessages.Overlay = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Overlay, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nMessages.Camera = class {\r\n\r\n    constructor(opcode, info) {\r\n        this.opcode = opcode;\r\n        this.info = info;\r\n    }\r\n\r\n    serialize() {\r\n        return [Packets.Camera, this.opcode, this.info];\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Messages;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/network/messages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1113,
    "kind": "variable",
    "name": "Packets",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Packets",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1114,
    "kind": "class",
    "name": "Handshake",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Handshake",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Handshake",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Handshake#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 1116,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Handshake",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Handshake#info",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1117,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Handshake",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Handshake#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1118,
    "kind": "class",
    "name": "Welcome",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Welcome",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1119,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Welcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Welcome#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 1120,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Welcome",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Welcome#info",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1121,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Welcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Welcome#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1122,
    "kind": "class",
    "name": "Spawn",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Spawn",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1123,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Spawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Spawn#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 1124,
    "kind": "member",
    "name": "entity",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Spawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Spawn#entity",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1125,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Spawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Spawn#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1126,
    "kind": "class",
    "name": "List",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~List",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~List#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 1128,
    "kind": "member",
    "name": "list",
    "memberof": "Kaetram-Open/server/js/network/messages.js~List",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~List#list",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1129,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~List#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1130,
    "kind": "class",
    "name": "Sync",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Sync",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1131,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Sync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Sync#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 1132,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Sync",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Sync#info",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1133,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Sync",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Sync#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1134,
    "kind": "class",
    "name": "Equipment",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1135,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true
  },
  {
    "__docId__": 1136,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1137,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment#info",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1138,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Equipment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Equipment#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1139,
    "kind": "class",
    "name": "Movement",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1140,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Movement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true
  },
  {
    "__docId__": 1141,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Movement",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1142,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Movement",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement#info",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1143,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Movement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Movement#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1144,
    "kind": "class",
    "name": "Teleport",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Teleport",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Teleport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Teleport#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true
  },
  {
    "__docId__": 1146,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Teleport",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Teleport#info",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1147,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Teleport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Teleport#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1148,
    "kind": "class",
    "name": "Despawn",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Despawn",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1149,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Despawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Despawn#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true
  },
  {
    "__docId__": 1150,
    "kind": "member",
    "name": "id",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Despawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Despawn#id",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1151,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Despawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Despawn#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1152,
    "kind": "class",
    "name": "Animation",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1153,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true
  },
  {
    "__docId__": 1154,
    "kind": "member",
    "name": "id",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Animation",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation#id",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1155,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Animation",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation#info",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1156,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Animation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Animation#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1157,
    "kind": "class",
    "name": "Combat",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true
  },
  {
    "__docId__": 1159,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Combat",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1160,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Combat",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat#info",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1161,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Combat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Combat#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1162,
    "kind": "class",
    "name": "Projectile",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1163,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true
  },
  {
    "__docId__": 1164,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1165,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile#info",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1166,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Projectile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Projectile#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1167,
    "kind": "class",
    "name": "Population",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Population",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Population",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Population#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true
  },
  {
    "__docId__": 1169,
    "kind": "member",
    "name": "playerCount",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Population",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Population#playerCount",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1170,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Population",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Population#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1171,
    "kind": "class",
    "name": "Points",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Points",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1172,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Points#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true
  },
  {
    "__docId__": 1173,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Points",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Points#info",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1174,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Points",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Points#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1175,
    "kind": "class",
    "name": "Network",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Network",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Network#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true
  },
  {
    "__docId__": 1177,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Network",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Network#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1178,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Network#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1179,
    "kind": "class",
    "name": "Chat",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Chat",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1180,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Chat#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true
  },
  {
    "__docId__": 1181,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Chat",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Chat#info",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1182,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Chat#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1183,
    "kind": "class",
    "name": "Command",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Command",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Command#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true
  },
  {
    "__docId__": 1185,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Command",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Command#info",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1186,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Command",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Command#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1187,
    "kind": "class",
    "name": "Inventory",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": "Should we just have a packet that represents containers\nas a whole or just send it separately for each?",
    "lineNumber": 216,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1188,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true
  },
  {
    "__docId__": 1189,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1190,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory#info",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1191,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Inventory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Inventory#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1192,
    "kind": "class",
    "name": "Bank",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1193,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true
  },
  {
    "__docId__": 1194,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Bank",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1195,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Bank",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank#info",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1196,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Bank",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Bank#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1197,
    "kind": "class",
    "name": "Ability",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Ability",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true
  },
  {
    "__docId__": 1199,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Ability",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1200,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Ability",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability#info",
    "access": "public",
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1201,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Ability",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Ability#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1202,
    "kind": "class",
    "name": "Quest",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1203,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true
  },
  {
    "__docId__": 1204,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Quest",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1205,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Quest",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest#info",
    "access": "public",
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1206,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Quest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Quest#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1207,
    "kind": "class",
    "name": "Notification",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1208,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Notification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 270,
    "undocument": true
  },
  {
    "__docId__": 1209,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Notification",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1210,
    "kind": "member",
    "name": "message",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Notification",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification#message",
    "access": "public",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1211,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Notification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Notification#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1212,
    "kind": "class",
    "name": "Blink",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Blink",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1213,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Blink",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Blink#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true
  },
  {
    "__docId__": 1214,
    "kind": "member",
    "name": "instance",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Blink",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Blink#instance",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1215,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Blink",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Blink#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1216,
    "kind": "class",
    "name": "Heal",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Heal",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Heal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Heal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 295,
    "undocument": true
  },
  {
    "__docId__": 1218,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Heal",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Heal#info",
    "access": "public",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1219,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Heal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Heal#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1220,
    "kind": "class",
    "name": "Experience",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Experience",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1221,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Experience",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Experience#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true
  },
  {
    "__docId__": 1222,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Experience",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Experience#info",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1223,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Experience",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Experience#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1224,
    "kind": "class",
    "name": "Death",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Death",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1225,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Death",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Death#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 319,
    "undocument": true
  },
  {
    "__docId__": 1226,
    "kind": "member",
    "name": "id",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Death",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Death#id",
    "access": "public",
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1227,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Death",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Death#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 323,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1228,
    "kind": "class",
    "name": "Audio",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Audio",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1229,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Audio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Audio#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 331,
    "undocument": true
  },
  {
    "__docId__": 1230,
    "kind": "member",
    "name": "song",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Audio",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Audio#song",
    "access": "public",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1231,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Audio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Audio#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 335,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1232,
    "kind": "class",
    "name": "NPC",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1233,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~NPC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 343,
    "undocument": true
  },
  {
    "__docId__": 1234,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~NPC",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1235,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~NPC",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC#info",
    "access": "public",
    "description": null,
    "lineNumber": 345,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1236,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~NPC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~NPC#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1237,
    "kind": "class",
    "name": "Respawn",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1238,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 356,
    "undocument": true
  },
  {
    "__docId__": 1239,
    "kind": "member",
    "name": "instance",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#instance",
    "access": "public",
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1240,
    "kind": "member",
    "name": "x",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#x",
    "access": "public",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1241,
    "kind": "member",
    "name": "y",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#y",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1242,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Respawn",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Respawn#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1243,
    "kind": "class",
    "name": "Enchant",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1244,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 370,
    "undocument": true
  },
  {
    "__docId__": 1245,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1246,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant#info",
    "access": "public",
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1247,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Enchant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Enchant#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1248,
    "kind": "class",
    "name": "Guild",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1249,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 383,
    "undocument": true
  },
  {
    "__docId__": 1250,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Guild",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1251,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Guild",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild#info",
    "access": "public",
    "description": null,
    "lineNumber": 385,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1252,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Guild",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Guild#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 388,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1253,
    "kind": "class",
    "name": "Pointer",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 396,
    "undocument": true
  },
  {
    "__docId__": 1255,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 397,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1256,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer#info",
    "access": "public",
    "description": null,
    "lineNumber": 398,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1257,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Pointer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Pointer#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 401,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1258,
    "kind": "class",
    "name": "PVP",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 407,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1259,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~PVP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 409,
    "undocument": true
  },
  {
    "__docId__": 1260,
    "kind": "member",
    "name": "id",
    "memberof": "Kaetram-Open/server/js/network/messages.js~PVP",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP#id",
    "access": "public",
    "description": null,
    "lineNumber": 410,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1261,
    "kind": "member",
    "name": "pvp",
    "memberof": "Kaetram-Open/server/js/network/messages.js~PVP",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP#pvp",
    "access": "public",
    "description": null,
    "lineNumber": 411,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1262,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~PVP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~PVP#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 414,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1263,
    "kind": "class",
    "name": "Shop",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 420,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1264,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Shop",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 422,
    "undocument": true
  },
  {
    "__docId__": 1265,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Shop",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1266,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Shop",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop#info",
    "access": "public",
    "description": null,
    "lineNumber": 424,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1267,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Shop",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Shop#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1268,
    "kind": "class",
    "name": "Minigame",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 433,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1269,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 435,
    "undocument": true
  },
  {
    "__docId__": 1270,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 436,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1271,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame#info",
    "access": "public",
    "description": null,
    "lineNumber": 437,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1272,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Minigame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Minigame#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 440,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1273,
    "kind": "class",
    "name": "Region",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 446,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1274,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 448,
    "undocument": true
  },
  {
    "__docId__": 1275,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 449,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1276,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region#info",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1277,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Region#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1278,
    "kind": "class",
    "name": "Overlay",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 458,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1279,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 460,
    "undocument": true
  },
  {
    "__docId__": 1280,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 461,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1281,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay#info",
    "access": "public",
    "description": null,
    "lineNumber": 462,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1282,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Overlay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Overlay#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 465,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1283,
    "kind": "class",
    "name": "Camera",
    "memberof": "Kaetram-Open/server/js/network/messages.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/messages.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 471,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1284,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 473,
    "undocument": true
  },
  {
    "__docId__": 1285,
    "kind": "member",
    "name": "opcode",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Camera",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera#opcode",
    "access": "public",
    "description": null,
    "lineNumber": 474,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1286,
    "kind": "member",
    "name": "info",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Camera",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera#info",
    "access": "public",
    "description": null,
    "lineNumber": 475,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1287,
    "kind": "method",
    "name": "serialize",
    "memberof": "Kaetram-Open/server/js/network/messages.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/messages.js~Camera#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 478,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1288,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/network.js",
    "content": "let World = require('../game/world'),\r\n    Messages = require('./messages'),\r\n    Packets = require('./packets'),\r\n    Player = require('../game/entity/character/player/player'),\r\n    Utils = require('../util/utils'),\r\n    config = require('../../config'),\r\n    _ = require('underscore');\r\n\r\nclass Network {\r\n\r\n    constructor(world) {\r\n        let self = this;\r\n\r\n        self.world = world;\r\n        self.database = world.database;\r\n        self.socket = world.socket;\r\n        self.region = world.region;\r\n        self.map = world.map;\r\n\r\n        self.packets = {};\r\n\r\n        self.differenceThreshold = 4000;\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        self.world.onPlayerConnection((connection) => {\r\n            self.handlePlayerConnection(connection);\r\n        });\r\n\r\n        self.world.onPopulationChange(() => {\r\n            self.handlePopulationChange();\r\n        });\r\n    }\r\n\r\n    parsePackets() {\r\n        let self = this;\r\n\r\n        /**\r\n         * This parses through the packet pool and sends them\r\n         */\r\n\r\n        for (let id in self.packets) {\r\n            if (self.packets[id].length > 0 && self.packets.hasOwnProperty(id)) {\r\n                let conn = self.socket.getConnection(id);\r\n\r\n                if (conn) {\r\n                    conn.send(self.packets[id]);\r\n                    self.packets[id] = [];\r\n                    self.packets[id].id = id;\r\n                } else\r\n                    delete self.socket.getConnection(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    handlePlayerConnection(connection) {\r\n        let self = this,\r\n            clientId = Utils.generateClientId(),\r\n            player = new Player(self.world, self.database, connection, clientId),\r\n            timeDifference = new Date().getTime() - self.getSocketTime(connection);\r\n\r\n        if (!config.debug && timeDifference - self.differenceThreshold < 5000) {\r\n            connection.sendUTF8('toofast');\r\n            connection.close('Logging in too fast.');\r\n\r\n            return;\r\n        }\r\n\r\n        self.socket.ips[connection.socket.conn.remoteAddress] = new Date().getTime();\r\n\r\n        self.addToPackets(player);\r\n\r\n        self.pushToPlayer(player, new Messages.Handshake({\r\n            id: clientId,\r\n            development: config.devClient\r\n        }));\r\n    }\r\n\r\n    handlePopulationChange() {\r\n        this.pushBroadcast(new Messages.Population(this.world.getPopulation()));\r\n    }\r\n\r\n    addToPackets(player) {\r\n        this.packets[player.instance] = [];\r\n    }\r\n\r\n    /*****************************************\r\n     * Broadcasting and Socket Communication *\r\n     *****************************************/\r\n\r\n    /**\r\n     * Broadcast a message to everyone in the world.\r\n     */\r\n\r\n    pushBroadcast(message) {\r\n        let self = this;\r\n\r\n        _.each(self.packets, (packet) => {\r\n            packet.push(message.serialize());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Broadcast a message to everyone with exceptions.\r\n     */\r\n\r\n    pushSelectively(message, ignores) {\r\n        let self = this;\r\n\r\n        _.each(self.packets, (packet) => {\r\n            if (ignores.indexOf(packet.id) < 0)\r\n                packet.push(message.serialize());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Push a message to a single player.\r\n     */\r\n\r\n    pushToPlayer(player, message) {\r\n        if (player && player.instance in this.packets)\r\n            this.packets[player.instance].push(message.serialize());\r\n    }\r\n\r\n    /**\r\n     * Specify an array of player instances to send message to\r\n     */\r\n\r\n    pushToPlayers(players, message) {\r\n        let self = this;\r\n\r\n        _.each(players, (playerInstance) => {\r\n            self.pushToPlayer(self.world.getPlayerByInstance(playerInstance), message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send a message to the region the player is currently in.\r\n     */\r\n\r\n    pushToRegion(regionId, message, ignoreId) {\r\n        let self = this,\r\n            region = self.region.regions[regionId];\r\n\r\n        if (!region) return;\r\n\r\n        _.each(region.players, (playerInstance) => {\r\n            if (playerInstance !== ignoreId)\r\n                self.pushToPlayer(self.world.getEntityByInstance(playerInstance), message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to all the surrounding regions of the player.\r\n     * G  G  G\r\n     * G  P  G\r\n     * G  G  G\r\n     */\r\n\r\n    pushToAdjacentRegions(regionId, message, ignoreId) {\r\n        let self = this;\r\n\r\n        self.map.regions.forEachAdjacentRegion(regionId, (id) => {\r\n            self.pushToRegion(id, message, ignoreId);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to an array of player names\r\n     */\r\n\r\n    pushToNameArray(names, message) {\r\n        let self = this;\r\n\r\n        _.each(names, (name) => {\r\n            let player = self.world.getPlayerByName(name);\r\n\r\n            if (player)\r\n                self.pushToPlayer(player, message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the region the player just left from\r\n     */\r\n\r\n    pushToOldRegions(player, message) {\r\n        let self = this;\r\n\r\n        _.each(player.recentRegions, (id) => {\r\n            self.pushToRegion(id, message);\r\n        });\r\n\r\n        player.recentRegions = [];\r\n    }\r\n\r\n    getSocketTime(connection) {\r\n        return this.socket.ips[connection.socket.conn.remoteAddress];\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Network;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/network/network.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1289,
    "kind": "variable",
    "name": "World",
    "memberof": "Kaetram-Open/server/js/network/network.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/network.js~World",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/network.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1290,
    "kind": "class",
    "name": "Network",
    "memberof": "Kaetram-Open/server/js/network/network.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/network.js~Network",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/network.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1291,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 1292,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#load",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1293,
    "kind": "method",
    "name": "parsePackets",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#parsePackets",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1294,
    "kind": "method",
    "name": "handlePlayerConnection",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#handlePlayerConnection",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1295,
    "kind": "method",
    "name": "handlePopulationChange",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#handlePopulationChange",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1296,
    "kind": "method",
    "name": "addToPackets",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#addToPackets",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1297,
    "kind": "method",
    "name": "pushBroadcast",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushBroadcast",
    "access": "public",
    "description": "Broadcast a message to everyone in the world.",
    "lineNumber": 99,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1298,
    "kind": "method",
    "name": "pushSelectively",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushSelectively",
    "access": "public",
    "description": "Broadcast a message to everyone with exceptions.",
    "lineNumber": 111,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignores",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1299,
    "kind": "method",
    "name": "pushToPlayer",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToPlayer",
    "access": "public",
    "description": "Push a message to a single player.",
    "lineNumber": 124,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1300,
    "kind": "method",
    "name": "pushToPlayers",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToPlayers",
    "access": "public",
    "description": "Specify an array of player instances to send message to",
    "lineNumber": 133,
    "params": [
      {
        "name": "players",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1301,
    "kind": "method",
    "name": "pushToRegion",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToRegion",
    "access": "public",
    "description": "Send a message to the region the player is currently in.",
    "lineNumber": 145,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoreId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1302,
    "kind": "method",
    "name": "pushToAdjacentRegions",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToAdjacentRegions",
    "access": "public",
    "description": "Sends a message to all the surrounding regions of the player.\nG  G  G\nG  P  G\nG  G  G",
    "lineNumber": 164,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoreId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1303,
    "kind": "method",
    "name": "pushToNameArray",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToNameArray",
    "access": "public",
    "description": "Sends a message to an array of player names",
    "lineNumber": 176,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1304,
    "kind": "method",
    "name": "pushToOldRegions",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#pushToOldRegions",
    "access": "public",
    "description": "Sends a message to the region the player just left from",
    "lineNumber": 191,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1305,
    "kind": "method",
    "name": "getSocketTime",
    "memberof": "Kaetram-Open/server/js/network/network.js~Network",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/network.js~Network#getSocketTime",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1306,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/packets.js",
    "content": "/* global module */\r\n\r\nlet Packets = {\r\n    Handshake: 0,\r\n    Intro: 1,\r\n    Welcome: 2,\r\n    Spawn: 3,\r\n    List: 4,\r\n    Who: 5,\r\n    Equipment: 6,\r\n    Ready: 7,\r\n    Sync: 8,\r\n    Movement: 9,\r\n    Teleport: 10,\r\n    Request: 11,\r\n    Despawn: 12,\r\n    Target: 13,\r\n    Combat: 14,\r\n    Animation: 15,\r\n    Projectile: 16,\r\n    Population: 17,\r\n    Points: 18,\r\n    Network: 19,\r\n    Chat: 20,\r\n    Command: 21,\r\n    Inventory: 22,\r\n    Bank: 23,\r\n    Ability: 24,\r\n    Quest: 25,\r\n    Notification: 26,\r\n    Blink: 27,\r\n    Heal: 28,\r\n    Experience: 29,\r\n    Death: 30,\r\n    Audio: 31,\r\n    NPC: 32,\r\n    Respawn: 33,\r\n    Trade: 34,\r\n    Enchant: 35,\r\n    Guild: 36,\r\n    Pointer: 37,\r\n    PVP: 38,\r\n    Click: 39,\r\n    Warp: 40,\r\n    Shop: 41,\r\n    Minigame: 42,\r\n    Region: 43,\r\n    Overlay: 44,\r\n    Camera: 45\r\n};\r\n\r\nPackets.IntroOpcode = {\r\n    Login: 0,\r\n    Register: 1,\r\n    Guest: 2\r\n};\r\n\r\nPackets.EquipmentOpcode = {\r\n    Batch: 0,\r\n    Equip: 1,\r\n    Unequip: 2\r\n};\r\n\r\nPackets.MovementOpcode = {\r\n    Request: 0,\r\n    Started: 1,\r\n    Step: 2,\r\n    Stop: 3,\r\n    Move: 4,\r\n    Orientate: 5,\r\n    Follow: 6,\r\n    Entity: 7,\r\n    Freeze: 8,\r\n    Stunned: 9\r\n};\r\n\r\nPackets.TargetOpcode = {\r\n    Talk: 0,\r\n    Attack: 1,\r\n    None: 2\r\n};\r\n\r\nPackets.CombatOpcode = {\r\n    Initiate: 0,\r\n    Hit: 1,\r\n    Finish: 2,\r\n    Sync: 3\r\n};\r\n\r\nPackets.ProjectileOpcode = {\r\n    Static: 0,\r\n    Dynamic: 1,\r\n    Create: 2,\r\n    Update: 3,\r\n    Impact: 4\r\n};\r\n\r\nPackets.NetworkOpcode = {\r\n    Ping: 0,\r\n    Pong: 1\r\n};\r\n\r\nPackets.InventoryOpcode = {\r\n    Batch: 0,\r\n    Add: 1,\r\n    Remove: 2,\r\n    Select: 3\r\n};\r\n\r\nPackets.BankOpcode = {\r\n    Batch: 0,\r\n    Add: 1,\r\n    Remove: 2,\r\n    Select: 3\r\n};\r\n\r\nPackets.QuestOpcode = {\r\n    QuestBatch: 0,\r\n    AchievementBatch: 1,\r\n    Progress: 2,\r\n    Finish: 3\r\n};\r\n\r\nPackets.NotificationOpcode = {\r\n    Ok: 0,\r\n    YesNo: 1,\r\n    Text: 2\r\n};\r\n\r\nPackets.NPCOpcode = {\r\n    Talk: 0,\r\n    Store: 1,\r\n    Bank: 2,\r\n    Enchant: 3,\r\n    Countdown: 4\r\n};\r\n\r\nPackets.TradeOpcode = {\r\n    Request: 1,\r\n    Accept: 2,\r\n    Decline: 3\r\n};\r\n\r\nPackets.EnchantOpcode = {\r\n    Select: 0,\r\n    Remove: 1,\r\n    Enchant: 2,\r\n    Update: 3\r\n};\r\n\r\nPackets.GuildOpcode = {\r\n    Create: 0,\r\n    Join: 1,\r\n    Leave: 2,\r\n    Rank: 3,\r\n    Loot: 4,\r\n    Update: 5\r\n};\r\n\r\nPackets.PointerOpcode = {\r\n    Location: 0,\r\n    NPC: 1,\r\n    Relative: 2,\r\n    Remove: 3,\r\n    Button: 4\r\n};\r\n\r\nPackets.ShopOpcode = {\r\n    Open: 0,\r\n    Buy: 1,\r\n    Sell: 2,\r\n    Refresh: 3\r\n};\r\n\r\nPackets.MinigameOpcode = {\r\n    TeamWar: 1,\r\n\r\n    TeamWarOpcode: {\r\n        Enter: 0,\r\n        Team: 1,\r\n        Red: 2,\r\n        Blue: 3,\r\n        Leave: 4\r\n    }\r\n};\r\n\r\nPackets.RegionOpcode = {\r\n    Render: 0,\r\n    Modify: 1,\r\n    Collision: 2,\r\n    Update: 3,\r\n    Reset: 4\r\n};\r\n\r\nPackets.OverlayOpcode = {\r\n    Set: 0,\r\n    Remove: 1,\r\n    Lamp: 2,\r\n    RemoveLamps: 3,\r\n    Darkness: 4\r\n};\r\n\r\nPackets.CameraOpcode = {\r\n    LockX: 0,\r\n    LockY: 1,\r\n    FreeFlow: 2,\r\n    Player: 3\r\n};\r\n\r\nPackets.PushOpcode = {\r\n    Broadcast: 0,\r\n    Selectively: 1,\r\n    Player: 2,\r\n    Players: 3,\r\n    Region: 4,\r\n    Regions: 5,\r\n    NameArray: 6,\r\n    OldRegions: 7\r\n};\r\n\r\nmodule.exports = Packets;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/network/packets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1307,
    "kind": "variable",
    "name": "Packets",
    "memberof": "Kaetram-Open/server/js/network/packets.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/packets.js~Packets",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/packets.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"Handshake\": *, \"Intro\": number, \"Welcome\": number, \"Spawn\": number, \"List\": number, \"Who\": number, \"Equipment\": number, \"Ready\": number, \"Sync\": number, \"Movement\": number, \"Teleport\": number, \"Request\": number, \"Despawn\": number, \"Target\": number, \"Combat\": number, \"Animation\": number, \"Projectile\": number, \"Population\": number, \"Points\": number, \"Network\": number, \"Chat\": number, \"Command\": number, \"Inventory\": number, \"Bank\": number, \"Ability\": number, \"Quest\": number, \"Notification\": number, \"Blink\": number, \"Heal\": number, \"Experience\": number, \"Death\": number, \"Audio\": number, \"NPC\": number, \"Respawn\": number, \"Trade\": number, \"Enchant\": number, \"Guild\": number, \"Pointer\": number, \"PVP\": number, \"Click\": number, \"Warp\": number, \"Shop\": number, \"Minigame\": number, \"Region\": number, \"Overlay\": number, \"Camera\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1308,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/socket.js",
    "content": "/* global module */\r\n\r\nclass Socket {\r\n    constructor(port) {\r\n        let self = this;\r\n\r\n        self.port = port;\r\n\r\n        self._connections = {};\r\n        self._counter = 0;\r\n    }\r\n\r\n    addConnection(connection) {\r\n        this._connections[connection.id] = connection;\r\n    }\r\n\r\n    removeConnection(id) {\r\n        delete this._connections[id];\r\n    }\r\n\r\n    getConnection(id) {\r\n        return this._connections[id];\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Socket;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/network/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1309,
    "kind": "class",
    "name": "Socket",
    "memberof": "Kaetram-Open/server/js/network/socket.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1310,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 1311,
    "kind": "method",
    "name": "addConnection",
    "memberof": "Kaetram-Open/server/js/network/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket#addConnection",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1312,
    "kind": "method",
    "name": "removeConnection",
    "memberof": "Kaetram-Open/server/js/network/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket#removeConnection",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1313,
    "kind": "method",
    "name": "getConnection",
    "memberof": "Kaetram-Open/server/js/network/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/socket.js~Socket#getConnection",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1314,
    "kind": "file",
    "name": "Kaetram-Open/server/js/network/websocket.js",
    "content": "/* global module */\r\n\r\nlet Socket = require('./socket'),\r\n    Connection = require('./connection'),\r\n    connect = require('connect'),\r\n    serve = require('serve-static'),\r\n    request = require('request'),\r\n    SocketIO = require('socket.io'),\r\n    http = require('http'),\r\n    https = require('https'),\r\n    Utils = require('../util/utils'),\r\n    config = require('../../config');\r\n\r\nclass WebSocket extends Socket {\r\n\r\n    constructor(host, port, version) {\r\n        super(port);\r\n\r\n        let self = this;\r\n\r\n        self.host = host;\r\n        self.version = version;\r\n\r\n        self.ips = {};\r\n\r\n        let app = connect();\r\n        app.use(serve('client', {'index': ['index.html']}), null);\r\n\r\n        let readyWebSocket = function(port) {\r\n            log.info('Server is now listening on: ' + port);\r\n\r\n            if (self.webSocketReadyCallback)\r\n                self.webSocketReadyCallback();\r\n        };\r\n\r\n        if (config.ssl)\r\n            self.httpServer = https.createServer(app).listen(port, host, () => {\r\n                readyWebSocket(port);\r\n            });\r\n        else\r\n            self.httpServer = http.createServer(app).listen(port, host, () => {\r\n                readyWebSocket(port);\r\n            });\r\n\r\n        self.io = new SocketIO(self.httpServer);\r\n        self.io.on('connection', (socket) => {\r\n            if (socket.handshake.headers['cf-connecting-ip'])\r\n                socket.conn.remoteAddress = socket.handshake.headers['cf-connecting-ip'];\r\n\r\n            log.info('Received connection from: ' + socket.conn.remoteAddress);\r\n\r\n            let client = new Connection(self.createId(), socket, self);\r\n\r\n            socket.on('client', (data) => {\r\n                if (data.gVer !== self.version) {\r\n                    client.sendUTF8('updated');\r\n                    client.close('Wrong client version - expected ' + self.version + ' received ' + data.gVer);\r\n                }\r\n\r\n                if (self.connectionCallback)\r\n                    self.connectionCallback(client);\r\n\r\n                self.addConnection(client);\r\n            });\r\n        });\r\n    }\r\n\r\n    createId() {\r\n        return '1' + Utils.random(9999) + '' + this._counter++;\r\n    }\r\n\r\n    onConnect(callback) {\r\n        this.connectionCallback = callback;\r\n    }\r\n\r\n    onWebSocketReady(callback) {\r\n        this.webSocketReadyCallback = callback;\r\n    }\r\n}\r\n\r\nmodule.exports = WebSocket;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/network/websocket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1315,
    "kind": "variable",
    "name": "Socket",
    "memberof": "Kaetram-Open/server/js/network/websocket.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/websocket.js~Socket",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/websocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1316,
    "kind": "class",
    "name": "WebSocket",
    "memberof": "Kaetram-Open/server/js/network/websocket.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/network/websocket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "Socket"
    ],
    "ignore": true
  },
  {
    "__docId__": 1317,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 1318,
    "kind": "method",
    "name": "createId",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#createId",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1319,
    "kind": "method",
    "name": "onConnect",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#onConnect",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1320,
    "kind": "member",
    "name": "connectionCallback",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#connectionCallback",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1321,
    "kind": "method",
    "name": "onWebSocketReady",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#onWebSocketReady",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1322,
    "kind": "member",
    "name": "webSocketReadyCallback",
    "memberof": "Kaetram-Open/server/js/network/websocket.js~WebSocket",
    "static": false,
    "longname": "Kaetram-Open/server/js/network/websocket.js~WebSocket#webSocketReadyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1323,
    "kind": "file",
    "name": "Kaetram-Open/server/js/region/region.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    Messages = require('../network/messages'),\r\n    Packets = require('../network/packets'),\r\n    Player = require('../game/entity/character/player/player'),\r\n    fs = require('fs'),\r\n    ClientMap = require('../../data/map/world_client.json'),\r\n    config = require('../../config'),\r\n    map = 'server/data/map/world_client.json';\r\n\r\nclass Region {\r\n\r\n    /**\r\n     * Region Generation.\r\n     * This is used in order to send the client data about the new region\r\n     * it is about to enter. This has to be greatly expanded to generated\r\n     * instanced areas where other entities will not be pushed to surrounding\r\n     * players, even if they share the same coordinates.\r\n     */\r\n\r\n    constructor(world) {\r\n        let self = this;\r\n\r\n        self.map = world.map;\r\n        self.mapRegions = world.map.regions;\r\n\r\n        self.world = world;\r\n\r\n        self.regions = {};\r\n        self.loaded = false;\r\n\r\n        self.onAdd((entity, regionId) => {\r\n            if (!entity || !entity.username)\r\n                return;\r\n\r\n            if (config.debug)\r\n                log.info('Entity - ' + entity.username + ' has entered region - ' + regionId);\r\n\r\n            if (entity instanceof Player)\r\n                self.sendRegion(entity, regionId);\r\n\r\n        });\r\n\r\n        self.onRemove((entity, oldRegions) => {\r\n            if (!oldRegions || oldRegions.length < 1 || !entity || !entity.username)\r\n                return;\r\n        });\r\n\r\n        self.onIncoming((entity, regionId) => {\r\n            if (!entity || !entity.username)\r\n                return;\r\n\r\n            if (config.debug)\r\n                log.info('Entity - ' + entity.username + ' is incoming into region - ' + regionId);\r\n\r\n        });\r\n\r\n        fs.watchFile(map, () => {\r\n            log.info('Received Map Update -> Sending to Players...');\r\n\r\n            fs.readFile(map, 'utf8', (error, data) => {\r\n                if (error) throw error;\r\n\r\n                ClientMap = JSON.parse(data);\r\n\r\n                self.updateRegions();\r\n            });\r\n\r\n        });\r\n\r\n        self.load();\r\n    }\r\n\r\n    load() {\r\n        let self = this;\r\n\r\n        self.clientWidth = ClientMap.width;\r\n        self.clientHeight = ClientMap.height;\r\n\r\n        self.mapRegions.forEachRegion((regionId) => {\r\n            self.regions[regionId] = {\r\n                entities: {},\r\n                players: [],\r\n                incoming: []\r\n            };\r\n        });\r\n\r\n        self.loaded = true;\r\n\r\n        log.info('Finished loading regions!');\r\n    }\r\n\r\n    addEntityToInstance(entity, player) {\r\n        let self = this;\r\n\r\n        if (!entity)\r\n            return;\r\n\r\n        self.add(entity, player.region);\r\n\r\n        player.updateRegion();\r\n    }\r\n\r\n    createInstance(player, regionId) {\r\n        let self = this;\r\n\r\n        /**\r\n         * We create an instance at the player's current surrounding\r\n         * region IDs. These will have to be disposed of whenever we're done.\r\n         */\r\n\r\n        player.instanced = true;\r\n\r\n        self.mapRegions.forEachAdjacentRegion(regionId, (region) => {\r\n            self.regions[Region.regionIdToInstance(player, region)] = {\r\n                entities: {},\r\n                players: [],\r\n                incoming: []\r\n            };\r\n        });\r\n\r\n        self.handle(player, true);\r\n        self.push(player);\r\n\r\n        self.world.push(Packets.PushOpcode.OldRegions, {\r\n            player: player,\r\n            message: new Messages.Region(Packets.RegionOpcode.Update, {\r\n                id: player.instance,\r\n                type: \"remove\"\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    deleteInstance(player) {\r\n        let self = this;\r\n\r\n        player.instanced = false;\r\n\r\n        self.handle(player);\r\n        self.push(player);\r\n\r\n        self.mapRegions.forEachAdjacentRegion(player.region, (regionId) => {\r\n            let instancedRegion = Region.regionIdToInstance(player, regionId);\r\n\r\n            if (instancedRegion in self.regions)\r\n                delete self.regions[instancedRegion];\r\n        });\r\n    }\r\n\r\n    parseRegions() {\r\n        let self = this;\r\n\r\n        if (!self.loaded)\r\n            return;\r\n\r\n        self.mapRegions.forEachRegion((regionId) => {\r\n\r\n            if (self.regions[regionId].incoming.length < 1)\r\n                return;\r\n\r\n            self.sendSpawns(regionId);\r\n\r\n            self.regions[regionId].incoming = [];\r\n        });\r\n    }\r\n\r\n    updateRegions() {\r\n        let self = this;\r\n\r\n        self.world.forEachPlayer((player) => {\r\n            player.regionsLoaded = [];\r\n\r\n            self.sendRegion(player, player.region, true);\r\n        });\r\n    }\r\n\r\n    sendRegion(player, region, force) {\r\n        let self = this,\r\n            tileData = self.getRegionData(region, player, force),\r\n            dynamicTiles = player.doors.getAllTiles();\r\n\r\n\r\n        // Send dynamic tiles alongside the region\r\n        for (let i = 0; i < tileData.length; i++) {\r\n            let primaryTile = tileData[i],\r\n                index = dynamicTiles.indexes.indexOf(primaryTile.index);\r\n\r\n            if (index > -1) {\r\n                tileData[i].data = dynamicTiles.data[index];\r\n                tileData[i].isCollision = dynamicTiles.collisions[index];\r\n            }\r\n        }\r\n\r\n        // Send dynamic tiles independently\r\n        if (tileData.length < 1)\r\n            for (let i = 0; i < dynamicTiles.indexes.length; i++) {\r\n                tileData[i] = {};\r\n\r\n                tileData[i].index = dynamicTiles.indexes[i];\r\n                tileData[i].data = dynamicTiles.data[i];\r\n                tileData[i].isCollision = dynamicTiles.collisions[i];\r\n            }\r\n\r\n        //No need to send empty data...\r\n        if (tileData.length > 0)\r\n            player.send(new Messages.Region(Packets.RegionOpcode.Render, tileData, force));\r\n    }\r\n\r\n    sendSpawns(regionId) {\r\n        let self = this;\r\n\r\n        if (!regionId)\r\n            return;\r\n\r\n        _.each(self.regions[regionId].incoming, (entity) => {\r\n            if (!entity || !entity.instance || entity.instanced)\r\n                return;\r\n\r\n            self.world.push(Packets.PushOpcode.Regions, {\r\n                regionId: regionId,\r\n                message: new Messages.Spawn(entity),\r\n                ignoreId: entity.isPlayer() ? entity.instance : null\r\n            })\r\n\r\n        });\r\n    }\r\n\r\n    add(entity, regionId) {\r\n        let self = this,\r\n            newRegions = [];\r\n\r\n        if (entity && regionId && (regionId in self.regions)) {\r\n            self.mapRegions.forEachAdjacentRegion(regionId, (id) => {\r\n                if (entity.instanced)\r\n                    id = Region.regionIdToInstance(entity, id);\r\n\r\n                let region = self.regions[id];\r\n\r\n                if (region && region.entities) {\r\n                    region.entities[entity.instance] = entity;\r\n                    newRegions.push(id);\r\n                }\r\n            });\r\n\r\n            entity.region = regionId;\r\n\r\n            if (entity instanceof Player)\r\n                self.regions[regionId].players.push(entity.instance);\r\n        }\r\n\r\n        if (self.addCallback)\r\n            self.addCallback(entity, regionId);\r\n\r\n        return newRegions;\r\n    }\r\n\r\n    remove(entity) {\r\n        let self = this,\r\n            oldRegions = [];\r\n\r\n        if (entity && entity.region) {\r\n            let region = self.regions[entity.region];\r\n\r\n            if (entity instanceof Player)\r\n                region.players = _.reject(region.players, (id) => { return id === entity.instance; });\r\n\r\n            self.mapRegions.forEachAdjacentRegion(entity.region, (id) => {\r\n                if (self.regions[id] && entity.instance in self.regions[id].entities) {\r\n                    delete self.regions[id].entities[entity.instance];\r\n                    oldRegions.push(id);\r\n                }\r\n            });\r\n\r\n            entity.region = null;\r\n        }\r\n\r\n        if (self.removeCallback)\r\n            self.removeCallback(entity, oldRegions);\r\n\r\n        return oldRegions;\r\n    }\r\n\r\n    incoming(entity, regionId) {\r\n        let self = this;\r\n\r\n        if (!entity || !regionId)\r\n            return;\r\n\r\n        let region = self.regions[regionId];\r\n\r\n        if (region && !_.include(region.entities, entity.instance))\r\n            region.incoming.push(entity);\r\n\r\n        if (self.incomingCallback)\r\n            self.incomingCallback(entity, regionId);\r\n    }\r\n\r\n    handle(entity, region) {\r\n        let self = this,\r\n            regionsChanged = false;\r\n\r\n        if (!entity)\r\n            return regionsChanged;\r\n\r\n        let regionId = region ? region : self.mapRegions.regionIdFromPosition(entity.x, entity.y);\r\n\r\n        if (entity.instanced)\r\n            regionId = Region.regionIdToInstance(entity, regionId);\r\n\r\n        if (!entity.region || (entity.region && entity.region !== regionId)) {\r\n            regionsChanged = true;\r\n\r\n            self.incoming(entity, regionId);\r\n\r\n            let oldRegions = self.remove(entity),\r\n                newRegions = self.add(entity, regionId);\r\n\r\n            if (_.size(oldRegions) > 0)\r\n                entity.recentRegions = _.difference(oldRegions, newRegions);\r\n        }\r\n\r\n        return regionsChanged;\r\n    }\r\n\r\n    push(player) {\r\n        let self = this,\r\n            entities;\r\n\r\n        if (!player || !(player.region in self.regions))\r\n            return;\r\n\r\n        entities = _.keys(self.regions[player.region].entities);\r\n\r\n        entities = _.reject(entities, (instance) => {\r\n            return instance === player.instance; //TODO //|| player.isInvisible(instance);\r\n        });\r\n\r\n        entities = _.map(entities, (instance) => {\r\n            return parseInt(instance);\r\n        });\r\n\r\n        player.send(new Messages.List(entities));\r\n    }\r\n\r\n    changeTileAt(player, newTile, x, y) {\r\n        let self = this,\r\n            index = self.gridPositionToIndex(x, y);\r\n\r\n        player.send(Region.getModify(index, newTile));\r\n    }\r\n\r\n    changeGlobalTile(newTile, x, y) {\r\n        let self = this,\r\n            index = self.gridPositionToIndex(x, y);\r\n\r\n        ClientMap.data[index] = newTile;\r\n\r\n        self.world.push(Packets.PushOpcode.Broadcast, {\r\n            message: Region.getModify(index, newTile)\r\n        })\r\n\r\n    }\r\n\r\n    getRegionData(region, player, force) {\r\n        let self = this,\r\n            data = [];\r\n\r\n        if (!player)\r\n            return data;\r\n\r\n        self.mapRegions.forEachAdjacentRegion(region, (regionId) => {\r\n            if (!player.hasLoadedRegion(regionId) || force) {\r\n                player.loadRegion(regionId);\r\n\r\n                let bounds = self.getRegionBounds(regionId);\r\n\r\n                for (let i = 0, y = bounds.startY; y <= bounds.endY; y++, i++) {\r\n                    for (let x = bounds.startX; x < bounds.endX; x++) {\r\n                        let index = self.gridPositionToIndex(x - 1, y),\r\n                            tileData = ClientMap.data[index],\r\n                            isCollision = ClientMap.collisions.indexOf(index) > -1 || !tileData;\r\n\r\n                        data.push({index: index, data: tileData, isCollision: isCollision});\r\n                    }\r\n                }\r\n            }\r\n        }, 2);\r\n\r\n        return data;\r\n    }\r\n\r\n    getRegionBounds(regionId) {\r\n        let self = this,\r\n            regionCoordinates = self.mapRegions.regionIdToCoordinates(regionId);\r\n\r\n        return {\r\n            startX: regionCoordinates.x,\r\n            startY: regionCoordinates.y,\r\n            endX: regionCoordinates.x + self.mapRegions.zoneWidth,\r\n            endY: regionCoordinates.y + self.mapRegions.zoneHeight\r\n        }\r\n    }\r\n\r\n    static getModify(index, newTile) {\r\n        return new Messages.Region(Packets.RegionOpcode.Modify, {\r\n           index: index,\r\n           newTile: newTile\r\n        });\r\n    }\r\n\r\n    static instanceToRegionId(instancedRegionId) {\r\n        let region = instancedRegionId.split('-');\r\n\r\n        return region[0] + '-' + region[1];\r\n    }\r\n\r\n    static regionIdToInstance(player, regionId) {\r\n        return regionId + '-' + player.instance;\r\n    }\r\n\r\n    gridPositionToIndex(x, y) {\r\n        return (y * this.clientWidth) + x + 1;\r\n    }\r\n\r\n    onAdd(callback) {\r\n        this.addCallback = callback;\r\n    }\r\n\r\n    onRemove(callback) {\r\n        this.removeCallback = callback;\r\n    }\r\n\r\n    onIncoming(callback) {\r\n        this.incomingCallback = callback;\r\n    }\r\n}\r\n\r\nmodule.exports = Region;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/region/region.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1324,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/region/region.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/region/region.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1325,
    "kind": "class",
    "name": "Region",
    "memberof": "Kaetram-Open/server/js/region/region.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~Region",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/region/region.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1326,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#constructor",
    "access": "public",
    "description": "Region Generation.\nThis is used in order to send the client data about the new region\nit is about to enter. This has to be greatly expanded to generated\ninstanced areas where other entities will not be pushed to surrounding\nplayers, even if they share the same coordinates.",
    "lineNumber": 22
  },
  {
    "__docId__": 1327,
    "kind": "method",
    "name": "load",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#load",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1328,
    "kind": "method",
    "name": "addEntityToInstance",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#addEntityToInstance",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1329,
    "kind": "method",
    "name": "createInstance",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#createInstance",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1330,
    "kind": "method",
    "name": "deleteInstance",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#deleteInstance",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1331,
    "kind": "method",
    "name": "parseRegions",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#parseRegions",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1332,
    "kind": "method",
    "name": "updateRegions",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#updateRegions",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1333,
    "kind": "method",
    "name": "sendRegion",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#sendRegion",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1334,
    "kind": "method",
    "name": "sendSpawns",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#sendSpawns",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1335,
    "kind": "method",
    "name": "add",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#add",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1336,
    "kind": "method",
    "name": "remove",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#remove",
    "access": "public",
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1337,
    "kind": "method",
    "name": "incoming",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#incoming",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1338,
    "kind": "method",
    "name": "handle",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#handle",
    "access": "public",
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "params": [
      {
        "name": "entity",
        "types": [
          "*"
        ]
      },
      {
        "name": "region",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1339,
    "kind": "method",
    "name": "push",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#push",
    "access": "public",
    "description": null,
    "lineNumber": 327,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1340,
    "kind": "method",
    "name": "changeTileAt",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#changeTileAt",
    "access": "public",
    "description": null,
    "lineNumber": 347,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "newTile",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1341,
    "kind": "method",
    "name": "changeGlobalTile",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#changeGlobalTile",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [
      {
        "name": "newTile",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1342,
    "kind": "method",
    "name": "getRegionData",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#getRegionData",
    "access": "public",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "params": [
      {
        "name": "region",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "force",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1343,
    "kind": "method",
    "name": "getRegionBounds",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#getRegionBounds",
    "access": "public",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "params": [
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"startX\": *, \"startY\": *, \"endX\": *, \"endY\": *}"
      ]
    }
  },
  {
    "__docId__": 1344,
    "kind": "method",
    "name": "getModify",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~Region.getModify",
    "access": "public",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "newTile",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1345,
    "kind": "method",
    "name": "instanceToRegionId",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~Region.instanceToRegionId",
    "access": "public",
    "description": null,
    "lineNumber": 413,
    "undocument": true,
    "params": [
      {
        "name": "instancedRegionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1346,
    "kind": "method",
    "name": "regionIdToInstance",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/region/region.js~Region.regionIdToInstance",
    "access": "public",
    "description": null,
    "lineNumber": 419,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "regionId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1347,
    "kind": "method",
    "name": "gridPositionToIndex",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#gridPositionToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1348,
    "kind": "method",
    "name": "onAdd",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#onAdd",
    "access": "public",
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1349,
    "kind": "member",
    "name": "addCallback",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#addCallback",
    "access": "public",
    "description": null,
    "lineNumber": 428,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1350,
    "kind": "method",
    "name": "onRemove",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#onRemove",
    "access": "public",
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1351,
    "kind": "member",
    "name": "removeCallback",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#removeCallback",
    "access": "public",
    "description": null,
    "lineNumber": 432,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1352,
    "kind": "method",
    "name": "onIncoming",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#onIncoming",
    "access": "public",
    "description": null,
    "lineNumber": 435,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1353,
    "kind": "member",
    "name": "incomingCallback",
    "memberof": "Kaetram-Open/server/js/region/region.js~Region",
    "static": false,
    "longname": "Kaetram-Open/server/js/region/region.js~Region#incomingCallback",
    "access": "public",
    "description": null,
    "lineNumber": 436,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1354,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/abilities.js",
    "content": "/* global module */\r\n\r\nlet Abilities = {};\r\n\r\nAbilities.Data = {};\r\nAbilities.Ids = {};\r\n\r\n\r\nmodule.exports = Abilities;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/abilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1355,
    "kind": "variable",
    "name": "Abilities",
    "memberof": "Kaetram-Open/server/js/util/abilities.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/abilities.js~Abilities",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/abilities.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1356,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/constants.js",
    "content": "/* global module */\r\n\r\nlet Constants = {\r\n    MAX_STACK: 2147483646,\r\n    MAX_LEVEL: 135\r\n};\r\n\r\nmodule.exports = Constants;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1357,
    "kind": "variable",
    "name": "Constants",
    "memberof": "Kaetram-Open/server/js/util/constants.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/constants.js~Constants",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/constants.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"MAX_STACK\": number, \"MAX_LEVEL\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1358,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/formulas.js",
    "content": "/* global module */\r\n\r\nlet Formulas = {},\r\n    Utils = require('./utils'),\r\n    Constants = require('./constants');\r\n\r\nFormulas.LevelExp = [];\r\n\r\nmodule.exports = Formulas;\r\n\r\nFormulas.getDamage = (attacker, target, special) => {\r\n\r\n    let maxDamage = Formulas.getMaxDamage(attacker, target, special),\r\n        accuracy = Utils.randomInt(0, attacker.level);\r\n\r\n    return Utils.randomInt(accuracy, maxDamage);\r\n};\r\n\r\nFormulas.getMaxDamage = (attacker, target, special) => {\r\n\r\n    if (!attacker || !target)\r\n        return;\r\n\r\n    let damageDealt, damageAbsorbed, damageAmplifier = 1, absorptionAmplifier = 1,\r\n        usingRange = attacker.weapon ? attacker.weapon.isRanged() : attacker.isRanged(),\r\n        weaponLevel = attacker.weapon ? attacker.weapon.getLevel() : attacker.weaponLevel,\r\n        armourLevel = attacker.armour ? attacker.armour.getDefense() : attacker.armourLevel,\r\n        pendant = attacker.pendant ? attacker.pendant : null,\r\n        ring = attacker.ring ? attacker.ring : null,\r\n        boots = attacker.boots ? attacker.boots : null,\r\n        targetArmour = target.armour ? target.armour.getDefense() : target.armourLevel,\r\n        targetPendant = target.pendant ? target.pendant : null,\r\n        targetRing = target.ring ? target.ring : null,\r\n        targetBoots = target.boots ? target.boots : null,\r\n        isPlayer = attacker.type === 'player';\r\n\r\n    damageDealt = (isPlayer ? 10 : 0) + attacker.level + ((attacker.level * weaponLevel) / 4) + ((attacker.level + weaponLevel * armourLevel) / 8);\r\n\r\n    /**\r\n     * Apply ranged damage deficit\r\n     */\r\n\r\n    if (usingRange)\r\n        damageDealt /= 1.275;\r\n\r\n    if (special)\r\n        damageDealt *= 1.0575;\r\n\r\n    /**\r\n     * Apply special amulets\r\n     */\r\n\r\n    if (pendant && pendant.pendantLevel > 0)\r\n        damageAmplifier *= pendant.getBaseAmplifier();\r\n\r\n    if (ring && ring.ringLevel > 0)\r\n        damageAmplifier *= ring.getBaseAmplifier();\r\n\r\n    if (boots && boots.bootsLevel > 0)\r\n        damageAmplifier *= boots.getBaseAmplifier();\r\n\r\n    /**\r\n     * Just so amplifiers don't get out of hand.\r\n     */\r\n\r\n    if (damageAmplifier > 1.60)\r\n        damageAmplifier = 1.60;\r\n\r\n    damageDealt *= damageAmplifier;\r\n\r\n    damageAbsorbed = target.level + (targetArmour / 2);\r\n\r\n    if (targetPendant)\r\n        absorptionAmplifier *= targetPendant.getBaseAmplifier();\r\n\r\n    if (targetRing)\r\n        absorptionAmplifier *= targetRing.getBaseAmplifier();\r\n\r\n    if (targetBoots)\r\n        absorptionAmplifier *= targetBoots.getBaseAmplifier();\r\n\r\n    damageAbsorbed *= absorptionAmplifier;\r\n\r\n    let damage = damageDealt - damageAbsorbed;\r\n\r\n    damage = Math.ceil(damage);\r\n\r\n    if (isNaN(damage) || !damage || damage < 0)\r\n        damage = 0;\r\n\r\n    return damage;\r\n\r\n};\r\n\r\nFormulas.getCritical = (attacker, target) => {\r\n\r\n    if (!attacker || !target)\r\n        return;\r\n\r\n    /**\r\n     * The critical is the player's max hit plus *= critical multiplier of the weapon\r\n     */\r\n\r\n    let damage = Formulas.getDamage(attacker, target),\r\n        multiplier = attacker.weapon.abilityLevel / 10;\r\n\r\n    return damage *= multiplier;\r\n};\r\n\r\nFormulas.getWeaponBreak = (attacker, target) => {\r\n\r\n    if (!attacker || !target)\r\n        return;\r\n\r\n    let targetArmour = target.getArmourLevel();\r\n\r\n    /**\r\n     * The chance a weapon will break ....\r\n     */\r\n\r\n    let breakChance = Utils.randomRange(1, 100);\r\n\r\n    return breakChance > 75;\r\n};\r\n\r\n\r\nFormulas.getAoEDamage = (attacker, target) => {\r\n    /**\r\n     * Preliminary setup until this function is expanded\r\n     * and fits in the necessary algorithms.\r\n     */\r\n\r\n    return Formulas.getDamage(attacker, target);\r\n};\r\n\r\nFormulas.nextExp = (experience) => {\r\n    if (experience < 0)\r\n        return -1;\r\n\r\n    for (let i = 1; i < Formulas.LevelExp.length; i++)\r\n        if (experience < Formulas.LevelExp[i])\r\n            return Formulas.LevelExp[i];\r\n};\r\n\r\nFormulas.prevExp = (experience) => {\r\n    if (experience < 0)\r\n        return -1;\r\n\r\n    for (let i = Constants.MAX_LEVEL; i > 0; i--)\r\n        if (experience > Formulas.LevelExp[i])\r\n            return Formulas.LevelExp[i];\r\n};\r\n\r\nFormulas.expToLevel = (experience) => {\r\n    if (experience < 0)\r\n        return -1;\r\n\r\n    for (let i = 1; i < Formulas.LevelExp.length; i++)\r\n        if (experience < Formulas.LevelExp[i])\r\n            return i;\r\n};\r\n\r\nFormulas.getRewardExperience = (player) => {\r\n    if (!player)\r\n        return;\r\n\r\n    return (5 + player.level) * player.level;\r\n};\r\n\r\nFormulas.getMaxHitPoints = (level) => {\r\n    return 100 + (level * 30);\r\n};\r\n\r\nFormulas.getMaxMana = (level) => {\r\n    return 10 + (level * 8);\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/formulas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1359,
    "kind": "variable",
    "name": "Formulas",
    "memberof": "Kaetram-Open/server/js/util/formulas.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/formulas.js~Formulas",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/formulas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1360,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/items.js",
    "content": "/* global module */\r\n\r\nlet Items = {};\r\n\r\nItems.Data = {};\r\nItems.Ids = {};\r\nItems.onCreate = {};\r\n\r\nItems.Plugins = {};\r\n\r\nItems.getData = (name) => {\r\n    if (name in Items.Data)\r\n        return Items.Data[name];\r\n\r\n    return 'null';\r\n};\r\n\r\nItems.hasPlugin = (string) => {\r\n    if (Number.isInteger(string))\r\n      string = Items.idToString(string);\r\n\r\n    if (string in Items.Plugins)\r\n      return true;\r\n\r\n    return false;\r\n};\r\n\r\nItems.getPlugin = (id) => {\r\n    let string = Items.idToString(id);\r\n\r\n    if (Items.hasPlugin(string))\r\n      return Items.Plugins[string];\r\n\r\n    return null;\r\n};\r\n\r\nItems.idToString = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].key;\r\n\r\n    return 'null';\r\n};\r\n\r\nItems.idToName = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].name;\r\n\r\n    return 'null';\r\n};\r\n\r\nItems.stringToId = (name) => {\r\n\r\n    if (name in Items.Data)\r\n        return Items.Data[name].id;\r\n    else\r\n        log.error('Item: ' + name + ' not found in the database.');\r\n\r\n    return 'null';\r\n};\r\n\r\nItems.getLevelRequirement = (name) => {\r\n    var level = 1,\r\n        item = Items.Data[name];\r\n\r\n    if (item && item.requirement)\r\n        return item.requirement;\r\n\r\n    if (Items.isWeapon(name))\r\n        level = Items.Data[name].attack;\r\n    else if (Items.isArmour(name))\r\n        level = Items.Data[name].defense;\r\n    else if (Items.isPendant(name))\r\n        level = Items.Data[name].pendantLevel;\r\n    else if (Items.isRing(name))\r\n        level = Items.Data[name].ringLevel;\r\n    else if (Items.isBoots(name))\r\n        level = Items.Data[name].bootsLevel;\r\n\r\n    return level * 2;\r\n};\r\n\r\nItems.getWeaponLevel = (weaponName) => {\r\n    if (Items.isWeapon(weaponName))\r\n        return Items.Data[weaponName].attack;\r\n\r\n    return -1;\r\n};\r\n\r\nItems.getArmourLevel = (armourName) => {\r\n    if (Items.isArmour(armourName))\r\n        return Items.Data[armourName].defense;\r\n\r\n    return -1;\r\n};\r\n\r\nItems.getPendantLevel = (pendantName) => {\r\n    if (Items.isPendant(pendantName))\r\n        return Items.Data[pendantName].pendantLevel;\r\n\r\n    return -1;\r\n};\r\n\r\nItems.getRingLevel = (ringName) => {\r\n    if (Items.isRing(ringName))\r\n        return Items.Data[ringName].ringLevel;\r\n\r\n    return -1;\r\n};\r\n\r\nItems.getBootsLevel = (bootsName) => {\r\n    if (Items.isBoots(bootsName))\r\n        return Items.Data[bootsName].bootsLevel;\r\n\r\n    return -1;\r\n};\r\n\r\nItems.isArcherWeapon = (string) => {\r\n    if (string in Items.Data)\r\n        return Items.Data[string].type === 'weaponarcher';\r\n\r\n    return false;\r\n};\r\n\r\nItems.isWeapon = (string) => {\r\n    if (string in Items.Data)\r\n        return Items.Data[string].type === 'weapon' || Items.Data[string].type === 'weaponarcher';\r\n\r\n    return false;\r\n};\r\n\r\nItems.isArmour = (string) => {\r\n    if (string in Items.Data)\r\n        return Items.Data[string].type === 'armor' || Items.Data[string].type === 'armorarcher';\r\n\r\n    return false;\r\n};\r\n\r\nItems.isPendant = (string) => {\r\n    if (string in Items.Data)\r\n        return Items.Data[string].type === 'pendant';\r\n\r\n    return false;\r\n};\r\n\r\nItems.isRing = (string) => {\r\n    if (string in Items.Data)\r\n        return Items.Data[string].type === 'ring';\r\n\r\n    return false;\r\n};\r\n\r\nItems.isBoots = (string) => {\r\n    if (string in Items.Data)\r\n        return Items.Data[string].type === 'boots';\r\n\r\n    return false;\r\n};\r\n\r\nItems.getType = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].type;\r\n\r\n    return null;\r\n};\r\n\r\nItems.isStackable = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].stackable;\r\n\r\n    return false;\r\n};\r\n\r\nItems.isEdible = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].edible;\r\n\r\n    return false;\r\n};\r\n\r\nItems.getCustomData = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].customData;\r\n\r\n    return null;\r\n};\r\n\r\nItems.maxStackSize = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].maxStackSize;\r\n\r\n    return false;\r\n};\r\n\r\n\r\nItems.isShard = (id) => {\r\n    return id === 253 || id === 254 || id === 255 || id === 256 || id === 257;\r\n};\r\n\r\nItems.isEnchantable = (id) => {\r\n    return Items.getType(id) !== 'object' && Items.getType(id) !== 'craft';\r\n};\r\n\r\nItems.getShardTier = (id) => {\r\n    if (id === 253)\r\n        return 1;\r\n    else if (id === 254)\r\n        return 2;\r\n    else if (id === 255)\r\n        return 3;\r\n    else if (id === 256)\r\n        return 4;\r\n    else if (id === 257)\r\n        return 5;\r\n};\r\n\r\nItems.isEquippable = (string) => {\r\n    return Items.isArmour(string) || Items.isWeapon(string) || Items.isPendant(string) || Items.isRing(string) || Items.isBoots(string);\r\n};\r\n\r\nItems.healsHealth = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].healsHealth > 0;\r\n\r\n    return false;\r\n};\r\n\r\n\r\nItems.healsMana = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].healsMana > 0;\r\n};\r\n\r\nItems.getHealingFactor = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].healsHealth;\r\n\r\n    return 0;\r\n};\r\n\r\nItems.getManaFactor = (id) => {\r\n    if (id in Items.Ids)\r\n        return Items.Ids[id].healsMana;\r\n    return 0;\r\n};\r\n\r\nmodule.exports = Items;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/items.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1361,
    "kind": "variable",
    "name": "Items",
    "memberof": "Kaetram-Open/server/js/util/items.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/items.js~Items",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/items.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1362,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/mobs.js",
    "content": "/* global module */\r\n\r\nlet Mobs = {};\r\n\r\nMobs.Properties = {};\r\nMobs.Ids = {};\r\nMobs.Plugins = {};\r\n\r\nMobs.idToString = (id) => {\r\n\r\n    if (id in Mobs.Ids)\r\n        return Mobs.Ids[id].key;\r\n\r\n    return null;\r\n};\r\n\r\nMobs.idToName = (id) => {\r\n    if (id in Mobs.Ids)\r\n        return Mobs.Ids[id].name;\r\n\r\n    return null;\r\n};\r\n\r\nMobs.getXp = (id) => {\r\n\r\n    if (id in Mobs.Ids)\r\n        return Mobs.Ids[id].xp;\r\n\r\n    return -1;\r\n};\r\n\r\nMobs.exists = (id) => {\r\n\r\n    return id in Mobs.Ids;\r\n};\r\n\r\nMobs.hasCombatPlugin = (id) => {\r\n    return id in Mobs.Ids && Mobs.Ids[id].combatPlugin in Mobs.Plugins\r\n};\r\n\r\nMobs.isNewCombatPlugin = (id) => {\r\n    if (id in Mobs.Ids && Mobs.Ids[id].combatPlugin in Mobs.Plugins)\r\n        return Mobs.Plugins[Mobs.Ids[id].combatPlugin];\r\n};\r\n\r\nmodule.exports = Mobs;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/mobs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1363,
    "kind": "variable",
    "name": "Mobs",
    "memberof": "Kaetram-Open/server/js/util/mobs.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/mobs.js~Mobs",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/mobs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1364,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/modules.js",
    "content": "/* global module */\r\n\r\nlet Modules = {\r\n\r\n    Orientation: {\r\n        Up: 0,\r\n        Down: 1,\r\n        Left: 2,\r\n        Right: 3\r\n    },\r\n\r\n    Equipment: {\r\n        Armour: 0,\r\n        Weapon: 1,\r\n        Pendant: 2,\r\n        Ring: 3,\r\n        Boots: 4\r\n    },\r\n\r\n    Hits: {\r\n        Damage: 0,\r\n        Poison: 1,\r\n        Heal: 2,\r\n        Mana: 3,\r\n        Experience: 4,\r\n        LevelUp: 5,\r\n        Critical: 6,\r\n        Stun: 7,\r\n        Explosive: 8\r\n    },\r\n\r\n    Projectiles: {\r\n        Arrow: 0,\r\n        Boulder: 1,\r\n        FireBall: 2,\r\n        IceBall: 3,\r\n        Terror: 4,\r\n        Tornado: 5\r\n    },\r\n\r\n    Abilities: {\r\n        Freeze: 0,\r\n        Curse: 1,\r\n        Smash: 2,\r\n        Tornado: 3,\r\n        Run: 4,\r\n        Call: 5\r\n    },\r\n\r\n    Enchantment: {\r\n        Bloodsucking: 0,\r\n        Critical: 1,\r\n        Evasion: 2,\r\n        Spike: 3,\r\n        Explosive: 4,\r\n        Stun: 5,\r\n        AntiStun: 6,\r\n        Splash: 7\r\n    },\r\n\r\n    Trade: {\r\n        Request: 0,\r\n        Started: 1,\r\n        Accepted: 2,\r\n        Finished: 3\r\n    },\r\n\r\n    Achievements: {\r\n        Type: {\r\n            Killing: 0,\r\n            Scavenge: 1\r\n        },\r\n\r\n        Rewards: {\r\n            Item: 0,\r\n            Experience: 1,\r\n            Skill: 2\r\n        }\r\n    },\r\n\r\n    Quests: {\r\n        Introduction: 0,\r\n        BulkySituation: 1\r\n    },\r\n\r\n    Languages: {\r\n        English: 0,\r\n        Romanian: 1,\r\n        French: 2,\r\n        Spanish: 3,\r\n        German: 4,\r\n        Japanese: 5,\r\n        Chinese: 6\r\n    },\r\n\r\n    Guild: {\r\n        Ranks: {\r\n            Guest: 0,\r\n            Soldier: 1,\r\n            Corporal: 2,\r\n            General: 3\r\n        }\r\n    },\r\n\r\n    Warps: {\r\n        0: ['Mudwich', 25, 95, true, 1], //Starting Village\r\n        1: ['Northton', 49, 207, true, 25], //Ice World\r\n        2: ['Lakesworld', 530, 121, false, 60], //Citadels\r\n        3: ['Aynor', 178, 140, true, 50],\r\n        4: ['Crullfeld', 397, 227, true, 20], //Desert\r\n        5: ['Patsow', 262, 131, true, 25] //Lava\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Modules;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/modules.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1365,
    "kind": "variable",
    "name": "Modules",
    "memberof": "Kaetram-Open/server/js/util/modules.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/modules.js~Modules",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/modules.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"Orientation\": *, \"Equipment\": *, \"Hits\": *, \"Projectiles\": *, \"Abilities\": *, \"Enchantment\": *, \"Trade\": *, \"Achievements\": *, \"Quests\": *, \"Languages\": *, \"Guild\": *, \"Warps\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1366,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/npcs.js",
    "content": "/* global module */\r\n\r\nlet NPCs = {};\r\n\r\nNPCs.Properties = {};\r\nNPCs.Ids = {};\r\n\r\nNPCs.idToString = (id) => {\r\n\r\n    if (id in NPCs.Ids)\r\n        return NPCs.Ids[id].key;\r\n\r\n    return null;\r\n};\r\n\r\nNPCs.idToName = (id) => {\r\n\r\n    if (id in NPCs.Ids)\r\n        return NPCs.Ids[id].name;\r\n\r\n    return null;\r\n};\r\n\r\nNPCs.getText = (id) => {\r\n\r\n    if (id in NPCs.Ids)\r\n        return NPCs.Ids[id].text;\r\n\r\n    return null;\r\n};\r\n\r\nNPCs.getType = (id) => {\r\n\r\n    if (id in NPCs.Ids)\r\n        return NPCs.Ids[id].type;\r\n\r\n    return null;\r\n};\r\n\r\nmodule.exports = NPCs;",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/npcs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1367,
    "kind": "variable",
    "name": "NPCs",
    "memberof": "Kaetram-Open/server/js/util/npcs.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/npcs.js~NPCs",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/npcs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1368,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/parser.js",
    "content": "/* global module */\r\n\r\nlet _ = require('underscore'),\r\n    NPCData = require('../../data/npcs'),\r\n    ItemData = require('../../data/items'),\r\n    MobData = require('../../data/mobs'),\r\n    AbilityData = require('../../data/abilities'),\r\n    ShopsData = require('../../data/shops'),\r\n    Mobs = require('./mobs'),\r\n    NPCs = require('./npcs'),\r\n    Items = require('./items'),\r\n    Abilities = require('./abilities'),\r\n    Shops = require('./shops'),\r\n    Formulas = require('./formulas'),\r\n    Constants = require('./constants');\r\n\r\nclass Parser {\r\n\r\n    constructor() {\r\n        let self = this;\r\n\r\n        self.loadMobData();\r\n        self.loadNPCData();\r\n        self.loadItemData();\r\n        self.loadAbilityData();\r\n        self.loadShops();\r\n        self.loadLevels();\r\n    }\r\n\r\n    loadMobData() {\r\n        let mobCounter = 0;\r\n\r\n        _.each(MobData, (value, key) => {\r\n            key = key.toLowerCase();\r\n\r\n            Mobs.Properties[key] = {\r\n                key: key,\r\n                id: value.id,\r\n                name: value.name ? value.name : key,\r\n                drops: value.drops ? value.drops : null,\r\n                hitPoints: value.hitPoints ? value.hitPoints : 10,\r\n                armour: value.armour ? value.armour : 0,\r\n                weapon: value.weapon ? value.weapon : 0,\r\n                xp: value.xp ? value.xp : 0,\r\n                level: value.level ? value.level : 0,\r\n                aggroRange: value.aggroRange ? value.aggroRange : 2,\r\n                attackRange: value.attackRange ? value.attackRange : 1,\r\n                aggressive: value.aggressive ? value.aggressive : false,\r\n                isPoisonous: value.isPoisonous ? value.isPoisonous : false,\r\n                attackRate: value.attackRate ? value.attackRate : 1000,\r\n                movementSpeed: value.movementSpeed ? value.movementSpeed : 200,\r\n                projectileName: value.projectileName ? value.projectileName : null,\r\n                spawnDelay: value.spawnDelay ? value.spawnDelay : 60000,\r\n                combatPlugin: value.combatPlugin ? value.combatPlugin : null,\r\n                hiddenName: value.hiddenName ? value.hiddenName: false\r\n            };\r\n\r\n            Mobs.Ids[value.id] = Mobs.Properties[key];\r\n\r\n            mobCounter++;\r\n        });\r\n\r\n        Mobs.Plugins = require ('../util/plugins')(__dirname + '/../../data/combat/');\r\n\r\n        log.info('Finished loading ' + mobCounter + ' mobs.');\r\n        log.info('Loaded ' + Object.keys(Mobs.Plugins).length + ' combat plugins.');\r\n    }\r\n\r\n    loadNPCData() {\r\n        let npcCounter = 0;\r\n\r\n        _.each(NPCData, (value, key) => {\r\n            key = key.toLowerCase();\r\n\r\n            NPCs.Properties[key] = {\r\n                key: key,\r\n                id: value.id,\r\n                name: value.name ? value.name : key,\r\n                text: value.text ? value.text : null,\r\n                type: value.type ? value.type : null\r\n            };\r\n\r\n            NPCs.Ids[value.id] = NPCs.Properties[key];\r\n\r\n            npcCounter++;\r\n        });\r\n\r\n        log.info('Finished loading ' + npcCounter + ' NPCs.');\r\n    }\r\n\r\n    loadItemData() {\r\n        let itemCounter = 0;\r\n\r\n        _.each(ItemData, (value, key) => {\r\n            key = key.toLowerCase();\r\n\r\n            Items.Data[key] = {\r\n                key: key,\r\n                id: value.id ? value.id : -1,\r\n                type: value.type ? value.type : 'object',\r\n                attack: value.attack ? value.attack : 0,\r\n                defense: value.defense ? value.defense : 0,\r\n                pendantLevel: value.pendantLevel ? value.pendantLevel : null,\r\n                ringLevel: value.ringLevel ? value.ringLevel : null,\r\n                bootsLevel: value.bootsLevel ? value.bootsLevel : null,\r\n                name: value.name ? value.name : key,\r\n                price: value.price ? value.price : 1,\r\n                storeCount: value.storeCount ? value.storeCount : 1,\r\n                stackable: value.stackable ? value.stackable : 0,\r\n                edible: value.edible ? value.edible : 0,\r\n                healsHealth: value.healsHealth ? value.healsHealth : 0,\r\n                healsMana: value.healsMana ? value.healsMana : 0,\r\n                maxStackSize: value.maxStackSize ? value.maxStackSize : -1,\r\n                plugin: value.plugin ? value.plugin : null,\r\n                customData: value.customData ? value.customData : null,\r\n                requirement: value.requirement ? value.requirement : null\r\n            };\r\n\r\n            Items.Ids[value.id] = Items.Data[key];\r\n\r\n            itemCounter++;\r\n        });\r\n\r\n\r\n        Items.Plugins = require ('../util/plugins')(__dirname + '/../../data/items/');\r\n\r\n        log.info('Finished loading ' + itemCounter + ' items.');\r\n        log.info('Loaded ' + Object.keys(Items.Plugins).length + ' item plugins.');\r\n    }\r\n\r\n    loadAbilityData() {\r\n        let skillCounter = 0;\r\n\r\n        _.each(AbilityData, (value, key) => {\r\n            key = key.toLowerCase();\r\n\r\n            Abilities.Data[key] = {\r\n                key: key,\r\n                id: value.id,\r\n                type: value.type,\r\n                mana: value.mana ? value.mana : 0,\r\n                cooldown: value.cooldown ? value.cooldown : null\r\n            };\r\n\r\n            Abilities.Ids[value.id] = Abilities.Data[key];\r\n\r\n            skillCounter++;\r\n        });\r\n\r\n        log.info('Finished loading ' + skillCounter + ' skills.')\r\n    }\r\n\r\n    loadShops() {\r\n        let shopCounter = 0;\r\n\r\n        _.each(ShopsData, (value, key) => {\r\n            key = key.toLowerCase();\r\n\r\n            Shops.Data[key] = {\r\n                key: key,\r\n                npcId: value.npcId,\r\n                items: value.items,\r\n                count: value.count,\r\n                originalCount: value.count,\r\n                prices: value.prices,\r\n                currency: value.currency,\r\n                stockDuration: value.stockDuration\r\n            };\r\n\r\n            Shops.Ids[value.npcId] = Shops.Data[key];\r\n\r\n            shopCounter++;\r\n        });\r\n\r\n        log.info('Finished loading ' + shopCounter + ' shops.');\r\n    }\r\n\r\n    loadLevels() {\r\n        Formulas.LevelExp[0] = 0;\r\n\r\n        for (let i = 1; i < Constants.MAX_LEVEL; i++) {\r\n            let points = Math.floor(0.25 * Math.floor(i + 300 * Math.pow(2, i / 7)));\r\n            Formulas.LevelExp[i] = points + Formulas.LevelExp[i - 1];\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Parser;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1369,
    "kind": "variable",
    "name": "_",
    "memberof": "Kaetram-Open/server/js/util/parser.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/parser.js~_",
    "access": "private",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1370,
    "kind": "class",
    "name": "Parser",
    "memberof": "Kaetram-Open/server/js/util/parser.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1371,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 1372,
    "kind": "method",
    "name": "loadMobData",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadMobData",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1373,
    "kind": "method",
    "name": "loadNPCData",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadNPCData",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1374,
    "kind": "method",
    "name": "loadItemData",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadItemData",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1375,
    "kind": "method",
    "name": "loadAbilityData",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadAbilityData",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1376,
    "kind": "method",
    "name": "loadShops",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadShops",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1377,
    "kind": "method",
    "name": "loadLevels",
    "memberof": "Kaetram-Open/server/js/util/parser.js~Parser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/server/js/util/parser.js~Parser#loadLevels",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1378,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/plugins.js",
    "content": "/* global module */\r\n\r\nlet fs = require('fs'),\r\n    Filter = /^([^\\\\.].*)\\.js$/;\r\n\r\nfunction identity(val) {\r\n    return val;\r\n}\r\n\r\nmodule.exports = function requireItems(directory) {\r\n    let files = fs.readdirSync(directory),\r\n        modules = {},\r\n        resolve = identity;\r\n\r\n    files.forEach((file) => {\r\n        let match = file.match(Filter);\r\n\r\n        if (match)\r\n            modules[match[1]] = resolve(require(directory + file));\r\n\r\n    });\r\n\r\n    return modules;\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/plugins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1379,
    "kind": "variable",
    "name": "fs",
    "memberof": "Kaetram-Open/server/js/util/plugins.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/plugins.js~fs",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/plugins.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1380,
    "kind": "function",
    "name": "identity",
    "memberof": "Kaetram-Open/server/js/util/plugins.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/util/plugins.js~identity",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/plugins.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1381,
    "kind": "function",
    "name": "exports",
    "memberof": "Kaetram-Open/server/js/util/plugins.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/server/js/util/plugins.js~exports",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/plugins.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "directory",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1382,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/shops.js",
    "content": "/* global module */\r\n\r\nlet Shops = {},\r\n    _ = require('underscore');\r\n\r\nShops.Data = {};\r\nShops.Ids = {};\r\n\r\nShops.isShopNPC = (npcId) => {\r\n    return npcId in Shops.Ids;\r\n};\r\n\r\nShops.getItems = (npcId) => {\r\n    return Shops.Ids[npcId].items;\r\n};\r\n\r\nShops.shopIdToNPC = (shopId) => {\r\n    return Shops.Data[shopId].npcId;\r\n};\r\n\r\nShops.getItemCount = (id) => {\r\n    return Shops.getItems(id).length;\r\n};\r\n\r\nShops.increment = (shopId, itemId, count) => {\r\n    let shop = Shops.Ids[shopId],\r\n        index = shop.items.indexOf(itemId);\r\n\r\n    if (index < 0)\r\n        return;\r\n\r\n    let shopData = Shops.Data[shop.key];\r\n\r\n    shopData.count[index] += count;\r\n\r\n};\r\n\r\nShops.decrement = (npcId, buyId, count) => {\r\n    let shop = Shops.Ids[npcId];\r\n\r\n    if (!buyId || buyId < 0)\r\n        return;\r\n\r\n    shop.count[buyId] -= count;\r\n\r\n    if (shop.count[buyId] < 0)\r\n        shop.count[buyId] = 0;\r\n};\r\n\r\nShops.getCost = (npcId, buyId, count) => {\r\n    /**\r\n     * Reason for the shopId variable is because some shops\r\n     * may have different prices for the same item. A way to\r\n     * spice up the game.\r\n     */\r\n\r\n    let shop = Shops.Ids[npcId];\r\n\r\n    if (!shop || !buyId || buyId < 0)\r\n        return;\r\n\r\n    return shop.prices[buyId] * count;\r\n};\r\n\r\nShops.getStock = (npcId, buyId) => {\r\n    let shop = Shops.Ids[npcId];\r\n\r\n    if (!shop || !buyId || buyId < 0)\r\n        return null;\r\n\r\n    return shop.count[buyId];\r\n};\r\n\r\nShops.getOriginalStock = (shopId, buyId) => {\r\n    let shop = Shops.Ids[shopId];\r\n\r\n    if (!buyId || buyId < 0)\r\n        return;\r\n\r\n    return shop.originalCount[buyId];\r\n};\r\n\r\nShops.getCount = (npcId) => {\r\n    let count = Shops.Ids[npcId].count,\r\n        counts = [];\r\n\r\n    if (_.isArray(count))\r\n        return count;\r\n\r\n    for (let i = 0; i < Shops.getItemCount(npcId); i++)\r\n        counts.push(count);\r\n\r\n    return counts;\r\n};\r\n\r\nShops.getItem = (npcId, buyId) => {\r\n    if (!buyId || buyId < 0)\r\n        return;\r\n\r\n    return Shops.Ids[npcId].items[buyId];\r\n};\r\n\r\nmodule.exports = Shops;\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/shops.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1383,
    "kind": "variable",
    "name": "Shops",
    "memberof": "Kaetram-Open/server/js/util/shops.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/shops.js~Shops",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/shops.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1384,
    "kind": "file",
    "name": "Kaetram-Open/server/js/util/utils.js",
    "content": "/* global module */\r\n\r\nlet Utils = {},\r\n    Packets = require('../network/packets');\r\n\r\nmodule.exports = Utils;\r\n\r\nUtils.random = (range) => {\r\n    return Math.floor(Math.random() * range);\r\n};\r\n\r\nUtils.randomRange = (min, max) => {\r\n    return min + (Math.random() * (max - min));\r\n};\r\n\r\nUtils.randomInt = (min, max) => {\r\n\r\n    return min + Math.floor(Math.random() * (max - min + 1));\r\n};\r\n\r\nUtils.getDistance = (startX, startY, toX, toY) => {\r\n    let x = Math.abs(startX - toX),\r\n        y = Math.abs(startY - toY);\r\n\r\n    return x > y ? x : y;\r\n};\r\n\r\nUtils.getJSLogic = () => {\r\n    return [[][[]]+[]][+[]][++[+[]][+[]]];\r\n};\r\n\r\nUtils.positionOffset = (radius) => {\r\n    return {\r\n        x: Utils.randomInt(0, radius),\r\n        y: Utils.randomInt(0, radius)\r\n    }\r\n};\r\n\r\n/**\r\n * There is seriously no way two clients can end up with the same ID\r\n */\r\n\r\nUtils.generateClientId = () => {\r\n    return Utils.randomInt(0, 1000000) + Utils.randomInt(0, 40000) + Utils.randomInt(0, 9000);\r\n};\r\n\r\nUtils.generateInstance = (randomizer, id, modulo, posY) => {\r\n    return '' + randomizer + Utils.randomInt(0, id) + randomizer + Utils.randomInt(0, modulo) + (posY ? posY : 0);\r\n};\r\n\r\nUtils.generateRandomId = () => {\r\n    return '' + 1 + Utils.random(0, 200) + Utils.random(0, 20) + 2\r\n};\r\n\r\nUtils.validPacket = (packet) => {\r\n    let keys = Object.keys(Packets),\r\n        filtered = [];\r\n\r\n    for (let i = 0; i < keys.length; i++)\r\n        if (!keys[i].endsWith('Opcode'))\r\n            filtered.push(keys[i]);\r\n\r\n    return packet > -1 && packet < Packets[filtered[filtered.length - 1]] + 1;\r\n};\r\n\r\nUtils.getCurrentEpoch = () => {\r\n    return (new Date).getTime();\r\n};",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/server/js/util/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1385,
    "kind": "variable",
    "name": "Utils",
    "memberof": "Kaetram-Open/server/js/util/utils.js",
    "static": true,
    "longname": "Kaetram-Open/server/js/util/utils.js~Utils",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/server/js/util/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1386,
    "kind": "file",
    "name": "Kaetram-Open/tools/api/registrar.js",
    "content": "var cls = require('../../server/js/lib/class'),\r\n    redis = require('redis'),\r\n    request = require('request');\r\n\r\nfunction load() {\r\n    var registrar = new Registrar();\r\n\r\n    registrar.onReady(function() {\r\n\r\n    });\r\n}\r\n\r\nmodule.exports = Registrar = cls.Class.extend({\r\n\r\n    init: function() {\r\n        var self = this;\r\n\r\n        self.client = redis.createClient('127.0.0.1', 6379, {\r\n            socket_nodelay: true\r\n        });\r\n\r\n        self.readyCallback();\r\n    },\r\n\r\n    onReady: function(callback) {\r\n        this.readyCallback = callback;\r\n    }\r\n\r\n});\r\n\r\nload();",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/tools/api/registrar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1387,
    "kind": "variable",
    "name": "cls",
    "memberof": "Kaetram-Open/tools/api/registrar.js",
    "static": true,
    "longname": "Kaetram-Open/tools/api/registrar.js~cls",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/tools/api/registrar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1388,
    "kind": "function",
    "name": "load",
    "memberof": "Kaetram-Open/tools/api/registrar.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/tools/api/registrar.js~load",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/tools/api/registrar.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1389,
    "kind": "file",
    "name": "Kaetram-Open/tools/bot/bot.js",
    "content": "var cls = require('../../server/js/lib/class'),\r\n    Player = require('../../server/js/game/entity/character/player/player'),\r\n    Creator = require('../../server/js/database/creator'),\r\n    Utils = require('../../server/js/util/utils'),\r\n    _ = require('underscore');\r\n\r\nmodule.exports = Bot = cls.Class.extend({\r\n\r\n    init: function(world, count) {\r\n        var self = this;\r\n\r\n        self.world = world;\r\n        self.count = count;\r\n\r\n        self.creator = new Creator(null);\r\n\r\n        self.players = [];\r\n\r\n        self.load();\r\n    },\r\n\r\n    load: function() {\r\n        var self = this;\r\n\r\n        for (var i = 0; i < self.count; i++) {\r\n            var connection = {\r\n                id: i,\r\n                listen: function() {},\r\n                onClose: function() {}\r\n            },\r\n            player = new Player(self.world, self.world.database, connection, -1);\r\n\r\n            self.world.addPlayer(player);\r\n\r\n            player.username = 'Bot' + i;\r\n\r\n            player.load(self.creator.getPlayerData(player));\r\n\r\n            player.intro();\r\n\r\n            player.walkRandomly();\r\n\r\n            self.players.push(player);\r\n\r\n        }\r\n    }\r\n\r\n\r\n});",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/tools/bot/bot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1390,
    "kind": "variable",
    "name": "cls",
    "memberof": "Kaetram-Open/tools/bot/bot.js",
    "static": true,
    "longname": "Kaetram-Open/tools/bot/bot.js~cls",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/tools/bot/bot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1391,
    "kind": "file",
    "name": "Kaetram-Open/tools/file.js",
    "content": "var exists, existsSync;\r\n(function () {\r\n    var semver = require('semver');\r\n    var module = (semver.satisfies(process.version, '>=0.7.1') ? require('fs') : require('path'));\r\n\r\n    exists = module.exists;\r\n    existsSync = module.existsSync;\r\n})();\r\n\r\nif (!(typeof exports === 'undefined')) {\r\n    module.exports.exists = exists;\r\n    module.exports.existsSync = existsSync;\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/tools/file.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1392,
    "kind": "file",
    "name": "Kaetram-Open/tools/map/helper.js",
    "content": "#!/usr/bin/env node\r\n\r\nlet Log = require('log'),\r\n    log = new Log(Log.DEBUG),\r\n    worldClient = require('../../server/data/map/world_client'),\r\n    worldServer = require('../../server/data/map/world_server');\r\n\r\nclass Helper {\r\n\r\n    constructor() {\r\n        let self = this;\r\n\r\n        self.width = worldServer.width;\r\n        self.height = worldServer.height;\r\n\r\n        self.getTileData(9, 92);\r\n\r\n        self.getTileData(8, 93);\r\n        self.getTileData(9, 93);\r\n        self.getTileData(10, 93);\r\n\r\n        self.getTileData(8, 94);\r\n        self.getTileData(9, 94);\r\n        self.getTileData(10, 94);\r\n\r\n        //for (let i = 1; i < 5; i++)\r\n        //    for (let j = 1; j < 5; j++)\r\n        //        self.getTileData(9 + i, 91 + j);\r\n    }\r\n\r\n    getTileData(x, y) {\r\n        let self = this,\r\n            index = self.gridPositionToIndex(x, y);\r\n\r\n        console.log(`\"${index}\": { \"data\": [${worldClient.data[index]}], \"isColliding\": true },`);\r\n        //log.info(index + ' -- ' + worldClient.data[index]);\r\n    }\r\n\r\n    gridPositionToIndex(x, y) {\r\n        return (y * this.width) + x;\r\n    }\r\n\r\n    indexToGridPosition(tileIndex) {\r\n        let self = this;\r\n\r\n        tileIndex -= 1;\r\n\r\n        let x = self.getX(tileIndex + 1, self.width),\r\n            y = Math.floor(tileIndex / self.width);\r\n\r\n        return {\r\n            x: x,\r\n            y: y\r\n        }\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Helper;\r\n\r\nfunction main() {\r\n    new Helper();\r\n}\r\n\r\nmain();\r\n",
    "static": true,
    "longname": "C:/Users/Flavius/Documents/Projects/Kaetram-Open/tools/map/helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1393,
    "kind": "variable",
    "name": "Log",
    "memberof": "Kaetram-Open/tools/map/helper.js",
    "static": true,
    "longname": "Kaetram-Open/tools/map/helper.js~Log",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/tools/map/helper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1394,
    "kind": "class",
    "name": "Helper",
    "memberof": "Kaetram-Open/tools/map/helper.js",
    "static": true,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/tools/map/helper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1395,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "Kaetram-Open/tools/map/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 1396,
    "kind": "method",
    "name": "getTileData",
    "memberof": "Kaetram-Open/tools/map/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper#getTileData",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1397,
    "kind": "method",
    "name": "gridPositionToIndex",
    "memberof": "Kaetram-Open/tools/map/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper#gridPositionToIndex",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1398,
    "kind": "method",
    "name": "indexToGridPosition",
    "memberof": "Kaetram-Open/tools/map/helper.js~Helper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "Kaetram-Open/tools/map/helper.js~Helper#indexToGridPosition",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "tileIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 1399,
    "kind": "function",
    "name": "main",
    "memberof": "Kaetram-Open/tools/map/helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "Kaetram-Open/tools/map/helper.js~main",
    "access": "public",
    "export": false,
    "importPath": "Kaetram/Kaetram-Open/tools/map/helper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# Kaetram\r\n\r\nKaetram is an open-source game-engine created to aid those interested in entering the game development realm. The codebase is simple, clean, and intuitive, and is intended to be used as a learning tool. The original idea is based off Little Workshop's demo game - BrowserQuest. The assets have remained the same, but the code itself has been completely wiped and redone from the ground up.\r\n\r\nLive Version - https://kaetram.com\r\n\r\nDiscord - https://discord.gg/MmbGAaw\r\n\r\n![Demo](https://i.imgur.com/M7N8RRp.png)\r\n\r\n### Features:\r\n\r\nFeatures include what you'd expect from an MMORPG.\r\n\r\n- Multiplayer\r\n- Enhanced rendering engine (includes dynamic lighting, overlays, animated tiles)\r\n- Region system (client receives only necessary data and saves it)\r\n- Questing and achievements system.\r\n- Plugin-based combat system (for bosses/special enemies)\r\n- And much more\r\n\r\n\r\n#### Region Manager:\r\n\r\nThe region system sends data to the client according to the map data of the server. The collisons are checked both server-side and client-side in order to avoid cheating. The region-system has also been updated such that users can create instanced versions of the same area. These areas can be used to draw 'alternate' versions of the map, and be used for special events such as minigames. Multiple players can also be added to these regions.\r\n\r\n\r\n#### Tilesheet Parsing:\r\n\r\nThe rendering engine has been updated such that it is able to handle multiple tilesheets the same way Tiled editor can. Simply drop in your tilesheet in the `client/img/tilesets`.\r\n\r\n\r\n### Installing and Running\r\n\r\nYou must install MongoDB and create a user and a database.\r\n\r\n```\r\nnpm install\r\nnpm start\r\n```\r\n\r\nPrior to starting Kaetram, make sure you rename the `config.json-dist` to `config.json` and modify them accordingly. There are two configurations in `server/` and `client/data`.\r\n\r\n\r\n### Map Parsing\r\n\r\nOnce you finish modifying your map in `tools/maps/data` you can parse the map data by executing `exportmap.js` in `tools/maps` directory. Example command:\r\n\r\n```\r\n./exportmap.js ./data/map.json\r\n```\r\n\r\n### TODO\r\n\r\n- Write documentation outlining the entirety of the source code.\r\n- Come up with a storyline.\r\n\r\n- Add (continue) to NPC talking -- spacebar when talking\r\n",
    "longname": "C:\\Users\\Flavius\\Documents\\Projects\\Kaetram-Open\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"Kaetram\",\r\n  \"version\": \"1.1.2\",\r\n  \"description\": \"A modern HTML5 multiplayer adventure!\",\r\n  \"license\": \"MPL-2.0\",\r\n  \"repository\": {\r\n    \"type\": \"git\"\r\n  },\r\n  \"dependencies\": {\r\n    \"bcrypt\": \"^3.0.6\",\r\n    \"commander\": \"^2.20.3\",\r\n    \"connect\": \"^3.7.0\",\r\n    \"fs\": \"*\",\r\n    \"http\": \"0.0.0\",\r\n    \"log\": \"^1.4.0\",\r\n    \"memcache\": \"^0.3.0\",\r\n    \"mongodb\": \"^3.3.3\",\r\n    \"mysql\": \"^2.17.1\",\r\n    \"request\": \"^2.88.0\",\r\n    \"require\": \"*\",\r\n    \"sanitizer\": \"^0.1.3\",\r\n    \"serve-static\": \"^1.14.1\",\r\n    \"shutdown-hook\": \"^1.1.5\",\r\n    \"socket.io\": \"^2.3.0\",\r\n    \"underscore\": \"^1.9.1\",\r\n    \"url\": \"^0.11.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"grunt\": \"^1.0.4\",\r\n    \"morgan\": \"^1.9.1\",\r\n    \"uglifyjs-webpack-plugin\": \"^2.2.0\"\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"node server/js/main\"\r\n  },\r\n  \"esdoc\": {\r\n    \"source\": \"./\",\r\n    \"destination\": \"./docs\",\r\n    \"excludes\": [\"node_modules\", \"cordova\", \"map.js\", \"lib/*\", \"mapworker.js\"],\r\n    \"plugins\": [{\"name\": \"esdoc-standard-plugin\"}]\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\Flavius\\Documents\\Projects\\Kaetram-Open\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]